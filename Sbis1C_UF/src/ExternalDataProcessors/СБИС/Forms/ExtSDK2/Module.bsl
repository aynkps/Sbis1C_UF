
&НаКлиенте
Перем МестныйКэш Экспорт;

#Область include_local_ПолучитьМодульОбъекта

&НаСервере
Функция МодульОбъектаСервер()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция МодульОбъектаСерверБезКонтекста()
	Возврат Новый (Тип("ВнешняяОбработкаОбъект.СБИС"));
КонецФункции

&НаКлиенте
Функция МодульОбъектаКлиент() Экспорт
	Возврат ВладелецФормы.Кэш.СБИС.МодульОбъектаКлиент;
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////
//////////////////Автообновление////////////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция СбисПолучитьПараметрыАктуальнойВерсии(Кэш, ПараметрыОбновления, Отказ) Экспорт
	Возврат сбисСохранитьВФайлПоСсылке(Кэш, ПараметрыОбновления, Отказ);
КонецФункции

&НаКлиенте
Функция СбисСохранитьВФайлПоСсылке(Кэш, СбисПараметрыФайла, Отказ) Экспорт
	ДопПараметрыЗапроса	= Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
	ПараметрыМетода = Новый Структура("FileName, Url", сбисПараметрыФайла.ИмяФайла);
	Если сбисПараметрыФайла.Свойство("URL") И Лев(сбисПараметрыФайла.URL, 8) = "https://" Тогда   
		ПараметрыМетода.Url = сбисПараметрыФайла.URL;
	ИначеЕсли Не сбисПараметрыФайла.Свойство("URLПолный", ПараметрыМетода.Url) Тогда		
		ПараметрыМетода.Url = сбисПараметрыФайла.Протокол + "://" + сбисПараметрыФайла.Сервер + сбисПараметрыФайла.URL;
	КонецЕсли;
	сбисРезультатЧтения = СбисОтправитьИОбработатьКоманду(Кэш, "LoadDataFromURLToFile", ПараметрыМетода, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(сбисРезультатЧтения,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".сбисСохранитьВФайлПоСсылке", 700, "Неизвестная ошибка подключения", сбисРезультатЧтения.details);
	КонецЕсли;	
	Возврат Истина;	
КонецФункции

////////////////////////////////////////////////////
////////////////////Авторизация/////////////////////
////////////////////////////////////////////////////

//Авторизуется по логину/паролю	
&НаКлиенте
Функция АвторизоватьсяПоЛогинуПаролю(Кэш,Логин,Пароль,Отказ=Ложь) Экспорт
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ПоСертификату, БезАвторизации", Ложь, Истина, Ложь, Истина);
	МестныйКэш = Кэш;
	
	ДопПараметры.Вставить("ОчиститьПараметры", Истина);
	ПараметрыРезультат = Новый Структура(	"Метод,				Параметры,											ДополнительныеПараметры", 
											"AuthByPassword",	Новый Структура("Login,Password", Логин, Пароль),	ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", СбисОтправитьИОбработатьКоманду(Кэш, ПараметрыРезультат.Метод, ПараметрыРезультат.Параметры, ДопПараметры, Отказ));
	Возврат СбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);
КонецФункции

//Авторизуется по сертификату	
&НаКлиенте
Функция АвторизоватьсяПоСертификату(Кэш,Сертификат,Отказ=Ложь) Экспорт
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ПоСертификату, БезАвторизации", Ложь, Истина, Истина, Истина);	
	ДопПараметры.Вставить("ОчиститьПараметры", Истина);
	ПараметрыРезультат = Новый Структура(	"Метод,			Параметры,								ДополнительныеПараметры", 
											"AuthByCert",	Новый Структура("Imprint", Сертификат),	ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", сбисОтправитьИОбработатьКоманду(Кэш, ПараметрыРезультат.Метод, ПараметрыРезультат.Параметры, ДопПараметры, Отказ));
	Возврат СбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);
КонецФункции

//Авторизуется по токену	
&НаКлиенте
Функция АвторизоватьсяПоТокену(Кэш,Отказ=Ложь) Экспорт 	
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ПоСертификату, БезАвторизации", Ложь, Истина, Ложь, Истина);
	МестныйКэш = Кэш;
	
	Токен = Кэш.ГлавноеОкно.сбисПолучитьФорму("API").ПолучитьТокенДляТекущегоПользователя(Кэш, Отказ);
	Если Отказ Тогда
		Возврат Токен;
	КонецЕсли;
	
	ДопПараметры.Вставить("ОчиститьПараметры", Истина);
	ПараметрыРезультат = Новый Структура( "Метод, Параметры, ДополнительныеПараметры", "AuthByToken", Новый Структура("Token", Токен), ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", СбисОтправитьИОбработатьКоманду(Кэш, ПараметрыРезультат.Метод, ПараметрыРезультат.Параметры, ДопПараметры, Отказ));
	Результат = СбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);  
	Если Не Отказ Тогда   
		МестныйКэш.Парам.ИдентификаторСессии = Результат;
		сбисПараметрыСтатистики = Новый Структура("Действие, ДетальноеСообщение", "Аутентификация", "По токену");
		Кэш.ОбщиеФункции.сбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(МестныйКэш, сбисПараметрыСтатистики, Ложь);
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Функция получает токен по текущему сиду	
&НаКлиенте
функция ПолучитьТикетДляТекущегоПользователя(Кэш) Экспорт
	Отказ = Ложь;
	РезультатЗапроса = СбисОтправитьИОбработатьКоманду(Кэш, "ReadTicket", Новый Структура, Новый Структура,Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат РезультатЗапроса;
КонецФункции

//Функция обрабатывает результат авторизации
&НаКлиенте
Функция СбисРезультатАвторизации(Кэш, ПараметрыРезультата, Отказ) Экспорт
	РезультатАвторизации = ПараметрыРезультата.Результат;
	Если Не Отказ Тогда
		МодульОбъектаКлиент().ИзменитьПараметрСбис("Авторизован",	Истина);
		Возврат РезультатАвторизации;
	КонецЕсли;
	Если РезультатАвторизации.code = 303 Тогда
		//Если код ошибки - 303, значит ожидается подтверждение аутентификации. Разбираем строку в details ошибки для выборки данных формирования СМС и последующей авторизации.
		addInfo = Новый Структура;
		addInfo.Вставить("Идентификатор",		РезультатАвторизации.dump.ResourceID);
		addInfo.Вставить("ИдентификаторСессии",	РезультатАвторизации.dump.SessionID);
		addInfo.Вставить("МетодВалидации",		РезультатАвторизации.dump.MethodToValidate);
		addInfo.Вставить("ПоСертификату",		ПараметрыРезультата.ДополнительныеПараметры.ПоСертификату);
		РезультатАвторизации.Вставить("data", Новый Структура("addinfo", addinfo));
	//Плагин сам переключает домен.	
	//ИначеЕсли РезультатАвторизации.code = 759 Тогда
	//	РезультатАвторизации = Кэш.ОбщиеФункции.сбисПереключитьДомен(Кэш, ПараметрыРезультата, Отказ)
	КонецЕсли;
	Возврат РезультатАвторизации;
КонецФункции

//Закрывает текущую сессию	
&НаКлиенте
Функция ЗакрытьСессию(Кэш) Экспорт
	
	Отказ				= Ложь;
	Кэш.КэшСертификатов	= Новый Структура;
	ДопПараметрыЗапроса	= Новый Структура;
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Авторизован",	Ложь);
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "TerminateSession", Новый Структура, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат РезультатЗапроса;
	
КонецФункции	

//Метод устарел, вместо него использовать Кэш.СБИС.МодульОбъектаКлиент.СбисПолучитьИнформациюОТекущемПользователе
//Получает строковое представление ФИО о текущем пользователе	
&НаКлиенте
Функция ИнформацияОТекущемПользователе(Кэш) Экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	РезультатЗапроса = СбисОтправитьИОбработатьКоманду(Кэш, "ReadCurrentUserInfo", Новый Структура, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат "";
	КонецЕсли;
	
	Фамилия	= Неопределено;
	Имя		= Неопределено;
	Отчество= Неопределено;
	
	Если Не РезультатЗапроса.Свойство("Фамилия", Фамилия) Тогда
		Фамилия = "";
	КонецЕсли;
	Если Не РезультатЗапроса.Свойство("Имя", Имя) Тогда
		Имя = "";
	КонецЕсли;
	Если Не РезультатЗапроса.Свойство("Отчество",	Отчество) Тогда
		Отчество = "";
	КонецЕсли;
	Возврат Фамилия+" "+Имя+" "+Отчество;
КонецФункции

//Отправляет код авторизации на номер телефона, указанный в карточке сотрудника
&НаКлиенте
Функция ОтправитьКодАвторизации(Кэш, ПараметрыПодтверждения, Отказ) Экспорт
КонецФункции

//Функция выполняет подтверждение введенного кода для двухфакторной аутентификации
&НаКлиенте
Функция ПодтвердитьАвторизацию(Кэш, ПараметрыВвода, ПараметрыПодтверждения, Отказ) Экспорт
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, БезАвторизации", Ложь, Истина, Истина);	
	
	ПараметрыЗапроса = Новый Структура("Param", Новый Структура("Код, Идентификатор, ВызываемыйМетод", ПараметрыВвода.ПинКод, ПараметрыПодтверждения.Идентификатор, ПараметрыПодтверждения.МетодВалидации));
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "AuthConfirmCode", ПараметрыЗапроса, ДопПараметры, Отказ);
	Если Не Отказ Тогда
		МодульОбъектаКлиент().ИзменитьПараметрСбис("Авторизован",	Истина);
	КонецЕсли;
	Возврат Результат;	
КонецФункции

//Получает список сертификатов, пригодных для авторизации	
&НаКлиенте
Функция ПолучитьСписокСертификатовДляАвторизации(Кэш, ТекстОшибки) Экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ВернутьОшибку, ЕстьРезультат, ВремяОжиданияОтвета, БезАвторизации", Истина, Истина, 120, Истина);      // увеличено время ожидания, т.к. через сбисПараметры можно переопределить только для вызовов после авторизаии
	СписокСертификатов	= Новый СписокЗначений();
	МестныйКэш			= Кэш;
	
	РезультатЗапроса = СбисОтправитьИОбработатьКоманду(Кэш, "ReadCertListForAuth", Новый Структура("Filter", Новый Структура), ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		ТекстОшибки = РезультатЗапроса.message;
		Возврат Ложь;
	КонецЕсли;
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ОбработатьСписокСертификатовДляАвторизации(Кэш, РезультатЗапроса["Сертификат"]);
	
КонецФункции

&НаКлиенте
Функция СбисВключенРезервныйДомен(Кэш, АдресСервера) Экспорт
	Возврат Ложь;
КонецФункции

//Проверяет активна ли текущая сессия
&НаКлиенте
Функция СбисСессияДействительна(Кэш) Экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат, СообщатьПриОшибке", Истина, Ложь);
	
	РезультатЗапроса = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ПроверитьСессию", Новый Структура, ДопПараметрыЗапроса,Отказ);
	Если Не Отказ
		И РезультатЗапроса.СессияАктивна = "Да" Тогда
		Возврат 1;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция СбисИдАккаунта(Кэш) Экспорт
	
	//Тут дело в том, что этот ИД аккаунта это не номер аккаунта в биллинге. Это сессия/токен для корректного вызова СБИС плагин.
	//Переписать использование поля на СбисТокенАвторизации и на поле Авторизация в команде
	Возврат Кэш.Парам.ИдентификаторСессии;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИдТекущегоАккаунта(Кэш) Экспорт
	Перем СбисИдАккаунта;
	Если Кэш.СБИС.ПараметрыИнтеграции.Свойство("ИдАккаунта", СбисИдАккаунта) Тогда
		Возврат СбисИдАккаунта;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции
&НаКлиенте
Функция Аккордеон_ОтключенныеРазделы() Экспорт
	ОтключенныеРазделы = Новый Структура();
	Возврат ОтключенныеРазделы;
КонецФункции
//Устанавливает в SDK настройки подключения		
&НаКлиенте
Функция СформироватьНастройкиПодключения(Кэш, ИдентификаторСессии = "", ДопПараметрыЗапроса=Неопределено, Отказ=Ложь) Экспорт
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция СбисУстановитьВремяОжидания(Кэш, ВремяОжидания) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисУстановитьВремяОжидания(Кэш, ВремяОжидания);
КонецФункции

&НаКлиенте
Функция ПолучитьНастройкиПлагина(Кэш, ДопПараметрыЗапроса, Отказ) Экспорт
	Если Не(	(	Кэш.Парам.СпособОбмена = 5 Или Кэш.Парам.СпособОбмена = 7) 
			И		Кэш.Парам.ШифроватьВыборочно = Истина) 
			И	Не	Кэш.Свойство("КаталогЗашифрованных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Параметр = Новый Структура();
	Если ДопПараметрыЗапроса = Неопределено Тогда
		ДопПараметрыЗапроса = Новый Структура;	
	КонецЕсли;
	Рез = сбисОтправитьИОбработатьКоманду(Кэш,"GetPluginSettings",Параметр, ДопПараметрыЗапроса,Отказ);	
	Если Не Отказ Тогда
		Если Рез.Свойство("SecureLoading") и Рез.SecureLoading.Свойство("fromFolder") и Рез.SecureLoading.encrypt = Истина Тогда
			Кэш.Вставить("КаталогЗашифрованных", Рез.SecureLoading.fromFolder);	
		КонецЕсли;
	КонецЕсли;
КонецФункции	

////////////////////////////////////////////////////
////////////////////Сертификаты/////////////////////
////////////////////////////////////////////////////

//Функция активирует серверные сертификаты для определенного списка ИНН	
&НаКлиенте
Функция АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) Экспорт
	ДопПараметрыЗапроса = Новый Структура;
	Отказ = Ложь;
	Для Каждого Элемент Из СписокСертификатов Цикл
		Сертификат = Элемент.Значение;
		ПараметрыАктивации = Новый Структура;
		ПараметрыАктивации.Вставить("Отпечаток", Сертификат.Отпечаток);
		ПараметрыАктивации.Вставить("КодАктивации", Сертификат.КодАктивации);
		
		РезультатЗапроса = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.АктивироватьСертификат", ПараметрыАктивации, ДопПараметрыЗапроса,Отказ);
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Не Отказ;
КонецФункции

//Получает список доступных сертификатов	
&НаКлиенте
Функция ПолучитьСписокСертификатов(Кэш, filter=Неопределено) Экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	Если filter = Неопределено Тогда
		filter = Новый Структура;
	КонецЕсли;
	
	РезультатЗапроса = СбисОтправитьИОбработатьКоманду(Кэш, "ReadCertList", Новый Структура("Filter", filter), ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ОбработатьСписокСертификатовДляАктивации(Кэш, РезультатЗапроса.Сертификат);
КонецФункции 

&НаКлиенте
Функция ПолучитьСписокСертификатовПоФильтру(Кэш, filter=Неопределено, Отказ) Экспорт
	
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат, СообщатьПриОшибке, ВернутьОшибку", Истина, Ложь, Истина);
	
	Если filter = Неопределено Тогда
		filter = Новый Структура;
	КонецЕсли;
	
	РезультатЗапроса = СбисОтправитьИОбработатьКоманду(Кэш, "ReadCertList", Новый Структура("Filter", filter), ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат МодульОбъектаКлиент().НовыйСбисИсключение(РезультатЗапроса);
	КонецЕсли;
		
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ОбработатьСписокСертификатовДляАктивации(Кэш, РезультатЗапроса.Сертификат);
КонецФункции

&НаКлиенте
Функция ПолучитьСписокЛокальныхСертификатов(Кэш, filter=Неопределено) Экспорт
	
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	Если filter = Неопределено Тогда
		filter = Новый Структура;
	КонецЕсли;
	
	РезультатЗапроса = СбисОтправитьИОбработатьКоманду(Кэш, "ReadCertList", Новый Структура("Filter", filter), ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат МодульОбъектаКлиент().ВызватьСбисИсключение(РезультатЗапроса, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ПолучитьСписокЛокальныхСертификатов");
	КонецЕсли;
	
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ОбработатьСписокСертификатовДляАктивации(Кэш, РезультатЗапроса.Сертификат);
	
КонецФункции


//Функция активирует серверные сертификаты для определенного списка ИНН	
&НаКлиенте
Функция ПолучитьСертификатыДляАктивации(Кэш, СписокИНН) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьСертификатыДляАктивации(Кэш, СписокИНН);
КонецФункции

//Функция получает код активации для сертификата
&НаКлиенте
Функция ПолучитьКодАктивацииСертификата(Кэш, Сертификат) Экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура;
	
	ПараметрыАктивации = Новый Структура("Отпечаток", Сертификат.Отпечаток);
	
	РезультатЗапроса = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ПолучитьКодАктивацииСертификата", ПараметрыАктивации, ДопПараметрыЗапроса,Отказ);
	Возврат Не Отказ;
КонецФункции

////////////////////////////////////////////////////
/////////////////Списочные методы///////////////////
////////////////////////////////////////////////////

//Получает список документов реализации с online.sbis.ru 	
&НаКлиенте
Функция ПолучитьСписокДокументовОтгрузки(Кэш) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьСписокДокументовОтгрузки(Кэш);
КонецФункции

//Получает статусы документов сбис
&НаКлиенте
Функция ПолучитьСписокИзменений(Кэш, ДопПараметрыФильтра = Неопределено) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьСписокИзменений(Кэш, ДопПараметрыФильтра);
КонецФункции

//Получает список организаций, присутствующих одновременно в кабинете СБИС и в базе 1С, у которых есть необработанные служебные документы
&НаКлиенте
Функция ПолучитьСписокНашихОрганизаций(Кэш, СписокИНН) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьСписокНашихОрганизаций(Кэш, СписокИНН);
КонецФункции

//Получает список документов по событиям с online.sbis.ru	
&НаКлиенте
Функция ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно);
КонецФункции

//Получает список документов определенного типа с online.sbis.ru
&НаКлиенте
Функция СбисПолучитьСписокДокументовПоФильтру(Кэш, filter, ГлавноеОкно) Экспорт	
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисПолучитьСписокДокументовПоФильтру(Кэш, filter, ГлавноеОкно);
КонецФункции

//Получает список документов определенного типа с online.sbis.ru	
&НаКлиенте
Функция СбисПолучитьСписокЗадач(Кэш, сбисФильтр, Отказ) Экспорт
	ДопПараметрыЗапроса = Новый Структура("ЕстьРезультат", Истина);
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "API3.TaskList", сбисФильтр, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат, "ExtSDK.сбисПолучитьСписокЗадач");
	КонецЕсли;
	Возврат Результат
КонецФункции	

////////////////////////////////////////////////////
/////////////////Чтение документов//////////////////
////////////////////////////////////////////////////

//Получает структуру документа СБИС
&НаКлиенте
Функция ПрочитатьДокумент(Кэш, ИдДок, ДопПараметры=Неопределено, Отказ=Ложь) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПрочитатьДокумент(Кэш,ИдДок,ДопПараметры,Отказ);
КонецФункции

//Получает html по xml	
&НаКлиенте
функция ПолучитьHTMLПоXML(Кэш, Вложение) Экспорт 
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	Если ТипЗнч(Вложение) = Тип("Структура") Тогда
		
		document = Новый Структура("XML, Тип, Подтип, ВерсияФормата, ПодВерсияФормата", Вложение.XMLДокумента, "", "", "", "");
		ЗаполнитьЗначенияСвойств(document, Вложение);
		//Костыль на случай, если ПодВерсия есть, но неопределена
		Если document.ПодВерсияФормата = Неопределено Тогда
			 document.ПодВерсияФормата = "";
		КонецЕсли;
		
	Иначе   // для совместимости с внешними функциями (СформироватьРасхождение)
		
		document = Новый Структура("XML", Вложение);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(document) Тогда
		
		Возврат "";
		
	КонецЕсли;

	Если МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("Шифрование") Тогда
		
		РезультатЗапроса = СбисОтправитьИОбработатьКоманду(Кэш, "GenerateHTMLFromXMLClient", Новый Структура("Parameter", document), ДопПараметрыЗапроса, Отказ);
		
	Иначе
		
		РезультатЗапроса = СбисОтправитьИОбработатьКоманду(Кэш, "GenerateHTMLFromXML", Новый Структура("XML", document.XML), ДопПараметрыЗапроса,Отказ);
		
	КонецЕсли;
	
	Если		Отказ Тогда
		
		Возврат "";
		
	ИначеЕсли	ТипЗнч(РезультатЗапроса) = Тип("Структура")
			И	РезультатЗапроса.Свойство("HTML") Тогда
			
		РезультатЗапроса = РезультатЗапроса.HTML;
			
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

//Проверка подписей на вложении	
&НаКлиенте
Функция ПроверитьПодписиВложения(Кэш,Вложение) Экспорт 
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПроверитьПодписиВложения(Кэш,Вложение);
КонецФункции

//Получает html по идентификаторам пакета и вложения
//Используется при просмотре документов из реестров СБИС
&НаКлиенте
функция ПолучитьHTMLВложения(Кэш,ИдДок, Вложение) Экспорт 
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьHTMLВложения(Кэш,ИдДок, Вложение);
КонецФункции

////////////////////////////////////////////////////
//////////////////Действия и операции///////////////
////////////////////////////////////////////////////

//Обрабатывает служебные документы организации	
&НаКлиенте
Функция ОбработатьСлужебныеДокументыОрганизации(Кэш, оОрганизация)
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ОбработатьСлужебныеДокументыОрганизации(Кэш, оОрганизация);
КонецФункции

//Отправляет каталог товаров в СБИС	
&НаКлиенте
функция ОтправитьКаталогТоваров(Кэш,КаталогТоваров) экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ОтправитьКаталогТоваров(Кэш,КаталогТоваров);
КонецФункции

&НаКлиенте
Функция сбисЭмитироватьКМ(Кэш, ИдДок, ДопПараметры=Неопределено, Отказ=Ложь) Экспорт 
	Отказ				= Ложь;
	МестныйКэш			= Кэш;
	
	param = Новый Структура("Идентификатор",ИдДок);
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	ДопПараметры.Вставить("ЕстьРезультат", Истина);
	
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ЭмитироватьКМ", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".сбисЭмитироватьКМ");
	КонецЕсли;
	Возврат Результат
	
КонецФункции

//Возможные значения параметра 'ГосОперация':
//Госсистема -> Маркировка
//Операция -> ВводВОборот, Списание, ОтправитьКоды, ГотовКВводуВОборот 
//Госсистема -> Прослеживаемость
//Операция -> ПроверкаРНПТ
&НаКлиенте
Функция сбисЗарегистрироватьВГоссистеме(Кэш, ИдДок, ДопПараметры=Неопределено, Отказ=Ложь) Экспорт
	Отказ				= Ложь;
	МестныйКэш			= Кэш;  
	
	ИдентификаторДокумента = Новый Структура("Идентификатор",ИдДок);
	ГосОперация = Новый Структура("Госсистема, Операция", "Маркировка", "ВводВОборот");
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	Иначе
		Для Каждого ТекСтрока ИЗ ГосОперация Цикл
			Ключ = ТекСтрока.Ключ; 
			Если ДопПараметры.Свойство(Ключ) Тогда
				ГосОперация[Ключ] = ДопПараметры[Ключ];
				ДопПараметры.Удалить(Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДопПараметры.Вставить("ЕстьРезультат", Истина);
	
	param = Новый Массив;
	param.Добавить(ИдентификаторДокумента);
	param.Добавить(ГосОперация);
	
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "СБИС.ЗарегистрироватьВГоссистеме", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".сбисЗарегистрироватьВГоссистеме");
	КонецЕсли;
	Возврат Результат
	
КонецФункции


//Использовать ОбщиеФункции.ПолучитьИнформациюОКонтрагенте
//Получает Информацию о контрагенте с онлайна
&НаКлиенте
Функция ПолучитьИнформациюОКонтрагенте(Кэш, СтруктураКонтрагента) Экспорт
	Отказ				= Ложь;
	МестныйКэш			= Кэш;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	kontr = Новый Структура; 
	Если СтруктураКонтрагента.Свойство("СвФЛ") Тогда
		kontr.Вставить( "СвФЛ", СтруктураКонтрагента.СвФЛ );	
	Иначе
		kontr.Вставить( "СвЮЛ", СтруктураКонтрагента.СвЮЛ );
	КонецЕсли;
	
	оКонтрагент = СБИС_ИнформацияОКонтрагенте(Кэш, kontr, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат оКонтрагент;
КонецФункции

//Выполняет указанное действие по документу СБИС
&НаКлиенте
Функция сбисВыполнитьДействие(Кэш, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.сбисВыполнитьДействие(Кэш, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета);
КонецФункции

&НаКлиенте
Функция сбисПодписатьВложения(Кэш, attachmentList, ПараметрыДействия, Отказ) Экспорт 
	Для Каждого Вложение Из attachmentList Цикл
		Если ПараметрыДействия.Сертификат.Свойство("Доверенность") Тогда
			ЭЦП = Новый Массив;	
			ЗаписьЭЦП = Новый Структура;
			СертификатЭЦП = Новый Структура;
			СертификатЭЦП.Вставить("Доверенность", ПараметрыДействия.Сертификат.Доверенность);
			ЗаписьЭЦП.Вставить("Сертификат",СертификатЭЦП);
			ЭЦП.Добавить(ЗаписьЭЦП);
			Вложение.Вставить( "Подпись", ЭЦП );
		Иначе 
			Продолжить;
		КонецЕсли;
	КонецЦикла;
КонецФункции

// Переводит документ повторно на ранее выполненный этап
&НаКлиенте
Функция СбисПовторитьЭтап(Кэш, ИдДок, ЭтапНазвание, Отказ=Ложь) Экспорт
	Отказ = Ложь;
	
	ПараметрыКоманды = Новый Структура("Идентификатор,Этап", ИдДок, Новый Структура("Название", ЭтапНазвание));
	ДопПараметрыЗапроса = Новый Структура("ЕстьРезультат, СообщатьПриОшибке, ВернутьОшибку", Истина, Ложь, Истина);
	
	оДокумент = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ПовторитьЭтап", ПараметрыКоманды, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, оДокумент);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат оДокумент;
КонецФункции

//Сохраняет вложение по ссылке со сбисДиск в указанный файл
&НаКлиенте
Функция СохранитьВложениеПоСсылкеВФайл(Кэш,Ссылка,ИмяФайла) Экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	ПараметрыЗаписи = Новый Структура("Url, FileName", Ссылка, ИмяФайла);
	
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "LoadDataFromURLToFile", ПараметрыЗаписи, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////
//////////////Сотрудники////////////////////////////
////////////////////////////////////////////////////

&НаКлиенте
функция СбисЗаписатьСотрудников(Кэш, ДанныеСотрудников, Отказ) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисЗаписатьСотрудников(Кэш, ДанныеСотрудников, Отказ);
КонецФункции

////////////////////////////////////////////////////
//////////////Серверные настройки вызов/////////////
////////////////////////////////////////////////////

// Функция для переопределения видимости настроек для способа интеграции
// 
// Возвращаемое значение: Структура
//   - 
//
&НаКлиенте
Функция ВидимостьНастроек() Экспорт
	
	Настройки = МодульОбъектаКлиент().ВидимостьНастроекПоУмолчанию();	
	Настройки.ИспользоватьГенератор 	= Истина;
	Настройки.ВремяОжиданияОтвета		= Истина;
	
	Возврат Настройки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьXslt(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("СообщатьПриОшибке",	Ложь);
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "GetXslt", , ДопПараметрыЗапроса, Отказ);
	Если Результат.Свойство("result") Тогда
		Результат = Результат.result;
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция ПолучитьИни(Кэш, ИмяМетода, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	Если Не ДопПараметрыЗапроса.Свойство("СообщатьПриОшибке") Тогда
		ДопПараметрыЗапроса.Вставить("СообщатьПриОшибке",	Ложь);
	КонецЕсли;
	Если ИмяМетода = "ReadConfig" Тогда
		СбисМетодПозвать = "IntegrationConfig." + ИмяМетода;
		Возврат СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, СбисМетодПозвать, ПараметрыМетода, ДопПараметрыЗапроса, Отказ);
	Иначе
		СбисМетодПозвать = "IntegrationConnection." + ИмяМетода;
		Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, СбисМетодПозвать, ПараметрыМетода, ДопПараметрыЗапроса, Отказ);
		Если Результат = Неопределено Тогда
			Отказ = Истина;
			Результат = Кэш.ОбщиеФункции.сбисИсключение(, СбисМетодПозвать, 756, "Подключение недоступно", "Возможно оно недоступно для выбранного пользователя, либо было удалено.");
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ЗаписатьConnection(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("СообщатьПриОшибке",	Ложь);
	Возврат СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "IntegrationConnection.WriteConnection", ПараметрыМетода, ДопПараметрыЗапроса, Отказ)
КонецФункции

&НаКлиенте
Функция ПолучитьСписокConnection(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("СообщатьПриОшибке",	Ложь);
	Возврат СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "IntegrationConnection.ReadConnectionList", ПараметрыМетода, ДопПараметрыЗапроса, Отказ)
КонецФункции

&НаКлиенте
Функция ПолучитьСписокConfig(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("СообщатьПриОшибке",	Ложь);
	Возврат СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "IntegrationConfig.ReadConfigList", Новый Структура("filter,ini", ПараметрыМетода, Неопределено), ДопПараметрыЗапроса, Отказ)
КонецФункции

////////////////////////////////////////////////////
//////////////////Статистика вызов//////////////////
////////////////////////////////////////////////////

//Отправляет собщение о статистике на online
&НаКлиенте
Функция сбисОтправитьСообщениеСтатистики(Кэш, СообщениеСтатистики, Отказ) Экспорт
	ДопПараметры = Новый Структура("ВернутьОшибку", Истина);
	Возврат СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "API3.WriteStat", Новый Структура("param", СообщениеСтатистики), ДопПараметры, Отказ);
КонецФункции

//Отправляет собщение о ошибке на online
&НаКлиенте
Функция сбисОтправитьСообщениеОшибки(Кэш, СообщениеОбОшибке, Отказ) Экспорт
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
	СообщениеОбОшибке.data = Кэш.РаботаСJson.ПреобразоватьЗначениеВJSON(СообщениеОбОшибке.data);
	Возврат СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "API3.WriteError", Новый Структура("param", СообщениеОбОшибке), ДопПараметры, Отказ);
КонецФункции

&НаКлиенте
Функция сбисПроверкаОбновления(Кэш, ИнформацияОТекущейВерсии, Отказ) Экспорт
	ДопПараметры = Новый Структура("ВернутьОшибку", Ложь);
	Возврат СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "API3.GetProductVersionStatus", ИнформацияОТекущейВерсии, ДопПараметры, Отказ);
КонецФункции

////////////////////////////////////////////////////
//////////////////Системные команды/////////////////
////////////////////////////////////////////////////

//Добавляет СБИСПлагин в Кэш	
&НаКлиенте
Функция Включить(Кэш, ДопПараметры=Неопределено, Отказ=Ложь) Экспорт
	ФормаExtSDK1 = Кэш.ГлавноеОкно.СбисПолучитьФорму("ExtSDK");
	ФормаExtSDK1.МестныйКэш	= Кэш;
	МестныйКэш				= Кэш;
	//Ставим время по-умолчанию 60 секунд. После меняется при наличии одноименного узла в сбисПараметрах при установке настроек.	
	//Ставим время на отправку по-умолчанию 120 секунд. После меняется при наличии одноименного узла в сбисПараметрах при установке настроек.
	ПараметрыВключения = Новый Структура("ВремяОжиданияОтвета, ВремяОжиданияОтвета_Отправка, КоличествоПотоков, ИнтеграцияИмя", 60, 120, 10, "ExtSdk2");
	Если ЗначениеЗаполнено(ДопПараметры) Тогда 
		ЗаполнитьЗначенияСвойств(ПараметрыВключения, ДопПараметры);
	КонецЕсли;

	Кэш.СБИС = Кэш.ГлавноеОкно.СформироватьСтруктуруКэшСБИС(Кэш.СБИС);
	
	МодульОбъектаКлиент().ИзменитьПараметрСбис("ИнтеграцияИмя",					ПараметрыВключения.ИнтеграцияИмя);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Отправка_РазмерПачки",			ПараметрыВключения.КоличествоПотоков);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Потоки_МаксимальноеКоличество",	ПараметрыВключения.КоличествоПотоков);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Потоки_КоличествоСвободных",	ПараметрыВключения.КоличествоПотоков);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("ВремяОжиданияОтвета_Отправка",	ПараметрыВключения.ВремяОжиданияОтвета_Отправка);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Интеграция",					ЭтаФорма);
	
	СведенияОбИнтеграции = СведенияОбИнтеграции();
	Для Каждого ПараметрИнтеграции Из СведенияОбИнтеграции.Параметры Цикл
		
		МодульОбъектаКлиент().ИзменитьПараметрСбис(ПараметрИнтеграции.Ключ, ПараметрИнтеграции.Значение);
		
	КонецЦикла;
		
	РезультатЗапроса = ФормаExtSDK1.ПолучитьМодульИнтеграции(Кэш, ПараметрыВключения, Отказ);
	Если Отказ Тогда
		РезультатЗапроса = МодульОбъектаКлиент().НовыйСбисИсключение(РезультатЗапроса, "ExtSDK2.Включить");
		Возврат ФормаExtSDK1.СбисОценитьРезультатВключения(Кэш, РезультатЗапроса, ДопПараметры, Отказ);
	КонецЕсли;
	
	МодульОбъектаКлиент().ИзменитьПараметрСбис("ОбменВключен",	Истина);
	
	Кэш.СБИС.ДанныеИнтеграции.Объекты.Вставить("Форма_" + ПараметрыВключения.ИнтеграцияИмя, ЭтаФорма);
	МодульОбъектаКлиент().ОбновитьПараметрГлобальногоМодуля("ДанныеИнтеграции", Кэш.СБИС.ДанныеИнтеграции); 
	
	СбисУстановитьПодпискиСбис3Плагина(Кэш);
	Возврат ФормаExtSDK1.СбисОценитьРезультатВключения(Кэш, РезультатЗапроса, ДопПараметры, Отказ);
	
КонецФункции

&НаКлиенте
Функция СведенияОбИнтеграции() Экспорт
    Перем ВерсияИнтеграции;
	
	СведенияОбИнтеграции	= Новый Структура("Имя, Версия, Модуль, Параметры", "ExtSdk2", "", ЭтаФорма);
	ЛокальныйКэш			= МодульОбъектаКлиент().ПолучитьТекущийЛокальныйКэш();
	
	ОшибкаЧтенияВерсии		= Ложь;
	ТекущееИмяИнтеграция	= МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя");
	
	Если	МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ОбменВключен")
		И	Лев(ТекущееИмяИнтеграция, СтрДлина(СведенияОбИнтеграции.Имя)) = СведенияОбИнтеграции.Имя Тогда
		
		Попытка
			ВерсияИнтеграции = СбисОтправитьИОбработатьКоманду(ЛокальныйКэш, "GetVersion", Новый Структура, Новый Структура("СообщатьПриОшибке", Ложь), ОшибкаЧтенияВерсии);
			
			Если ОшибкаЧтенияВерсии Тогда
				
				ВерсияИнтеграции = "";
				
			КонецЕсли;
			
		Исключение
			
			ВерсияИнтеграции = "";
			
		КонецПопытки;
		
	Иначе
		
		ВерсияИнтеграции = "";
		
	КонецЕсли;
	
	ПараметрыИнтеграции = Новый Структура;
	ПараметрыИнтеграции.Вставить("ГенераторФЭД",		Истина);
	ПараметрыИнтеграции.Вставить("Шифрование",			Ложь);
	ПараметрыИнтеграции.Вставить("МногопоточныйРежим",	Истина);
	ПараметрыИнтеграции.Вставить("СерверныеНастройки",	Истина);
	
	СведенияОбИнтеграции.Параметры	= ПараметрыИнтеграции;
	СведенияОбИнтеграции.Версия		= ВерсияИнтеграции;
	
	Возврат СведенияОбИнтеграции;
	
КонецФункции

&НаКлиенте
Функция Завершить(Кэш, ДопПараметры, Отказ) Экспорт
	Возврат Кэш.Сбис.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ЗавершитьExtSDK(Кэш, ДопПараметры, Отказ)
КонецФункции

&НаКлиенте
Процедура СбисУстановитьПодпискиСбис3Плагина(Кэш)
	ПараметрыПодписчиков = Новый Структура("Кэш", Кэш);
	Кэш.СБИС.ДанныеИнтеграции.Подписки.Вставить("extsdk2.async.progress", 	Новый Структура("Функция, Параметры, Модуль", "ExtSdk2AsyncProgress",	ПараметрыПодписчиков, ЭтаФорма));
	Кэш.СБИС.ДанныеИнтеграции.Подписки.Вставить("UnValidToken",  		 	Новый Структура("Функция, Параметры, Модуль", "UnValidToken",			ПараметрыПодписчиков, ЭтаФорма));
	//Кэш.СБИС.ДанныеИнтеграции.Подписки.Вставить("extsdk2.async.error",		Новый Структура("Функция, Параметры, Модуль", "ExtSdk2AsyncError",		ПараметрыПодписчиков, ЭтаФорма));
	//Кэш.СБИС.ДанныеИнтеграции.Подписки.Вставить("extsdk2.async.complete",	Новый Структура("Функция, Параметры, Модуль", "ExtSdk2AsyncComplete",	ПараметрыПодписчиков, ЭтаФорма));
КонецПроцедуры

////////////////////////////////////////////////////
/////////////Асинхронные События////////////////////
////////////////////////////////////////////////////

//Обработка события прогресса отправки пакета
&НаКлиенте
Процедура ExtSdk2AsyncProgress(РезультатВызова, ПараметрыОбработки) Экспорт
	//Тут происходит ничего
КонецПроцедуры

&НаКлиенте
Процедура UnValidToken(РезультатВызова, ПараметрыОбработки) Экспорт
	Кэш = ПараметрыОбработки.Основные.Кэш;
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Авторизован",	Ложь);
	Кэш.ТекущийСеанс.РасчитанныеЗначения.Вставить("ОшибкаНаФормеАвторизации", РезультатВызова.data.message);
	
	СбисДополнительныеПараметры	= Новый Структура("ПовторныйЗапуск, РазделДо", Истина, Кэш.Текущий.ТипДок);
	Кэш.ОбщиеФункции.СбисВызватьАвторизацию(Кэш, СбисДополнительныеПараметры);
КонецПроцедуры

//Обработка успешной отправки пакета
&НаКлиенте
Процедура WriteDocumentEx_Message(РезультатВызова, ПараметрыОбработки) Экспорт

	WriteDocumentEx_ОбработатьВременныеФайлы(РезультатВызова, ПараметрыОбработки);
	ПараметрыОбработки.Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSdk.WriteDocumentEx_Message(РезультатВызова.Данные, ПараметрыОбработки);
	
КонецПроцедуры

//Обработка ошибки отправки
&НаКлиенте
Процедура WriteDocumentEx_Error(РезультатВызова, ПараметрыОбработки) Экспорт
	
	WriteDocumentEx_ОбработатьВременныеФайлы(РезультатВызова, ПараметрыОбработки);
	ПараметрыОбработки.Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSdk.WriteDocumentEx_Error(РезультатВызова.Данные, ПараметрыОбработки);
	
КонецПроцедуры

//Вспомогательная функция, чисто под способ обмена.
&НаКлиенте
Процедура WriteDocumentEx_ОбработатьВременныеФайлы(РезультатВызова, ПараметрыОбработки)
	
	Попытка
		ВложенияОбработаны = ПараметрыОбработки.Команда.АргументВызова.ПараметрыМетода.Document.Вложение;
		Для Каждого ВложениеПакета Из ВложенияОбработаны Цикл
			КлючВременногоФайла = ВложениеПакета;
			Если	Не КлючВременногоФайла.Свойство("Файл",			КлючВременногоФайла)
				Или Не КлючВременногоФайла.Свойство("ПутьКФайлу",	КлючВременногоФайла) Тогда
				Продолжить;
			КонецЕсли;
			СбисВременныйФайл = ПараметрыОбработки.Кэш.ТекущийСеанс.ВременныеФайлы.Файлы.Получить(КлючВременногоФайла);
			Если СбисВременныйФайл = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СбисВременныйФайл.Освободить = Истина;
		КонецЦикла;
	Исключение
		Возврат;
	КонецПопытки;
	ПараметрыОбработки.Кэш.ОбщиеФункции.СбисОчиститьВременныеФайлы();
	
КонецПроцедуры


////////////////////////////////////////////////////
/////////////////////СБИСПлагин/////////////////////
////////////////////////////////////////////////////

//////// Отправка ////////////////

//Отправляет сформированные пакеты документов	
&НаКлиенте
Функция ОтправитьПакетыДокументов(Кэш, МассивПакетов, РезультатОтправки=Неопределено) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ОтправитьПакетыДокументов(Кэш, МассивПакетов, РезультатОтправки);
КонецФункции

//Точка входа завершения отправки
&НаКлиенте
Процедура СбисПолучитьОтветыПоОтправке(Кэш) Экспорт
	Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисПолучитьОтветыПоОтправке(Кэш);
КонецПроцедуры

&НаКлиенте
Функция Отправка_ПодготовитьСтруктуруПакета(Кэш, ПараметрыПодготовки, ДопПараметры, Отказ) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.Отправка_ПодготовитьСтруктуруПакета(Кэш, ПараметрыПодготовки, ДопПараметры, Отказ);
КонецФункции

//Готовит пакет к отправке, формиует события-обработчики, делает вызов
//ПараметрыОтправки - СоставПакета, ДокументОтправить
&НаКлиенте
Процедура Отправка_Вызов(Кэш, ПараметрыОтправки, ДопПараметры) Экспорт

	Форма_ExtSDK = Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK;
	
	ПараметрыВыполнить		= Новый Структура("СоставПакета, СтатусПакета, Отказ, Ошибки, ДокументОтправить", ПараметрыОтправки.СоставПакета, ПараметрыОтправки.СтатусПакета, Ложь, Новый Массив);
	ДопПараметрыДляВызовов	= Новый Структура("Кэш, ДополнительныеПараметры", Кэш, ДопПараметры);
	СобытияКоманды			= Новый Структура;
	СобытияКоманды.Вставить("Error",			Новый Структура("Функция, Модуль",	"WriteDocumentEx_Error", 		ЭтаФорма));
	СобытияКоманды.Вставить("Message",			Новый Структура("Функция, Модуль",	"WriteDocumentEx_Message",		ЭтаФорма));
	СобытияКоманды.Вставить("BeforeCall",		Новый Структура("Функция, Модуль",	"WriteDocumentEx_Before_Call",	Форма_ExtSDK));
	СобытияКоманды.Вставить("AfterCall",		Новый Структура("Функция, Модуль",	"WriteDocumentEx_After_Call",	Форма_ExtSDK));

	Попытка
		ОбработчикКоманды		= МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("СбисОтправитьКоманду_Асинхронно", Форма_ExtSDK, ДопПараметрыДляВызовов);
		ДопПараметрыКоманды		= Новый Структура("ПодпискиНаСобытия, ВремяОжиданияОтвета", СобытияКоманды, МодульОбъектаКлиент().ПолучитьЗначениеПараметраСБИС("ВремяОжиданияОтвета_Отправка"));
		АсинхроннаяСбисКоманда	= МодульОбъектаКлиент().НовыйАсинхроннаяСбисКоманда(ОбработчикКоманды, ДопПараметрыКоманды);
	Исключение
		ОшибкаКоманды = МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), "ExtSDK.НовыйАсинхроннаяСбисКоманда");
		//Упал метод генерации queryID, прерываем отправку.
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, ОшибкаКоманды);
		Кэш.РезультатОтправки.Вставить("ПрерватьОтправку", ОшибкаКоманды.details);
		Возврат
	КонецПопытки;
	АсинхроннаяСбисКоманда.ПараметрыСобытий = Новый Структура("Кэш, СоставПакета, Команда", Кэш, ПараметрыОтправки.СоставПакета, АсинхроннаяСбисКоманда);
	
	Если Не ПараметрыОтправки.Свойство("ДокументОтправить", ПараметрыВыполнить.ДокументОтправить) Тогда
		//Переадресация на форму интеграции для КриптоExtSDK
		Отказ		= Ложь;
		Результат	= Кэш.Интеграция.Отправка_ПодготовитьСтруктуруПакета(Кэш, ПараметрыВыполнить, Новый Структура, Отказ);
		Если Результат.Отказ Тогда
			СбисИсключение		= МодульОбъектаКлиент().НовыйСбисИсключение(Результат.Ошибки[0], Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".Отправка_Вызов");
			СобытиеОшибки		= МодульОбъектаКлиент().НовыйАсинхронноеСбисСобытие(АсинхроннаяСбисКоманда.Идентификатор, СбисИсключение, "Error");
			МодульОбъектаКлиент().АсинхроннаяСбисКоманда_ВызватьСобытие(АсинхроннаяСбисКоманда, СобытиеОшибки);
			Возврат;
		КонецЕсли;
		//Счетчик по обработанным документам
		Кэш.РезультатОтправки.ПорНомер = Кэш.РезультатОтправки.ПорНомер + 1;
	КонецЕсли;
	Если ПараметрыВыполнить.СтатусПакета = "Готов" Тогда
		
		АсинхроннаяСбисКоманда.АргументВызова = Новый Структура("Метод, ПараметрыМетода", "WriteDocumentEx", Новый Структура("Document", ПараметрыВыполнить.ДокументОтправить));
		Попытка
			МодульОбъектаКлиент().АсинхроннаяСбисКоманда_Выполнить(АсинхроннаяСбисКоманда);
			ПараметрыОтправки.СтатусПакета = "Отправлен";
		Исключение
			СбисИсключение		= МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".Отправка_Вызов");
			СобытиеОшибки		= МодульОбъектаКлиент().НовыйАсинхронноеСбисСобытие(АсинхроннаяСбисКоманда.Идентификатор, СбисИсключение, "Error");
			МодульОбъектаКлиент().АсинхроннаяСбисКоманда_ВызватьСобытие(АсинхроннаяСбисКоманда, СобытиеОшибки);
		КонецПопытки;

	Иначе
		//Добавим пакет в очередь, пока не будет проставлена пометка Готов
		Кэш.РезультатОтправки.ПодготовленныеКОтправке.Вставить(ПараметрыВыполнить.СоставПакета.Идентификатор, ПараметрыВыполнить);
	КонецЕсли;
	
КонецПроцедуры

////////////Обертки///////////////

&НаКлиенте
Функция СБИСПлагин_ЗаписатьСотрудника(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ЗаписатьСотрудника", param, ДопПараметры,Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ЗаписатьСотрудника");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция СБИСПлагин_ИмпортНоменклатурыИзCML(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ИмпортНоменклатурыИзCML", param, ДопПараметры, Отказ); 
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ИмпортНоменклатурыИзCML");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция СБИСПлагин_ИнформацияОСлужебныхЭтапах(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ИнформацияОСлужебныхЭтапах", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ИнформацияОСлужебныхЭтапах");
	КонецЕсли;
	Возврат Результат
КонецФункции	
	
&НаКлиенте
Функция СБИСПлагин_ОбработкаСлужебныхЭтапов(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ProcessServiceStagesEx", Новый Структура("Filter", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ОбработкаСлужебныхЭтапов");
	КонецЕсли;
	Возврат Результат
КонецФункции

//Обработка внешнего файла в FileLoader. Вызов делается в ExtSDK2
&НаКлиенте
Процедура СБИСПлагин_ОбработатьВнешнийФайл(Кэш, ДанныеФайла, ПараметрыПодготовки) Экспорт

	ИмяФайлаОбработать = ДанныеФайла.Вложение.ПолноеИмяФайла;
	
	Если МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("Шифрование") Тогда
		
		ДанныеФайла.Файл.Вставить("ДвоичныеДанные", МодульОбъектаКлиент().ПолучитьBASE64ПоИмениФайлаКлиент(ИмяФайлаОбработать));
		
	Иначе
		
		ДанныеФайла.Файл.Вставить("ПутьКФайлу", ИмяФайлаОбработать); 
		
	КонецЕсли;
КонецПроцедуры

//Обработка XML файла при отправке. 
//ДанныеФайла - параметры обрабатываемого файла. Файл - структура в списке вложений. Вложение - обрабатываемое вложение состава пакета
//ПараметрыПодготовки - параметры обрабатываемого пакета документов.
&НаКлиенте
Процедура СБИСПлагин_ОбработатьXMLФайл(Кэш, ДанныеФайла, ПараметрыПодготовки) Экспорт
	
	ВременныйПутьФайлаДокумента = Кэш.ОбщиеФункции.СбисПолучитьИмяВременногоФайлаКлиент();
	ВременныйФайлТекст = Новый ЗаписьТекста(ВременныйПутьФайлаДокумента, "windows-1251");
	ВременныйФайлТекст.Записать(ДанныеФайла.Вложение.XMLДокумента);
	ВременныйФайлТекст.Закрыть();
	ДанныеФайла.Файл.Вставить("ПутьКФайлу", ВременныйПутьФайлаДокумента);
	
КонецПроцедуры
	
&НаКлиенте
Функция СБИСПлагин_ПрочитатьДокумент(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ReadDocument", Новый Структура("Document", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ПрочитатьДокумент");
	КонецЕсли;
	Возврат Результат
КонецФункции	

&НаКлиенте
Функция СБИСПлагин_ПрочитатьДокументКакHTML(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ReadDocumentAsHTML", Новый Структура("Parameter", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ПрочитатьДокументКакHTML");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция СБИСПлагин_РасшифроватьФайл(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "DecryptFile2", Новый Структура("Param", param), ДопПараметры, Отказ); 
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_РасшифроватьФайл");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция СБИСПлагин_СписокДокументов(Кэш, filter, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.СписокДокументов", filter, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ReadDocuments");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИСПлагин_СписокИзменений(Кэш, filter, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.СписокИзменений", filter, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ReadDocuments");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИСПлагин_СписокНашихОрганизаций(Кэш, filter, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.СписокНашихОрганизаций", filter, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ReadOurOrganizations");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИСПлагин_СписокДокументовПоСобытиям(Кэш, filter, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.СписокДокументовПоСобытиям", filter, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_СписокДокументовПоСобытиям");
	КонецЕсли;
	Возврат Результат;
КонецФункции

#Область include_core2_vo2_СпособыОбмена_ExtSDK_2_ВнешниеОбертки

&НаКлиенте
Функция СБИС_ВыполнитьДействие(Кэш, document_in, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ExecuteAction", Новый Структура("Document, Action", document_in, Новый Структура), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ВыполнитьДействие");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция СБИС_ПодготовитьДействие(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "PrepareAction", Новый Структура("Document", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПодготовитьДействие");
	КонецЕсли;
	Возврат Результат
КонецФункции	

&НаКлиенте
Функция СБИС_СериализоватьСтрокуВBase64(Кэш, ПараметрыСериализовать, ДопПараметры, Отказ) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СБИС_СериализоватьСтрокуВBase64(Кэш, ПараметрыСериализовать, ДопПараметры, Отказ);
КонецФункции

&НаКлиенте
Функция СБИС_СериализоватьФайлВBase64(Кэш, ПараметрыСериализовать, ДопПараметры, Отказ) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СБИС_СериализоватьФайлВBase64(Кэш, ПараметрыСериализовать, ДопПараметры, Отказ);
КонецФункции

&НаКлиенте
Функция СБИС_СохранитьПоСсылкеВФайл(Кэш, ПараметрыФайла, ДопПараметры, Отказ) Экспорт
	ДопПараметрыЗапроса	= Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ЕстьРезультат", Ложь, Истина, Истина);
	ПараметрыЗаписи		= Новый Структура("Url, FileName", ПараметрыФайла.Ссылка, ПараметрыФайла.ИмяФайла);
	
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "LoadDataFromURLToFile", ПараметрыЗаписи, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда 
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_СохранитьПоСсылкеВФайл");
	КонецЕсли;
	Возврат ПараметрыФайла.ИмяФайла;
КонецФункции

&НаКлиенте
Функция СБИС_СписокИзменений(Кэш, filter, ДопПараметры, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.СписокИзменений", filter, ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_СписокИзменений");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ТекущаяДата(Кэш, Отказ=Ложь) Экспорт
	Возврат ТекущаяДата();
КонецФункции	
	
&НаКлиенте
Функция СБИС_ИнформацияОКонтрагенте(Кэш, СтруктураКонтрагента, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ИнформацияОКонтрагенте", СтруктураКонтрагента, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ИнформацияОКонтрагенте");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ПолучитьИнформациюОТекущемПользователе(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "GetUserInfo", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПолучитьИнформациюОТекущемПользователе");
	КонецЕсли;
	Возврат Результат;
КонецФункции 

&НаКлиенте
Функция СБИС_ПолучитьСписокАккаунтов(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "AccountList", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПолучитьСписокАккаунтов");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ПереключитьАккаунт(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "SwitchAccount", Новый Структура("Param", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПереключитьАккаунт");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ПолучитьПараметрыПакетаДляОткрытияОнлайн(ОписаниеПакета, ДопПараметры) Экспорт
	Кэш = ДопПараметры.Кэш;
   	Если	ОписаниеПакета.ИдАккаунта = "" Тогда
		Возврат Новый Структура("ИдДокумента, Тикет", ОписаниеПакета.ИдДокумента, "");
	Иначе
		ДанныеТикета = Кэш.СБИС.МодульОбъектаКлиент.СбисПолучитьТикетДляАккаунта(Кэш, ОписаниеПакета, Ложь);
		Возврат Новый Структура("ИдДокумента, Тикет, СтарыйИдСессии", ОписаниеПакета.ИдДокумента, ДанныеТикета.Тикет, ДанныеТикета.СтарыйИдСессии);
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция Интеграция_ФЭДСгенерировать(Кэш, ПараметрыДокумента, Генератор, ДопПараметры, Отказ) Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить("Генератор");
	МассивПараметров.Добавить(ПараметрыДокумента);
	МассивПараметров.Добавить(Генератор);
	
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "Integration.ФЭДСгенерировать", МассивПараметров, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".Интеграция_ФЭДСгенерировать");
	Иначе
		Результат = Кэш.ОбщиеФункции.сбисТекстИзBase64(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Интеграция_ФЭДМультиСгенерировать(ПараметрыДокумента, НаборПодстановок, ДопПараметры) Экспорт
	
	Попытка
		Кэш = ДопПараметры.Кэш;
		ДопПараметрыВызова = Новый Структура("ЕстьРезультат, СообщатьПриОшибке, ВернутьОшибку", Истина, Ложь, Истина);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрыДокумента);
		МассивПараметров.Добавить(НаборПодстановок);
		
		Отказ = Ложь;
		Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(ДопПараметры.Кэш, "Integration.FEDMultiGenerate", МассивПараметров, ДопПараметрыВызова, Отказ);
		
		Если Отказ Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СбисОтправитьИОбработатьКомандуCallSabyApi2");
		КонецЕсли;
		
		Для Каждого файл Из Результат Цикл
			файл["Тело"] = Кэш.ОбщиеФункции.сбисТекстИзBase64(файл["Тело"])
		КонецЦикла;
		
		Возврат Результат;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".Интеграция_ФЭДМультиСгенерировать");
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция Интеграция_ЗагрузитьКомплект(Кэш, ПараметрыКомплекта, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "WriteReportings",  Новый Структура("Catalog", ПараметрыКомплекта), ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".WriteReportings");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ЗаписатьВложение(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "WriteAttachment", Новый Структура("Document", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ЗаписатьВложение");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция АПИ3_ИнитКоннекшен(ПараметрыИнит, ДопПараметрыВызова) Экспорт
	ДопПарметрыВызоваИнтеграции = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);
	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(ДопПараметрыВызова.Кэш, "API3.InitConnection", ПараметрыИнит, ДопПарметрыВызоваИнтеграции, ДопПараметрыВызова.Отказ);
	Если ДопПараметрыВызова.Отказ Тогда
		Результат = ДопПараметрыВызова.Кэш.ОбщиеФункции.сбисИсключение(Результат,  ДопПараметрыВызова.Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".АПИ3_ИнитКоннекшен");
		Если Результат.code = 100 Тогда
			СтекВызовов = Результат.stack;
			ЗаписьСтекаПроверить = СтекВызовов[СтекВызовов.ВГраница() - 1];
			Если	ЗаписьСтекаПроверить.Свойство("error")
				И 	Найти(ЗаписьСтекаПроверить.error, "error -1 no error info specified") Тогда
				Результат = ДопПараметрыВызова.Кэш.ОбщиеФункции.сбисИсключение(Результат,  ДопПараметрыВызова.Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".АПИ3_ИнитКоннекшен", 601, "Система не поддерживается");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ExtSys_FeatureIsOn(ПараметрыФичи, ДопПараметры) Экспорт
	Если Не МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("Авторизован") Тогда
		//Если ещё не авторизовались, то за фичей не идём, считаем что неопределено.
		Возврат Неопределено;
	КонецЕсли;
	НазваниеФичи = ПараметрыФичи.НазваниеФичи;
	Кэш = ДопПараметры.Кэш;
 	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(НазваниеФичи);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSys.FeatureIsOn", ПараметрыКоманды, ДопПараметрыВызова, Ложь) = Истина;
КонецФункции

// Вызов функции MappingObject.List. Формирует список
// объектов синхронизируемых объектов определенного типа,
// с данными сопоставления и с расшифровкой естественных ключей
//
// Параметры:
//  Кэш  - Структура - Кэш обработки
//  ДопПоля  - Структура - Набор полей, которыми будут расширены
//					возвращаемые записи.
//	Фильтр	- Структура - Параметры фильтрации выборки.
//	Сортировка	- Структура - Параметры сортировки записей в выборке.
//	Навигация	-	 Структура - Параметры для навигации с типом
//					"постраничная", "бесконечный скролл"
//					или "по курсору".
//
// Возвращаемое значение:
//   Структура   - Результат вызова. Список объектов или ошибка
//
&НаКлиенте
Функция MappingObject_List(Кэш, ДопПоля, Фильтр, Навигация, Отказ = Ложь) Экспорт 

	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт"); 
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("ExtraFields",		ДопПоля);
	ПараметрыВызова.Вставить("Filter",		Фильтр);  
	ПараметрыВызова.Вставить("Pagination",	Навигация); 
	//ПараметрыВызова = Новый Массив;
	//ПараметрыВызова.Добавить(ДопПоля);
	//ПараметрыВызова.Добавить(Фильтр);
	//ПараметрыВызова.Добавить(Навигация);
	
	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "MappingObject.List", ПараметрыВызова, ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "MappingObject.List");
	КонецЕсли;
	Возврат Результат;

КонецФункции // MappingObject_List()

&НаКлиенте
Функция СБИС_ПолучитьСопоставлениеСторон(Кэш, ПараметрыДанныеСторон, ДопПараметры=Неопределено, Отказ) Экспорт
	ДопПараметры = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь); 
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "ExtSysOrganization.MassFind", ПараметрыДанныеСторон, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПолучитьСопоставлениеСторон");
	КонецЕсли;
	Возврат Результат;
КонецФункции

//1189641556 Функция получает складские параметры документа
&НаКлиенте
Функция ExtSysMarking_GetParams(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);  
	ПараметрыКоманды.Добавить(params.paramsList);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.GetParams", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции 

//1189641556 Функция формирует данные о проверке кодов маркировки документа
&НаКлиенте
Функция ExtSysMarking_CheckState(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.CheckState", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции     

//1189641556 Функция возвращает данные маркировки (номенклатур/параметров документа и т.п.)
&НаКлиенте
Функция ExtSysMarking_NumList(params, ДопПараметры, Отказ=Ложь) Экспорт 
	
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();
	ПараметрыКоманды.Добавить(Новый Массив());
	ПараметрыКоманды.Добавить(params.Фильтр); 
	ПараметрыКоманды.Добавить(Новый Массив());
	ПараметрыКоманды.Добавить(Новый Массив());

	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.NumList", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции   
 
// Функция получеяет параметры из SerialNumber.CustomList
//
// Параметры:
//  params  - Структура - Параметры фильтрации метода
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//   Структура   - Результат вызова.
//
&НаКлиенте
Функция ExtSysMarking_NomCheckState(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);  
	ПараметрыКоманды.Добавить(params.КодНоменклатуры);
		
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.NomCheckState", ПараметрыКоманды, ДопПараметрыВызова, Отказ);    
	Если Отказ Тогда
		Возврат МодульОбъектаКлиент().НовыйСбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ExtSysMarking_NomCheckState");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции  

// Функция получяет параметры из SerialNumber.CustomList. В отличии от ExtSysMarking_NomCheckState по первичному ключу номенклатуры документа
//
// Параметры:
//  params  - Структура - Параметры фильтрации метода
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//   Структура   - Результат вызова.
//
&НаКлиенте
Функция ExtSysMarking_NomCheckStateByNomDoc(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);  
	ПараметрыКоманды.Добавить(params.КодНоменклатуры);
		
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.NomCheckStateByNomDoc", ПараметрыКоманды, ДопПараметрыВызова, Отказ);    
	Если Отказ Тогда
		Возврат МодульОбъектаКлиент().НовыйСбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ExtSysMarking.NomCheckStateByNomDoc");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции 

//1189641556 Функция устанавливает параметры выбытия кодов маркировки ExtSysMarking.SetParamt
&НаКлиенте
Функция ExtSysMarking_SetParam(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);  
	ПараметрыКоманды.Добавить(params.name); 
	ПараметрыКоманды.Добавить(params.value);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.SetParam", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции 

//1189641556 Функция проверяет наличие токена в ГИС МТ
&НаКлиенте
Функция ExtSysMarking_CheckGisSetting(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.CheckGisSetting", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции  

//1189641556 Функция запуск проверку кодов маркировки в ГИС МТ
&НаКлиенте
Функция ExtSysMarking_CheckSnCRPT(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.CheckSnCRPT", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции  

//1189641556 Функция ищет сертификат по отпечатку после чего разбирает его
&НаКлиенте
Функция Сертификат_ПрочитатьПоОтпечатку(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.Отпечаток);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "Сертификат.ПрочитатьПоОтпечатку", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции    

//1189641556 Функция получает информацию по созданию токена ГИС МТ
&НаКлиенте
Функция ExtSysMarking_CheckGisTask(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.CheckGisTask", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции    

//1189641556 Функция получает статус проверки документа ГИС МТ
&НаКлиенте
Функция ExtSysMarking_GetResendingConfigForGIS(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.GetResendingConfigForGIS", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции

//1189641556 Функция отправляет коды маркировки в ГИС МТ
&НаКлиенте
Функция ExtSysMarking_SendToGIS(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.SendToGIS", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции

// Функция вызывает создание токена в СБИС, для взаимодействия с ГИС МТ ExtSysMarking.CreateGisSetting
//
// Параметры:
//  params  - Структура - Параметры фильтрации метода
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//   Строка   - Результат вызова. Дата/время вызова или ошибка
//
&НаКлиенте
Функция ExtSysMarking_CreateGisSetting(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);    
	
	ПараметрыКоманды = Новый Массив(); 
	ПараметрыКоманды.Добавить(params);
	
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.CreateGisSetting", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
	
КонецФункции
	
//Подготовка данных по загружаемым в 1С объектам на сервисе IntegrationConfig порционно
&НаКлиенте
Функция Connector_Prepare(Кэш, ПараметрыВызова, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "Connector.Prepare", ПараметрыВызова, ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.ПодготовитьПосылкуСОбъектами");
	КонецЕсли;
	Возврат Результат;	
КонецФункции

//Подготовка данных по загружаемым в 1С объектам на сервисе IntegrationConfig порционно
&НаКлиенте
Функция ExtSyncDoc_Prepare(Кэш, ПараметрыВызова, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "ExtSyncDoc.Prepare", ПараметрыВызова, ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "ExtSyncDoc.Prepare");
	КонецЕсли;
	Возврат Результат;	
КонецФункции

//Получение объекта на загрузку в 1С
&НаКлиенте
Функция ExtSyncDoc_GetObjectForExecute(Кэш,ИдентификаторПосылки, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "ExtSyncDoc.GetObjectForExecute", Новый Структура("SyncDocId", ИдентификаторПосылки), ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.ПолучитьОбъектНаЗагрузку");
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Рассчет объекта на сервисе
&НаКлиенте
Функция ExtSyncDoc_CalcObjectForExecute(Кэш, СтруктураОбъекта, ИдентификаторПосылки, ИмяИни, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "ExtSyncDoc.CalcObjectForExecute", Новый Структура("ObjectData,IniName,SyncDocId", СтруктураОбъекта, ИмяИни, ИдентификаторПосылки), ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.РассчитатьОбъектыНаЗапись");
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Обертка метода ExtSyncDoc.Write
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ExtSyncDoc_Write(Кэш, ПараметрыМетода, Отказ = Ложь) Экспорт 
	
	ДопПараметры = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/integration_config/service/");   

	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "ExtSyncDoc.Write", ПараметрыМетода, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "API.ОбновитьОбъектСБИСИзОбъекта1С");
	КонецЕсли;        
	
	Возврат Результат;

КонецФункции // ExtSyncDoc_Write()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ExtSyncDoc_WriteEx(Кэш, ПараметрыВызова, Отказ = Ложь) Экспорт

	ДопПараметры = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/integration_config/service/");   

	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "ExtSyncDoc.WriteEx", ПараметрыВызова, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "ExtSyncDoc.WriteEx");
	КонецЕсли;        
	
	Возврат Результат;

КонецФункции // ExtSyncDoc_WriteEx()

// Обертка метода ExtSyncDoc.Execute
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ExtSyncDoc_Execute(Кэш, ПараметрыМетода, Отказ = Ложь) Экспорт 
	
	ДопПараметры = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/integration_config/service/");

	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "ExtSyncDoc.Execute", ПараметрыМетода, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "API.ОбновитьОбъектСБИСИзОбъекта1С");
	КонецЕсли;        
	
	Возврат Результат;

КонецФункции // ExtSyncDoc_Execute()

// Обертка метода API3.GetSbisObject
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте     
Функция API3_GetSbisObject(Кэш, ПараметрыМетода, ДопПараметры, Отказ = Ложь) Экспорт   
	
	ДопПараметры = Новый Структура("АдресРесурса", "/service/?srv=1");
	НовПараметры = Новый Массив;
	НовПараметры.Добавить(ПараметрыМетода.Type);
	НовПараметры.Добавить(ПараметрыМетода.IdList);
	
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "API3.GetSbisObject", НовПараметры, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "API.ПрочитатьАПИОбъектСБИС");
	КонецЕсли;  
	
	Возврат Результат;

КонецФункции // API3_GetSbisObject()

// Функция запускает проверку проверку прослеживаемых позиций через обертку метода RNPT.SendDoc
//
// Параметры:
//  params  - Структура - Параметры фильтрации метода
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//   Структура   - Результат вызова. Список объектов или ошибка
//
&НаКлиенте
Функция ExtSysMarking_SendDocumentRNPT(params, ДопПараметры, Отказ=Ложь) Экспорт  
	
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);
	
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.SendDocumentRNPT", ПараметрыКоманды, ДопПараметрыВызова, Отказ);    
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ExtSysMarking_SendDocumentRNPT");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции 

// API3.ExtSyncDocRead
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция API3_ExtSyncDocRead(Кэш, ПараметрыМетода, ДопПараметры, Отказ = Ложь) Экспорт 

	ДопПараметры = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/integration_config/service/");

	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "API3.ExtSyncDocRead", ПараметрыМетода, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "API.ОбновитьОбъектСБИСИзОбъекта1С");
	КонецЕсли;        
	
	Возврат Результат; 

КонецФункции // API3.ExtSyncDocRead() 

// Функция получает двоичные данные протокола проверки документа СБИС, на наличие ошибок ФЛК
//
// Параметры:
//  params  - Структура - Параметры фильтрации метода
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//   Структура   - Результат вызова. Список объектов или ошибка
//
&НаКлиенте
Функция ExtSysMarking_ExportAsHTML(params, ДопПараметры, Отказ=Ложь) Экспорт  
	
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);
	ПараметрыКоманды.Добавить(params.ИдВложения);
	
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.ExportAsHTML", ПараметрыКоманды, ДопПараметрыВызова, Отказ);    
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ExtSysMarking_ExportAsHTML");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// API3.FindSbisObject
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция API3_FindSbisObject(Кэш, ПараметрыМетода, ДопПараметры, Отказ = Ложь) Экспорт 

	ДопПараметры = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/service/");    
	АргументыВызова = Новый Массив;
	АргументыВызова.Добавить(ПараметрыМетода.Type);
	АргументыВызова.Добавить(ПараметрыМетода.Filter);

	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "API3.FindSbisObject", АргументыВызова, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "API3_FindSbisObject");
	КонецЕсли;        
	
	Возврат Результат["result"]; 

КонецФункции // API3.FindSbisObject() 

// MappingObject.UpdateFromData
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция MappingObject_UpdateFromData(Кэш, ПараметрыМетода, ДопПараметры, Отказ = Ложь) Экспорт 

	ДопПараметры = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/integration_config/service/");

	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "MappingObject.UpdateFromData", ПараметрыМетода, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "MappingObject.UpdateFromData");
	КонецЕсли;        
	
	Возврат Результат; 

КонецФункции // MappingObject.UpdateFromData() 

&НаКлиенте
Функция SearchNomenclatureCollation(Кэш, params, ДопПараметры, Отказ=Ложь) Экспорт 
	
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Method", "ContractorNomenclatureCollation.SearchByContractorData");
	
	АргументыВызова = Новый Массив;
	АргументыВызова.Добавить(params.Contractor);
	АргументыВызова.Добавить(params.Data);
	
	ПараметрыВызова.Вставить("Params", АргументыВызова);

	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисОтправитьИОбработатьКоманду(Кэш, "CallSabyApi2", ПараметрыВызова, ДопПараметры,Отказ);

КонецФункции   

#Область include_core2_vo2_СпособыОбмена_ExtSDK_2_ВнешниеОбертки_ПрикладнаяСтатистика

// Функция записывает статистику стандартизированного формата
//
// Параметры:
//  params  - Структура - Параметры фильтрации метода
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//   Структура   - Результат вызова. Список объектов или ошибка
//
&НаКлиенте
Функция ExtSysMarking_SendStatisticData(params, ДопПараметры, Отказ=Ложь) Экспорт  
	
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.Функционал);  
	ПараметрыКоманды.Добавить(params.Контекст);
    ПараметрыКоманды.Добавить(params.Действие);
    ПараметрыКоманды.Добавить(params.Количество);
	
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.SendStatisticData", ПараметрыКоманды, ДопПараметрыВызова, Отказ);    
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ExtSysMarking_SendStatisticData");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_СпособыОбмена_ExtSDK_2_ВнешниеОбертки_СопоставлениеНоменклатуры

// Функция для получения списка всех сопоставлений по данным контрагента.
//
// Параметры:
//  params  - Структура - Параметры метода: данные контрагента, фильтр и ключи для постраничной навигации
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//   Массив структур   - Результат вызова.
//	 Структура - ошибка	
&НаКлиенте
Функция ContractorNomenclatureCollation_List(Кэш, ПараметрыМетода, ДопПараметры, Отказ=Ложь) Экспорт  
	
	ПараметрыВызова = Новый Массив;
	ПараметрыВызова.Добавить(ПараметрыМетода.Contractor);
	ПараметрыВызова.Добавить(ПараметрыМетода.Filter);
	ПараметрыВызова.Добавить(ПараметрыМетода.Navigation);
		
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ContractorNomenclatureCollation.List", ПараметрыВызова, ДопПараметры, Отказ);

КонецФункции

// Функция для поиска сопоставлений по данным 1C.
//
// Параметры:
//  params  - Структура - Параметры метода: данные о контрагенте и список строк номенклатуры для обогащения
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//   Массив структур   - Результат вызова.
//	 Структура - ошибка	
&НаКлиенте
Функция ContractorNomenclatureCollation_SearchByOwnerData(Кэш, ПараметрыМетода, ДопПараметры, Отказ=Ложь) Экспорт  
	
	ПараметрыВызова = Новый Массив;
	ПараметрыВызова.Добавить(ПараметрыМетода.Contractor);
	ПараметрыВызова.Добавить(ПараметрыМетода.Data);
		
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ContractorNomenclatureCollation.SearchByOwnerData", ПараметрыВызова, ДопПараметры, Отказ);

КонецФункции

// Функция для поиска сопоставлений по данным контрагента.
//
// Параметры:
//  params  - Структура - Параметры метода: данные о контрагенте и список строк номенклатуры для обогащения
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//   Массив структур   - Результат вызова.
//	 Структура - ошибка	
&НаКлиенте
Функция ContractorNomenclatureCollation_SearchByContractorData(Кэш, ПараметрыМетода, ДопПараметры, Отказ=Ложь) Экспорт  
	
	ПараметрыВызова = Новый Массив;
	ПараметрыВызова.Добавить(ПараметрыМетода.Contractor);
	ПараметрыВызова.Добавить(ПараметрыМетода.Data);
		
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ContractorNomenclatureCollation.SearchByContractorData", ПараметрыВызова, ДопПараметры, Отказ);

КонецФункции

// Функция для для записи / обновления сопоставлений.
//
// Параметры:
//  params  - Структура - Параметры метода: данные о контрагенте и список строк номенклатуры для записи
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//	 Структура - список ошибок возникшних при записи
&НаКлиенте
Функция ContractorNomenclatureCollation_MassUpdate(Кэш, ПараметрыМетода, ДопПараметры, Отказ=Ложь) Экспорт  
	
	ПараметрыВызова = Новый Массив;
	ПараметрыВызова.Добавить(ПараметрыМетода.Contractor);
	ПараметрыВызова.Добавить(ПараметрыМетода.Data);
		
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ContractorNomenclatureCollation.MassUpdate", ПараметрыВызова, ДопПараметры, Отказ);

КонецФункции

// Функция для удаления сопоставлений.
//
// Параметры:
//  params  - Структура - Параметры метода: данные о контрагенте и список строк номенклатуры для удаления
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//	 Структура - список ошибок возникшних при записи
&НаКлиенте
Функция ContractorNomenclatureCollation_MassDelete(Кэш, ПараметрыМетода, ДопПараметры, Отказ=Ложь) Экспорт  
	
	ПараметрыВызова = Новый Массив;
	ПараметрыВызова.Добавить(ПараметрыМетода.Contractor);
	ПараметрыВызова.Добавить(ПараметрыМетода.Data);
		
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ContractorNomenclatureCollation.MassDelete", ПараметрыВызова, ДопПараметры, Отказ);

КонецФункции

#КонецОбласти


#КонецОбласти 

////////////////////////////////////////////////////
///////////////////Прочие функции///////////////////
////////////////////////////////////////////////////

// Заглушка (SDK)
&НаКлиенте
Функция ВключитьОтладку(Кэш, КаталогОтладки) Экспорт
КонецФункции

// Заглушка (SDK)
&НаКлиенте
Функция ОтключитьОтладку(Кэш) Экспорт
КонецФункции

// Изменяет каталог отладки с соответствующими проверками
&НаКлиенте
Функция УстановитьКаталогОтладки(Кэш) Экспорт
	ГлавноеОкно = Кэш.ГлавноеОкно;
	КаталогДоИзменения = Кэш.Парам.КаталогОтладки;
	
	// Если никакой каталог не задан и мы поставили галку, то открывать выбор каталога
	Если	ГлавноеОкно.РежимОтладки 
		И	ГлавноеОкно.РежимОтладки <> Кэш.Парам.РежимОтладки
		И	ГлавноеОкно.КаталогОтладки = "" Тогда
		РежимВыбора = Истина;
	Иначе
		РежимВыбора = Ложь;
	КонецЕсли;
	
	Попытка
		КаталогИзменен = УстановитьКаталогОтладкиРекурсивно(ГлавноеОкно, КаталогДоИзменения, РежимВыбора);	
	Исключение
		СбисИсключение = Кэш.ОбщиеФункции.СбисИсключение(, "ExtSDK2.УстановитьКаталогОтладкиРекурсивно", 772, "Ошибка работы с файловой системой", ОписаниеОшибки());
		ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, СбисИсключение);
		ГлавноеОкно.КаталогОтладки = КаталогДоИзменения;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат КаталогИзменен;
КонецФункции

&НаКлиенте
Функция УстановитьКаталогОтладкиРекурсивно(ГлавноеОкно, КаталогДоИзменения, РежимВыбора, КаталогТест = "")
	Если ГлавноеОкно.КаталогОтладки = "" Тогда
		Если РежимВыбора Тогда
			ОтказОтВыбора = Ложь;
			л_КаталогОтладки = ГлавноеОкно.сбисВыбратьКаталог(КаталогТест, ОтказОтВыбора);
			Если ОтказОтВыбора Тогда
				ГлавноеОкно.РежимОтладки = Ложь;
				Возврат Истина;
			КонецЕсли;
			ГлавноеОкно.КаталогОтладки = л_КаталогОтладки;
			УстановитьКаталогОтладкиРекурсивно(ГлавноеОкно, КаталогДоИзменения, РежимВыбора, КаталогТест);
		Иначе
			ГлавноеОкно.РежимОтладки = Ложь;
		КонецЕсли;
		Возврат ГлавноеОкно.КаталогОтладки <> КаталогДоИзменения;
		//Каталог менялся руками, проверить что такой есть
	Иначе
		л_КаталогОтладки = ГлавноеОкно.сбисФорматКаталога(ГлавноеОкно.КаталогОтладки);
		Файл = Новый Файл(ГлавноеОкно.КаталогОтладки);
		Если Не Файл.Существует() Или Не Файл.ЭтоКаталог() Тогда
			КаталогТест	= ГлавноеОкно.КаталогОтладки;
			РежимВыбора	= Истина;
			ГлавноеОкно.КаталогОтладки = "";
			УстановитьКаталогОтладкиРекурсивно(ГлавноеОкно, КаталогДоИзменения, РежимВыбора, КаталогТест);
			Возврат ГлавноеОкно.КаталогОтладки <> КаталогДоИзменения;
		КонецЕсли;
		ГлавноеОкно.КаталогОтладки = л_КаталогОтладки;
		Возврат ГлавноеОкно.КаталогОтладки <> КаталогДоИзменения;
	КонецЕсли;
КонецФункции

//Получает список документов по событиям с online.sbis.ru	
&НаКлиенте
Функция ПолучитьСписокСобытий(Кэш, ТипРеестра) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьСписокСобытий(Кэш, ТипРеестра);
КонецФункции

//Получает список документов определенного типа с online.sbis.ru	
&НаКлиенте
Функция СбисПолучитьСписокДокументов(Кэш) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.сбисПолучитьСписокДокументов(Кэш);
КонецФункции

//Получает данные файла вложения	
&НаКлиенте
функция ПолучитьДанныеФайла(Кэш,Ссылка) экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьДанныеФайла(Кэш,Ссылка);
КонецФункции

//Получает данные файла вложения	
&НаКлиенте
функция ПолучитьДанныеЗашифрованногоФайла(Кэш,Ссылка) экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьДанныеЗашифрованногоФайла(Кэш,Ссылка);
КонецФункции

//Получает данные файла вложения	
&НаКлиенте
функция СбисПолучитьФайл(Кэш,Ссылка) экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.сбисПолучитьФайл(Кэш,Ссылка);
КонецФункции

&НаКлиенте
функция СБИСЗаписатьВложения(Кэш,СоставПакета, Вложение) экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СБИСЗаписатьВложения(Кэш, СоставПакета, Вложение);
КонецФункции

//Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
&НаКлиенте
Функция СбисВыполнитьКоманду(Кэш, Идентификатор,ИмяКоманды, ПредставлениеПакета) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.сбисВыполнитьКоманду(Кэш, Идентификатор,ИмяКоманды, ПредставлениеПакета)
КонецФункции

//Получает список организаций с необработанными этапами и запускает для них обработку служебных документов
&НаКлиенте
Функция ОбработкаСлужебныхДокументов(Кэш) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ОбработкаСлужебныхДокументов(Кэш);
КонецФункции

//Получает текущую дату в миллисекундах с начала 1970г
&НаКлиенте
функция сбисТекущаяДатаМСек(Кэш) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.сбисТекущаяДатаМСек(Кэш);	
КонецФункции

//Если более часа не проверяли статусы, то выводим красное предупреждение	
&НаКлиенте
Процедура УстановитьВидимостьОбновитьСтатусы(Кэш) Экспорт
	Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.УстановитьВидимостьОбновитьСтатусы(Кэш);
КонецПроцедуры

//Получает Информацию о подписанте документа
&НаКлиенте
Функция сбисПодписант(Кэш, ИНН) Экспорт 
	
	Если МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("Шифрование") Тогда
		
		СписокСертификатов = ПолучитьСписокСертификатов(Кэш, Новый Структура("ИНН",ИНН));
		
		Если СписокСертификатов.Количество() Тогда
			
			Возврат СписокСертификатов[0].Значение;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.сбисПодписант(Кэш, ИНН);
	
КонецФункции

//Получает Информацию о контрагенте с онлайна
&НаКлиенте
Функция сбисИдентификаторУчастника(Кэш, ИНН, КПП, Название) Экспорт
	
	Если МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("Шифрование") Тогда

		// Получает Информацию о контрагенте с онлайна
		Участник = Новый Структура;
		Если СтрДлина(СокрЛП(Инн)) = 12 Тогда
			
			СвФЛ = Новый Структура;
			Участник.Вставить("СвФЛ",СвФЛ);
			Участник.СвФЛ.Вставить("ИНН",Инн);
			ФИОСтруктура = Кэш.ОбщиеФункции.сбисПолучитьФИОИзНазвания(Название);
			Участник.СвФЛ.Вставить("Фамилия",ФИОСтруктура.Фамилия);
			Участник.СвФЛ.Вставить("Имя",ФИОСтруктура.Имя);
			Участник.СвФЛ.Вставить("Отчество",ФИОСтруктура.Отчество);
		Иначе
			СвЮЛ = Новый Структура;
			Участник.Вставить("СвЮЛ",СвЮЛ);
			Участник.СвЮЛ.Вставить("ИНН",ИНН);
			Участник.СвЮЛ.Вставить("КПП",КПП);
			Участник.СвЮЛ.Вставить("Название",Название);
		КонецЕсли;
		
		оКонтрагент = ПолучитьИнформациюОКонтрагенте(Кэш, Участник);
		
		Если Не оКонтрагент = Ложь Тогда
			
			Возврат оКонтрагент.Идентификатор;
			
		КонецЕсли;
		
		Возврат "";
		
	КонецЕсли;
		
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.сбисИдентификаторУчастника(Кэш, ИНН, КПП, Название);
	
КонецФункции

//Выполняет указанный метод и возвращает результат, либо генерирует и сообщает ошибку.
//Дополнительные параметры - структура, для управления выводом и возвратом результата в случае ошибок. 
//	Возможные значения: СообщатьПриОшибке(Истина),ВернутьОшибку(Ложь),ЕстьРезультат(Ложь), ЖдатьОтвета(Истина). 
//	Так же в качестве дополнительного параметра может быть передана структура Поток и Идентификатор для выполнения запроса.
//Отказ - булево, определяет наличие ошибок в процессе выполнения метода и что вернулось в качестве результата. Если Истина, то структура ошибки с полями "code, message, details"
&НаКлиенте
Функция СбисОтправитьИОбработатьКоманду(Кэш, Метод, ПараметрыМетода=Неопределено, ДопПараметры,Отказ) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисОтправитьИОбработатьКоманду(Кэш, Метод, ПараметрыМетода, ДопПараметры,Отказ);
КонецФункции

&НаКлиенте
Функция СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, Метод, ПараметрыМетода=Неопределено, ДопПараметры,Отказ) Экспорт
	ПараметрыCallIntegrationApi = Новый Массив;
	Если Не ПараметрыМетода = Неопределено Тогда
		Для Каждого КлючИЗначение Из ПараметрыМетода Цикл
			ПараметрыCallIntegrationApi.Добавить(КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Method", Метод);
	ПараметрыВызова.Вставить("Params", Новый Структура("param", ПараметрыCallIntegrationApi));
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисОтправитьИОбработатьКоманду(Кэш, "CallIntegrationApi", ПараметрыВызова, ДопПараметры,Отказ);
КонецФункции

&НаКлиенте
Функция СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, Метод, ПараметрыМетода=Неопределено, ДопПараметры,Отказ) Экспорт
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Method", Метод);
	ПараметрыВызова.Вставить("Params", ПараметрыМетода);
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисОтправитьИОбработатьКоманду(Кэш, "CallSabyApi", ПараметрыВызова, ДопПараметры,Отказ);
КонецФункции

&НаКлиенте
Функция СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, Метод, ПараметрыМетода=Неопределено, ДопПараметры,Отказ) Экспорт
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Method", Метод);
	ПараметрыВызова.Вставить("Params", ПараметрыМетода);
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисОтправитьИОбработатьКоманду(Кэш, "CallSabyApi2", ПараметрыВызова, ДопПараметры,Отказ);
КонецФункции

&НаКлиенте
Функция ОбновитьЗаписьСопоставления(Кэш, Фильтр, Данные, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "MappingObject.FindAndUpdate", Новый Структура("Filter,Data", Фильтр, Данные), ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.РассчитатьОбъектыНаЗапись");
	КонецЕсли;
	Возврат Результат;
КонецФункции

#Область include_core2_vo2_СпособыОбмена_ExtSDK_2_нешниеОбертки_АсинхроннаяОтправка

#Область include_core2_vo2_СпособыОбмена_ExtSDK_2_WriteDocumentEx

&НаКлиенте
Процедура WriteDocumentEx(АсинхроннаяСБИСКоманда, ДопПараметры) Экспорт
	
	ОшибкаВызова	= Ложь;
	
	КомандаПлагина	= НовыйКомандаСБИСПлагин(ДопПараметры.Кэш, АсинхроннаяСБИСКоманда, Новый Структура("Метод", "WriteDocumentEx"));
	КомандаПлагина.Параметры = Новый Структура("Document", КомандаПлагина.Параметры.ДокументОтправить);
	РезультатВызова	= СБИС_ОтправитьКомандуБезОбработки(ДопПараметры.Кэш, КомандаПлагина, Новый Структура, ОшибкаВызова);
	
	АсинхроннаяСБИСКоманда.ВремяВызова = КомандаПлагина.ВремяВызова;
	
	Если ОшибкаВызова Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение(РезультатВызова, ДопПараметры.Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ОтправитьКоманду_Асинхронно");
	КонецЕсли;
	
КонецПроцедуры

//Обработка успешной отправки пакета
&НаКлиенте
Процедура WriteDocumentEx2_Message(РезультатВызова, ПараметрыОбработки) Экспорт
	
	WriteDocumentEx2_ОбработатьВременныеФайлы(РезультатВызова, ПараметрыОбработки);
	МодульОбъектаКлиент().РезультатОтправки_Асинх_Ответ(РезультатВызова, ПараметрыОбработки);
	
КонецПроцедуры

//Обработка ошибки отправки
&НаКлиенте
Процедура WriteDocumentEx2_Error(РезультатВызова, ПараметрыОбработки) Экспорт
	
	WriteDocumentEx2_ОбработатьВременныеФайлы(РезультатВызова, ПараметрыОбработки);
	МодульОбъектаКлиент().РезультатОтправки_Асинх_Ошибка(РезультатВызова, ПараметрыОбработки)
	
КонецПроцедуры

//Вспомогательная функция, чисто под способ обмена.
&НаКлиенте
Процедура WriteDocumentEx2_ОбработатьВременныеФайлы(РезультатВызова, ПараметрыОбработки)
	
	Попытка
		ОтправкаДокументаСБИС	= ПараметрыОбработки.Команда.АргументВызова;
		ВложенияОбработаны		= МодульОбъектаКлиент().ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ДокументОтправить").Вложение;
		Для Каждого ВложениеПакета Из ВложенияОбработаны Цикл
			КлючВременногоФайла = ВложениеПакета;
			Если	Не КлючВременногоФайла.Свойство("Файл",			КлючВременногоФайла)
				Или Не КлючВременногоФайла.Свойство("ПутьКФайлу",	КлючВременногоФайла) Тогда
				Продолжить;
			КонецЕсли;
			СбисВременныйФайл = ПараметрыОбработки.Кэш.ТекущийСеанс.ВременныеФайлы.Файлы.Получить(КлючВременногоФайла);
			Если СбисВременныйФайл = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СбисВременныйФайл.Освободить = Истина;
		КонецЦикла;
	Исключение
		Возврат;
	КонецПопытки;
	ПараметрыОбработки.Кэш.ОбщиеФункции.СбисОчиститьВременныеФайлы();
	
КонецПроцедуры

#КонецОбласти 

#Область include_core2_vo2_СпособыОбмена_ExtSDK_2_ExecuteActionEx  

// Процедура выполняет расширенное выполнение действия над документом. Вызываются методы ExtSdk2.PrepareAction и ExtSdk2.ExecuteAction
//
// Параметры:
//  АсинхроннаяСБИСКоманда	 - 	Структура - Данные отправки документа - СоставПакета, Документ, СтатусПакета 
//  ДопПараметры			 - 	Структура - Набор полей, работа с которыми может расширить результат работы процедуры
//
&НаКлиенте
Процедура ExecuteActionEx(АсинхроннаяСБИСКоманда, ДопПараметры) Экспорт
	
	ОшибкаВызова	= Ложь;
	
	КомандаПлагина	= НовыйКомандаСБИСПлагин(ДопПараметры.Кэш, АсинхроннаяСБИСКоманда, Новый Структура("Метод", "ExecuteActionEx"));
	КомандаПлагина.Параметры = Новый Структура("Document", КомандаПлагина.Параметры.ДокументОтправить); 
		
	РезультатВызова	= СБИС_ОтправитьКомандуБезОбработки(ДопПараметры.Кэш, КомандаПлагина, Новый Структура, ОшибкаВызова);
	
	АсинхроннаяСБИСКоманда.ВремяВызова = КомандаПлагина.ВремяВызова;
	
	Если ОшибкаВызова Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение(РезультатВызова, ДопПараметры.Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ОтправитьКоманду_Асинхронно");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_СпособыОбмена_ExtSDK_2_СобытияОтправки

// Описать, как обработать в отправку приложенный файл не XML.
//
// Параметры:
//  Кэш					 - ЛокальныйКэш	- Струкутра
//  ДанныеФайла			 - Структура	- Вложение, Файл
//  ПараметрыПодготовки	 - Струкутра	- Данные отправки документа - СоставПакета, Документ, СтатусПакета
//
&НаКлиенте
Процедура Отправка_ОбработатьВнешнийФайл(Кэш, ДанныеФайла, ПараметрыПодготовки) Экспорт
	
	СБИСПлагин_ОбработатьВнешнийФайл(Кэш, ДанныеФайла, ПараметрыПодготовки) 

КонецПроцедуры

// Описать, как обработать в отправку приложенный файл не XML.
//
// Параметры:
//  Кэш					 - ЛокальныйКэш	- Струкутра
//  ДанныеФайла			 - Структура	- Вложение, Файл
//  ПараметрыПодготовки	 - Струкутра	- Данные отправки документа - СоставПакета, Документ, СтатусПакета
//
&НаКлиенте
Процедура Отправка_ОбработатьXMLФайл(Кэш, ДанныеФайла, ПараметрыПодготовки) Экспорт
	
	СБИСПлагин_ОбработатьXMLФайл(Кэш, ДанныеФайла, ПараметрыПодготовки);

КонецПроцедуры

// Описать, как обработать асинхронное событие
//
// Параметры:
//  ОбработчикКоманды	 - АсинхроннаяСбисКоманда	- Структура команды отправки
//  ПараметрыСобытий	 - Струкутра				- Данные для формируемых подписок
//
&НаКлиенте
Функция Отправка_ПодпискиСобытия(ПараметрыСобытий) Экспорт
	
	Кэш = ПараметрыСобытий.Кэш;
	Результат = Новый Структура;
	Результат.Вставить("Error",				Новый Структура("Функция, Параметры",			"WriteDocumentEx2_Error"));
	Результат.Вставить("Message",			Новый Структура("Функция, Параметры",			"WriteDocumentEx2_Message"));
	Возврат Результат;
				
КонецФункции

#КонецОбласти

#Область include_core2_vo2_СпособыОбмена_ExtSDK_2_АсинхронныеОтветы

// Функция - возвращает пул накопленных ответов
//
// Параметры:
//  КэшСБИС	 - КэшСБИС	 - объекты для обработки
// 
// Возвращаемое значение:
//  Массив - накопленные ответы, нуждающиеся в обработке
//
&НаКлиенте
Функция СБИС_ПрочитатьПулОтветов(КэшСБИС) Экспорт
	
	Попытка
		СтрокаXML	= КэшСБИС.ДанныеИнтеграции.Объекты.Плагин.ReadAllXml2();
		СбисСобытия	= СБИС_РазобратьОтвет(СтрокаXML);
	Исключение
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнформацияОбОшибке(), МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".СБИС_ПрочитатьПулОтветов",773)
	КонецПопытки;
	////Временный костыль на проброску необработанных ответов при вызове ExtSDK в промежутке в отправке, чтобы не терять ответы.
	//Если КэшСБИС.ДанныеИнтеграции.НеизвестныеОтветы.Количество() Тогда
	//	Для Каждого КлючИЗначениеСобытия Из КэшСБИС.ДанныеИнтеграции.НеизвестныеОтветы Цикл
	//		Для Каждого ОтветЗначение Из КлючИЗначениеСобытия.Значение Цикл
	//			СбисСобытия.
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЕсли;
	Возврат СбисСобытия;
	
КонецФункции

// Разбор сообщения от плагина
//
// Параметры:
//  Сбис3СобытиеОтвет	- Сообщение из пула ответов	 - 
// 
// Возвращаемое значение:
// АсинхронноеСбисСобытие  - 
//
&НаКлиенте
Функция СБИС_ОбработатьОтвет(Сбис3СобытиеОтвет, ДопПараметры=Неопределено) Экспорт
	
    ОбработанноеСобытие = СБИС_ОбработатьСобытиеОтвета(Сбис3СобытиеОтвет, ДопПараметры);
	Возврат МодульОбъектаКлиент().НовыйАсинхронноеСбисСобытие(ОбработанноеСобытие.queryID, ОбработанноеСобытие.data, ОбработанноеСобытие.type)
	
КонецФункции
	
// Разбор сообщения от плагина
//
// Параметры:
//  Сбис3СобытиеОтвет	- Сообщение из пула ответов	 - 
// 
// Возвращаемое значение:
// АсинхронноеСбисСобытие  - 
//
&НаКлиенте
Функция СБИС_ОбработатьСобытиеОтвета(Сбис3СобытиеОтвет, ДопПараметры=Неопределено) Экспорт
	
	Если		Сбис3СобытиеОтвет.type = "Message" Тогда	//parse_Message
		Сбис3СобытиеОтвет.data	= СБИС_РазобратьОтвет(Сбис3СобытиеОтвет.data);
	ИначеЕсли	Сбис3СобытиеОтвет.type = "Event" Тогда	//parse_Event
		Сбис3СобытиеОтвет.data	= СБИС_РазобратьОтвет(Сбис3СобытиеОтвет.data);
		СбисEventName			= Сбис3СобытиеОтвет.data.eventName;
		
		Сбис3СобытиеОтвет.Вставить("queryID", СбисEventName);
		
		РезультатСобытия	= Неопределено;
		ОшибкаОбработки		= Ложь;
		//костылим имя эвента при чтении ответа.
		Если		СбисEventName = "extsdk2.async.error" Тогда
			Сбис3СобытиеОтвет = Новый Структура("type,queryID,data","Error", Сбис3СобытиеОтвет.data.data.QueryId, Сбис3СобытиеОтвет.data.data);
			Если Сбис3СобытиеОтвет.data.Свойство("Error") Тогда
				Сбис3СобытиеОтвет.data = Сбис3СобытиеОтвет.data.Error;
			КонецЕсли;
		ИначеЕсли	СбисEventName = "extsdk2.async.complete" Тогда
			Сбис3СобытиеОтвет = Новый Структура("type,queryID,data","Message",Сбис3СобытиеОтвет.data.data.QueryId, Сбис3СобытиеОтвет.data.data);				 
			Если Сбис3СобытиеОтвет.data.Свойство("Result") Тогда
				Сбис3СобытиеОтвет.data = Сбис3СобытиеОтвет.data.Result;
			КонецЕсли;
		Иначе
			//Обычное событие
		КонецЕсли;
	ИначеЕсли	Сбис3СобытиеОтвет.type = "Error" Тогда	//parse_Error
		Если Сбис3СобытиеОтвет.queryID = "ReadAllXml" Тогда//ошибка сериализатора
			Сбис3СобытиеОтвет.type	= "CriticalError";//Переставим тип, чтобы позвать подписочное событие
			Сбис3СобытиеОтвет.data	= МодульОбъектаКлиент().НовыйСбисИсключение(, "ExtSDK2.ReadAllXml2", 700,"Возникла критическая ошибка при чтении ответа." , Сбис3СобытиеОтвет.data);
		Иначе	
			Сбис3СобытиеОтвет.data = СБИС_РазобратьОтвет(Сбис3СобытиеОтвет.data);
			Если ТипЗнч(Сбис3СобытиеОтвет.data) = Тип("Строка") Тогда
				//Отвалился плагин. Останавливаем обмен
				Если	Найти(Сбис3СобытиеОтвет.data, "disconnect")
					Или	Сбис3СобытиеОтвет.data = "Not connected"
					Или	Сбис3СобытиеОтвет.data = "Server not found" Тогда
					Сбис3СобытиеОтвет.data = МодульОбъектаКлиент().НовыйСбисИсключение(
						756,	"МодульОбъектаКлиент.СБИСПлагин_ЧтениеОтветовИВызовСобытий",,
						"Подключение недоступно", "Работа СБИС плагина была остановлена. Перезапустите СБИС Плагин для дальнейшей работы.");
					Сбис3СобытиеОтвет.queryID	= "SbisPluginClientCOM.Disconnected";
					Сбис3СобытиеОтвет.type		= "Event";//Переставим тип, чтобы позвать подписочное событие
				ИначеЕсли Сбис3СобытиеОтвет.data = "Передан недействительный токен" Тогда
					Сбис3СобытиеОтвет.data = МодульОбъектаКлиент().НовыйСбисИсключение(
						411, "МодульОбъектаКлиент.СБИСПлагин_ЧтениеОтветовИВызовСобытий",, 
						"Для выполнения этой операции необходимо авторизоваться в СБИС Плагин", "Работа пользователя была завершена. Требуется повторная авторизация.");
					Сбис3СобытиеОтвет.queryID	= "UnValidToken";
					Сбис3СобытиеОтвет.type		= "CriticalError";//Переставим тип, чтобы позвать подписочное событие
				Иначе
					//Это обычное исключение
					Сбис3СобытиеОтвет.data = МодульОбъектаКлиент().НовыйСбисИсключение(Сбис3СобытиеОтвет.data, "МодульОбъектаКлиент.СБИСПлагин_ЧтениеОтветовИВызовСобытий");
				КонецЕсли;
			ИначеЕсли	Сбис3СобытиеОтвет.data.Свойство("detail")
					И	Сбис3СобытиеОтвет.data.detail = "#ASYNC" Тогда
				Сбис3СобытиеОтвет.type = "Async";	
			Иначе
				//Обычная ошибка
			КонецЕсли;
		КонецЕсли;
	Иначе
		МодульОбъектаКлиент().ВызватьСбисИсключение(773, "ExtSDK2.СБИС_ОбработатьОтвет",,,"Не поддерживаемый формат ответа!");
	КонецЕсли;
	Возврат Сбис3СобытиеОтвет;
	
КонецФункции
	
// Функция - генерирует ид запроса для вызова
//
// Параметры:
//  Кэш	 - ЛокальныйКэш	 - 
// 
// Возвращаемое значение:
// Строка  - Ид запроса команды
//
&НаКлиенте
Функция СБИС_ИдЗапросаВызова(Кэш) Экспорт
	
	Возврат Строка(Кэш.СБИС.ДанныеИнтеграции.Объекты.Плагин.GenerateQueryID());
	
КонецФункции

&НаКлиенте
Функция СБИС_РазобратьОтвет(ДанныеИзПулаОтвета) Экспорт
	
	Node = Новый ЧтениеXML();
	Node.УстановитьСтроку(ДанныеИзПулаОтвета);
	Если Не Node.Прочитать() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Результат = XmlSerializer_DecodeNode(Node, Новый Структура("Тип,Путь",Node.Имя,"Ответ"));
	Исключение
		МодульОбъектаКлиент().ВызватьСбисИсключение(, МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".СБИС_РазобратьОтвет", 773,,ИнформацияОбОшибке().Описание, Новый Структура("message", ДанныеИзПулаОтвета));
	КонецПопытки;
	Node.Закрыть();
	Node = Неопределено;
	Возврат Результат; 
	
КонецФункции

//Делает вызов extSDK в плагине
&НаКлиенте
Функция СБИС_ОтправитьКомандуБезОбработки(Кэш, ПараметрыСБИС3Команды, ДопПараметры, Отказ) Экспорт
	Перем Sbi3Module_ID, Call_method, Call_param, Connection_ID, Acc_ID, ПараметрПроверка;
	
	//Если IDConnection не указан, то модуль вызывается напрямую
	Если Не Кэш.СБИС.ДанныеИнтеграции.Свойство("Объекты", ПараметрПроверка) Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(,Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ОтправитьКомандуБезОбработки", 700,,"Не подключена подсистема взаимодействия со СБИС плагин");
	ИначеЕсли ПараметрыСБИС3Команды.Модуль = "ExtSdk" Тогда
		Sbi3Module_ID = ПараметрПроверка[ПараметрыСБИС3Команды.Модуль];
		Call_Ext = Ложь;
		Если Не ПараметрПроверка.Свойство("ExtSdk1", Connection_ID) Тогда
			Connection_ID = "";
		ИначеЕсли ЗначениеЗаполнено(Connection_ID) Тогда
			Call_Ext = Истина;
		КонецЕсли;
		Если Call_Ext Тогда
			Call_method	= "callMethod";
			Call_param = Новый Структура;
			Call_param.Вставить("idConnection",	Connection_ID);
			Call_param.Вставить("method",		ПараметрыСБИС3Команды.Метод);
			Call_param.Вставить("param",		ПараметрыСБИС3Команды.Параметры);
		Иначе
			Call_method	= ПараметрыСБИС3Команды.Метод;
			Call_param	= Новый Структура("param", ПараметрыСБИС3Команды.Параметры);
		КонецЕсли;
	Иначе
		Call_param = ПараметрыСБИС3Команды.Параметры;
		Call_method= ПараметрыСБИС3Команды.Метод;
		Если Не ПараметрПроверка.Свойство(ПараметрыСБИС3Команды.Модуль, Sbi3Module_ID) Тогда
			Sbi3Module_ID = Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СБИСПлагин_GetModule(Кэш, ПараметрыСБИС3Команды.Модуль, Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.СбисИсключение(Sbi3Module_ID, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ВыполнитьМетод");
			КонецЕсли;
		КонецЕсли;
		ПараметрыСБИС3Команды.Свойство("Аккаунт", Acc_ID);
	КонецЕсли;
	
	Call_param	= Кэш.РаботаСJson.ПреобразоватьЗначениеВJSON(Call_param, Новый Структура("Режим", ПараметрыСБИС3Команды.Модуль));
	ПараметрыСБИС3Команды.ВремяВызова = ТекущаяДата();
	
	Если ПараметрыСБИС3Команды.Свойство("Контракт") И ЗначениеЗаполнено(ПараметрыСБИС3Команды.Контракт) Тогда
		MethodName = ПараметрыСБИС3Команды.Контракт + "." + Call_method;
	Иначе
		MethodName = ПараметрыСБИС3Команды.Модуль + "." + Call_method;
	КонецЕсли;
		
	Попытка
		Если	ДопПараметры.Свойство("БезАвторизации")
			И	ДопПараметры.БезАвторизации Тогда
			Хост = Кэш.СБИС.ПараметрыИнтеграции.ПредставлениеСервера;
			Кэш.СБИС.ДанныеИнтеграции.Объекты.Плагин.CallMethodWithoutAuth(ПараметрыСБИС3Команды.Идентификатор, Sbi3Module_ID, MethodName, Call_param, Хост);
		Иначе
			Кэш.СБИС.ДанныеИнтеграции.Объекты.Плагин.CallMethod(ПараметрыСБИС3Команды.Идентификатор, Sbi3Module_ID, MethodName, Call_param, Acc_ID);
		КонецЕсли;
		РезультатВызова = ПараметрыСБИС3Команды.Идентификатор;
	Исключение
		Отказ = Истина;
		РезультатВызова = Кэш.ОбщиеФункции.СбисИсключение(ОписаниеОшибки(), ПараметрыСБИС3Команды.Модуль + "." + Call_method, 700, Call_method,, "Ошибка вызова метода плагина " + Call_method + ". Детально: " + ОписаниеОшибки());
	КонецПопытки;
	Если	ДопПараметры.Свойство("ОчиститьПараметры")
		И	ДопПараметры.ОчиститьПараметры Тогда
		ПараметрыСБИС3Команды.Параметры=Неопределено;
	КонецЕсли;	

	Возврат РезультатВызова;
	
КонецФункции

#Область include_core2_vo2_СпособыОбмена_ExtSDK_2_Прочее

&НаКлиенте
Функция XmlSerializer_DecodeNode(Node, Parent)
	ThisElement = Новый Структура("Тип,Путь", Node.Имя, Parent.Путь);
	Если		ThisElement.Тип = "array" Тогда//decode_array
		Результат = Новый Массив;
		СбисИндекс = 0;
		Пока XmlSerializer_ReadSubNode(Node, ThisElement) Цикл
			ThisElement.Путь = Parent.Путь + "[" + СбисИндекс + "]";
			Результат.Добавить(XmlSerializer_DecodeNode(Node, ThisElement));
			СбисИндекс = СбисИндекс + 1;
		КонецЦикла;
	ИначеЕсли	ThisElement.Тип = "object" Тогда//decode_object
		Результат = Новый Структура;
		Пока XmlSerializer_ReadSubNode(Node, ThisElement) Цикл
			Node_key = Node.ПолучитьАтрибут("name");
			Если Node_key = Неопределено Тогда
				ВызватьИсключение("Неверный формат ответа по пути " + Parent.Путь + ": отсутствует атрибут ""name"" с описанием ключа узла.");
			КонецЕсли;
			ThisElement.Путь = Parent.Путь + "." + Node_key;
			РезультатСериализации = XmlSerializer_DecodeNode(Node, ThisElement);
			Попытка
				Результат.Вставить(Node_key, РезультатСериализации);
			Исключение
				//Возможно, когда-нибудь, в следующей жизни будет нормальный овтет, который  мы сможем разобрать всегда.
				//Пропускаем некорректные ключи
				//ВызватьИсключение("Неверный формат ответа по пути " + Parent.Путь + ": некорректное значение " + Node_key + " в ключе ""name"".");
			КонецПопытки;
		КонецЦикла;
	Иначе //Простые типы (значения узлов)
		XmlSerializer_ReadSubNode(Node, ThisElement);
		Если		ThisElement.Тип = "str" Тогда//decode_str
			Результат = Node.Значение;
			Если	Сред(Результат,3,1) = "."
				И	Сред(Результат,6,1) = "." Тогда
				//Переопределим значение как дату, если это действительно она
				Если		СтрДлина(Результат) = 10 Тогда
					Попытка
						Результат = Дата(Сред(Результат,7,4), Сред(Результат,4,2), Лев(Результат, 2));
					Исключение
						//В случае исключения, ничего не делаем. Это не дата, значение не меняется
					КонецПопытки;
				ИначеЕсли	СтрДлина(Результат) = 19 Тогда 
					Попытка
						Результат = Дата(Сред(Результат,7,4), Сред(Результат,4,2), Лев(Результат, 2), Сред(Результат,12, 2), Сред(Результат,15, 2), Сред(Результат,18, 2))
					Исключение
						//В случае исключения, ничего не делаем. Это не дата, значение не меняется
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли	ThisElement.Тип = "null" Тогда//decode_null
			Результат = Неопределено;
		ИначеЕсли	ThisElement.Тип = "bool" Тогда//decode_bool
			Попытка
				Результат = Булево(Node.Значение);
			Исключение
				Попытка
					Результат = Булево(Число(Node.Значение));
				Исключение
					ВызватьИсключение("Неверный формат ответа по пути " + Parent.Путь + ": ошибка преобразования к типу булево " + Node.Значение + "!");
				КонецПопытки;
			КонецПопытки;
		ИначеЕсли	ThisElement.Тип = "num"
				Или	ThisElement.Тип = "number" Тогда//decode_num
			Попытка
				Результат = Число(Node.Значение);
			Исключение
				ВызватьИсключение("Неверный формат ответа по пути " + Parent.Путь + ": ошибка преобразования к типу число " + Node.Значение + "!");
			КонецПопытки;
		Иначе
			ВызватьИсключение("Неверный формат ответа по пути " + Parent.Путь + ": неизвестный тип ответа " + ThisElement.Тип + "!");
		КонецЕсли;
		Если Не Node.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			//Если узел сразу закрывает значение, то не делаем ReadNext
			XmlSerializer_ReadSubNode(Node, ThisElement);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция XmlSerializer_ReadSubNode(Node, Parent)
	Попытка
		Результат = Node.Прочитать();
	Исключение
		ВызватьИсключение("Ошибка чтения узла по пути " + Parent.Путь + ": " + ОписаниеОшибки());
	КонецПопытки; 
	
	Если Результат Тогда
		Если	Node.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если Node.Имя = Parent.Тип Тогда//Закрывается родитель, закончилась выборка для родительского элемента
				Возврат Ложь;
			Иначе
				ВызватьИсключение("Неверный формат ответа по пути " + Parent.Путь + ": узел " + Node.Имя + " не закывает родительский " + Parent.Тип + "!");
			КонецЕсли;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция НовыйКомандаСБИСПлагин(Кэш, АсинхроннаяСБИСКоманда, ДопПараметры) Экспорт
	Перем СбисАккаунт;

	Результат = Новый Структура("Метод,	Параметры, Модуль, ВремяВызова, Идентификатор, Аккаунт, Контракт");
	ЗаполнитьЗначенияСвойств(Результат, АсинхроннаяСБИСКоманда);
	ЗаполнитьЗначенияСвойств(Результат, ДопПараметры);
	
	Результат.Параметры	= АсинхроннаяСБИСКоманда.АргументВызова;
	Если Результат.Модуль = Неопределено Тогда
		Результат.Модуль	= МодульОбъектаКлиент().ПолучитьЗначениеПараметраСБИС("ИнтеграцияИмя");
	КонецЕсли;
	Если Результат.Аккаунт = Неопределено Тогда
		Результат.Аккаунт	= СбисИдАккаунта(Кэш);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
