
&НаКлиенте
Перем ЛокальныйКэш Экспорт;

#Область include_local_ПолучитьМодульОбъекта

&НаСервере
Функция МодульОбъектаСервер()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция МодульОбъектаСерверБезКонтекста()
	Возврат Новый (Тип("ВнешняяОбработкаОбъект.СБИС"));
КонецФункции

&НаКлиенте
Функция МодульОбъектаКлиент() Экспорт
	Возврат ВладелецФормы.Кэш.СБИС.МодульОбъектаКлиент;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Сопоставление_Номенклатура_DBF

&НаКлиенте
Функция УстановитьПараметрыМодуля(ПараметрыУстановки=Неопределено, Кэш) Экспорт
	Перем СбисКаталогСопоставления;

	ЛокальныйКэш = Кэш;
	
	Если		ПараметрыУстановки = Неопределено
		Или Не	ПараметрыУстановки.Свойство("Каталог", СбисКаталогСопоставления)
		Или	Не	ЗначениеЗаполнено(СбисКаталогСопоставления) Тогда
		СбисКаталогСопоставления = МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("КаталогПоУмолчанию_Сервер") + "НоменклатураПоставщика";
	КонецЕсли;
	СбисКаталогСопоставления	= Кэш.ОбщиеФункции.СбисФорматКаталога(СбисКаталогСопоставления, Кэш.ПараметрыСистемы.Сервер);
	ПараметрыУстановкиИсходящие = МодульОбъектаКлиент().СформироватьПараметрыУстановкиДБФ(Новый Структура("Тип, Каталог", "СопоставлениеНоменклатуры", СбисКаталогСопоставления));
	
	СформироватьПодключениеДБФ(ПараметрыУстановкиИсходящие);
	ИниКонфигурация = Кэш.ФормаНастроек.Ини(Кэш, "Конфигурация");
	
	ТипСправочникаНоменклатура = Кэш.ОбщиеФункции.РассчитатьЗначение("Номенклатура", ИниКонфигурация);
	Если ТипСправочникаНоменклатура = Неопределено Тогда
		ТипСправочникаНоменклатура = "Номенклатура";
	Иначе
		ТипСправочникаНоменклатура = СокрЛП(Сред(ТипСправочникаНоменклатура, Найти(ТипСправочникаНоменклатура, ".") + 1));
	КонецЕсли;
	ТипСправочникаХарактеристики = Кэш.ОбщиеФункции.РассчитатьЗначение("ХарактеристикиНоменклатуры", ИниКонфигурация);
	Если ТипСправочникаХарактеристики = Неопределено Тогда
		ТипСправочникаХарактеристики = "ХарактеристикиНоменклатуры";
	Иначе
		ТипСправочникаХарактеристики = СокрЛП(Сред(ТипСправочникаХарактеристики, Найти(ТипСправочникаХарактеристики, ".") + 1));
	КонецЕсли;
	ТипСправочникаЕдиницы = Кэш.ОбщиеФункции.РассчитатьЗначение("ЕдиницыИзмерения", ИниКонфигурация);
	Если ТипСправочникаЕдиницы = Неопределено Тогда
		ТипСправочникаЕдиницы = "КлассификаторЕдиницИзмерения";
	Иначе
		ТипСправочникаЕдиницы = СокрЛП(Сред(ТипСправочникаЕдиницы, Найти(ТипСправочникаЕдиницы, ".") + 1));
	КонецЕсли;
	//Для XBase
	ИспользоватьXBaseДляКонвертацииDBF = Кэш.ОбщиеФункции.РассчитатьЗначение("ИспользоватьXBaseДляКонвертацииDBF", ИниКонфигурация) = Истина;
	ПараметрыСоединения.Вставить("ИспользоватьXBaseДляКонвертацииDBF", ИспользоватьXBaseДляКонвертацииDBF);
	
	ПараметрыСоединений = Новый Структура("Путь");
	ПараметрыСоединений.Вставить("Файлы",								Новый Соответствие);
	ПараметрыСоединений.Вставить("Каталог",								ПараметрыУстановкиИсходящие.Путь);
	ПараметрыСоединений.Вставить("Тип",									ПараметрыУстановкиИсходящие.Тип);
	ПараметрыСоединений.Файлы.Вставить("НоменклатураСБИС",		"Nom_SBIS.dbf");
	ПараметрыСоединений.Файлы.Вставить("Номенклатура1С",		"Nom_1С.dbf");
	ПараметрыСоединений.Файлы.Вставить("СтароеСопоставление",	"NOMPOST.dbf");
	ПараметрыСоединений.Файлы.Вставить("Единицы",				"Nom_UNIT.dbf");
	
	ПараметрыСоединения.Вставить("ПараметрыСоединений", 				ПараметрыСоединений);
	ПараметрыСоединения.Вставить("НовоеСопоставление",					МодульОбъектаКлиент().ПолучитьЗначениеФичи("РасширенныйФункционалСопоставленияНоменклатуры") = Истина);
	ПараметрыСоединения.Вставить("Типы", 								Новый Структура);
	ПараметрыСоединения.Вставить("ПереключениеДляСтарогоСопоставления",	Новый Соответствие);
	ПараметрыСоединения.Типы.Вставить("Номенклатура",				ТипСправочникаНоменклатура);
	ПараметрыСоединения.Типы.Вставить("ХарактеристикиНоменклатуры",	ТипСправочникаХарактеристики);
	ПараметрыСоединения.Типы.Вставить("Единицы",					ТипСправочникаЕдиницы);
	
КонецФункции

#Область include_core2_vo2_Сопоставление_Номенклатура_DBF_ВнешнийВызов

#Область include_core2_vo2_Сопоставление_Номенклатура_DBF_ВнешнийВызов_Актуальные

// ContractorNomenclatureCollation.MassUpdate/2
//  - метод для записи / обновления сопоставлений. Во внешней обработке вызывается при загрузке документа после ручного или автоматического указания сопоставлений на форме входящего документа и форме редактирования сопоставлений.
//
// Параметры:
//  ПараметрыОбновитьВходящие	 - Структура
//		Контрагент	- Структура с полями СвФл, либо СвЮл
//		Номенклатура- Структура
//			Обновить	- Массив структур с полями Номенклатура, Единица, Характеристика
//			Удалить		- Массив структура с полями для удаления по фильтру
//  ДопПараметры							 - Структура
//
&НаКлиенте
Процедура НоменклатураПоставщика_МассовоеОбновление(ПараметрыОбновитьВходящие, ДопПараметры) Экспорт
	Перем НоменклатураНазвание, НоменклатураСсылка;
	
	Попытка
		ПараметрыЗаписиСервер = Новый Структура;
		ПараметрыЗаписиСервер.Вставить("Номенклатура",	ПараметрыОбновитьВходящие.Номенклатура);
		ПараметрыЗаписиСервер.Вставить("Ключ",			КлючКонтрагентаСопоставления(ПараметрыОбновитьВходящие.Контрагент));		
		НоменклатураПоставщика_МассовоеОбновлениеСервер(ПараметрыЗаписиСервер);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.НоменклатураПоставщика_МассовоеОбновление");
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция НоменклатураПоставщика_МассовоеОбновлениеСервер(ПараметрыОбновитьВходящие)
	
	СоединениеСДБФ	= ПолучитьСоединениеDBF(Новый Структура("Ключ", ПараметрыОбновитьВходящие.Ключ));
	НаборЗаписейДБФ	= НовыйНаборЗаписейДБФ(СоединениеСДБФ);
	
	//Номенклатура и характеристика
	Для Каждого СтрНоменклатураПоставщика Из ПараметрыОбновитьВходящие.Номенклатура Цикл
		
		НовыйНаборЗаписейДБФ_СформироватьНабор(НаборЗаписейДБФ, СтрНоменклатураПоставщика);
		
	КонецЦикла;
	
	НаборЗаписейДБФ_Записать(НаборЗаписейДБФ);
	
КонецФункции	

// ContractorNomenclatureCollation.MassFind/2
//  - метод для записи / обновления сопоставлений. Во внешней обработке вызывается при загрузке документа после ручного или автоматического указания сопоставлений на форме входящего документа и форме редактирования сопоставлений.
//
// Параметры:
//  ПараметрыОбновитьВходящие	 - Структура
//		Контрагент	- Структура с полями СвФл, либо СвЮл
//		Номенклатура- Структура
//			Найти		- Массив структур с полями Номенклатура, Единица, Характеристика
//  ДопПараметры							 - Структура
//
&НаКлиенте
Функция НоменклатураПоставщика_МассовыйПоиск(ПараметрыОбновитьВходящие, ДопПараметры) Экспорт
	
	Перем НоменклатураНазвание, НоменклатураСсылка;
	
	Попытка
		ПараметрыЗаписиСервер = Новый Структура;
		ПараметрыЗаписиСервер.Вставить("Ключ", КлючКонтрагентаСопоставления(ПараметрыОбновитьВходящие.Контрагент));
		Если ПараметрыОбновитьВходящие.Свойство("ПоискПо1С") Тогда
			ПараметрыЗаписиСервер.Вставить("ПоискПо1С", ПараметрыОбновитьВходящие.ПоискПо1С);
		КонецЕсли;
		НоменклатураПоставщика_ОбогатитьЗаписиСервер(ПараметрыОбновитьВходящие.Номенклатура, ПараметрыЗаписиСервер);
		Возврат ПараметрыОбновитьВходящие.Номенклатура;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.НоменклатураПоставщика_МассовоеОбновление");
	КонецПопытки;
	
КонецФункции

// ContractorNomenclatureCollation.MassFind/2
//  - метод для записи / обновления сопоставлений. Во внешней обработке вызывается при загрузке документа после ручного или автоматического указания сопоставлений на форме входящего документа и форме редактирования сопоставлений.
//
// Параметры:
//  ПараметрыОбновитьВходящие	 - Структура
//		Контрагент	- Структура с полями СвФл, либо СвЮл
//		Номенклатура- Структура
//			Найти		- Массив структур с полями Номенклатура, Единица, Характеристика
//  ДопПараметры							 - Структура
//
&НаКлиенте
Функция НоменклатураПоставщика_Список(ПараметрыОбновитьВходящие, ДопПараметры) Экспорт
	
	Перем НоменклатураНазвание, НоменклатураСсылка;
	
	Попытка
		ПараметрыСпискаСервер = Новый Структура;
		ПараметрыСпискаСервер.Вставить("Ключ",		КлючКонтрагентаСопоставления(ПараметрыОбновитьВходящие.Контрагент));		
		ПараметрыСпискаСервер.Вставить("Навигация", ПараметрыОбновитьВходящие.Навигация);		
		
		Возврат НоменклатураПоставщика_СписокСервер(ПараметрыСпискаСервер, Новый Структура);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.НоменклатураПоставщика_МассовоеОбновление");
	КонецПопытки;
	
КонецФункции

&НаСервере
//
// Параметры:
//  ПараметрыСписка				 - Структра
//		Навигация	- Структура	- 
//			Размер			- Число - Размрность списка
//			Страница(Н)		- Число - Позиция для постраничной навигации
//			Идентификатор(Н)- Строка- Значение поля ID, от которого идет навигация
//  ПараметрыОбновитьВходящие	 - 	 - 
//
Функция	НоменклатураПоставщика_СписокСервер(ПараметрыСписка, ПараметрыОбновитьВходящие)
	
	СоединениеСДБФ	= ПолучитьСоединениеDBF(Новый Структура("Ключ", ПараметрыСписка.Ключ));
	СоединениеБД	= МодульОбъектаСервер().РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СоединениеСДБФ);

	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы");
	
	НомерСтраницыНавигации	= Число(ПараметрыСписка.Навигация.Страница);
	РазмерСтраницыНавигации	= Число(ПараметрыСписка.Навигация.РазмерСтраницы);
	Попытка
		ШаблонЗапроса = "Select {top} NOMSB_ID, NOMSB_NM from {base_sbis} {where} ORDER BY NOMSB_NM";
		Если ПараметрыСписка.Свойство("ИдИмя") Тогда
			ЧислоПропустить	= 0;
			РазмерВыборки	= РазмерСтраницыНавигации;
			ШаблонЗапроса	= СтрЗаменить(ШаблонЗапроса, "{where}", "where {base_sbis}.NOMSB_NM > '" + ПараметрыСписка.ИдИмя + "'");
		Иначе
			Если НомерСтраницыНавигации Тогда
				ЧислоПропустить	= Число(ПараметрыСписка.Навигация.РазмерСтраницы) * (НомерСтраницыНавигации - 1);
			Иначе
				ЧислоПропустить = 0;
			КонецЕсли;
			РазмерВыборки	= ЧислоПропустить + ПараметрыСписка.Навигация.РазмерСтраницы;
			ШаблонЗапроса	= СтрЗаменить(ШаблонЗапроса, "{where}", "");
		КонецЕсли;	
	Исключение
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнформацияОбОшибке(), "СопоставлениеНоменклатуры_ДБФ.НоменклатураПоставщика_СписокСервер", 760, "Неверные параметры фильтра");
	КонецПопытки;
	РазмерВыборки = РазмерВыборки + 1;
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "{base_sbis}",	ОписаниеФайлаНоменклатураСБИС.ИмяБД);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "{top}",		"top " + Формат(РазмерВыборки, "ЧДЦ=0; ЧГ=0"));
		
	РезультатСписка = Новый Структура("Навигация, Список", Новый Структура("ЕстьЕще", Ложь), Новый Массив);
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
 	Recordset.CursorLocation = 3;
	Попытка
		Recordset.Open(ШаблонЗапроса, СоединениеБД, 2, 3);
	Исключение
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнформацияОбОшибке(), "СопоставлениеНоменклатуры_ДБФ.НоменклатураПоставщика_СписокСервер");
	КонецПопытки;
	
	СоответствиеПозицийИдСБИС	= Новый Соответствие;
	СоответствиеПозицийСсылка1С	= Новый Соответствие;
	СписокКлючей				= "";
	СчетчикПозиций				= 0;
	МодульКлассаСервер			= МодульОбъектаСервер();
	Пока Не Recordset.EOF Цикл
		СчетчикПозиций = СчетчикПозиций + 1;
		//Для постраничной навигации часть позиций должна быть пропущена
		Если СчетчикПозиций < ЧислоПропустить Тогда
			Recordset.MoveNext();
			Продолжить;
		ИначеЕсли СчетчикПозиций = РазмерВыборки Тогда
			РезультатСписка.Навигация.ЕстьЕще = Истина;
			Прервать;
		КонецЕсли;
		СтрокаСопоставленияСБИС = МодульКлассаСервер.НовыйСтрокаСопоставленияСБИССервер();
		ИдНоменклатурыСБИС	= ПолучитьЗначениеИзРекордСет(Recordset, "NOMSB_ID");
		ИмяНоменклатурыСБИС	= ПолучитьЗначениеИзРекордСет(Recordset, "NOMSB_NM");
		
		МодульКлассаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаСопоставленияСБИС, "ИдНоменклатуры",	ИдНоменклатурыСБИС);
		МодульКлассаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаСопоставленияСБИС, "ИмяНоменклатуры",	ИмяНоменклатурыСБИС);
		
		СоответствиеПозицийИдСБИС.Вставить(ИдНоменклатурыСБИС, СтрокаСопоставленияСБИС);
		РезультатСписка.Список.Добавить(СтрокаСопоставленияСБИС);
		
		СписокКлючей = СписокКлючей + "'" + ИдНоменклатурыСБИС + "',";
		
		Recordset.MoveNext();
	КонецЦикла;
	Recordset.Close();
	
	//Запрос номенклатуры и характеристики
	Если Не ЗначениеЗаполнено(СписокКлючей) Тогда
		
		Возврат РезультатСписка;
		
	КонецЕсли;
		
	СписокКлючей = "(" + Лев(СписокКлючей, СтрДлина(СписокКлючей)-1) + ")";
	
	ШаблонЗапроса = "Select * from {base_1C} where {base_1C}.KEY_ID IN {СписокКлючей} ORDER BY KEY_ID";
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "{base_1C}",			ОписаниеФайлаНоменклатура1С.ИмяБД);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "{СписокКлючей}",	СписокКлючей);
	
	Попытка
		Recordset.Open(ШаблонЗапроса, СоединениеБД, 2, 3);
	Исключение
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнформацияОбОшибке(), "СопоставлениеНоменклатуры_ДБФ.НоменклатураПоставщика_СписокСервер");
	КонецПопытки;
	
	Пока Не Recordset.EOF Цикл
		СтрокаСопоставленияСБИС = СоответствиеПозицийИдСБИС.Получить(ПолучитьЗначениеИзРекордСет(Recordset, "KEY_ID"));
		ОписаниеНоменклатуры1С	= МодульКлассаСервер.НовыйОписаниеНоменклатуры1ССервер();
		СсылкаНоменклатура1С	= ВосстановитьСсылкуИзСтрокиДБФ(RecordSet, "NOM1C_TY", "NOM1C_ID");
		//Заполнить класс строки 1С в соответствие по ссылке, туда мы заполним единицы.
		Если ЗначениеЗаполнено(СсылкаНоменклатура1С) Тогда
			УИДКлюч = СсылкаНоменклатура1С.УникальныйИдентификатор();
			СоответствиеПоПозиции1С	= СоответствиеПозицийСсылка1С.Получить(УИДКлюч);
			Если СоответствиеПоПозиции1С = Неопределено Тогда
				СоответствиеПоПозиции1С = Новый Массив;
				СоответствиеПозицийСсылка1С.Вставить(УИДКлюч, СоответствиеПоПозиции1С);
			КонецЕсли;
			СоответствиеПоПозиции1С.Добавить(ОписаниеНоменклатуры1С);
		КонецЕсли;
		
		МодульКлассаСервер.ОписаниеНоменклатуры1ССервер_Вставить(ОписаниеНоменклатуры1С, "GTIN",			ПолучитьЗначениеИзРекордСет(Recordset, "GTIN"));
		МодульКлассаСервер.ОписаниеНоменклатуры1ССервер_Вставить(ОписаниеНоменклатуры1С, "Характеристика",	ВосстановитьСсылкуИзСтрокиДБФ(RecordSet, "CHR1C_TY", "CHR1C_ID"));
		
		МодульКлассаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаСопоставленияСБИС, СсылкаНоменклатура1С, ОписаниеНоменклатуры1С);
		
		Recordset.MoveNext();
	КонецЦикла;
	
	Recordset.Close();
	//
	//Запрос единиц
	ШаблонЗапроса = "Select * from {base_unit} where {base_unit}.KEY_ID IN {СписокКлючей} ORDER BY KEY_ID";
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "{base_unit}",		ОписаниеФайлаЕдиниц.ИмяБД);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "{СписокКлючей}",	СписокКлючей);
	
	Попытка
		Recordset.Open(ШаблонЗапроса, СоединениеБД, 2, 3);
	Исключение
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнформацияОбОшибке(), "СопоставлениеНоменклатуры_ДБФ.НоменклатураПоставщика_СписокСервер");
	КонецПопытки;
	
	Пока Не Recordset.EOF Цикл
		
		СтрокаСопоставленияСБИС	= СоответствиеПозицийИдСБИС.Получить(ПолучитьЗначениеИзРекордСет(Recordset, "KEY_ID"));
		Если СтрокаСопоставленияСБИС = Неопределено Тогда
			
			//Не известно, почему по ключу нет строк записей. Пока скип.
			Recordset.MoveNext();
			Продолжить;
			
		КонецЕсли;
		
		СопоставлениеДляЕдиницыСервер = МодульКлассаСервер.НовыйСопоставлениеДляЕдиницыСервер();
		МодульКлассаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницыСервер, "Коэффициент",	ПолучитьЗначениеИзРекордСет(RecordSet, "RATIO"));
		МодульКлассаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницыСервер, "ОКЕИ",		ПолучитьЗначениеИзРекордСет(RecordSet, "OKEY"));
		МодульКлассаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницыСервер, "Название",	ПолучитьЗначениеИзРекордСет(RecordSet, "UNTSB_NM"));
		
		ЗначениеЕдиницы = ВосстановитьСсылкуИзСтрокиДБФ(RecordSet, "UNT1C_TY", "UNT1C_ID");
		
		Если ЗначениеЗаполнено(ЗначениеЕдиницы) Тогда
			
			МодульКлассаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницыСервер, "Ссылка",	ЗначениеЕдиницы);
			
		КонецЕсли;
		
		МодульКлассаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаСопоставленияСБИС, "Единица", СопоставлениеДляЕдиницыСервер);

		Recordset.MoveNext();
		
	КонецЦикла;
	
	Возврат РезультатСписка;
	
КонецФункции

&НаСервере
Процедура	НоменклатураПоставщика_ОбогатитьЗаписиСервер(НоменклатураОбогатить, ПараметрыОбновитьВходящие)
	Перем ПредыдущийИД1, ПредыдущийИД2, ПоискПо1С;
	
	МодульОбъектаСервер = МодульОбъектаСервер();

	СоединениеСДБФ	= ПолучитьСоединениеDBF(Новый Структура("Ключ", ПараметрыОбновитьВходящие.Ключ));
	СоединениеБД	= МодульОбъектаСервер.РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СоединениеСДБФ);
	
	ПараметрыОбновитьВходящие.Свойство("ПоискПо1С", ПоискПо1С);

	//Номенклатура и характеристика
	СписокКлючейСБИС	= "";
	СписокКлючей1С		= "";
	СоответствиеСтрокиОбогатить = Новый Соответствие;
	Для Каждого СтрНоменклатураПоставщика Из НоменклатураОбогатить Цикл
		
		СопоставленнаяНоменклатура1С	= МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрНоменклатураПоставщика, "Номенклатура1С");
		ЗаписьДБФ						= НовыйЗаписьДБФСБИС(СоединениеСДБФ, СтрНоменклатураПоставщика);//Поиск по данным СБИС
		КлючЗаписи						= ЗаписьДБФСБИС_КлючЗаписи(ЗаписьДБФ);//Получить ключ таблиц для поиска
		
		Если	ЗначениеЗаполнено(ПоискПо1С)
			И	ЗначениеЗаполнено(СопоставленнаяНоменклатура1С)	 Тогда
			
			Для Каждого КлючИЗначение Из СопоставленнаяНоменклатура1С Цикл
				
				КлючПоиска = Строка(КлючИЗначение.Ключ.УникальныйИдентификатор());
				СписокКлючей1С = СписокКлючей1С + "'" + КлючПоиска + "',";
				СоответствиеСтрокиОбогатить.Вставить(КлючПоиска, СтрНоменклатураПоставщика);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КлючЗаписи) Тогда
				
			СтрокиПоКлючу = СоответствиеСтрокиОбогатить.Получить(КлючЗаписи);
			Если СтрокиПоКлючу = Неопределено Тогда
				СписокКлючейСБИС	= СписокКлючейСБИС + "'" + КлючЗаписи + "',";
				СтрокиПоКлючу		= Новый Массив;
				СоответствиеСтрокиОбогатить.Вставить(КлючЗаписи, СтрокиПоКлючу);
			КонецЕсли;
			СтрокиПоКлючу.Добавить(СтрНоменклатураПоставщика);
			
		КонецЕсли;
		
		Если МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрНоменклатураПоставщика, "ТипКода") = "Артикул" Тогда
			//Возможно что после переконвертации артикула как ИД нет, значит добавить в поиск Наименование как ключ для доп. поиска.
			КлючЗаписи		= МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрНоменклатураПоставщика, "Наименование");
			КлючЗаписи		= СбисИдентификатор(Лев(СокрЛП(КлючЗаписи),240));
			СтрокиПоКлючу	= СоответствиеСтрокиОбогатить.Получить(КлючЗаписи);
			Если СтрокиПоКлючу = Неопределено Тогда
				СписокКлючейСБИС	= СписокКлючейСБИС + "'" + КлючЗаписи + "',";
				СтрокиПоКлючу		= Новый Массив;
				СоответствиеСтрокиОбогатить.Вставить(КлючЗаписи, СтрокиПоКлючу);
			КонецЕсли;
			СтрокиПоКлючу.Добавить(СтрНоменклатураПоставщика);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Обогатить по ключу СБИС
	Если ЗначениеЗаполнено(СписокКлючейСБИС) Тогда
		ОписаниеФайлБДЕдиницы		= СоединениеСДБФ.Файлы.Получить("Единицы");
		ОписаниеФайлБДНоменклатура	= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
		
		СписокКлючейСБИС = Лев(СписокКлючейСБИС, СтрДлина(СписокКлючейСБИС)-1);
		
		//Обогатить по данным СБИС
		ШаблонЗапроса = ОписаниеФайлБДНоменклатура.Шаблоны.МассовыйПоиск;	
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "{KEY_ID_LIST}",	СписокКлючейСБИС);
		
		ШаблонЗапросаЕдиниц = ОписаниеФайлБДЕдиницы.Шаблоны.МассовыйПоиск;
		ШаблонЗапросаЕдиниц = СтрЗаменить(ШаблонЗапросаЕдиниц, "{KEY_ID_LIST}",	СписокКлючейСБИС);
		
		RecordSet = Новый ComОбъект("ADODB.Recordset");
		Recordset.CursorLocation = 3;
		Recordset.Open(ШаблонЗапроса, СоединениеБД, 2, 3);
		
		RecordSet2 = Новый ComОбъект("ADODB.Recordset");
		RecordSet2.CursorLocation = 3;
		RecordSet2.Open(ШаблонЗапросаЕдиниц, СоединениеБД, 2, 3);
		RecordSetUnitEmpty = RecordSet2.EOF И RecordSet2.BOF;
		
		Пока Не Recordset.EOF Цикл
			ТекущийИд1 = ПолучитьЗначениеИзРекордСет(Recordset, "KEY_ID");
			Если Не ПредыдущийИД1 = ТекущийИд1 Тогда
				СтрокиЗаполнить	= СоответствиеСтрокиОбогатить.Получить(ТекущийИд1);
			КонецЕсли;
			
			ТекущийИд2 = ПолучитьЗначениеИзРекордСет(Recordset, "NOM1C_ID");
			Если		ЗначениеЗаполнено(ТекущийИд2)
				И	Не	ПредыдущийИД2 = ТекущийИд2 Тогда
				//Восстановить ссылки на номенклатуру 1С
				СсылкаНоменклатура		= ВосстановитьСсылкуИзСтрокиДБФ(RecordSet, "NOM1C_TY", "NOM1C_ID");
				СсылкаХарактеристика	= ВосстановитьСсылкуИзСтрокиДБФ(RecordSet, "CHR1C_TY", "CHR1C_ID");
				Если ЗначениеЗаполнено(СсылкаНоменклатура) Тогда
					Для Каждого СтрокаЗаполнить Из СтрокиЗаполнить Цикл
						
						СтрокаНоменклатураЗаполнить = МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрокаЗаполнить, СсылкаНоменклатура);
						
						Если СтрокаНоменклатураЗаполнить = Неопределено Тогда
							
							СтрокаНоменклатураЗаполнить = МодульОбъектаСервер.НовыйОписаниеНоменклатуры1ССервер();
							МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаЗаполнить, СсылкаНоменклатура, СтрокаНоменклатураЗаполнить);
							
						КонецЕсли;
						
						МодульОбъектаСервер.ОписаниеНоменклатуры1ССервер_Вставить(СтрокаНоменклатураЗаполнить, "GTIN", ПолучитьЗначениеИзРекордСет(RecordSet, "GTIN"));
						
						Если ЗначениеЗаполнено(СсылкаХарактеристика) Тогда
							
							//Строка номенклатуры 1С уже должна быть определена
							МодульОбъектаСервер.ОписаниеНоменклатуры1ССервер_Вставить(СтрокаНоменклатураЗаполнить, "Характеристика", СсылкаХарактеристика);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ПредыдущийИД1 = ТекущийИд1 Тогда
				ПредыдущийИД1	= ТекущийИд1;
				//Обработка единиц
				Если Не RecordSetUnitEmpty Тогда
					RecordSet2.Find("KEY_ID = '" + ТекущийИд1 + "'");
					Пока	Не	RecordSet2.EOF
						И		ПолучитьЗначениеИзРекордСет(RecordSet2, "KEY_ID") = ТекущийИд1 Цикл
						
						Для Каждого СтрокаЗаполнить Из СтрокиЗаполнить Цикл
							СопоставлениеДляЕдиницы	= МодульОбъектаСервер.НовыйСопоставлениеДляЕдиницыСервер();
							
							МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницы, "Коэффициент",	ПолучитьЗначениеИзРекордСет(RecordSet2, "RATIO"));
							МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницы, "ОКЕИ", 		ПолучитьЗначениеИзРекордСет(RecordSet2, "UNTSB_ID"));
							МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницы, "Название",		ПолучитьЗначениеИзРекордСет(RecordSet2, "UNTSB_NM"));
							
							МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницы, "Ссылка",		ВосстановитьСсылкуИзСтрокиДБФ(RecordSet2, "UNT1C_TY", "UNT1C_ID"));
							
							ДопПараметры = Новый Структура;
							ДопПараметры.Вставить("Номенклатура", СсылкаНоменклатура);
							
							МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаЗаполнить, "Единица", СопоставлениеДляЕдиницы, ДопПараметры);
						КонецЦикла;
						
						RecordSet2.MoveNext();
						
					КонецЦикла;
					RecordSet2.MoveFirst();
				КонецЕсли;
			КонецЕсли;
			
			Recordset.MoveNext();
		КонецЦикла;
		
		RecordSet2.Close();
		Recordset.Close();
		
	КонецЕсли;
	
	//Обогатить по данным СБИС
	Если ЗначениеЗаполнено(СписокКлючей1С) Тогда
		ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
		ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
		
		СписокКлючей1С = "(" + Лев(СписокКлючей1С, СтрДлина(СписокКлючей1С)-1) + ")";

		//ШаблонЗапроса = 
		////"SELECT {base_sbis}.ID, {base_sbis}.NAME, {base_1C}.NOM1C_ID
		//"SELECT *
		//|FROM {base_1C}
		//|	LEFT JOIN {base_sbis} ON {base_1C}.KEY_ID = {base_sbis}.ID
		//|		AND {base_1C}.NOM1C_ID IN {key_list}";
		////|ORDER BY {base_sbis}.ID";
		ШаблонЗапроса = 
		"SELECT KEY_ID, NOM1C_ID
		|FROM {base_1C}
		|WHERE 
		|	{base_1C}.NOM1C_ID IN {key_list}
		|ORDER BY NOM1C_ID";
		ШаблонЗапроса2 = 
		"SELECT NOMSB_ID, NOMSB_NM
		|FROM {base_sbis}
		|WHERE 
		|	{base_sbis}.KEY_ID = {key}";
		ШаблонЗапроса	= СтрЗаменить(ШаблонЗапроса,	"{base_1C}",	ОписаниеФайлаНоменклатура1С.ИмяБД);
		ШаблонЗапроса	= СтрЗаменить(ШаблонЗапроса,	"{key_list}",	СписокКлючей1С);
		ШаблонЗапроса2	= СтрЗаменить(ШаблонЗапроса2,	"{base_sbis}",	ОписаниеФайлаНоменклатураСБИС.ИмяБД);
		
		RecordSet = Новый ComОбъект("ADODB.Recordset");
	 	Recordset.CursorLocation = 3;
		RecordSet2 = Новый ComОбъект("ADODB.Recordset");
	 	Recordset2.CursorLocation = 3;
		
		Recordset.Open(ШаблонЗапроса, СоединениеБД, 2, 3);
		
		Пока Не Recordset.EOF Цикл
			
			ТекущийИд = ПолучитьЗначениеИзРекордСет(Recordset, "NOM1C_ID");
			Если ПредыдущийИД1 = ТекущийИд Тогда
				//Для строк берутся первые найденные значения
				RecordSet.MoveNext();
				Продолжить;
			КонецЕсли;
			КлючЗаписейДБФ	= ПолучитьЗначениеИзРекордСет(Recordset, "KEY_ID");
			ПредыдущийИД1	= ТекущийИд;
			
			Recordset2.Open(СтрЗаменить(ШаблонЗапроса2,	"{key}", "'" + КлючЗаписейДБФ + "'"), СоединениеБД, 2, 3);
			
			СтрокаЗаполнить = СоответствиеСтрокиОбогатить.Получить(ТекущийИд);
			МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаЗаполнить, "ИдНоменклатуры",	ПолучитьЗначениеИзРекордСет(RecordSet2, "NOMSB_ID"));
			МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаЗаполнить, "ИмяНоменклатуры",	ПолучитьЗначениеИзРекордСет(RecordSet2, "NOMSB_NM"));
			
			Recordset2.Close();
			Recordset.MoveNext();
			
		КонецЦикла;
		
		Recordset.Close();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура	НоменклатураПоставщика_МассовоОбновитьСервер(ПараметрыОбновитьВходящие)
	
	СоединениеСДБФ	= ПолучитьСоединениеDBF(Новый Структура("Ключ", ПараметрыОбновитьВходящие.Ключ));
	СоединениеБД	= МодульОбъектаСервер().РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СоединениеСДБФ);

	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;

	//Номенклатура и характеристика
	Для Каждого СтрНоменклатураПоставщика Из ПараметрыОбновитьВходящие.Обновить Цикл
		ТипНоменклатуры		= ТипЗнч(СтрНоменклатураПоставщика.Номенклатура.Ссылка);
		ПредставлениеТипа	= ПараметрыСоединения.СоответствиеТипов.Получить("Номенклатура_" + ТипНоменклатуры);
		Если ПредставлениеТипа = Неопределено Тогда
			Если Метаданные.НайтиПоТипу(ТипНоменклатуры) = Неопределено Тогда
				ПредставлениеТипа = ПараметрыСоединения.Типы.Номенклатура;
			Иначе
				ПредставлениеТипа = СтрНоменклатураПоставщика.Номенклатура.Ссылка.Метаданные().Имя;
			КонецЕсли;
			ПараметрыСоединения.СоответствиеТипов.Вставить("Номенклатура_" + ТипНоменклатуры, ПредставлениеТипа);
		КонецЕсли;
		СтруктураЗаписи = Новый Структура("ID, NAME, IDNOM, SPRNOM, IDCHAR, SPRCHAR, GTIN", "", "", "", "", "", "", "");
		СтруктураЗаписи.ID		= СтрНоменклатураПоставщика.Номенклатура.ИдСБИС;
		СтруктураЗаписи.NAME	= СтрНоменклатураПоставщика.Номенклатура.ИмяСБИС;
		СтруктураЗаписи.IDNOM	= Строка(СтрНоменклатураПоставщика.Номенклатура.Ссылка.УникальныйИдентификатор());
		СтруктураЗаписи.GTIN	= СтрНоменклатураПоставщика.Номенклатура.GTIN;
		СтруктураЗаписи.SPRNOM	= ПредставлениеТипа;
		
		Если Не СтрНоменклатураПоставщика.Характеристика.Ссылка = Неопределено Тогда
			ТипХарактеристики = ТипЗнч(СтрНоменклатураПоставщика.Характеристика.Ссылка);
			ПредставлениеТипа = ПараметрыСоединения.СоответствиеТипов.Получить("Характеристики_" + ТипХарактеристики);
			Если ПредставлениеТипа = Неопределено Тогда
				Если Метаданные.НайтиПоТипу(ТипХарактеристики) = Неопределено Тогда
					ПредставлениеТипа = ПараметрыСоединения.Типы.ХарактеристикиНоменклатуры;
				Иначе
					ПредставлениеТипа = СтрНоменклатураПоставщика.Характеристика.Ссылка.Метаданные().Имя;
				КонецЕсли;
				ПараметрыСоединения.СоответствиеТипов.Вставить("Характеристики_" + ТипНоменклатуры, ПредставлениеТипа);
			КонецЕсли;
			СтруктураЗаписи.IDCHAR	= Строка(стрНоменклатураПоставщика.Характеристика.УникальныйИдентификатор());
			СтруктураЗаписи.SPRCHAR	= ПредставлениеТипа;
		КонецЕсли;
		
		RecordSet.Open("Select * from NomPost where NomPost.ID ='" + СтрНоменклатураПоставщика.Номенклатура.ИдСБИС + "'", СоединениеБД, 2, 3);
		Если Recordset.EOF Тогда 
			СоединениеБД.Execute(
				"Insert into NomPost Values('" + СтруктураЗаписи.ID + "',
											|'" + СтруктураЗаписи.NAME + "',
											|'" + СтруктураЗаписи.IDNOM + "',
											|'" + СтруктураЗаписи.SPRNOM + "',
											|'" + СтруктураЗаписи.IDCHAR + "',
											|'" + СтруктураЗаписи.SPRCHAR + "',
											|'" + СтруктураЗаписи.GTIN + "')");
		Иначе
			Recordset.Fields("NAME").value		= СтруктураЗаписи.NAME;
			Recordset.Fields("IDNOM").value		= СтруктураЗаписи.IDNOM;
			Recordset.Fields("SPRNOM").value	= СтруктураЗаписи.SPRNOM;
			Recordset.Fields("IDCHAR").value	= СтруктураЗаписи.IDCHAR;
			Recordset.Fields("SPRCHAR").value	= СтруктураЗаписи.SPRCHAR;
			Recordset.Fields("GTIN").value		= СтруктураЗаписи.GTIN;
			RecordSet.Update();
		КонецЕсли;
		RecordSet.Close();
	КонецЦикла;
	//Единица
	Для Каждого СтрНоменклатураПоставщика Из ПараметрыОбновитьВходящие.Обновить Цикл
		Если	СтрНоменклатураПоставщика.Единица.Ссылка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТипЕдиницы = ТипЗнч(СтрНоменклатураПоставщика.Единица.Ссылка);
		ПредставлениеТипа = ПараметрыСоединения.СоответствиеТипов.Получить("Единицы_" + ТипЕдиницы);
		Если ПредставлениеТипа = Неопределено Тогда
			Если Метаданные.НайтиПоТипу(ТипЕдиницы) = Неопределено Тогда
				ПредставлениеТипа = ПараметрыСоединения.Типы.Единицы;
			Иначе
				ПредставлениеТипа = СтрНоменклатураПоставщика.Единица.Ссылка.Метаданные().Имя;
			КонецЕсли;
			ПараметрыСоединения.СоответствиеТипов.Вставить("Единицы_" + ТипЕдиницы, ПредставлениеТипа);
		КонецЕсли;
		Recordset.Open("Select * from NOMUNIT
						|Where NOMUNIT.ID_NMKEY ='"		+ СтрНоменклатураПоставщика.Номенклатура.ИдСБИС	+ "'
						|	And NOMUNIT.ID_POSTU = '"	+ СтрНоменклатураПоставщика.Единица.ИдСБИС		+ "'", СоединениеБД, 2, 3);
		Если Recordset.EOF Тогда 
			RecordSet.AddNew();
		    RecordSet.Fields("ID_NMKEY").value	= СтрНоменклатураПоставщика.Номенклатура.ИдСБИС;
		    RecordSet.Fields("ID_POSTU").value	= СтрНоменклатураПоставщика.Единица.ИдСБИС;
		КонецЕсли;
	    RecordSet.Fields("NM_POSTU").value	= СтрНоменклатураПоставщика.Единица.ИмяСБИС;
	    RecordSet.Fields("ID_TORGU").value	= Строка(СтрНоменклатураПоставщика.Единица.Ссылка.УникальныйИдентификатор());
	    RecordSet.Fields("SP_TORGU").value	= ПредставлениеТипа;
	    RecordSet.Fields("RATIO").value		= СтрНоменклатураПоставщика.Единица.Коэффициент;
		RecordSet.Update();
		Recordset.Close();
	КонецЦикла;
	
	//Удалить номенклатуру и единицы
	Для Каждого ИдНоменклатураПОставщика Из ПараметрыОбновитьВходящие.Удалить Цикл
			//RecordSet = Новый ComОбъект("ADODB.Recordset");
			//Recordset.CursorLocation = 3;
			//Recordset.Open("Select top 1 * from NomPost", СоединениеБД, 2, 3);
			
		Recordset.Open("Select * from NomPost where NOMUNIT.ID_NMKEY ='" + ИдНоменклатураПОставщика + "'", СоединениеБД, 2, 3);
		Recordset.MoveFirst();
		Пока Не Recordset.EOF() Цикл
			Recordset.Delete(); 
			Recordset.MoveNext();
		КонецЦикла;
		
		Recordset.Open("Select * from NomPost where NomPost.ID ='" + ИдНоменклатураПОставщика + "'", СоединениеБД, 2, 3);
		Если Recordset.EOF Тогда 
			Продолжить; 
		КонецЕсли;
		Recordset.Delete(); 
		Recordset.Close();
	КонецЦикла;
	
КонецПроцедуры	

// ContractorNomenclatureCollation.MassDelete/2
//  - метод для удаления сопоставлений.
//
// Параметры:
//  ПараметрыОбновитьВходящие	 - Структура
//		Контрагент	- Структура с полями СвФл, либо СвЮл
//		Номенклатура- Массив структур с полями для удаления по фильтру
//  ДопПараметры							 - Структура
//
&НаКлиенте
Процедура НоменклатураПоставщика_МассовоеУдаление(ПараметрыОбновитьВходящие, ДопПараметры) Экспорт
	Перем НоменклатураНазвание, НоменклатураСсылка;
	
	Попытка
		ПараметрыЗаписиСервер = Новый Структура;
		ПараметрыЗаписиСервер.Вставить("Номенклатура",	ПараметрыОбновитьВходящие.Номенклатура);
		ПараметрыЗаписиСервер.Вставить("Ключ",			КлючКонтрагентаСопоставления(ПараметрыОбновитьВходящие.Контрагент));		
		НоменклатураПоставщика_МассовоеУдалениеСервер(ПараметрыЗаписиСервер);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.НоменклатураПоставщика_МассовоеОбновление");
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция НоменклатураПоставщика_МассовоеУдалениеСервер(ПараметрыОбновитьВходящие)
	
	СоединениеСДБФ	= ПолучитьСоединениеDBF(Новый Структура("Ключ", ПараметрыОбновитьВходящие.Ключ));
	
	//Удалить номенклатуру и единицы
	Для Каждого СтрокаСопоставленияСБИСНоменклатуры Из ПараметрыОбновитьВходящие.Номенклатура Цикл
		
		ЗаписьДБФ = НовыйЗаписьДБФСБИС(СоединениеСДБФ, СтрокаСопоставленияСБИСНоменклатуры);
		ЗаписьДБФСБИС_Очистить(ЗаписьДБФ);
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Сопоставление_Номенклатура_DBF_ВнешнийВызов_Устаревшие

#Область include_core2_vo2_Сопоставление_Номенклатура_DBF_ВнешнийВызов_Устаревшие_Спилить

// Получает номенклатуру 1С по структуре контрагента и номенклатуры СБИС. Вызывает функцию поиска номенклатуры на сервере 
&НаКлиенте
Функция old_НайтиНоменклатуруПоставщикаПоТабличнойЧасти(стрКонтрагент, мТаблДок, КаталогНастроек, Ини) Экспорт
	Попытка
		ИНН = ?(стрКонтрагент.Свойство("СвЮЛ"), стрКонтрагент.СвЮЛ.ИНН, стрКонтрагент.СвФЛ.ИНН);
	Исключение
		Отказ = Истина;
		ВызватьИсключение("В документе не заполнен ИНН контрагента. Сопоставление номенклатуры невозможно.");
	КонецПопытки;
	СчетчикСтрок = 0;
	СтрокиПоиска = Новый Структура;
	Для Каждого СтрТабл Из мТаблДок Цикл
		СтрокаПоиска = Новый Структура;
		Если СтрТабл.Свойство("Название") Тогда
			СтрокаПоиска.Вставить("Название",		СтрТабл.Название);
		КонецЕсли;
		Если СтрТабл.Свойство("КодПокупателя") Тогда
			СтрокаПоиска.Вставить("КодПокупателя",	СтрТабл.КодПокупателя);
		КонецЕсли;
		Если СтрТабл.Свойство("Идентификатор") Тогда
			СтрокаПоиска.Вставить("Идентификатор",	СтрТабл.Идентификатор);
		КонецЕсли;
		Если СтрТабл.Свойство("ЕдИзмОрг") Тогда
			СтрокаПоиска.Вставить("ЕдИзмОрг",	СтрТабл.ЕдИзмОрг);
		КонецЕсли;
		Если СтрТабл.Свойство("Коэффициент") Тогда
			СтрокаПоиска.Вставить("Коэффициент",	СтрТабл.Коэффициент);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаПоиска) Тогда
			ВызватьИсключение("НайтиНоменклатуруПоставщикаПоТабличнойЧасти() Отсутствует название и идентификатор номенклатуры для поиска в строке №" + (СчетчикСтрок+1));
		КонецЕсли;
		СтрокиПоиска.Вставить("СтрТабл_"+Формат(СчетчикСтрок, "ЧН=0; ЧГ=0"),СтрокаПоиска);
		СчетчикСтрок = СчетчикСтрок + 1;
	КонецЦикла;
	Отказ = Ложь;
	Рез = НайтиНоменклатуруПоставщикаПоТабличнойЧастиНаСервере(стрКонтрагент, СтрокиПоиска, КаталогНастроек, Ини.Конфигурация, Отказ);
	Если Отказ Тогда
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("ТекстСсылка",	"Решение проблемы");
		ПараметрыСообщения.Вставить("Текст",		"Возникла проблема при работе с com-объектом ""ADODB.Connection"""+Символы.ПС+Рез);
		ПараметрыСообщения.Вставить("АдресСсылка",	"https://sbis.ru/help/integration/catalog/driver_not_found");

		ФормаПредупреждение = ЛокальныйКэш.ГлавноеОкно.сбисПолучитьФорму("ФормаПредупреждения",,,);
		ФормаПредупреждение.Показать(ЛокальныйКэш, ПараметрыСообщения);
		ВызватьИсключение("Проблема с драйвером ODBC");
	КонецЕсли;
	Возврат Рез;
КонецФункции

// Функция ищет номенклатуру поставщика по идентификатору.
// Если сопоставление заполнено, возвращает структуру с номенклатурой и характеристикой номенклатуры
&НаКлиенте
Функция old_НайтиНоменклатуруПоставщика(стрКонтрагент, стрНоменклатураПоставщика, КаталогНастроек, Ини) Экспорт
	Попытка
		ИНН = ?(стрКонтрагент.Свойство("СвЮЛ"), стрКонтрагент.СвЮЛ.ИНН, стрКонтрагент.СвФЛ.ИНН);
	Исключение
		Отказ = Истина;
		ВызватьИсключение("В документе не заполнен ИНН контрагента. Сопоставление номенклатуры невозможно.");
	КонецПопытки;
	Отказ = Ложь;
	Рез = НайтиНоменклатуруПоставщикаНаСервере(стрКонтрагент, стрНоменклатураПоставщика, КаталогНастроек, Ини.Конфигурация, Отказ);
	Если Отказ Тогда
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("ТекстСсылка",	"Решение проблемы");
		ПараметрыСообщения.Вставить("Текст",		"Возникла проблема при работе с com-объектом ""ADODB.Connection"""+Символы.ПС+Рез);
		ПараметрыСообщения.Вставить("АдресСсылка",	"https://sbis.ru/help/integration/catalog/driver_not_found");

		ФормаПредупреждение = ЛокальныйКэш.ГлавноеОкно.сбисПолучитьФорму("ФормаПредупреждения",,,);
		ФормаПредупреждение.Показать(ЛокальныйКэш, ПараметрыСообщения);
		ВызватьИсключение("Проблема с драйвером ODBC");
	КонецЕсли;
	Возврат Рез;
КонецФункции

// Процедура устанавливает/удаляет соответствие номенклатуры	
&НаКлиенте
Процедура old_УстановитьСоответствиеНоменклатуры(стрКонтрагент, стрНоменклатураПоставщика, КаталогНастроек, Ини) Экспорт
	
	УстановитьСоответствиеНоменклатурыНаСервере(стрКонтрагент, стрНоменклатураПоставщика, КаталогНастроек, Ини.Конфигурация);
	
КонецПроцедуры

// Процедура ищет идентификатор номенклатуры контрагента	
&НаКлиенте
Функция old_ПолучитьИдентификаторНоменклатурыПоставщика(стрКонтрагент, стрНоменклатура, КаталогНастроек, Ини) Экспорт
	
	Возврат сбисПолучитьРеквизитНоменклатурыПоставщикаНаСервере(стрКонтрагент, стрНоменклатура, "ID", КаталогНастроек, Ини.Конфигурация);
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Сопоставление_Номенклатура_DBF_ВнешнийВызов_Устаревшие_ЗаменаНаНовыеМеханизмы

// Получает номенклатуру 1С по структуре контрагента и номенклатуры СБИС. Вызывает функцию поиска номенклатуры на сервере 
&НаКлиенте
Функция НайтиНоменклатуруПоставщикаПоТабличнойЧасти(стрКонтрагент, мТаблДок, КаталогНастроек, Ини) Экспорт
	
	Если Не ПараметрыСоединения.НовоеСопоставление Тогда
		Возврат old_НайтиНоменклатуруПоставщикаПоТабличнойЧасти(стрКонтрагент, мТаблДок, КаталогНастроек, Ини);
	КонецЕсли;
	
	Попытка
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Возврат НайтиНоменклатуруПоставщикаПоТабличнойЧасти_СсылкаСервер(стрКонтрагент, мТаблДок);
		#Иначе
			Возврат НайтиНоменклатуруПоставщикаПоТабличнойЧасти_ЗначСервер(стрКонтрагент, мТаблДок);
		#КонецЕсли
			
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.НайтиНоменклатуруПоставщикаПоТабличнойЧасти");
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция НайтиНоменклатуруПоставщикаПоТабличнойЧасти_ЗначСервер(Знач стрКонтрагент,  Знач мТаблДок) Экспорт
	
	Возврат НайтиНоменклатуруПоставщикаПоТабличнойЧасти_СсылкаСервер(стрКонтрагент, мТаблДок);
	
КонецФункции

&НаСервере
Функция НайтиНоменклатуруПоставщикаПоТабличнойЧасти_СсылкаСервер(стрКонтрагент,  мТаблДок) Экспорт
	
	МодульОбъектаСервер = МодульОбъектаСервер();
	
	ПараметрыМассовогоПоиска = Новый Структура;
	ПараметрыМассовогоПоиска.Вставить("Ключ",		КлючКонтрагентаСопоставления(стрКонтрагент));
	ПараметрыМассовогоПоиска.Вставить("ПоискПо1С",	Ложь);
	//Создать объекты сопоставления для поиска
	НоменклатураНайти = Новый Массив;
	Для Каждого СтрНоменклатураПоставщика Из мТаблДок Цикл
		НоменклатураНайти.Добавить(МодульОбъектаСервер.НовыйСтрокаСопоставленияСБИССервер(СтрНоменклатураПоставщика));
	КонецЦикла;
	
	Попытка
		НоменклатураПоставщика_ОбогатитьЗаписиСервер(НоменклатураНайти, ПараметрыМассовогоПоиска);
	Исключение
		МодульОбъектаСервер.ВызватьСбисИсключениеСервер(ИнформацияОбОшибке(), "СопоставлениеНоменклатуры_ДБФ.НайтиНоменклатуруПоставщикаПоТабличнойЧасти_Сервер");
	КонецПопытки;
	
	СчетчикСтрок = 0;
	Результат = Новый Структура;
	Для Каждого СтрокаРезультат Из НоменклатураНайти Цикл
		
		НоменклатураПоставщика	= Новый Структура("Характеристика, Номенклатура");
		Номенклатура1С			= МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрокаРезультат, "Номенклатура1С");
		Для Каждого КлючИзначение Из Номенклатура1С Цикл
			
			НоменклатураПоставщика.Номенклатура = КлючИзначение.Ключ;
			
			ХарактеристикиНоменклатуры1С	= МодульОбъектаСервер.ОписаниеНоменклатуры1ССервер_Получить(КлючИзначение.Значение, "Характеристики");
			ЕдиницыНоменклатуры1С			= МодульОбъектаСервер.ОписаниеНоменклатуры1ССервер_Получить(КлючИзначение.Значение, "Единицы");
			
			Если ЗначениеЗаполнено(ХарактеристикиНоменклатуры1С) Тогда
				
				НоменклатураПоставщика.Характеристика = ХарактеристикиНоменклатуры1С[0];
				
			КонецЕсли;
			
			НоменклатураПоставщика.Вставить("ЕдИзмОрг");
			НоменклатураПоставщика.Вставить("Коэффициент");
			
			Для Каждого КлючИзначениеЕдиницы Из ЕдиницыНоменклатуры1С Цикл
				
				НоменклатураПоставщика.ЕдИзмОрг		= МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Получить(КлючИзначениеЕдиницы.Значение, "Ссылка");
				НоменклатураПоставщика.Коэффициент	= МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Получить(КлючИзначениеЕдиницы.Значение, "Коэффициент");
				Прервать;
				
			КонецЦикла;
			Прервать;
			
		КонецЦикла;
		СтрокаПоиска = Новый Структура("НоменклатураПоставщика", НоменклатураПоставщика);
		
		СтрокаПоиска.Вставить("Название",		МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрокаРезультат, "ИмяНоменклатурыСБИС"));
		СтрокаПоиска.Вставить("Идентификатор",	МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрокаРезультат, "ИдНоменклатурыСБИС"));
		
		Результат.Вставить("СтрТабл_" + Формат(СчетчикСтрок, "ЧН=0; ЧГ=0"), СтрокаПоиска);
		СчетчикСтрок = СчетчикСтрок + 1;
		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Функция ищет номенклатуру поставщика по идентификатору.
// Если сопоставление заполнено, возвращает структуру с номенклатурой и характеристикой номенклатуры
&НаКлиенте
Функция НайтиНоменклатуруПоставщика(стрКонтрагент, СтрНоменклатураПоставщика, КаталогНастроек, Ини) Экспорт

	Если Не ПараметрыСоединения.НовоеСопоставление Тогда
		Возврат old_НайтиНоменклатуруПоставщика(стрКонтрагент, СтрНоменклатураПоставщика, КаталогНастроек, Ини);
	КонецЕсли;
	
	Попытка

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Возврат НайтиНоменклатуруПоставщика_СсылкаСервер(стрКонтрагент, СтрНоменклатураПоставщика);
		#Иначе
			Возврат НайтиНоменклатуруПоставщика_ЗначСервер(стрКонтрагент, СтрНоменклатураПоставщика);
		#КонецЕсли
		
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.НайтиНоменклатуруПоставщикаПоТабличнойЧасти");
	КонецПопытки;
			
КонецФункции

&НаСервере
Функция НайтиНоменклатуруПоставщика_ЗначСервер(Знач стрКонтрагент, Знач СтрНоменклатураПоставщика)
	
	Возврат НайтиНоменклатуруПоставщика_СсылкаСервер(стрКонтрагент, СтрНоменклатураПоставщика);
	
КонецФункции	
	
&НаСервере
Функция НайтиНоменклатуруПоставщика_СсылкаСервер(стрКонтрагент, СтрНоменклатураПоставщика)
	
	МодульОбъектаСервер = МодульОбъектаСервер();
	
	Попытка
		НоменклатураНайти = Новый Массив;
		НоменклатураНайти.Добавить(МодульОбъектаСервер.НовыйСтрокаСопоставленияСБИССервер(СтрНоменклатураПоставщика));
		
		ПараметрыМассовогоПоиска = Новый Структура;
		ПараметрыМассовогоПоиска.Вставить("Ключ",		КлючКонтрагентаСопоставления(стрКонтрагент));		
		ПараметрыМассовогоПоиска.Вставить("ПоискПо1С",	НоменклатураНайти);
		
		НоменклатураПоставщика_ОбогатитьЗаписиСервер(НоменклатураНайти, ПараметрыМассовогоПоиска);
		
		Результат = Новый Структура("Номенклатура, Характеристика, ЕдИзмОрг, Коэффициент");
		
		Номенклатура1С = МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(НоменклатураНайти[0], "Номенклатура1С");
		
		Для Каждого КлючИЗначение Из Номенклатура1С Цикл
			
			Результат.Номенклатура = КлючИЗначение.Ключ;
			
			ХарактиеристикиНоменклатуры = МодульОбъектаСервер.ОписаниеНоменклатуры1ССервер_Получить(КлючИЗначение.Значение, "Характеристики");
			ЕдиницыНоменклатуры			= МодульОбъектаСервер.ОписаниеНоменклатуры1ССервер_Получить(КлючИЗначение.Значение, "Единицы");
			Если ХарактиеристикиНоменклатуры.Количество() Тогда
				Результат.Характеристика = ХарактиеристикиНоменклатуры[0];
			КонецЕсли;
			
			ДЛя Каждого КлючИЗначениеЕдиницы Из ЕдиницыНоменклатуры Цикл
				
				Результат.ЕдИзмОрг		= КлючИЗначениеЕдиницы.Ключ;
				Результат.Коэффициент	= МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Получить(КлючИЗначениеЕдиницы.Значение, "Коэффициент");
				Прервать;
				
			КонецЦикла;
			Прервать;
			
		КонецЦикла;
		Возврат Результат;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаСервер.ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.НайтиНоменклатуруПоставщикаПоТабличнойЧасти");
	КонецПопытки;
	
КонецФункции

// Процедура устанавливает/удаляет соответствие номенклатуры	
&НаКлиенте
Процедура УстановитьСоответствиеНоменклатуры(СтрКонтрагент, стрНоменклатураПоставщика, КаталогНастроек, Ини) Экспорт
	
	Если Не ПараметрыСоединения.НовоеСопоставление Тогда
		old_УстановитьСоответствиеНоменклатуры(СтрКонтрагент, стрНоменклатураПоставщика, КаталогНастроек, Ини);
		Возврат;
	КонецЕсли;
	
	Попытка
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			УстановитьСоответствиеНоменклатуры_СсылкаСервер(СтрКонтрагент, стрНоменклатураПоставщика);
		#Иначе
			УстановитьСоответствиеНоменклатуры_ЗначСервер(СтрКонтрагент, стрНоменклатураПоставщика);
		#КонецЕсли
			
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.НайтиНоменклатуруПоставщикаПоТабличнойЧасти");
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура УстановитьСоответствиеНоменклатуры_ЗначСервер(Знач СтрКонтрагент, Знач стрНоменклатураПоставщика)
	
	УстановитьСоответствиеНоменклатуры_СсылкаСервер(СтрКонтрагент, стрНоменклатураПоставщика);
	
КонецПроцедуры

// Процедура устанавливает/удаляет соответствие номенклатуры	
&НаСервере
Процедура УстановитьСоответствиеНоменклатуры_СсылкаСервер(СтрКонтрагент, стрНоменклатураПоставщика)
	
	Попытка
		ПараметрыНоменклатуры = Новый Массив;
		ПараметрыНоменклатуры.Добавить(стрНоменклатураПоставщика);
		
		ПараметрыУстановкиСоответствия	= Новый Структура("Ключ, Номенклатура", КлючКонтрагентаСопоставления(СтрКонтрагент));
		НоменклатураСоответствия		= ПривестиФорматЗаписиСопоставления(ПараметрыНоменклатуры);
		
		Если ЗначениеЗаполнено(НоменклатураСоответствия.Удалить) Тогда
			ПараметрыУстановкиСоответствия.Номенклатура = НоменклатураСоответствия.Удалить;
			НоменклатураПоставщика_МассовоеУдалениеСервер(ПараметрыУстановкиСоответствия);
		КонецЕсли;
		Если ЗначениеЗаполнено(НоменклатураСоответствия.Обновить) Тогда
			ПараметрыУстановкиСоответствия.Номенклатура = НоменклатураСоответствия.Обновить;
			НоменклатураПоставщика_МассовоеОбновлениеСервер(ПараметрыУстановкиСоответствия);
		КонецЕсли;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.НайтиНоменклатуруПоставщикаПоТабличнойЧасти");
	КонецПопытки;
	
КонецПроцедуры

// Процедура ищет идентификатор номенклатуры контрагента	
&НаКлиенте
Функция ПолучитьИдентификаторНоменклатурыПоставщика(СтрКонтрагент, стрНоменклатура, КаталогНастроек, Ини) Экспорт
	
	Если Не ПараметрыСоединения.НовоеСопоставление Тогда
		Возврат old_ПолучитьИдентификаторНоменклатурыПоставщика(СтрКонтрагент, стрНоменклатура, КаталогНастроек, Ини);
	КонецЕсли;

	Попытка
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Возврат ПолучитьИдентификаторНоменклатурыПоставщика_СсылкаСервер(СтрКонтрагент, стрНоменклатура);
		#Иначе
			Возврат ПолучитьИдентификаторНоменклатурыПоставщика_ЗначСервер(СтрКонтрагент, стрНоменклатура);
		#КонецЕсли
		
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.НайтиНоменклатуруПоставщикаПоТабличнойЧасти");
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторНоменклатурыПоставщика_ЗначСервер(Знач стрКонтрагент, Знач стрНоменклатура)
	
	Возврат ПолучитьИдентификаторНоменклатурыПоставщика_СсылкаСервер(стрКонтрагент, стрНоменклатура);
	
КонецФункции

// Процедура ищет идентификатор номенклатуры контрагента	
&НаСервере
Функция ПолучитьИдентификаторНоменклатурыПоставщика_СсылкаСервер(стрКонтрагент, стрНоменклатура)
	
	МодульОбъектаСервер = МодульОбъектаСервер();
	
	Попытка
		НоменклатураНайти = Новый Массив;
		НоменклатураНайти.Добавить(МодульОбъектаСервер.НовыйСтрокаСопоставленияСБИССервер(стрНоменклатура));
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Ключ",	КлючКонтрагентаСопоставления(стрКонтрагент));
		НоменклатураПоставщика_ОбогатитьЗаписиСервер(НоменклатураНайти, ПараметрыПоиска);
		Возврат МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(НоменклатураНайти[0], "ИдНоменклатурыСБИС");
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаСервер.ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.ПолучитьИдентификаторНоменклатурыПоставщика_Сервер");
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область include_core2_vo2_Сопоставление_Номенклатура_DBF_Внутренние

#Область include_core2_vo2_Сопоставление_Номенклатура_DBF_Внутренние_Подключение

// Функция - получает классы для работы с DBF.
//
// Параметры:
//  ПараметрыDBFВходящие - Структура
//		- Тип	- строка, описание что за DBF. Пока Статусы/Сопоставление
//		- СтрокаСтатусы - строка (необязательный), из ини строка для DBF
//	
&НаСервере
Процедура СформироватьПодключениеДБФ(ПараметрыDBFВходящие)
	
	ПараметрыСоединения = Новый Структура;
	ПараметрыСоединения.Вставить("РаботаСДБФ",			МодульОбъектаСервер().НовыйРаботаСДБФ(ПараметрыDBFВходящие));
	ПараметрыСоединения.Вставить("СоответствиеТипов",	Новый Соответствие);
		
КонецПроцедуры

// Функция - Получает com-соединение с ДБФ статусов, чтобы при последующих операциях со статусами сразу обращаться к соединению, а не получать заново
//
// Параметры:
//  ПараметрыСоединенияВходящие	 - Структура
//		Файл - Строка (обязательный).
//		Ключ - Строка (необязательный)	 - если не указан, то Файл
//		Тип - Строка (обязательный) - для получения специфичной строки соединения DBF - Статусы/Сопоставление
//  ДопПараметры	 - Структура	 - для расширения
// 
// Возвращаемое значение:
//   - COM объект, соединение с DBF
//
&НаСервере
Функция ПолучитьСоединениеDBF(ПараметрыСоединенияВходящие=Неопределено, ДопПараметры=Неопределено)
	Перем КлючDBF;
	
	МодульОбъектаСервер = МодульОбъектаСервер();
	
	Попытка
		ПутьКФайлу = ПараметрыСоединения.ПараметрыСоединений.Каталог + ПараметрыСоединенияВходящие.Ключ + "\";
		
		СоединениеСДБФ = МодульОбъектаСервер.РаботаСДБФ_ПолучитьСоединениеСДБФ(ПараметрыСоединения.РаботаСДБФ, ПутьКФайлу);
		Если СоединениеСДБФ = Неопределено Тогда
			ПараметрыСоединения.ПараметрыСоединений.Путь = ПутьКФайлу;
			СоединениеСДБФ = МодульОбъектаСервер.РаботаСДБФ_СоздатьСоединениеСДБФ(ПараметрыСоединения.РаботаСДБФ, ПараметрыСоединения.ПараметрыСоединений);
			ПараметрыСоединения.ПараметрыСоединений.Путь = Неопределено;
		КонецЕсли;
		Если Не СоединениеСДБФ.Проверен Тогда
			БД = МодульОбъектаСервер.РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СоединениеСДБФ);
			УстановитьПоляДБФ(СоединениеСДБФ, БД);
			УстановитьШаблоныРаботыССопоставлениемДБФ(СоединениеСДБФ, БД);
			
			ПроверитьФайлыСопоставленияДБФ(СоединениеСДБФ, БД);
			СоединениеСДБФ.Проверен = Истина;
		КонецЕсли;
		Возврат СоединениеСДБФ;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаСервер.ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Статусы_ДБФ.ПолучитьСоединениеDBF")
	КонецПопытки;
	
	Возврат БД;
КонецФункции

// Процедура - вернуть старое сопоставление если выполненялась конвертация под новое сопоставление. Новое сопоставлеине работает с фичей
//
// Параметры:
//  КаталогПроверки	 - Строка	 - путь к папке, где лежат файлы
//
&НаСервере
Процедура old_ПроверитьФайлыСопоставленияДБФ(КаталогПроверки)
	
	ЗначениеПроверки = ПараметрыСоединения.ПереключениеДляСтарогоСопоставления.Получить(КаталогПроверки);

	Если ЗначениеПроверки = Истина Тогда
		Возврат;
	КонецЕсли;
	ПараметрыСоединения.ПереключениеДляСтарогоСопоставления.Вставить(КаталогПроверки, Истина);
	
	ОписаниеФайлаНоменклатураСБИС	= ПараметрыСоединения.ПараметрыСоединений.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаНоменклатура1С		= ПараметрыСоединения.ПараметрыСоединений.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаСтарое				= ПараметрыСоединения.ПараметрыСоединений.Файлы.Получить("СтароеСопоставление");
	ОписаниеФайлаСтароеПереименов	= СтрЗаменить(ОписаниеФайлаСтарое, ".dbf", "_OLD.dbf");
	ОписаниеФайлаЕдиниц				= ПараметрыСоединения.ПараметрыСоединений.Файлы.Получить("Единицы");
	
	Файл_ОписаниеФайлаПроверка = Новый Файл(КаталогПроверки + ОписаниеФайлаНоменклатураСБИС);
	Если Не Файл_ОписаниеФайлаПроверка.Существует() Тогда
		Возврат;
	КонецЕсли;

	Файл_ОписаниеФайлаПроверка = Новый Файл(КаталогПроверки + ОписаниеФайлаНоменклатура1С);
	Если Не Файл_ОписаниеФайлаПроверка.Существует() Тогда
		Возврат;
	КонецЕсли;

	Файл_ОписаниеФайлаПроверка = Новый Файл(КаталогПроверки + ОписаниеФайлаЕдиниц);
	Если Не Файл_ОписаниеФайлаПроверка.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	Файл_ОписаниеФайлаПроверка = Новый Файл(КаталогПроверки + ОписаниеФайлаСтарое);
	Если Файл_ОписаниеФайлаПроверка.Существует() Тогда
		Возврат;
	КонецЕсли;

	Файл_ОписаниеФайлаПроверка = Новый Файл(КаталогПроверки + ОписаниеФайлаСтароеПереименов);
	Если Не Файл_ОписаниеФайлаПроверка.Существует() Тогда
		Возврат;
	КонецЕсли;
	//Восстановить файл с _old
	ПереместитьФайл(КаталогПроверки + ОписаниеФайлаСтароеПереименов, КаталогПроверки + ОписаниеФайлаСтарое); 
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьФайлыСопоставленияДБФ(СоединениеСДБФ, СоединениеБД)
	
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаНоменклатураСтарое	= СоединениеСДБФ.Файлы.Получить("СтароеСопоставление");
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы");
	Если ОписаниеФайлаНоменклатураСБИС.Есть = Неопределено Тогда
		ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСБИС.ИмяФайла);
		ОписаниеФайлаНоменклатураСБИС.Есть = ФайлСтатусов.Существует();
	КонецЕсли;
	Если ОписаниеФайлаНоменклатура1С.Есть = Неопределено Тогда
		ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатура1С.ИмяФайла);
		ОписаниеФайлаНоменклатура1С.Есть = ФайлСтатусов.Существует();
	КонецЕсли;
	Если ОписаниеФайлаЕдиниц.Есть = Неопределено Тогда
		ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + ОписаниеФайлаЕдиниц.ИмяФайла);
		ОписаниеФайлаЕдиниц.Есть = ФайлСтатусов.Существует();
	КонецЕсли;
	Если	ОписаниеФайлаНоменклатураСБИС.Есть
		И	ОписаниеФайлаНоменклатураСБИС.Проверен Тогда
		Возврат
	КонецЕсли;
	
	Если	ОписаниеФайлаНоменклатураСБИС.Есть
		И	ОписаниеФайлаНоменклатура1С.Есть
		И	ОписаниеФайлаЕдиниц.Есть Тогда
		Если Не ОписаниеФайлаНоменклатураСБИС.Проверен Тогда 			
			RecordSet = Новый ComОбъект("ADODB.Recordset");
			Recordset.CursorLocation = 3;
			Recordset.Open("Select top 1 * from " + ОписаниеФайлаНоменклатураСБИС.ИмяБД, СоединениеБД, 2, 3);
			//
			//Если НЕ Recordset.Fields.Count = 10 Тогда
			//	//По числу полей определим, соответствует ли формат БД требуемому.
			//	СбисОбновитьФайлБД(ФайлСтатусов, СоединениеСДБФ, Recordset.Fields.Count);
			//	//Переоткроем файл после обновления
			//	Recordset.Close();
			//КонецЕсли;           
			//
			Если		Recordset.Fields.Count = 4 Тогда
				Попытка
					Если Recordset.EOF Тогда
						//Пустой файл. Пересоздать на всякий случай.
						RecordSet.Close();
						Попытка
							УдалитьФайлы(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСБИС.ИмяФайла);
							ОписаниеФайлаНоменклатураСБИС.Есть	= Ложь;
							УдалитьФайлы(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатура1С.ИмяФайла);
							ОписаниеФайлаНоменклатура1С.Есть	= Ложь;
							УдалитьФайлы(СоединениеСДБФ.Путь + ОписаниеФайлаЕдиниц.ИмяФайла);
							ОписаниеФайлаЕдиниц.Есть			= Ложь;
							
							СоздатьФайлыСопоставления(СоединениеСДБФ, СоединениеБД);
						Исключение
							ИнфоОбОшибке = ИнформацияОбОшибке();
							МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.ПроверитьФайлыСопоставленияДБФ.СоздатьФайлСопоставления");
						КонецПопытки;
					Иначе
						СбисТестПоля = Recordset.Fields("KEY_ID");
						СоздатьИндексСопоставления(СоединениеСДБФ, СоединениеБД);
					КонецЕсли;
				Исключение
					ИнфоОбОшибке = ИнформацияОбОшибке();
					МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Recordset.Open", 717,, "Неизвестный формат файла сопоставления");
				КонецПопытки;
				//Всё ок, файл готов к использованию
			Иначе
				СписокПолей = "";
				Для Каждого Field Из Recordset.Fields Цикл
					СписокПолей = СписокПолей + Field.Name + ", ";
				КонецЦикла;
				СписокПолей = Лев(СписокПолей, СтрДлина(СписокПолей) - 2);
				МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Recordset.Open", 717,, "Неизвестный формат DBF. Обратитесь в техподдержку!",, Новый Структура("Поля", СписокПолей));
			КонецЕсли;
			ОписаниеФайлаНоменклатураСБИС.Проверен	= Истина;
			ОписаниеФайлаНоменклатура1С.Проверен	= Истина;
			ОписаниеФайлаЕдиниц.Проверен			= Истина;
		КонецЕсли;
	Иначе
		СоздатьФайлыСопоставления(СоединениеСДБФ, СоединениеБД);
		Если ОписаниеФайлаНоменклатураСтарое.Есть = Неопределено Тогда
			ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла);
			ОписаниеФайлаНоменклатураСтарое.Есть = ФайлСтатусов.Существует();
		КонецЕсли;
		Если ОписаниеФайлаНоменклатураСтарое.Есть Тогда
			ПереместитьСтарыеДанныеСопоставления(СоединениеСДБФ, СоединениеБД);
			ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла);
			ОписаниеФайлаНоменклатураСтарое.Есть = ФайлСтатусов.Существует();
		КонецЕсли;
		ОписаниеФайлаНоменклатураСБИС.Проверен	= Истина;
		ОписаниеФайлаНоменклатура1С.Проверен	= Истина;
		ОписаниеФайлаЕдиниц.Проверен			= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьШаблоныРаботыССопоставлениемДБФ(СоединениеСДБФ, СоединениеБД)
	
	ШаблонМассовыйПоискЗаписи1С =  
	"SELECT * FROM {base_1C}
	|WHERE {base_1C}.KEY_ID IN ({KEY_ID_LIST}) 
	|ORDER BY KEY_ID, NOM1C_ID";
	
	ШаблонПоискаЗаписи1С = 
	"SELECT * FROM {base_1C}
	|WHERE {base_1C}.KEY_ID = '{KEY_ID}'
	|	AND {base_1C}.NOM1C_ID = '{NOM1C_ID}'
	|	AND {base_1C}.CHR1C_ID = '{CHR1C_ID}'";
	
	ШаблонДобавленияЗаписи1С =  
	"INSERT INTO {base_1C} 
	|VALUES({values})";
	
	ШаблонМассовыйПоискЕдиниц = 
	"SELECT * from {base_unit}
	|WHERE {base_unit}.KEY_ID IN ({KEY_ID_LIST}) ORDER BY KEY_ID";
	
	ШаблонПоискаЕдиницы = 
	"SELECT * from {base_unit}
	|WHERE {base_unit}.KEY_ID ='{KEY_ID}' AND {base_unit}.UOW1C_ID = '{UOW1C_ID}'
	|	AND {base_unit}.UNT1C_ID = '{UNT1C_ID}'
	|	AND {base_unit}.UNTSB_ID = '{UNTSB_ID}'";
	
	ШаблонДобавленияЕдиницы = 
	"INSERT INTO {base_unit} 
	|VALUES({values})";
	
	
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы");
	
	ШаблонПоискаЗаписи1С			= СтрЗаменить(ШаблонПоискаЗаписи1С,				"{base_1C}",	ОписаниеФайлаНоменклатура1С.ИмяБД);
	ШаблонДобавленияЗаписи1С		= СтрЗаменить(ШаблонДобавленияЗаписи1С,			"{base_1C}",	ОписаниеФайлаНоменклатура1С.ИмяБД);
	ШаблонДобавленияЗаписи1С		= СтрЗаменить(ШаблонДобавленияЗаписи1С,			"{values}",		ОписаниеФайлаНоменклатура1С.КлючиДобавить);
	ШаблонПоискаЕдиницы				= СтрЗаменить(ШаблонПоискаЕдиницы,				"{base_unit}",	ОписаниеФайлаЕдиниц.ИмяБД);
	//ШаблонПоискаЕдиниц				= СтрЗаменить(ШаблонПоискаЕдиниц,				"{base_unit}",	ОписаниеФайлаЕдиниц.ИмяБД);
	ШаблонДобавленияЕдиницы			= СтрЗаменить(ШаблонДобавленияЕдиницы,			"{base_unit}",	ОписаниеФайлаЕдиниц.ИмяБД);
	ШаблонДобавленияЕдиницы			= СтрЗаменить(ШаблонДобавленияЕдиницы,			"{values}",		ОписаниеФайлаЕдиниц.КлючиДобавить);
		
	ШаблонМассовыйПоискЕдиниц		= СтрЗаменить(ШаблонМассовыйПоискЕдиниц,		"{base_unit}",	ОписаниеФайлаЕдиниц.ИмяБД);
	ШаблонМассовыйПоискЗаписи1С		= СтрЗаменить(ШаблонМассовыйПоискЗаписи1С,		"{base_1C}",	ОписаниеФайлаНоменклатура1С.ИмяБД);
	
	ОписаниеФайлаНоменклатура1С.Вставить("Шаблоны", Новый Структура);
	ОписаниеФайлаНоменклатура1С.Шаблоны.Вставить("НоваяЗапись", 	ШаблонДобавленияЗаписи1С);
	ОписаниеФайлаНоменклатура1С.Шаблоны.Вставить("Поискзаписи", 	ШаблонПоискаЗаписи1С);
	ОписаниеФайлаНоменклатура1С.Шаблоны.Вставить("МассовыйПоиск",	ШаблонМассовыйПоискЗаписи1С);
	
	ОписаниеФайлаЕдиниц.Вставить("Шаблоны", Новый Структура);
	ОписаниеФайлаЕдиниц.Шаблоны.Вставить("НоваяЗапись",		ШаблонДобавленияЕдиницы);
	ОписаниеФайлаЕдиниц.Шаблоны.Вставить("ПоискЗаписи",		ШаблонПоискаЕдиницы);
	ОписаниеФайлаЕдиниц.Шаблоны.Вставить("МассовыйПоиск",	ШаблонМассовыйПоискЕдиниц);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПоляДБФ(СоединениеСДБФ, СоединениеБД)
	
	СоответствиеРезультат	= Новый Соответствие;
	
	ФайлДБФ = СоединениеСДБФ.Файлы.Получить("Единицы");
	
	СоответствиеОграничений = Новый Структура;
	СоответствиеОграничений.Вставить("KEY_ID",		Новый Структура("Длина, Значение, Индекс, Уникальный",	240,	"",	Истина, Истина));
	СоответствиеОграничений.Вставить("UNTSB_ID",	Новый Структура("Длина, Значение, Индекс, Уникальный",	50,		"",	Истина, Ложь));
	СоответствиеОграничений.Вставить("UNTSB_NM",	Новый Структура("Длина, Значение",						240,	""));
	СоответствиеОграничений.Вставить("UNT1C_ID",	Новый Структура("Длина, Значение, Индекс, Уникальный",	36,		"",	Истина, Ложь));
	СоответствиеОграничений.Вставить("UNT1C_TY",	Новый Структура("Длина, Значение",						100,	""));
	СоответствиеОграничений.Вставить("UOW1C_ID",	Новый Структура("Длина, Значение",						36,		""));
	СоответствиеОграничений.Вставить("OKEY",		Новый Структура("Длина, Значение",						10,		""));
	СоответствиеОграничений.Вставить("RATIO",		Новый Структура("Длина, Значение",						15,		"1"));
	
	ПоляЗапросаНовый	= "";
	ПоляЗапросаДобавить	= "";
	ПоляЗапросаФайл		= "";
	Для Каждого КлючИЗначение Из СоответствиеОграничений Цикл
		
		ПоляЗапросаДобавить = ПоляЗапросаДобавить + " '{" + КлючИЗначение.Ключ + "}', 
		|";
		ПоляЗапросаНовый	= ПоляЗапросаНовый + КлючИЗначение.Ключ + ",";
		ПоляЗапросаФайл		= ПоляЗапросаФайл + КлючИЗначение.Ключ + " char(" + КлючИЗначение.Значение.Длина + "),";
		
	КонецЦикла;
	ПоляЗапросаДобавить	= Лев(ПоляЗапросаДобавить,	СтрДлина(ПоляЗапросаДобавить) - 3);
	ПоляЗапросаНовый	= Лев(ПоляЗапросаНовый,		СтрДлина(ПоляЗапросаНовый) - 1);
	ПоляЗапросаФайл		= Лев(ПоляЗапросаФайл,		СтрДлина(ПоляЗапросаФайл) - 1);

	ФайлДБФ.Вставить("Поля",			СоответствиеОграничений);
	ФайлДБФ.Вставить("КлючиДобавить",	ПоляЗапросаДобавить);
	ФайлДБФ.Вставить("КлючиНовый",		ПоляЗапросаНовый);
	ФайлДБФ.Вставить("КлючиНовыйФайл",	ПоляЗапросаФайл);
	
	ФайлДБФ = СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	
	СоответствиеОграничений = Новый Структура;
	СоответствиеОграничений.Вставить("KEY_ID",		Новый Структура("Длина, Значение, Индекс, Уникальный",	240,	"", Истина, Истина));
	СоответствиеОграничений.Вставить("NOM1C_ID",	Новый Структура("Длина, Значение, Индекс, Уникальный",	240,	"", Истина, Ложь));
	СоответствиеОграничений.Вставить("NOM1C_TY",	Новый Структура("Длина, Значение",						240,	""));
	СоответствиеОграничений.Вставить("CHR1C_ID",	Новый Структура("Длина, Значение, Индекс, Уникальный",	240,	"", Истина, Ложь));
	СоответствиеОграничений.Вставить("CHR1C_TY",	Новый Структура("Длина, Значение",						240,	""));
	СоответствиеОграничений.Вставить("GTIN",		Новый Структура("Длина, Значение",						240,	""));
	
	ПоляЗапросаНовый	= "";
	ПоляЗапросаДобавить	= "";
	ПоляЗапросаФайл		= "";
	Для Каждого КлючИЗначение Из СоответствиеОграничений Цикл
		
		ПоляЗапросаДобавить = ПоляЗапросаДобавить + " '{" + КлючИЗначение.Ключ + "}', 
		|";
		ПоляЗапросаНовый	= ПоляЗапросаНовый + КлючИЗначение.Ключ + ",";
		ПоляЗапросаФайл		= ПоляЗапросаФайл + КлючИЗначение.Ключ + " char(" + КлючИЗначение.Значение.Длина + "),";
		
	КонецЦикла;
	ПоляЗапросаДобавить	= Лев(ПоляЗапросаДобавить,	СтрДлина(ПоляЗапросаДобавить) - 3);
	ПоляЗапросаНовый	= Лев(ПоляЗапросаНовый,		СтрДлина(ПоляЗапросаНовый) - 1);
	ПоляЗапросаФайл		= Лев(ПоляЗапросаФайл,		СтрДлина(ПоляЗапросаФайл) - 1);

	ФайлДБФ.Вставить("Поля",			СоответствиеОграничений);
	ФайлДБФ.Вставить("КлючиДобавить",	ПоляЗапросаДобавить);
	ФайлДБФ.Вставить("КлючиНовый",		ПоляЗапросаНовый);
	ФайлДБФ.Вставить("КлючиНовыйФайл",	ПоляЗапросаФайл);
		
	ФайлДБФ = СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	
	СоответствиеОграничений = Новый Структура;
	СоответствиеОграничений.Вставить("KEY_ID",		Новый Структура("Длина, Значение, Индекс, Уникальный",	240,	"", Истина, Истина));
	СоответствиеОграничений.Вставить("NOMSB_ID",	Новый Структура("Длина, Значение, Индекс, Уникальный",	240,	"", Истина, Ложь));
	СоответствиеОграничений.Вставить("NOMSB_NM",	Новый Структура("Длина, Значение",						240,	""));
	СоответствиеОграничений.Вставить("CHRSB_ID",	Новый Структура("Длина, Значение, Индекс, Уникальный",	240,	"", Истина, Ложь));
	
	ПоляЗапросаНовый	= "";
	ПоляЗапросаДобавить	= "";
	ПоляЗапросаФайл		= "";
	Для Каждого КлючИЗначение Из СоответствиеОграничений Цикл
		
		ПоляЗапросаДобавить = ПоляЗапросаДобавить + " '{" + КлючИЗначение.Ключ + "}', 
		|";
		ПоляЗапросаНовый	= ПоляЗапросаНовый + КлючИЗначение.Ключ + ",";
		ПоляЗапросаФайл		= ПоляЗапросаФайл + КлючИЗначение.Ключ + " char(" + КлючИЗначение.Значение.Длина + "),";
		
	КонецЦикла;
	ПоляЗапросаДобавить	= Лев(ПоляЗапросаДобавить,	СтрДлина(ПоляЗапросаДобавить) - 3);
	ПоляЗапросаНовый	= Лев(ПоляЗапросаНовый,		СтрДлина(ПоляЗапросаНовый) - 1);
	ПоляЗапросаФайл		= Лев(ПоляЗапросаФайл,		СтрДлина(ПоляЗапросаФайл) - 1);

	ФайлДБФ.Вставить("Поля",			СоответствиеОграничений);
	ФайлДБФ.Вставить("КлючиДобавить",	ПоляЗапросаДобавить);
	ФайлДБФ.Вставить("КлючиНовый",		ПоляЗапросаНовый);
	ФайлДБФ.Вставить("КлючиНовыйФайл",	ПоляЗапросаФайл);
		
КонецПроцедуры

&НаСервере
Процедура ПереместитьСтарыеДанныеСопоставления(СоединениеСДБФ, СоединениеБД)
  
	Если ПараметрыСоединения.ИспользоватьXBaseДляКонвертацииDBF Тогда
		ЗаполнитьБазыXBaseДанными(СоединениеСДБФ);
	Иначе 
        ЗаполнитьБазыRecordsetДанными(СоединениеСДБФ,СоединениеБД);
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБазыXBaseДанными(СоединениеСДБФ)
	
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаНоменклатураСтарое	= СоединениеСДБФ.Файлы.Получить("СтароеСопоставление");
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы"); 
	
	БазаXBase1С = новый XBase;
	БазаXBase1С.ОткрытьФайл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатура1С.ИмяФайла);
	БазаXBase1С.Кодировка = КодировкаXBase.OEM;
	БазаXBaseСБИС = новый XBase;
	БазаXBaseСБИС.ОткрытьФайл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСБИС.ИмяФайла);
	БазаXBaseСБИС.Кодировка = КодировкаXBase.OEM;
	БазаXBaseUnit = новый XBase;                                                         
	БазаXBaseUnit.ОткрытьФайл(СоединениеСДБФ.Путь + ОписаниеФайлаЕдиниц.ИмяФайла);
	БазаXBaseUnit.Кодировка = КодировкаXBase.OEM;
	
	БазаXBaseСтарая = новый XBase;
	БазаXBaseСтарая.ОткрытьФайл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла);
	БазаXBaseСтарая.Кодировка = КодировкаXBase.OEM;
	КоличествоПолей = БазаXBaseСтарая.поля.Количество();
    
	Если БазаXBaseСтарая.КоличествоЗаписей() = 0 Тогда
		//Пустой файл.
		Попытка
			УдалитьФайлы(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла);
		Исключение
		КонецПопытки;
		Возврат;
	КонецЕсли;	
	Попытка
		Пока Не БазаXBaseСтарая.ВКонце() Цикл
			БазаXBaseСБИС.Добавить();
			//Записи в базу сбис
			БазаXBaseСБИС.KEY_ID	= БазаXBaseСтарая.ID;
			БазаXBaseСБИС.NOMSB_ID	= БазаXBaseСтарая.ID; 
			БазаXBaseСБИС.NOMSB_NM	= БазаXBaseСтарая.NAME;
			БазаXBaseСБИС.Записать();
			//Записи в базу 1С
			БазаXBase1С.Добавить();
			БазаXBase1С.KEY_ID	= БазаXBaseСтарая.ID;
			БазаXBase1С.NOM1C_ID = БазаXBaseСтарая.IDNOM;
			БазаXBase1С.NOM1C_TY = БазаXBaseСтарая.SPRNOM;
			БазаXBase1С.CHR1C_ID = БазаXBaseСтарая.IDCHAR;
			БазаXBase1С.CHR1C_TY = БазаXBaseСтарая.SPRCHAR;
			Если КоличествоПолей = 7 или КоличествоПолей = 10 Тогда
				БазаXBase1С.GTIN = БазаXBaseСтарая.GTIN;
			КонецЕсли; 
			БазаXBase1С.Записать();
			
			Если КоличествоПолей = 10 Тогда
				Если БазаXBaseСтарая.IDUNPOST <> "''" Тогда
					БазаXBaseUnit.Добавить();     
					БазаXBaseUnit.KEY_ID = БазаXBaseСтарая.ID;
					БазаXBaseUnit.UNT1C_ID = БазаXBaseСтарая.IDUNTORG;
					БазаXBaseUnit.UNT1C_TY = Строка(ПараметрыСоединения.Типы.Единицы);
					БазаXBaseUnit.RATIO = БазаXBaseСтарая.RATIO;
					БазаXBaseUnit.Записать();
				КонецЕсли;
			КонецЕсли;

			//Переход к следующей записи
			БазаXBaseСтарая.Следующая();
		КонецЦикла;
		БазаXBase1С.ЗакрытьФайл();
		БазаXBaseUnit.ЗакрытьФайл();
		БазаXBaseСБИС.ЗакрытьФайл();
		БазаXBaseСтарая.ЗакрытьФайл();
	Исключение
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнформацияОбОшибке(), "БазаXBaseСтарая.ОткрытьФайл", 773, "Не удалось обновить файл сопоставления");
	КонецПопытки;
	//Оставить старый файл как есть на случай возврата к старому механизму.
	//ПереместитьФайл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла, СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяБД +"_OLD.dbf"); 
			
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБазыRecordsetДанными(СоединениеСДБФ,СоединениеБД)
	
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаНоменклатураСтарое	= СоединениеСДБФ.Файлы.Получить("СтароеСопоставление");
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы"); 
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
	Recordset.CursorLocation = 3;
	Recordset.Open("Select top 1 * from " + ОписаниеФайлаНоменклатураСтарое.ИмяБД, СоединениеБД, 2, 3);

	Если Recordset.EOF Тогда
		//Пустой файл.
		Попытка
			УдалитьФайлы(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла);
		Исключение
		КонецПопытки;
		Возврат;
	Иначе
		ЗапросыКовертации = Новый Массив;
		ЗапросыКовертации.Добавить("INSERT INTO " + ОписаниеФайлаНоменклатураСБИС.ИмяБД + "(
		|KEY_ID,	NOMSB_ID,	NOMSB_NM) SELECT
		|ID,		ID,			NAME FROM " + ОписаниеФайлаНоменклатураСтарое.ИмяБД);
		
		ЗапросНоменклатура1С = "INSERT INTO " + ОписаниеФайлаНоменклатура1С.ИмяБД + "(
		|KEY_ID,	NOM1C_ID,	NOM1C_TY,	CHR1C_ID,	CHR1C_TY,	GTIN) SELECT 
		|ID,		IDNOM,		SPRNOM,		IDCHAR,		SPRCHAR,	%GTIN% FROM " + ОписаниеФайлаНоменклатураСтарое.ИмяБД;
		
		Если		Recordset.Fields.Count = 7 Тогда
			//Есть GTIN, нет единиц
			ЗапросНоменклатура1С = СтрЗаменить(ЗапросНоменклатура1С, "%GTIN%", "GTIN");
			ЗапросыКовертации.Добавить(ЗапросНоменклатура1С);
		ИначеЕсли	Recordset.Fields.Count = 10 Тогда
			//Есть GTIN, есть единицы
			ЗапросНоменклатура1С = СтрЗаменить(ЗапросНоменклатура1С, "%GTIN%", "GTIN");
			ЗапросыКовертации.Добавить(ЗапросНоменклатура1С);
			
			ЗапросыКовертации.Добавить("INSERT INTO " + ОписаниеФайлаЕдиниц.ИмяБД + "(
			|KEY_ID,	UNT1C_ID,	UNT1C_TY,									RATIO) 
			|SELECT ID,	IDUNTORG,	'" + ПараметрыСоединения.Типы.Единицы + "',	RATIO 
			|FROM " + ОписаниеФайлаНоменклатураСтарое.ИмяБД + " WHERE (NOT " + ОписаниеФайлаНоменклатураСтарое.ИмяБД + ".IDUNPOST = '')");
		Иначе	
		//ИначеЕсли	Recordset.Fields.Count = 6 Тогда

			//Нет GTIN. Не известный формат?
			ЗапросНоменклатура1С = СтрЗаменить(ЗапросНоменклатура1С, "%GTIN%", "''");
			ЗапросыКовертации.Добавить(ЗапросНоменклатура1С);
			
		КонецЕсли;
		
		Попытка
			
			Для Каждого ЗапросВыполнить Из ЗапросыКовертации Цикл
				СоединениеБД.Execute(ЗапросВыполнить);
			КонецЦикла;
			
			//Оставить старый файл как есть на случай возврата к старому механизму.
			//ПереместитьФайл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла, СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяБД +"_OLD.dbf"); 
			
		Исключение
			МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнформацияОбОшибке(), "Recordset.Open", 773, "Не удалось обновить файл сопоставления");
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры

// Процедура - создаёт файл DBF для сопоставления номенклатуры
//
// Параметры:
//  СоединениеСДБФ	 - Структура	 - Объект соединения
//  СоединениеБД	 - COM Объект	 - Соединение с каталогом
// Создаёт файлы со следующей структурой:
//	НоменклатураСБИС(nom_sbis):
//		KEY_ID		- (Индекс, Ключ) идентификатор для связи с таблицами.
//		NOMSB_ID	- (Индекс) идентификатор номенклатуры поставщика.
//  	NOMSB_NM	- название номенклатуры поставщика.
//  	CHRSB_ID	- (Индекс) идентификатор характеристики номенклатуры поставщика.
//	Номенклатура1С (nom_1С):
//		KEY_ID		- (Индекс, Ключ) идентификатор номенклатуры поставщика из nom_sbis.
//		NOM1C_ID	- идентификатор номенклатуры в 1С (УИД)
//		NOM1C_TY	- название справочника номенклатуры 1С (Номенклатура)
//		CHR1C_ID	- идентификатор характеристики номенклатуры в 1С (УИД)
//		CHR1C_TY	- название справочника характеристик 1С (ХарактеристикиНоменклатуры)
//		GTIN		- глобальный номер товарной продукции, при наличии.
//	Единицы измерения(nom_unit)
//		KEY_ID	- (Ключ) идентификатор номенклатуры поставщика
//		UNTSB_ID	- (Ключ) идентификатор единицы поставщика
//		UNTSB_NM	- Наименование единицы поставщиа
//		UNT1C_ID	- идентификатор единицы измерения в 1С (УИД)
//		UNT1C_TY	- название справочника единиц измерения 1С (УпаковкиЕдиницыИзмерения)
//		UOW1C_ID	- владелец. Значение NOM1C_ID, либо - при отсутствии владельца в ИС.
//		RATIO	- коэффициет пересчета
// Формат полей: {1}{2}_{3}
//	KEY_ID - ключ связи таблиц
//	{1}:
//		NOM - номенклатура
//		CHR - характеристика
//		UNT - единица
//		UOW - владелец
//	{2}:
//		SB - описание элемента СБИС
//  	1C - текущая система
//	{3}:
//		ID - идентификатор
//		NM - название
//		TY - тип
&НаСервере
Процедура СоздатьФайлыСопоставления(СоединениеСДБФ, СоединениеБД)
	
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы");
	Попытка
		Если Не ОписаниеФайлаНоменклатураСБИС.Есть Тогда
			
			ШаблонЗапроса = "Create Table " + ОписаниеФайлаНоменклатураСБИС.ИмяФайла + " (" + ОписаниеФайлаНоменклатураСБИС.КлючиНовыйФайл + ")";
			СоединениеБД.Execute(ШаблонЗапроса);
			
			//СоединениеБД.Execute("Create Table " + ОписаниеФайлаНоменклатураСБИС.ИмяФайла + " (KEY_ID char(240), NOMSB_ID char(240), NOMSB_NM char(240), CHRSB_ID char(240))");
			ОписаниеФайлаНоменклатураСБИС.Есть = Истина;
			
		КонецЕсли;
		
		Если Не ОписаниеФайлаНоменклатура1С.Есть Тогда 
			
			ШаблонЗапроса = "Create Table " + ОписаниеФайлаНоменклатура1С.ИмяФайла + " (" + ОписаниеФайлаНоменклатура1С.КлючиНовыйФайл + ")";
			СоединениеБД.Execute(ШаблонЗапроса);
			
			ОписаниеФайлаНоменклатура1С.Есть = Истина;
			
		КонецЕсли;
		Если Не ОписаниеФайлаЕдиниц.Есть Тогда 
			
			ШаблонЗапроса = "Create Table " + ОписаниеФайлаЕдиниц.ИмяФайла + " (" + ОписаниеФайлаЕдиниц.КлючиНовыйФайл + ")";
			СоединениеБД.Execute(ШаблонЗапроса);
			
			ОписаниеФайлаЕдиниц.Есть = Истина;
		КонецЕсли;
		
		СоздатьИндексСопоставления(СоединениеСДБФ, СоединениеБД);
		
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "СоединениеБД.Execute");
	КонецПопытки;
	
КонецПроцедуры

// Процедура - создаёт индекс к DBF для сопоставления номенклатуры
//
// Параметры:
//  СоединениеСДБФ	 - Структура	 - Объект соединения
//  СоединениеБД	 - COM Объект	 - Соединение с каталогом
&НаСервере
Процедура СоздатьИндексСопоставления(СоединениеСДБФ, СоединениеБД)
	
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ИмяФайлаСтатусов				= СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСБИС.ИмяБД + ".cdx"; 
	ФайлСтатусов					= Новый Файл(ИмяФайлаСтатусов);
	Если Не ФайлСтатусов.Существует() Тогда
		Попытка
			СоздатьИндексСопоставления_СоздатьФайлИндекса(СоединениеСДБФ, ОписаниеФайлаНоменклатураСБИС)
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Сопоставление_ДБФ.СоздатьИндексСопоставления");
		КонецПопытки;
	КонецЕсли;
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ИмяФайлаСтатусов				= СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатура1С.ИмяБД + ".cdx"; 
	ФайлСтатусов					= Новый Файл(ИмяФайлаСтатусов);
	Если Не ФайлСтатусов.Существует() Тогда
		Попытка
			СоздатьИндексСопоставления_СоздатьФайлИндекса(СоединениеСДБФ, ОписаниеФайлаНоменклатура1С)
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Сопоставление_ДБФ.СоздатьИндексСопоставления");
		КонецПопытки;
	КонецЕсли;
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы");
	ИмяФайлаСтатусов				= СоединениеСДБФ.Путь + ОписаниеФайлаЕдиниц.ИмяБД + ".cdx"; 
	ФайлСтатусов					= Новый Файл(ИмяФайлаСтатусов);
	Если Не ФайлСтатусов.Существует() Тогда
		Попытка
			СоздатьИндексСопоставления_СоздатьФайлИндекса(СоединениеСДБФ, ОписаниеФайлаЕдиниц)
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Сопоставление_ДБФ.СоздатьИндексСопоставления");
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИндексСопоставления_СоздатьФайлИндекса(СоединениеСДБФ, ОписаниеФайлаБД)
	
	ОбъектXBase = Новый XBase(СоединениеСДБФ.Путь + ОписаниеФайлаБД.ИмяФайла);
	Для Каждого КлючИЗначение Из ОписаниеФайлаБД.Поля Цикл
		Если	Не	КлючИЗначение.Значение.Свойство("Индекс")
			Или	Не	КлючИЗначение.Значение.Индекс Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектXBase.Индексы.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Ключ, КлючИЗначение.Значение.Уникальный);
		
	КонецЦикла;
	ОбъектXBase.СоздатьИндексныйФайл(СоединениеСДБФ.Путь + ОписаниеФайлаБД.ИмяБД + ".cdx");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура  ЗавершитьСоединениеСDBFНаСервере(ПараметрыСоединения) Экспорт
	ПараметрыСоединения.Подключено = Ложь;
	ПараметрыСоединения.Удалить("Хранилище");
	ПараметрыСоединения.ВызывалосьСоздание = Ложь;
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Сопоставление_Номенклатура_DBF_Внутренние_Прочее

&НаСервере
Функция ВосстановитьСсылкуИзСтрокиДБФ(RecordSetDBF, КлючТипа, КлючЗначения)
	
	Попытка
		ЗначениеСсылки	= ПолучитьЗначениеИзРекордСет(RecordSetDBF, КлючЗначения);
		ТипСсылки		= ПолучитьЗначениеИзРекордСет(RecordSetDBF, КлючТипа);
	Исключение
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнформацияОбОшибке(), "СопоставлениеНоменклатуры_ДБФ.ВосстановитьСсылкуИзСтрокиДБФ");
	КонецПопытки;
	Если	Не	(	ЗначениеЗаполнено(ЗначениеСсылки)
				И	ЗначениеЗаполнено(ТипСсылки)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	УИДНоменклатуры = Новый УникальныйИдентификатор(СокрЛП(ЗначениеСсылки));
	Возврат Справочники[СокрЛП(ТипСсылки)].ПолучитьСсылку(УИДНоменклатуры);	
	
КонецФункции

&НаСервере
Функция ПредставлениеТипаПоСсылке(СправочникДокументСсылка, КлючТипа)
	
	ТипЗнчСсылки		= ТипЗнч(СправочникДокументСсылка);
	ПредставлениеТипа	= ПараметрыСоединения.СоответствиеТипов.Получить(КлючТипа + "_" + ТипЗнчСсылки);
	Если ПредставлениеТипа = Неопределено Тогда
		Если ТипЗнчСсылки = Тип("Строка") Тогда
			ПредставлениеТипа = "Строка";
		ИначеЕсли Метаданные.НайтиПоТипу(ТипЗнчСсылки) = Неопределено Тогда
			ПредставлениеТипа = ПараметрыСоединения.Типы[КлючТипа];
		Иначе
			ПредставлениеТипа = СправочникДокументСсылка.Метаданные().Имя;
		КонецЕсли;
		ПараметрыСоединения.СоответствиеТипов.Вставить(КлючТипа + "_" + ТипЗнчСсылки, ПредставлениеТипа);
	КонецЕсли;
	Возврат ПредставлениеТипа;

КонецФункции

&НаСервере
Функция ПолучитьЗначениеИзРекордСет(RecordSet, Ключ, ЗначениеПоУмолчанию = "")
	
	Попытка
		ЗначениеВРекорд = RecordSet.Fields(Ключ).value;
	Исключение
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнформацияОбОшибке(), "СопоставлениеНоменклатуры_ДБФ.ПолучитьЗначениеИзРекордСет",,,"В рекордсет отсутствует поле " + Ключ);
	КонецПопытки;
	Если ЗначениеВРекорд = Null Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	Возврат ЗначениеВРекорд;
	
КонецФункции

&НаКлиенте
Функция ПривестиФорматПоискаСопоставленияПоСтроке(СтрНоменклатураПоставщика, ДопПараметры)
	Перем НоменклатураНазвание, НоменклатураСсылка, ID;
	
	//Номенклатура СБИС
	НоменклатураСопоставление = МодульОбъектаКлиент().НовыйСтрокаСопоставленияСБИСКлиент(СтрНоменклатураПоставщика);
	
	Возврат НоменклатураСопоставление;

КонецФункции

// Метод приводит старый формат строк номенклатуры к новому
//
// Параметры:
//  ПараметрыОбновитьВходящие	 - Структура
//		СписокНоменклатураПреобразовать - Массив структур со строками сопоставления
//  ДопПараметры							 - Структура
//
&НаСервере
Функция ПривестиФорматЗаписиСопоставления(СписокНоменклатураПреобразовать)
	Перем НоменклатураНазвание, НоменклатураСсылка, ХарактеристикаПоставщика;
	
	МодульОбъектаСервер = МодульОбъектаСервер();
	
	НоменклатураОбновить= Новый Массив;
	НоменклатураУдалить = Новый Массив;
	Для Каждого СтрНоменклатураПоставщика Из СписокНоменклатураПреобразовать Цикл
		
		НоменклатураСопоставление = МодульОбъектаСервер.НовыйСтрокаСопоставленияСБИССервер(СтрНоменклатураПоставщика);
		
		//Для корректной записи в старом формате, удаляем все строки и пишем заново, т.к. неизвестно - были ли ещё записи, или нет.
		НоменклатураУдалить.Добавить(НоменклатураСопоставление);
		НоменклатураОбновить.Добавить(НоменклатураСопоставление);
		
	КонецЦикла;
	
	ПараметрыОбработкиНоменклатурыНовые = Новый Структура;
	ПараметрыОбработкиНоменклатурыНовые.Вставить("Обновить",НоменклатураОбновить);
	ПараметрыОбработкиНоменклатурыНовые.Вставить("Удалить",	НоменклатураУдалить);
	
	Возврат ПараметрыОбработкиНоменклатурыНовые;

КонецФункции

//Функция вырезает всё лишнее от ИД для ДБФ
&НаКлиентеНаСервереБезКонтекста
Функция СбисПривестиЗначение(СыраяСтрокаИд)
	
	Возврат Лев(СокрЛП(СыраяСтрокаИд),240);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СбисИдентификатор(СыраяСтрокаИд)
	Возврат СокрЛП(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(
					СбисПривестиЗначение(СыраяСтрокаИд)	,"«","<")
									,"»",">")
									,"""","")
									,"'","")
									,"[","")
									,"]","")
									,"—","-")
									,"’","")
									,"“","")
									,"”","")
									,"®",""));
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючКонтрагентаСопоставления(СтруктураКонтрагент)
	Перем СвЮлФл, КлючДляСопоставления;
	Если СтруктураКонтрагент = Неопределено Тогда
		ВызватьИсключение("Неопределен контрагент. Сопоставление номенклатуры невозможно.");
	ИначеЕсли	Не	СтруктураКонтрагент.Свойство("СвЮЛ", СвЮлФл)
			И	Не	СтруктураКонтрагент.Свойство("СвФЛ", СвЮлФл) Тогда
		ВызватьИсключение("Нет сведений о контрагенте. Сопоставление номенклатуры невозможно.");
	ИначеЕсли	Не СвЮлФл.Свойство("ИНН", КлючДляСопоставления)
			Или	Не ЗначениеЗаполнено(КлючДляСопоставления) Тогда
		ВызватьИсключение("Не заполнен ИНН контрагента. Сопоставление номенклатуры невозможно.");
	КонецЕсли;
	Возврат КлючДляСопоставления;
КонецФункции

// Функция - Возвращает массив имен папок в каталоге сопоставлений
// 
// Возвращаемое значение:
//   - массив
//
&НаСервере
Функция СписокКаталоговСопоставлений() Экспорт
	
	КаталогиКонтрагентов = Новый Массив;
	
	Файлы = НайтиФайлы(ПараметрыСоединения.ПараметрыСоединений.Каталог, "*");
	
	Для Каждого Файл Из Файлы Цикл

		Если Файл.ЭтоКаталог() Тогда
	    	КаталогиКонтрагентов.Добавить(Файл.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КаталогиКонтрагентов;
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Сопоставление_Номенклатура_DBF_Внутренние_Устаревшее

// ищет запись с определенной номенклатурой поставщика по реквизитам, указанным в файле настроек
// возвращает структуру с полями Номенклатура и Характеристика	
&НаСервере
Функция НайтиНоменклатуруПоставщикаПоТабличнойЧастиНаСервере(стрКонтрагент,стрНоменклатураПоставщикаВсе, КаталогНастроек, ИниКонфигурация, Отказ)
	
	Для Каждого стрНоменклатураПоставщика Из стрНоменклатураПоставщикаВсе Цикл
		Результат = НайтиНоменклатуруПоставщикаНаСервере(стрКонтрагент, стрНоменклатураПоставщика.Значение, КаталогНастроек, ИниКонфигурация, Отказ);	
		Если Отказ Тогда
			Возврат Результат;	
		КонецЕсли;
		стрНоменклатураПоставщика.Значение.Вставить("НоменклатураПоставщика",Результат);	
	КонецЦикла;
	Возврат стрНоменклатураПоставщикаВсе; 
КонецФункции

// Функция ищет номенклатуру поставщика по идентификатору.
// Если сопоставление заполнено, возвращает структуру с номенклатурой и характеристикой номенклатуры
&НаСервере
Функция НайтиНоменклатуруПоставщикаНаСервере(стрКонтрагент, стрНоменклатураПоставщика, КаталогНастроек, ИниКонфигурация, Отказ)
	Если ИниКонфигурация.Свойство("ТипКлассификатораЕдиниц") Тогда
		ИмяКлассификтораЕдИзм = СтрЗаменить(ИниКонфигурация.ТипКлассификатораЕдиниц.Значение, "'","");
	ИначеЕсли ИниКонфигурация.Свойство("ЕдиницаИзмерения") Тогда
		ИмяКлассификтораЕдИзм = СтрЗаменить(ИниКонфигурация.ЕдиницаИзмерения.Значение, "'","");
		ИмяКлассификтораЕдИзм = СокрЛП(Сред(ИмяКлассификтораЕдИзм, Найти(ИмяКлассификтораЕдИзм, ".") + 1));	
	Иначе
		ИмяКлассификтораЕдИзм = "КлассификаторЕдиницИзмерения";
	КонецЕсли;
	
	ИНН = ?(стрКонтрагент.Свойство("СвЮЛ"), стрКонтрагент.СвЮЛ.ИНН, стрКонтрагент.СвФЛ.ИНН);
	ИмяКаталогаНоменклатурыПоставщика = КаталогНастроек + "НоменклатураПоставщика\"+ИНН+"\";
	
	old_ПроверитьФайлыСопоставленияДБФ(ИмяКаталогаНоменклатурыПоставщика);

	КаталогНоменклатурыПоставщика = Новый Файл(ИмяКаталогаНоменклатурыПоставщика);	
	Если КаталогНоменклатурыПоставщика.Существует() = Ложь Тогда
		СоздатьКаталог(ИмяКаталогаНоменклатурыПоставщика);
		Сообщить("Создан каталог """+ИмяКаталогаНоменклатурыПоставщика+""""); 
	КонецЕсли;
	
	Попытка
		БД = Новый COMОбъект("ADODB.Connection");
	Исключение
		Отказ = Истина;
		Ошибка = ОписаниеОшибки();
		Возврат Ошибка;
	КонецПопытки;
	//БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//               "Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";Extended Properties=""DBASE IV;"";");	
				   
	//БД.Open("DRIVER=Microsoft dBase Driver (*.dbf);UID=admin;UserCommitSync=Yes;Threads=3;Statistics=0;SafeTransactions=0;PageTimeout=600;MaxScanRows=8;MaxBufferSize=2048;FIL=dBase 5.0;DriverId=533;Deleted=1;DefaultDir=" + ИмяКаталогаНоменклатурыПоставщика + ";" + ИмяКаталогаНоменклатурыПоставщика + ";CollatingSequence=ASCII");
	Попытка
		Если ИниКонфигурация.Свойство("СтрокаПодключенияДБФ") Тогда
			СтрокаПодключения = СтрЗаменить(ИниКонфигурация.СтрокаПодключенияДБФ.Значение, "'","")+ИмяКаталогаНоменклатурыПоставщика;
			БД.Open(СтрокаПодключения);
		Иначе
			СтрокаПодключения = "Driver={Microsoft dBASE Driver (*.dbf)};DriverID=533;Dbq=" + ИмяКаталогаНоменклатурыПоставщика + ";";
			Попытка
				БД.Open(СтрокаПодключения);
			Исключение
				СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Extended Properties='dBASE IV';Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";";
				БД.Open(СтрокаПодключения);
			КонецПопытки;
			//СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Extended Properties='dBASE IV';Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";";
			//СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Extended Properties='dBASE IV';Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";";
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Ошибка = ОписаниеОшибки();
		Возврат Ошибка;
	КонецПопытки;
	
	ФайлНоменклатурыПоставщика = Новый Файл(ИмяКаталогаНоменклатурыПоставщика + "NomPost.dbf");
	Если ФайлНоменклатурыПоставщика.Существует() = Ложь Тогда
		СбисЗаполнитьНовыйФайлСопоставления(БД);
	КонецЕсли;
	
	NAME = "";
	СбисИмяКакИд = Истина;
	Если стрНоменклатураПоставщика.Свойство("Название") Тогда
		NAME = стрНоменклатураПоставщика.Название; 
	КонецЕсли;
	Если стрНоменклатураПоставщика.Свойство("КодПокупателя") 
			И ЗначениеЗаполнено(стрНоменклатураПоставщика.КодПокупателя)
			И стрНоменклатураПоставщика.КодПокупателя <> "-" Тогда // alo Меркурий  если заполнен КодПокупателя, то ищем по нему
		ID = стрНоменклатураПоставщика.КодПокупателя; 
		СбисИмяКакИд = Ложь;
	ИначеЕсли стрНоменклатураПоставщика.Свойство("Идентификатор")
				И ЗначениеЗаполнено(стрНоменклатураПоставщика.Идентификатор)
				И стрНоменклатураПоставщика.Идентификатор <> "-" Тогда // alo Меркурий  если заполнен идентификатор, то ищем по нему
		ID = стрНоменклатураПоставщика.Идентификатор; 
		СбисИмяКакИд = Ложь;
	Иначе
		ID = NAME;
	КонецЕсли;	
	ID = СбисИдентификатор(ID);
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
    Recordset.Open("Select * from NomPost where NomPost.ID ='"+ID+"'",БД,2,3);
	
	Если НЕ Recordset.Fields.Count = 10 Тогда
		//По числу полей определим, соответствует ли формат БД требуемому.
		СбисОбновитьФайлБД(ФайлНоменклатурыПоставщика, БД, Recordset.Fields.Count);
		//Переоткроем файл после обновления
		Recordset.Close();
    	Recordset.CursorLocation = 3;
   		Recordset.Open("Select * from NomPost where NomPost.ID ='"+ID+"'",БД,2,3);
	КонецЕсли;           
	
	Результат = Новый Структура("Номенклатура, Характеристика, ЕдИзмОрг, Коэффициент");
	
	Если Recordset.EOF=Ложь Тогда 
		Если ЗначениеЗаполнено(RecordSet.Fields("IDNOM").value) и ЗначениеЗаполнено(RecordSet.Fields("SPRNOM").value) Тогда
			Результат.Номенклатура = Справочники[СокрЛП(RecordSet.Fields("SPRNOM").value)].ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(RecordSet.Fields("IDNOM").value)));	
			Если ЗначениеЗаполнено(RecordSet.Fields("IDCHAR").value) и ЗначениеЗаполнено(RecordSet.Fields("SPRCHAR").value) Тогда
				Результат.Характеристика = Справочники[СокрЛП(RecordSet.Fields("SPRCHAR").value)].ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(RecordSet.Fields("IDCHAR").value)));	
			КонецЕсли;
			Если ЗначениеЗаполнено(RecordSet.Fields("IDUNPOST").value) Тогда
				Результат.ЕдИзм = RecordSet.Fields("IDUNPOST").value;	
			КонецЕсли;
			Если ЗначениеЗаполнено(RecordSet.Fields("IDUNTORG").value) Тогда
				Результат.ЕдИзмОрг = Справочники[ИмяКлассификтораЕдИзм].НайтиПоНаименованию(RecordSet.Fields("IDUNTORG").value);	
			КонецЕсли;
			Если ЗначениеЗаполнено(RecordSet.Fields("RATIO").value) Тогда
				Результат.Коэффициент = RecordSet.Fields("RATIO").value;	
			КонецЕсли;
			Возврат Результат;
		Иначе
			Возврат Неопределено;
		КонецЕсли;		
	// << alo Меркурий
	// Искали по идентификатору и не нашли. Возможно, существуют старые сопоставления по наименованию - перепишем их
	// блок добавлен в версии 37. Удалить спустя время.
	//TODO40 удалить блок
	ИначеЕсли Не СбисИмяКакИд Тогда
		NAME = СбисИдентификатор(NAME);
		Если ЗначениеЗаполнено(NAME) Тогда
			RecordSet = Новый ComОбъект("ADODB.Recordset");
			Recordset.CursorLocation = 3;
			Recordset.Open("Select * from NomPost where NomPost.ID like'"+NAME+"%'",БД,2,3);	
			Если Recordset.EOF=Ложь Тогда 
				Если ЗначениеЗаполнено(RecordSet.Fields("IDNOM").value) и ЗначениеЗаполнено(RecordSet.Fields("SPRNOM").value) Тогда
					Результат.Номенклатура = Справочники[СокрЛП(RecordSet.Fields("SPRNOM").value)].ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(RecordSet.Fields("IDNOM").value)));	
					Если ЗначениеЗаполнено(RecordSet.Fields("IDCHAR").value) и ЗначениеЗаполнено(RecordSet.Fields("SPRCHAR").value) Тогда
						Результат.Характеристика = Справочники[СокрЛП(RecordSet.Fields("SPRCHAR").value)].ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(RecordSet.Fields("IDCHAR").value)));	
					КонецЕсли;
					Если ЗначениеЗаполнено(RecordSet.Fields("IDUNPOST").value) Тогда
						Результат.ЕдИзм = RecordSet.Fields("IDUNPOST").value;	
					КонецЕсли;
					Если ЗначениеЗаполнено(RecordSet.Fields("IDUNTORG").value) Тогда
						Результат.ЕдИзмОрг = Справочники[ИмяКлассификтораЕдИзм].НайтиПоНаименованию(RecordSet.Fields("IDUNTORG").value);	
					КонецЕсли;
					Если ЗначениеЗаполнено(RecordSet.Fields("RATIO").value) Тогда
						Результат.Коэффициент = RecordSet.Fields("RATIO").value;	
					КонецЕсли;
				КонецЕсли;		
				RecordSet.Fields("ID").value=ID; 
				RecordSet.Update();
				Возврат Результат;
			КонецЕсли;
		КонецЕсли; // alo Меркурий >>
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Процедура УстановитьСоответствиеНоменклатурыНаСервере(стрКонтрагент, стрНоменклатураПоставщика, КаталогНастроек, ИниКонфигурация)
// Процедура устанавливает/удаляет соответствие номенклатуры	
	ИНН = ?(стрКонтрагент.Свойство("СвЮЛ"), стрКонтрагент.СвЮЛ.ИНН, стрКонтрагент.СвФЛ.ИНН);
	ИмяКаталогаНоменклатурыПоставщика = КаталогНастроек + "НоменклатураПоставщика\"+ИНН+"\";
	
	old_ПроверитьФайлыСопоставленияДБФ(ИмяКаталогаНоменклатурыПоставщика);
	
	БД = Новый COMОбъект("ADODB.Connection");
	//БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//               "Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";Extended Properties=""DBASE IV;"";");
	//БД.Open("DRIVER=Microsoft dBase Driver (*.dbf);UID=admin;UserCommitSync=Yes;Threads=3;Statistics=0;SafeTransactions=0;PageTimeout=600;MaxScanRows=8;MaxBufferSize=2048;FIL=dBase 5.0;DriverId=533;Deleted=1;DefaultDir=" + ИмяКаталогаНоменклатурыПоставщика + ";" + ИмяКаталогаНоменклатурыПоставщика + ";CollatingSequence=ASCII");
	Если ИниКонфигурация.Свойство("СтрокаПодключенияДБФ") Тогда
		СтрокаПодключения = СтрЗаменить(ИниКонфигурация.СтрокаПодключенияДБФ.Значение, "'","")+ИмяКаталогаНоменклатурыПоставщика;
		БД.Open(СтрокаПодключения);
	Иначе
		СтрокаПодключения = "Driver={Microsoft dBASE Driver (*.dbf)};DriverID=533;Dbq=" + ИмяКаталогаНоменклатурыПоставщика + ";";
		Попытка
			БД.Open(СтрокаПодключения);
		Исключение
			СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Extended Properties='dBASE IV';Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";";
			БД.Open(СтрокаПодключения);
		КонецПопытки;
	КонецЕсли;
	
	NAME = стрНоменклатураПоставщика.Название;
	
	Если ЗначениеЗаполнено(стрНоменклатураПоставщика.КодПокупателя)
			И стрНоменклатураПоставщика.КодПокупателя <> "-" Тогда
		ID =стрНоменклатураПоставщика.КодПокупателя;	
	ИначеЕсли ЗначениеЗаполнено(стрНоменклатураПоставщика.Идентификатор)
			И стрНоменклатураПоставщика.Идентификатор <> "-" Тогда
		ID = стрНоменклатураПоставщика.Идентификатор;
	Иначе
		ID = NAME;
	КонецЕсли;
	
	ID = СбисИдентификатор(ID);
	
	Если стрНоменклатураПоставщика.Свойство("ЕдИзмОрг") Тогда
		IDUNTORG	= СбисПривестиЗначение(Строка(стрНоменклатураПоставщика.ЕдИзмОрг));
	КонецЕсли;
	Если стрНоменклатураПоставщика.Свойство("Коэффициент") Тогда
		RATIO		= СбисПривестиЗначение(стрНоменклатураПоставщика.Коэффициент);
	КонецЕсли;
	IDUNPOST = "";
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
    Recordset.Open("Select * from NomPost where NomPost.ID ='"+ID+"'",БД,2,3);

	Если ЗначениеЗаполнено(стрНоменклатураПоставщика.Номенклатура) Тогда   // если выбрали номенклатуру для сопоставления
		Если Recordset.EOF=Ложь Тогда 
			
		Иначе
			RecordSet.AddNew();
		    RecordSet.Fields("ID").value	= ID; 
			RecordSet.Fields("NAME").value	= СбисПривестиЗначение(NAME);
		КонецЕсли;
		RecordSet.Fields("IDNOM").value = Строка(стрНоменклатураПоставщика.Номенклатура.УникальныйИдентификатор()); 
		
		Если Метаданные.НайтиПоТипу(ТипЗнч(стрНоменклатураПоставщика.Номенклатура))<> Неопределено Тогда
			RecordSet.Fields("SPRNOM").value = Метаданные.НайтиПоТипу(ТипЗнч(стрНоменклатураПоставщика.Номенклатура)).Имя;
		Иначе
			Если ИниКонфигурация.Свойство("Номенклатура") Тогда
				RecordSet.Fields("SPRNOM").value = СокрЛП(Сред(ИниКонфигурация.Номенклатура.Значение, Найти(ИниКонфигурация.Номенклатура.Значение, ".")+1));
			Иначе
				RecordSet.Fields("SPRNOM").value = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стрНоменклатураПоставщика.Характеристика) Тогда
			RecordSet.Fields("IDCHAR").value = Строка(стрНоменклатураПоставщика.Характеристика.УникальныйИдентификатор());
			Если ИниКонфигурация.Свойство("ХарактеристикиНоменклатуры") Тогда
				RecordSet.Fields("SPRCHAR").value = СокрЛП(Сред(ИниКонфигурация.ХарактеристикиНоменклатуры.Значение, Найти(ИниКонфигурация.ХарактеристикиНоменклатуры.Значение, ".")+1));
			Иначе
				RecordSet.Fields("SPRCHAR").value="ХарактеристикиНоменклатуры";
			КонецЕсли;
		Иначе
			RecordSet.Fields("IDCHAR").value = "";
			RecordSet.Fields("SPRCHAR").value = "";
		КонецЕсли; 
		Если стрНоменклатураПоставщика.Свойство("GTIN") Тогда  
			Попытка
				RecordSet.Fields("GTIN").value = СокрЛП(стрНоменклатураПоставщика.GTIN);
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если стрНоменклатураПоставщика.Свойство("ЕдИзм") Тогда  
			Попытка
				RecordSet.Fields("IDUNPOST").value = СокрЛП(IDUNPOST);
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если стрНоменклатураПоставщика.Свойство("ЕдИзмОрг") Тогда  
			Попытка
				RecordSet.Fields("IDUNTORG").value = СокрЛП(IDUNTORG);
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если стрНоменклатураПоставщика.Свойство("Коэффициент") Тогда  
			Попытка
				RecordSet.Fields("RATIO").value = СокрЛП(RATIO);
			Исключение
			КонецПопытки;
		КонецЕсли;
		RecordSet.Update();
	Иначе  // если удалили номенклатуру для сопоставления
		Если Recordset.EOF=Ложь Тогда 
			Recordset.Delete(); 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция сбисПолучитьРеквизитНоменклатурыПоставщикаНаСервере(стрКонтрагент, стрНоменклатура, ИмяРеквизита, КаталогНастроек, ИниКонфигурация) Экспорт
// Процедура ищет реквизит номенклатуры контрагента	 (используется для получения идентификатора, штрихкода номенклатуры контрагента)
	ИНН = ?(стрКонтрагент.Свойство("СвЮЛ"), стрКонтрагент.СвЮЛ.ИНН, стрКонтрагент.СвФЛ.ИНН);
	ИмяКаталогаНоменклатурыПоставщика = КаталогНастроек + "НоменклатураПоставщика\"+ИНН+"\";
	
	old_ПроверитьФайлыСопоставленияДБФ(ИмяКаталогаНоменклатурыПоставщика);
	
	ФайлНоменклатурыПоставщика = Новый Файл(ИмяКаталогаНоменклатурыПоставщика + "NomPost.dbf");
	Если ФайлНоменклатурыПоставщика.Существует() = Ложь Тогда
		Возврат "";
	КонецЕсли;
	БД = Новый COMОбъект("ADODB.Connection");
	//БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//               "Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";Extended Properties=""DBASE IV;"";");
	//БД.Open("DRIVER=Microsoft dBase Driver (*.dbf);UID=admin;UserCommitSync=Yes;Threads=3;Statistics=0;SafeTransactions=0;PageTimeout=600;MaxScanRows=8;MaxBufferSize=2048;FIL=dBase 5.0;DriverId=533;Deleted=1;DefaultDir=" + ИмяКаталогаНоменклатурыПоставщика + ";" + ИмяКаталогаНоменклатурыПоставщика + ";CollatingSequence=ASCII");
	Если ИниКонфигурация.Свойство("СтрокаПодключенияДБФ") Тогда
		СтрокаПодключения = СтрЗаменить(ИниКонфигурация.СтрокаПодключенияДБФ.Значение, "'","")+ИмяКаталогаНоменклатурыПоставщика;
		БД.Open(СтрокаПодключения);
	Иначе
		СтрокаПодключения = "Driver={Microsoft dBASE Driver (*.dbf)};DriverID=533;Dbq=" + ИмяКаталогаНоменклатурыПоставщика + ";";
		Попытка
			БД.Open(СтрокаПодключения);
		Исключение
			СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Extended Properties='dBASE IV';Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";";
			БД.Open(СтрокаПодключения);
		КонецПопытки;
	КонецЕсли;
	
	IDNOM = Строка(стрНоменклатура.Номенклатура.УникальныйИдентификатор());
	Если ИниКонфигурация.Свойство("Номенклатура") Тогда
		SPRNOM = СокрЛП(Сред(ИниКонфигурация.Номенклатура.Значение, Найти(ИниКонфигурация.Номенклатура.Значение, ".")+1));
	Иначе
		SPRNOM = "Номенклатура";
	КонецЕсли;
	ТекстЗапроса = "Select * from NomPost where NomPost.IDNOM='"+IDNOM+"'"; 
	ТекстЗапросаБезХарактеристики = ТекстЗапроса;
	Если ЗначениеЗаполнено(стрНоменклатура.Характеристика) Тогда
		IDCHAR = Строка(стрНоменклатура.Характеристика.УникальныйИдентификатор());
		Если ИниКонфигурация.Свойство("ХарактеристикиНоменклатуры") Тогда
			SPRCHAR = СокрЛП(Сред(ИниКонфигурация.ХарактеристикиНоменклатуры.Значение, Найти(ИниКонфигурация.ХарактеристикиНоменклатуры.Значение, ".")+1));
		Иначе
			SPRCHAR="ХарактеристикиНоменклатуры";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + " and NomPost.IDCHAR='"+IDCHAR+"'";
	КонецЕсли;		
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
    Recordset.Open(ТекстЗапроса,БД,2,3);

	Если Recordset.EOF=Ложь Тогда   
		Попытка
			Возврат СокрЛП(RecordSet.Fields(ИмяРеквизита).value);
		Исключение
			Возврат "";
		КонецПопытки;
	Иначе 
		// Сделаем запрос по Номенклатуре без характеристики, задача №1185740228
		Recordset.CursorLocation = 3;
		Recordset.Open(ТекстЗапросаБезХарактеристики, БД, 2, 3);
		
		Если Recordset.EOF=Ложь Тогда   
			
			Попытка
				Возврат СокрЛП(RecordSet.Fields(ИмяРеквизита).value);
			Исключение
				Возврат "";
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
		Возврат "";
	КонецФункции
	
//NAME		- название номенклатуры поставщика
//ID		- идентификатор номенклатуры поставщика
//IDNOM		- идентификатор номенклатуры в 1С (УИД)
//SPRNOM	- название справочника номенклатуры 1С (Номенклатура)
//IDCHAR	- идентификатор характеристики номенклатуры в 1С (УИД)
//SPRCHAR	- название справочника характеристик 1С (ХарактеристикиНоменклатуры)
//IDUNPOST	- идентификатор единицы измерения в 1С (УИД)
//IDUNTORG	- название справочника единиц измерения 1С (УпаковкиЕдиницыИзмерения)
//RATIO		- коэффициет пересчета в эту запись
//GTIN		- глобальный номер товарной продукции, при наличии.
&НаСервереБезКонтекста
Процедура СбисЗаполнитьНовыйФайлСопоставления(БД)
	БД.Execute("Create Table NomPost.dbf (NAME char(240), ID char(240), IDNOM char(240), SPRNOM char(240), IDCHAR char(240), SPRCHAR char(240), IDUNPOST char(240),IDUNTORG char(240), RATIO char(240), GTIN char(240))");	
КонецПроцедуры

//Процедура приводит старый файл DBF к "новому формату", с переносом старых данных
&НаСервереБезКонтекста
Процедура СбисОбновитьФайлБД(СтарыйФайлНомПост, БД, ЧислоСуществующихЗаписей)
	ПереместитьФайл(СтарыйФайлНомПост.ПолноеИмя, СтрЗаменить(СтарыйФайлНомПост.ПолноеИмя,"NomPost","NPOld")); 
	Попытка
		СбисЗаполнитьНовыйФайлСопоставления(БД);
		Если ЧислоСуществующихЗаписей = 7 Тогда
			//Переносим вместе с GTIN
			БД.Execute("INSERT INTO NomPost(NAME, ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR, GTIN) SELECT NAME, ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR, GTIN FROM NPOld");
		Иначе
			//Совсем старый, либо неизвестный формат. Переносим то, что есть
			БД.Execute("INSERT INTO NomPost(NAME, ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR) SELECT NAME, ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR FROM NPOld");
		КонецЕсли;	
	Исключение
		Ошибка = ОписаниеОшибки();      
		Сообщить("Не удалось обновить файл сопоставления ("+ Ошибка +")");
		ПереместитьФайл(СтрЗаменить(СтарыйФайлНомПост.ПолноеИмя,"NomPost","NPOld"), СтарыйФайлНомПост.ПолноеИмя);
	КонецПопытки;		
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Сопоставление_Номенклатура_DBF_Внутренние_КлассыРаботыСопоставления

#Область include_core2_vo2_Сопоставление_Номенклатура_DBF_Внутренние_КлассыРаботыСопоставления_НаборЗаписейDBF

&НаСервере
Функция НовыйНаборЗаписейДБФ(СоединениеСДБФ)
	
	Возврат Новый Структура("_класс, СоединениеСДБФ, Номенклатура1С, НоменклатураСБИС, Единицы", "НаборЗаписейDBF", СоединениеСДБФ, Новый Массив, Новый Массив, Новый Массив);
	
КонецФункции

&НаСервере
Процедура НаборЗаписейДБФ_Добавить(НаборЗаписейДБФ, Ключ, Значение);
	
	НаборЗаписейДБФ[Ключ].Добавить(Значение);
	
КонецПроцедуры

&НаСервере
Процедура НаборЗаписейДБФ_Записать(НаборЗаписейДБФ);
	
	Для Каждого СтруктураЗаписи Из НаборЗаписейДБФ.НоменклатураСБИС Цикл
		ЗаписьДБФСБИС_Записать(СтруктураЗаписи);
	КонецЦикла;
	Для Каждого СтруктураЗаписи Из НаборЗаписейДБФ.Номенклатура1С Цикл
		ЗаписьДБФНоменклатура1С_Записать(СтруктураЗаписи);
	КонецЦикла;
	Для Каждого СтруктураЗаписи Из НаборЗаписейДБФ.Единицы Цикл
		ЗаписьДБФЕдиница_Записать(СтруктураЗаписи);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НовыйНаборЗаписейДБФ_СформироватьНабор(НаборЗаписейДБФ, СтрокаСопоставленияСБИССервер);
	
	МодульОбъектаСервер = МодульОбъектаСервер();
	
	СтруктураЗаписиСБИС	= НовыйЗаписьДБФСБИС(НаборЗаписейДБФ.СоединениеСДБФ, СтрокаСопоставленияСБИССервер);
	НаборЗаписейДБФ_Добавить(НаборЗаписейДБФ, "НоменклатураСБИС", СтруктураЗаписиСБИС);
	
	СопоставлениеНоменклатуры	= МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрокаСопоставленияСБИССервер, "Номенклатура1С");
	ЕдиницыИзмеренияСБИС		= МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрокаСопоставленияСБИССервер, "Единицы");
	
	Для Каждого КлючИЗнчениеИС Из СопоставлениеНоменклатуры Цикл
		
		//Расклонировать по каждому элементу соответствия отдельную запись на ИД позиции СБИС
		ЗаписьДБФНоменклатура1С	= НовыйЗаписьДБФНоменклатура1С(НаборЗаписейДБФ.СоединениеСДБФ, СтрокаСопоставленияСБИССервер, СтруктураЗаписиСБИС, КлючИЗнчениеИС.Ключ);
		НаборХарактеристик		= МодульОбъектаСервер.ОписаниеНоменклатуры1ССервер_Получить(КлючИЗнчениеИС.Значение, "Характеристики");
		Если ЗначениеЗаполнено(НаборХарактеристик) Тогда
			Для Каждого ЗначениеХарактеристики Из НаборХарактеристик Цикл
				
				СтруктураЗаписи1С_Хар = ЗаписьДБФНоменклатура1С_Скопировать(ЗаписьДБФНоменклатура1С);
				
				ЗаписьДБФНоменклатура1С_Установить(СтруктураЗаписи1С_Хар, "Характеристика", ЗначениеХарактеристики);
				НаборЗаписейДБФ_Добавить(НаборЗаписейДБФ, "Номенклатура1С", СтруктураЗаписи1С_Хар);
				
			КонецЦикла;
		Иначе
			НаборЗаписейДБФ_Добавить(НаборЗаписейДБФ, "Номенклатура1С", ЗаписьДБФНоменклатура1С)
		КонецЕсли;
		
		ЕдиницыИзмерения1С	= МодульОбъектаСервер.ОписаниеНоменклатуры1ССервер_Получить(КлючИЗнчениеИС.Значение, "Единицы");
		Для Каждого КлючИЗначениеЕдиница Из ЕдиницыИзмерения1С Цикл
			
			СтруктураЗаписи1С = НовыйЗаписьДБФЕдиница(СтруктураЗаписиСБИС.СоединениеСДБФ, СтруктураЗаписиСБИС, КлючИЗначениеЕдиница.Значение);
			НаборЗаписейДБФ_Добавить(НаборЗаписейДБФ, "Единицы", СтруктураЗаписи1С)
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначениеЕдиница Из ЕдиницыИзмеренияСБИС Цикл
		
		СтруктураЗаписи1С = НовыйЗаписьДБФЕдиница(СтруктураЗаписиСБИС.СоединениеСДБФ, СтруктураЗаписиСБИС, КлючИЗначениеЕдиница.Значение);
		НаборЗаписейДБФ_Добавить(НаборЗаписейДБФ, "Единицы", СтруктураЗаписи1С);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция - описывает запись в ДБФ номенклатуры СБИС
//
// Параметры:
//  ЗаписьНоменклатурыПоставщика - 	 - 
// 
// Возвращаемое значение:
// НовыйЗаписьДБФ  - Структура
//
&НаСервере
Функция НовыйЗаписьДБФСБИС(СоединениеСДБФ, ЗаписьНоменклатурыПоставщика=Неопределено)
	
	//		KEY_ID	- (Индекс, Ключ) идентификатор для связи с таблицами.
	//		NOMSB_ID	- (Индекс) идентификатор номенклатуры поставщика.
	//  	NOMSB_NM	- название номенклатуры поставщика.
	//  	CHRSB_ID	- (Индекс) идентификатор характеристики номенклатуры поставщика.
	
	ОписаниеФайлБД	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	НаборПолей		= Новый Структура;
	Для Каждого КлючИЗначение Из ОписаниеФайлБД.Поля Цикл
		НаборПолей.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.Значение);
	КонецЦикла;
	Результат	= Новый Структура("_класс, Поля, СоединениеСДБФ", "ЗаписьДБФСБИС", НаборПолей, СоединениеСДБФ);
	
	Если Не ЗаписьНоменклатурыПоставщика = Неопределено Тогда
		
		ЗаписьДБФСБИС_Заполнить(Результат, ЗаписьНоменклатурыПоставщика);
		
	КонецЕсли;
	
	НаборПолей.KEY_ID = ЗаписьДБФСБИС_КлючЗаписи(Результат);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаписьДБФСБИС_Заполнить(ЗаписьДБФСБИС, ДанныеВходящие)
	
	МодульОбъектаСервер = МодульОбъектаСервер();
	
	Если ДанныеВходящие.Свойство("_класс") Тогда
		Если ДанныеВходящие._класс = "СтрокаСопоставленияСБИС" Тогда
			ЗаписьДБФСБИС.Поля.NOMSB_ID = МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(ДанныеВходящие, "Код");
			ЗаписьДБФСБИС.Поля.NOMSB_NM = МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(ДанныеВходящие, "ИмяНоменклатурыСБИС");
			ЗаписьДБФСБИС.Поля.CHRSB_ID = МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(ДанныеВходящие, "ИдХарактеристикиСБИС");
		КонецЕсли;
	Иначе
		//Это старая запись СтрНоменклатураПоставщика
		ЗаписьДБФСБИС.Поля.NOMSB_ID = ДанныеВходящие.НоменклатураСБИС;
		Если ЗначениеЗаполнено(ДанныеВходящие.ИмяНоменклатурыСБИС) Тогда
			ЗаписьДБФСБИС.Поля.NOMSB_NM = ДанныеВходящие.ИмяНоменклатурыСБИС;
		КонецЕсли;
		Если 	ДанныеВходящие.Свойство("Характеристика")
			 И	ЗначениеЗаполнено(ДанныеВходящие.Характеристика) Тогда
			ЗаписьДБФСБИС.Поля.CHRSB_ID = ДанныеВходящие.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

// Процедура - очищает записи, связанные с ДБФ СБИС и текущую.
//
// Параметры:
//  ЗаписьДБФСБИС	 - Структура, ЗаписьДБФСБИС	 - запись корневой таблицы СБИС, из которой удаляются записи и все связанные
//
&НаСервере
Процедура ЗаписьДБФСБИС_Очистить(ЗаписьДБФСБИС)
	
	СоединениеБД	= МодульОбъектаСервер().РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, ЗаписьДБФСБИС.СоединениеСДБФ);

	ОписаниеФайлаНоменклатура1С		= ЗаписьДБФСБИС.СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаНоменклатураСБИС	= ЗаписьДБФСБИС.СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаЕдиниц				= ЗаписьДБФСБИС.СоединениеСДБФ.Файлы.Получить("Единицы");
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
	
	ШаблонЗапросаНомСбис	= "Select * from {base_sbis} where {base_sbis}.KEY_ID = {key}";
	ШаблонЗапросаНомСбис	= СтрЗаменить(ШаблонЗапросаНомСбис,"{base_sbis}",	ОписаниеФайлаНоменклатураСБИС.ИмяБД);

	ШаблонЗапросаНом1С		= "Select * from {base_1С} where {base_1С}.KEY_ID = {key}";
	ШаблонЗапросаНом1С		= СтрЗаменить(ШаблонЗапросаНом1С,"{base_1С}",		ОписаниеФайлаНоменклатура1С.ИмяБД);
	
	ШаблонЗапросаЕдиниц		= "Select * from {base_unit} where {base_unit}.KEY_ID = {key}";
	ШаблонЗапросаЕдиниц		= СтрЗаменить(ШаблонЗапросаЕдиниц,	"{base_unit}",	ОписаниеФайлаЕдиниц.ИмяБД);

	КлючЗаписи	= ЗаписьДБФСБИС_КлючЗаписи(ЗаписьДБФСБИС);

	ФильтрКлюч		= "'" + КлючЗаписи + "'";
	ЗапросЕдиниц	= СтрЗаменить(ШаблонЗапросаЕдиниц,	"{key}", ФильтрКлюч);
	ЗапросНомСбис	= СтрЗаменить(ШаблонЗапросаНомСбис,	"{key}", ФильтрКлюч);
	ЗапросНом1С		= СтрЗаменить(ШаблонЗапросаНом1С,	"{key}", ФильтрКлюч);
	
	Recordset.Open(ЗапросЕдиниц, СоединениеБД, 2, 3);
	Пока Не Recordset.EOF() Цикл
		Recordset.Delete(); 
		Recordset.MoveNext();
	КонецЦикла;
	Recordset.Close();
	
	Recordset.Open(ЗапросНом1С, СоединениеБД, 2, 3);
	Пока Не Recordset.EOF() Цикл
		Recordset.Delete(); 
		Recordset.MoveNext();
	КонецЦикла;
	Recordset.Close();
	
	Recordset.Open(ЗапросНомСбис, СоединениеБД, 2, 3);
	Пока Не Recordset.EOF Цикл  
		Recordset.Delete(); 
		Recordset.MoveNext();
	КонецЦикла;
	Recordset.Close();

КонецПроцедуры

// Возвращает ключ для связи таблиц
// Параметры:
//  ЗаписьДБФ	 - НовыйЗаписьДБФ Структура	 - описание записи
// 
// Возвращаемое значение:
//  Строка - Ключ для связи
//
&НаСервере
Функция ЗаписьДБФСБИС_КлючЗаписи(ЗаписьДБФ)
	
	Если ЗначениеЗаполнено(ЗаписьДБФ.Поля.KEY_ID) Тогда
		Возврат ЗаписьДБФ.Поля.KEY_ID;
	КонецЕсли;
	Результат = ЗаписьДБФ.Поля.NOMSB_ID;
	Если ЗначениеЗаполнено(ЗаписьДБФ.Поля.CHRSB_ID) Тогда
		Результат = Результат + "_" + ЗаписьДБФ.Поля.CHRSB_ID;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаписьДБФСБИС_Записать(СтруктураЗаписи)
	
	ЗаписьДБФОбновить	= ЗаписьДБФСБИС_НайтиСуществующую(СтруктураЗаписи, СтруктураЗаписи.СоединениеСДБФ);
	
	Если ЗаписьДБФОбновить = Неопределено Тогда
		СоединениеБД					= МодульОбъектаСервер().РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СтруктураЗаписи.СоединениеСДБФ);
		ОписаниеФайлаНоменклатураСБИС	= СтруктураЗаписи.СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
		
		ШаблонДобавить = 
		"INSERT INTO {base_sbis} 
		|VALUES('{KEY_ID}',
		|		'{NOMSB_ID}',
		|		'{NOMSB_NM}',
		|		'{CHRSB_ID}')";
		ШаблонДобавить = СтрЗаменить(ШаблонДобавить, "{base_sbis}",	ОписаниеФайлаНоменклатураСБИС.ИмяБД);

		Для Каждого КлючИЗначениеЗаписи Из СтруктураЗаписи.Поля Цикл
			
			ШаблонДобавить = СтрЗаменить(ШаблонДобавить, "{" + КлючИЗначениеЗаписи.Ключ + "}", КлючИЗначениеЗаписи.Значение);
			
		КонецЦикла;
		
		СоединениеБД.Execute(ШаблонДобавить);
		
	Иначе
		ЗаписьДБФОбновить.Fields("KEY_ID").Value = Лев(СтруктураЗаписи.Поля.KEY_ID, 240);
		ЗаписьДБФОбновить.Fields("NOMSB_ID").Value = Лев(СтруктураЗаписи.Поля.NOMSB_ID, 240);
		ЗаписьДБФОбновить.Fields("NOMSB_NM").Value = Лев(СтруктураЗаписи.Поля.NOMSB_NM, 240);
		ЗаписьДБФОбновить.Fields("CHRSB_ID").Value = Лев(СтруктураЗаписи.Поля.CHRSB_ID, 240);
		ЗаписьДБФОбновить.Update();
		ЗаписьДБФОбновить.Close();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаписьДБФСБИС_НайтиСуществующую(СтруктураЗаписи, СоединениеСДБФ, ДопПараметры=Неопределено)
	Перем ЛРезультат;
	
	СоединениеБД					= МодульОбъектаСервер().РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СоединениеСДБФ);
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	
	//		KEY_ID	- (Индекс, Ключ) идентификатор для связи с таблицами.
	//		NOMSB_ID	- (Индекс) идентификатор номенклатуры поставщика.
	//  	NOMSB_NM	- название номенклатуры поставщика.
	//  	CHRSB_ID	- (Индекс) идентификатор характеристики номенклатуры поставщика.
	ШаблонПоискаЗаписиСБИС =  
	"SELECT * FROM {base_sbis}
	|WHERE {base_sbis}.KEY_ID = '{ID}'";
	ШаблонПоискаЗаписиСБИС = СтрЗаменить(ШаблонПоискаЗаписиСБИС, "{base_sbis}",	ОписаниеФайлаНоменклатураСБИС.ИмяБД);
	ШаблонПоискаЗаписиСБИС = СтрЗаменить(ШаблонПоискаЗаписиСБИС, "{ID}",		СтруктураЗаписи.Поля.KEY_ID);
	
	//Проверить наличие корневой записи
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
	RecordSet.Open(ШаблонПоискаЗаписиСБИС, СоединениеБД, 2, 3);
	
	Если Recordset.EOF Тогда
		RecordSet.Close();
		Если	Не	ДопПараметры = Неопределено	
			И		ДопПараметры.Свойство("НайтиПоИд")
			И		ДопПараметры.НайтиПоИд Тогда
			//Поиск без характеристики, по ИД номенклатуры
			ШаблонПоискаЗаписиСБИС =  
			"SELECT * FROM {base_sbis}
			|WHERE {base_sbis}.NOMSB_ID = '{ID}'";
			ШаблонПоискаЗаписиСБИС = СтрЗаменить(ШаблонПоискаЗаписиСБИС, "{base_sbis}",	ОписаниеФайлаНоменклатураСБИС.ИмяБД);
			ШаблонПоискаЗаписиСБИС = СтрЗаменить(ШаблонПоискаЗаписиСБИС, "{ID}",		СтруктураЗаписи.Поля.KEY_ID);
			
			RecordSet.Open(ШаблонПоискаЗаписиСБИС, СоединениеБД, 2, 3);
			
			Если Recordset.EOF Тогда
				RecordSet.Close();
			Иначе
				ЛРезультат = RecordSet;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		ЛРезультат = RecordSet;
	КонецЕсли;
	
	Возврат ЛРезультат;
	
КонецФункции

&НаСервере
Функция НовыйЗаписьДБФНоменклатура1С(СоединениеСДБФ, СтрокаСопоставленияСБИС=Неопределено, ЗаписьДБФСБИС=Неопределено, СсылкаНоменклатура=Неопределено)
	
	ОписаниеФайлБД	= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	НаборПолей		= Новый Структура;
	Для Каждого КлючИЗначение Из ОписаниеФайлБД.Поля Цикл
		НаборПолей.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.Значение);
	КонецЦикла;
	
	Результат	= Новый Структура("_класс, Поля, СоединениеСДБФ", "ЗаписьДБФНоменклатура1С", НаборПолей);
	
	Если Не СтрокаСопоставленияСБИС = Неопределено Тогда
		
		МодульОбъектаСервер = МодульОбъектаСервер();
		
		ОписаниеНоменклатуры1С	= МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрокаСопоставленияСБИС, СсылкаНоменклатура);
		
		ЗаписьДБФНоменклатура1С_Установить(Результат, "Номенклатура",	СсылкаНоменклатура);
		ЗаписьДБФНоменклатура1С_Установить(Результат, "GTIN",			МодульОбъектаСервер.ОписаниеНоменклатуры1ССервер_Получить(ОписаниеНоменклатуры1С, "GTIN"));
		
	КонецЕсли;
	
	Если Не ЗаписьДБФСБИС = Неопределено Тогда
		
		НаборПолей.KEY_ID			= ЗаписьДБФСБИС_КлючЗаписи(ЗаписьДБФСБИС);
		Результат.СоединениеСДБФ	= ЗаписьДБФСБИС.СоединениеСДБФ;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаписьДБФНоменклатура1С_Скопировать(ЗаписьДБФНоменклатура1С)
	
	ЗаписьНовая = НовыйЗаписьДБФНоменклатура1С(ЗаписьДБФНоменклатура1С.СоединениеСДБФ);
	ЗаполнитьЗначенияСвойств(ЗаписьНовая.Поля, ЗаписьДБФНоменклатура1С.Поля);
	ЗаписьНовая.СоединениеСДБФ = ЗаписьДБФНоменклатура1С.СоединениеСДБФ;
	Возврат ЗаписьНовая;
	
КонецФункции

&НаСервере
Процедура ЗаписьДБФНоменклатура1С_Установить(ЗаписьДБФНоменклатура1С, КлючЗаписать, ЗначениеВходящее)
	Перем ЗначениеВЗапись;
	
	ЗначениеВЗапись = ЗначениеВходящее;
	Если Не ЗначениеЗаполнено(ЗначениеВЗапись) Тогда
		ЗначениеВЗапись = "";
	КонецЕсли;
	
	Если		КлючЗаписать = "Номенклатура" Тогда
		Попытка
			ЗаписьДБФНоменклатура1С.Поля.NOM1C_ID	= Строка(ЗначениеВЗапись.УникальныйИдентификатор());
			ЗаписьДБФНоменклатура1С.Поля.NOM1C_TY	= ПредставлениеТипаПоСсылке(ЗначениеВЗапись, "Номенклатура");
		Исключение
			//Не ссылка
			ЗаписьДБФНоменклатура1С.Поля.NOM1C_ID	= "";
			ЗаписьДБФНоменклатура1С.Поля.NOM1C_TY	= "";
		КонецПопытки;
	ИначеЕсли	КлючЗаписать = "Характеристика" Тогда
		Попытка
			ЗаписьДБФНоменклатура1С.Поля.CHR1C_ID	= Строка(ЗначениеВЗапись.УникальныйИдентификатор());
			ЗаписьДБФНоменклатура1С.Поля.CHR1C_TY	= ПредставлениеТипаПоСсылке(ЗначениеВЗапись, "ХарактеристикиНоменклатуры");
		Исключение
			//Не ссылка
			ЗаписьДБФНоменклатура1С.Поля.CHR1C_ID	= "";
			ЗаписьДБФНоменклатура1С.Поля.CHR1C_TY	= "";
		КонецПопытки;
	ИначеЕсли	ЗаписьДБФНоменклатура1С.Поля.Свойство(КлючЗаписать) Тогда
		ЗаписьДБФНоменклатура1С.Поля[КлючЗаписать] = ЗначениеВЗапись;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписьДБФНоменклатура1С_Записать(СтруктураЗаписи)
	
	СоединениеБД	= МодульОбъектаСервер().РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СтруктураЗаписи.СоединениеСДБФ);
	ОписаниеФайлБД	= СтруктураЗаписи.СоединениеСДБФ.Файлы.Получить("Номенклатура1С");

	ШаблонПоиска = ОписаниеФайлБД.Шаблоны.Поискзаписи;
	Для Каждого КлючИЗначениеЗаписи Из СтруктураЗаписи.Поля Цикл
		ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "{" + КлючИЗначениеЗаписи.Ключ + "}", КлючИЗначениеЗаписи.Значение);
	КонецЦикла;
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
	RecordSet.Open(ШаблонПоиска, СоединениеБД, 2, 3);
	Если Recordset.EOF Тогда
		ШаблонДобавить = ОписаниеФайлБД.Шаблоны.НоваяЗапись;
		Для Каждого КлючИЗначениеЗаписи Из СтруктураЗаписи.Поля Цикл
			ШаблонДобавить = СтрЗаменить(ШаблонДобавить, "{" + КлючИЗначениеЗаписи.Ключ + "}", КлючИЗначениеЗаписи.Значение);
		КонецЦикла;
		СоединениеБД.Execute(ШаблонДобавить);
	Иначе
		Recordset.Fields("CHR1C_TY").value	= СтруктураЗаписи.Поля.CHR1C_TY;
		Recordset.Fields("NOM1C_TY").value	= СтруктураЗаписи.Поля.NOM1C_TY;
		Recordset.Fields("GTIN").value		= СтруктураЗаписи.Поля.GTIN;
		RecordSet.Update();
	КонецЕсли;
	RecordSet.Close();

КонецПроцедуры

&НаСервере
Функция НовыйЗаписьДБФЕдиница(СоединениеСДБФ, ЗаписьДБФСБИС, ИсточникДанныхЕдиницы=Неопределено)
	
	ОписаниеФайлБД	= СоединениеСДБФ.Файлы.Получить("Единицы");
	НаборПолей		= Новый Структура;
	Для Каждого КлючИЗначение Из ОписаниеФайлБД.Поля Цикл
		НаборПолей.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.Значение);
	КонецЦикла;
	НаборПолей.KEY_ID	= ЗаписьДБФСБИС.Поля.KEY_ID;
	Результат			= Новый Структура("_класс, Поля, СоединениеСДБФ", "ЗаписьДБФНоменклатура1С", НаборПолей, СоединениеСДБФ);
	
	Если Не ИсточникДанныхЕдиницы = Неопределено Тогда
		ЗаписьДБФЕдиница_Установить(Результат, ИсточникДанныхЕдиницы._класс, ИсточникДанныхЕдиницы);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
&НаСервере
Процедура ЗаписьДБФЕдиница_Установить(СтруктураЗаписиЕдиница, КлючЗаписать, ЗначениеВходящее)
	Перем ЗначениеВЗапись;
	
	МодульОбъектаСервер = МодульОбъектаСервер();
	
	ЗначениеВЗапись = ЗначениеВходящее;
	Если Не ЗначениеЗаполнено(ЗначениеВЗапись) Тогда
		ЗначениеВЗапись = "";
	КонецЕсли;
	
	//" (KEY_ID char(240), UNTSB_ID char(50), UNTSB_NM char(240), UNT1C_ID char(36), UNT1C_TY char(100), UOW1C_ID char(36), OKEY char(10),RATIO char(15))");
	Если		КлючЗаписать = "СопоставлениеДляЕдиницы" Тогда
		
		ЗаписьДБФЕдиница_Установить(СтруктураЗаписиЕдиница, "Единица",		МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Получить(ЗначениеВходящее, "Ссылка"));
		ЗаписьДБФЕдиница_Установить(СтруктураЗаписиЕдиница, "ИдСБИС",		МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Получить(ЗначениеВходящее, "ОКЕИ"));
		ЗаписьДБФЕдиница_Установить(СтруктураЗаписиЕдиница, "ИмяСБИС",		МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Получить(ЗначениеВходящее, "Название"));
		ЗаписьДБФЕдиница_Установить(СтруктураЗаписиЕдиница, "Коэффициент",	МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Получить(ЗначениеВходящее, "Коэффициент"));
		ЗаписьДБФЕдиница_Установить(СтруктураЗаписиЕдиница, "Владелец",		МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Получить(ЗначениеВходящее, "Владелец"));
		
		Если Не ЗначениеЗаполнено(СтруктураЗаписиЕдиница.Поля.UNTSB_ID) Тогда
			СтруктураЗаписиЕдиница.Поля.UNTSB_ID = СтруктураЗаписиЕдиница.Поля.UNTSB_NM;
		КонецЕсли;
		
	ИначеЕсли 	КлючЗаписать = "ИдСБИС" Тогда
		
		СтруктураЗаписиЕдиница.Поля.UNTSB_ID	= ЗначениеВЗапись;
		СтруктураЗаписиЕдиница.Поля.OKEY		= ЗначениеВЗапись;
		
	ИначеЕсли	КлючЗаписать = "ИмяСБИС" Тогда
		
		СтруктураЗаписиЕдиница.Поля.UNTSB_NM	= ЗначениеВЗапись;
		
	ИначеЕсли	КлючЗаписать = "Единица" Тогда
		
		Попытка
			СтруктураЗаписиЕдиница.Поля.UNT1C_ID	= Строка(ЗначениеВЗапись.УникальныйИдентификатор());
			СтруктураЗаписиЕдиница.Поля.UNT1C_TY	= ПредставлениеТипаПоСсылке(ЗначениеВЗапись, "Единицы");
		Исключение
			//Не ссылка
			СтруктураЗаписиЕдиница.Поля.UNT1C_ID	= "";
			СтруктураЗаписиЕдиница.Поля.UNT1C_TY	= "";
		КонецПопытки;
		
	ИначеЕсли	КлючЗаписать = "Коэффициент" Тогда
		
		Если ЗначениеВЗапись = "" Тогда
			ЗначениеВЗапись = "1";
		КонецЕсли;
		СтруктураЗаписиЕдиница.Поля.RATIO = ЗначениеВЗапись;
		
	ИначеЕсли	КлючЗаписать = "Владелец" Тогда
		
		Если ТипЗнч(ЗначениеВходящее) = Тип("Строка") Тогда
			СтруктураЗаписиЕдиница.Поля.UOW1C_ID	= ЗначениеВходящее;
		ИначеЕсли ЗначениеЗаполнено(ЗначениеВЗапись) Тогда
			Попытка
				СтруктураЗаписиЕдиница.Поля.UOW1C_ID	= Строка(ЗначениеВЗапись.УникальныйИдентификатор());
			Исключение
				//Не ссылка
				СтруктураЗаписиЕдиница.Поля.UNT1C_ID	= "";
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли	СтруктураЗаписиЕдиница.Поля.Свойство(КлючЗаписать) Тогда
		
		СтруктураЗаписиЕдиница.Поля[КлючЗаписать] = ЗначениеВЗапись;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписьДБФЕдиница_Записать(СтруктураЗаписи)
	
	СоединениеБД	= МодульОбъектаСервер().РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СтруктураЗаписи.СоединениеСДБФ);
	ОписаниеФайлБД	= СтруктураЗаписи.СоединениеСДБФ.Файлы.Получить("Единицы");
	ШаблонПоиска	= ОписаниеФайлБД.Шаблоны.ПоискЗаписи;
	
	Для Каждого КлючИЗначениеЗаписи Из СтруктураЗаписи.Поля Цикл
		ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "{" + КлючИЗначениеЗаписи.Ключ + "}", КлючИЗначениеЗаписи.Значение);
	КонецЦикла;
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
	RecordSet.Open(ШаблонПоиска, СоединениеБД, 2, 3);
	Если Recordset.EOF Тогда
		ШаблонДобавить = ОписаниеФайлБД.Шаблоны.НоваяЗапись;
		Для Каждого КлючИЗначениеЗаписи Из СтруктураЗаписи.Поля Цикл
			ШаблонДобавить = СтрЗаменить(ШаблонДобавить, "{" + КлючИЗначениеЗаписи.Ключ + "}", КлючИЗначениеЗаписи.Значение);
		КонецЦикла;
		СоединениеБД.Execute(ШаблонДобавить);
	Иначе
		Для Каждого КлючИЗначениеПоля Из СтруктураЗаписи.Поля Цикл
			Recordset.Fields(КлючИЗначениеПоля.Ключ).value = КлючИЗначениеПоля.Значение
		КонецЦикла;
		RecordSet.Update();
	КонецЕсли;
	RecordSet.Close();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти
