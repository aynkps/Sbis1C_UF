
&НаКлиенте
Перем ГлобальныйКэш Экспорт;

&НаКлиенте
Перем СбисРаботаСJSON, ГлавноеОкно;

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент

#Область include_local_Модуль_МодульОбъектаКлиент_ПолучитьМодульОбъекта

&НаСервере
Функция МодульОбъектаСервер()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция МодульОбъектаСерверБезКонтекста()
	Возврат Новый (Тип("ВнешняяОбработкаОбъект.СБИС"));
КонецФункции

&НаКлиенте
Функция МодульОбъектаКлиент()
	Возврат ЭтаФорма;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ГлобальныйКэш

&НаКлиенте
Функция	ГлобальныйКэш_ЧтениеОтветовИВызовСобытий(Сбис3КомандыОжидаются=Неопределено) Экспорт
	
	Результат				= Новый Соответствие;
	МодульРаботыСОтветами	= ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция; 
	
	Попытка
		СбисСобытия = МодульРаботыСОтветами.СБИС_ПрочитатьПулОтветов(ГлобальныйКэш.СБИС);
		ВремяПолученияСобытий = ТекущаяДата();
	Исключение
		ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ГлобальныйКэш_ЧтениеОтветовИВызовСобытий");
	КонецПопытки;
	
	Для Каждого Сбис3СобытиеОтвет Из СбисСобытия Цикл
		ОтветОбработан = Ложь;
		
		АсинхронноеСбисСобытие = МодульРаботыСОтветами.СБИС_ОбработатьОтвет(Сбис3СобытиеОтвет);
		АсинхронноеСбисСобытие_Установить(АсинхронноеСбисСобытие, "Получено", ВремяПолученияСобытий);
		
		Если 		АсинхронноеСбисСобытие.Тип = "Event" Тогда
			ОтветОбработан = АсинхронноеСбисСобытие_ВызватьСобытиеПоПодписке(АсинхронноеСбисСобытие);
		ИначеЕсли   АсинхронноеСбисСобытие.Тип = "CriticalError" Тогда
			ОтветОбработан = АсинхронноеСбисСобытие_ВызватьСобытиеПоПодписке(АсинхронноеСбисСобытие);
			Если Не Сбис3КомандыОжидаются = Неопределено Тогда 
				//При крите дать ответ на все ожидаемые команды
				Для Каждого Сбис3КомандаОжидается Из Сбис3КомандыОжидаются Цикл
					НовоеАсинхронноеСобытие			= НовыйАсинхронноеСбисСобытие(Сбис3КомандаОжидается.Идентификатор, АсинхронноеСбисСобытие);
					КомандаОбрабатываемогоОтвета	= Неопределено;
					
					АсинхронноеСбисСобытие_ОсвободитьПоток(НовоеАсинхронноеСобытие, КомандаОбрабатываемогоОтвета, ОтветОбработан);
					
					Если Не КомандаОбрабатываемогоОтвета = Неопределено Тогда
						Результат.Вставить(Сбис3КомандаОжидается.Ключ, КомандаОбрабатываемогоОтвета); 
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли 	АсинхронноеСбисСобытие.Тип = "Async" Тогда
			//Если это асинхронное событие, то проставим в команду что есть ответ, но поток не снимается а продолжается его ожидание
			АсинхронныйПоток = АсинхронноеСбисСобытие_ПолучитьПоток(АсинхронноеСбисСобытие);
			Если Не АсинхронныйПоток = Неопределено Тогда
				АсинхронныйПоток.Ответ = АсинхронноеСбисСобытие.Данные;
			КонецЕсли;
			Если ПолучитьЗначениеПараметраСбис("РежимОтладки") Тогда
				лОтладочныеДанные = Новый Структура("Тип, Модуль, Вызов, Время, Идентификатор, Сообщение", АсинхронноеСбисСобытие.Тип);
				лОтладочныеДанные.Модуль		= ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя");
				лОтладочныеДанные.Сообщение		= АсинхронноеСбисСобытие.Данные;
				лОтладочныеДанные.Идентификатор	= АсинхронноеСбисСобытие.Идентификатор;
				лОтладочныеДанные.Время			= АсинхронноеСбисСобытие.Получено;
				Если АсинхронныйПоток = Неопределено Тогда
					лОтладочныеДанные.Вызов		= "Unknown";
				Иначе
					лОтладочныеДанные.Вызов		=  АсинхроннаяСбисКоманда_ИмяВызова(АсинхронныйПоток);
				КонецЕсли;
				ДанныеВЛог = Новый Массив;
				ДанныеВЛог.Добавить(лОтладочныеДанные);
				СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
			КонецЕсли;
			
			//Асинхронное событие, поместить промежуточный ответ на всякий
			Продолжить;
		КонецЕсли;
		
		//После чтения ответа, посмотрим что с ним сделать:
		//1. Есть соответствующий запрос, отправленный ранее. Тогда надо освободить поток и проверить наличие подписки на тип ответа и вызвать обработчик.
		//2. Мы ожидаем этот ответ синхронно, тогда добавим его в результат чтения.
		//3. Если не 1 и не 2, то добавим полученный ответ в список "ненужных", при необходимости обработать, или выгрузить в лог (включить режим отладки).
				
		КомандаОбрабатаемогоОтвета = Неопределено;
		АсинхронноеСбисСобытие_ОсвободитьПоток(АсинхронноеСбисСобытие, КомандаОбрабатаемогоОтвета, ОтветОбработан);
		
		//Если команда ожидается как ответ, подготовим результат
		КомандаНаВозврат = Неопределено;
		Если	Не Сбис3КомандыОжидаются		= Неопределено
			И	Не КомандаОбрабатаемогоОтвета	= Неопределено Тогда
			КомандаНаВозврат = Сбис3КомандыОжидаются.Получить(КомандаОбрабатаемогоОтвета.Идентификатор);
		КонецЕсли;
		
		Если КомандаНаВозврат = Неопределено Тогда
			
			Если Не ОтветОбработан Тогда
				АсинхронноеСбисСобытие_ДобавитьНеобработанныйОтвет(АсинхронноеСбисСобытие);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
	
		Результат.Вставить(АсинхронноеСбисСобытие.Идентификатор, КомандаНаВозврат);
		Сбис3КомандыОжидаются.Удалить(АсинхронноеСбисСобытие.Идентификатор);
		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ГлобальныйКэш_ОбработатьПросроченныеВызовы(СбисТочкаПроверки=Неопределено, Завершение=Ложь) Экспорт
	//Проверим отправленные запросы на предмет их актуальности.
	Если СбисТочкаПроверки = Неопределено Тогда
		СбисТочкаПроверки = ТекущаяДата();
	КонецЕсли;
	ЗапросыПросрочены = Новый Массив;
	Для Каждого КлючИЗначениеЗапросов Из ГлобальныйКэш.СБИС.ДанныеИнтеграции.Потоки Цикл
		Если		СбисТочкаПроверки - КлючИЗначениеЗапросов.Значение.ВремяВызова <= КлючИЗначениеЗапросов.Значение.ВремяОжиданияОтвета
			И Не	Завершение Тогда//Если завершение работы, то все вызовы "убиваются"
			Продолжить;
		КонецЕсли;
					
		ЗапросыПросрочены.Добавить(КлючИЗначениеЗапросов.Ключ);
	КонецЦикла;            

	Для Каждого ИдЗапросПросрочен Из ЗапросыПросрочены Цикл
		//Генерируем сообщение о просроченном запросе, чистим вызов так как уже не ждём ответа, если есть подписка на событие не получен ответ, вызываем.		
		АсинхронноеСбисСобытие		= НовыйАсинхронноеСбисСобытие(ИдЗапросПросрочен, , "Error");
		Сбис3КомандаПросрочена		= АсинхронноеСбисСобытие_ПолучитьПоток(АсинхронноеСбисСобытие);
		
		ИмяКомандыНеполученОтвет	= Сбис3КомандаПросрочена.ОбработчикВызова.ИмяПроцедуры;
		
		Если ИмяКомандыНеполученОтвет = "СбисОтправитьКоманду_Асинхронно" Тогда
			
			ИмяКомандыНеполученОтвет = Сбис3КомандаПросрочена.АргументВызова.Метод;
			
		КонецЕсли;
		
		ОтветПросрочено = НовыйСбисИсключение(775, ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + "." + ИмяКомандыНеполученОтвет,,, ИмяКомандыНеполученОтвет + "() не вернул ответ за разумное время");
		
		АсинхронноеСбисСобытие_Установить(АсинхронноеСбисСобытие, "Данные",	ОтветПросрочено);
		АсинхронноеСбисСобытие_ОсвободитьПоток(АсинхронноеСбисСобытие, Сбис3КомандаПросрочена, Истина);
		
		Если Не АсинхроннаяСбисКоманда_ВызватьСобытие(Сбис3КомандаПросрочена, АсинхронноеСбисСобытие) Тогда
			АсинхронноеСбисСобытие_ДобавитьНеобработанныйОтвет(АсинхронноеСбисСобытие);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

//Обрабатываем необработанные в срок ответы, чистим их по времени существования ответа
&НаКлиенте
Процедура ГлобальныйКэш_ОчиститьНевостребованныеОтветы(Аргумент = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Если Не ГлобальныйКэш.СБИС.ДанныеИнтеграции.НеизвестныеОтветы.Количество() Тогда
		Возврат;
	КонецЕсли;

	ТочкаПроверки	= ТекущаяДата();
	ДанныеВЛог		= Новый Массив;
	ВремяОжидания	= ПолучитьЗначениеПараметраСбис("ВремяОжиданияОтвета");

	КлючиОтветовНеВостребованы = Новый Массив;
	Для Каждого КлючИЗначениеОтвета Из ГлобальныйКэш.СБИС.ДанныеИнтеграции.НеизвестныеОтветы Цикл
		ИндексКоманд = 0;
		Пока ИндексКоманд < КлючИЗначениеОтвета.Значение.Количество() Цикл
			АсинхронноеСбисСобытие = КлючИЗначениеОтвета.Значение[ИндексКоманд];
			Если ТочкаПроверки - АсинхронноеСбисСобытие.Получено > ВремяОжидания Тогда
				Если ПолучитьЗначениеПараметраСбис("РежимОтладки") Тогда
					//Дампаем в лог необработанные события если надо
					лОтладочныеДанные = Новый Структура("Тип, Модуль, Вызов, Время, Сообщение, Идентификатор");
					лОтладочныеДанные.Модуль		= ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя");
					лОтладочныеДанные.Тип			= АсинхронноеСбисСобытие.Тип;
					лОтладочныеДанные.Идентификатор	= АсинхронноеСбисСобытие.Идентификатор;
					лОтладочныеДанные.Вызов			= "Unknown";
					лОтладочныеДанные.Время			= АсинхронноеСбисСобытие.Получено;
					лОтладочныеДанные.Сообщение		= АсинхронноеСбисСобытие.Данные;

					ДанныеВЛог.Добавить(лОтладочныеДанные);
				КонецЕсли;
				КлючИЗначениеОтвета.Значение.Удалить(ИндексКоманд);
			Иначе
				ИндексКоманд = ИндексКоманд + 1;
			КонецЕсли;
		КонецЦикла;
		Если Не КлючИЗначениеОтвета.Значение.Количество() Тогда
			КлючиОтветовНеВостребованы.Добавить(КлючИЗначениеОтвета.Ключ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючУдалить Из КлючиОтветовНеВостребованы Цикл
		ГлобальныйКэш.СБИС.ДанныеИнтеграции.НеизвестныеОтветы.Удалить(КлючУдалить);
	КонецЦикла;
	Если ДанныеВЛог.Количество() Тогда
		СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
	КонецЕсли;
	
	//Каждую минуту в режиме простоя повторно проверяем оставшиеся невостребованными сообщения, пока не будут почищены все.
	Если ГлобальныйКэш.СБИС.ДанныеИнтеграции.НеизвестныеОтветы.Количество() Тогда
		ПараметрыОтложенногоВызова = Новый Структура("Модуль, Периодичность, ВызватьСразу, ИмяПроцедуры, Аргумент, ИдентификаторДействия", МодульОбъектаКлиент(), 60, Ложь);
		ПараметрыОтложенногоВызова.ИмяПроцедуры				= "ГлобальныйКэш_ОчиститьНевостребованныеОтветы";
		ПараметрыОтложенногоВызова.ИдентификаторДействия	= Новый УникальныйИдентификатор;
		ПодключитьОтложенноеДействие(НовыйОтложенноеДействие(ПараметрыОтложенногоВызова));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ГлобальныйКэш_КоличествоАктивныхПотоков() Экспорт
	Возврат ГлобальныйКэш.СБИС.ДанныеИнтеграции.Потоки.Количество();
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыГлобальногоМодуля(ПараметрыУстановки=Неопределено, Кэш) Экспорт
	
	ГлобальныйКэшНовый	= Новый Структура("КэшНастроек, СБИС, Парам, ТекущийСеанс, ПараметрыСистемы, ТихийРежим, СовместимостьМетодов");
	Если ГлобальныйКэш = Неопределено Тогда
		ГлобальныйКэш	= ГлобальныйКэшНовый;
	Иначе
		Для Каждого КлючИЗначение Из ГлобальныйКэшНовый Цикл
			Если ГлобальныйКэш.Свойство(КлючИЗначение.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			ГлобальныйКэш.Вставить(КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ГлобальныйКэш, Кэш);
	СбисРаботаСJSON	= Кэш.РаботаСJSON;
	ГлавноеОкно		= Кэш.ГлавноеОкно;
	
КонецПроцедуры

&НаКлиенте
Функция ГлобальныйКэш_Получить(ИмяПараметраМодуля) Экспорт
	Перем ЗначениеПараметраМодуля;
	Если 	ГлобальныйКэш = Неопределено Тогда
		ГлобальныйКэш = Новый Структура;
	КонецЕсли;

	Если ИмяПараметраМодуля = "ПараметрыСистемы" Тогда
		Если	ГлобальныйКэш.Свойство(ИмяПараметраМодуля, ЗначениеПараметраМодуля) Тогда
			Возврат ЗначениеПараметраМодуля;
		КонецЕсли;
		ЗначениеПараметраМодуля = ПолучитьПараметрыСистемы();
		ОбновитьПараметрГлобальногоМодуля(ИмяПараметраМодуля, ЗначениеПараметраМодуля);
		Возврат ЗначениеПараметраМодуля;
	ИначеЕсли ИмяПараметраМодуля = "ПараметрыПользователя" Тогда
		Если	ГлобальныйКэш.Свойство("Парам", ЗначениеПараметраМодуля) Тогда
			Возврат ЗначениеПараметраМодуля;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПараметрГлобальногоМодуля(ИмяПараметраМодуля, ЗначениеПараметраМодуля) Экспорт
	
	Если		ИмяПараметраМодуля = "КэшНастроек"		Тогда
		
		ГлавноеОкно.Кэш.Вставить("КэшНастроек", ЗначениеПараметраМодуля);
		ГлобальныйКэш.КэшНастроек = ЗначениеПараметраМодуля;
		
	ИначеЕсли	ИмяПараметраМодуля = "РаботаСJSON"		Тогда
		
		ГлавноеОкно.Кэш[ИмяПараметраМодуля] = ЗначениеПараметраМодуля;
		СбисРаботаСJSON						= ЗначениеПараметраМодуля;
		
	ИначеЕсли	ИмяПараметраМодуля = "Парам"			Тогда
		
		ГлобальныйКэш[ИмяПараметраМодуля]	= ЗначениеПараметраМодуля;
		ГлавноеОкно.Кэш[ИмяПараметраМодуля] = ЗначениеПараметраМодуля;
		
	ИначеЕсли	ИмяПараметраМодуля = "ФормаНастроек"	Тогда
		
		ГлобальныйКэш.ТекущийСеанс.Модули.Настройки = ЗначениеПараметраМодуля;
		ГлавноеОкно.Кэш[ИмяПараметраМодуля]			= ЗначениеПараметраМодуля;
		
	ИначеЕсли	ИмяПараметраМодуля = "ГлавноеОкно"		Тогда
		
		ГлавноеОкно = ЗначениеПараметраМодуля;
		
	ИначеЕсли	ИмяПараметраМодуля = "ФункцииДокументов"Тогда
		
		ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов		= ЗначениеПараметраМодуля;
		ГлавноеОкно.Кэш.ТекущийСеанс.Модули.ФункцииДокументов	= ЗначениеПараметраМодуля;
		
	ИначеЕсли	ИмяПараметраМодуля = "ПараметрыСистемы"	Тогда
		
		ГлобальныйКэш.Вставить("ПараметрыСистемы", ЗначениеПараметраМодуля);
		Если	Не ГлавноеОкно = Неопределено
			И	Не ГлавноеОкно.Кэш = Неопределено Тогда
			
			ГлавноеОкно.Кэш.Вставить("ПараметрыСистемы", ЗначениеПараметраМодуля);
			
		КонецЕсли;
		
	ИначеЕсли	ИмяПараметраМодуля = "ДанныеИнтеграции"	Тогда
		
		ГлобальныйКэш.СБИС.ДанныеИнтеграции		= ЗначениеПараметраМодуля;	
		ГлавноеОкно.Кэш.СБИС.ДанныеИнтеграции	= ЗначениеПараметраМодуля;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущийЛокальныйКэш() Экспорт
	
	Возврат ГлавноеОкно.Кэш;
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Авторизация

&НаКлиенте
Процедура ВыполнитьАвторизациюВСбис(ПараметрыАвторизацииВходщие, ДопПараметры) Экспорт
	
	Если Не ГлобальныйКэш.СБИС.ОбменВключен Тогда
		ВызватьСбисИсключение(, "МодульОбъектаКлиент.ВыполнитьАвторизациюВСбис", 100, "Не включен обмен со СБИС", "Измените способ обмена в настройках соединения.");
	КонецЕсли;
	РежимАвторизации = НРег(ПараметрыАвторизацииВходщие.Режим);
	
	Отказ = Ложь;
	Если		ГлобальныйКэш.Парам.СпособОбмена = 1 Тогда
		//Интеграция через каталог
		Результат = "Ok";
	ИначеЕсли	ПараметрыАвторизацииВходщие.Режим = "потокену"			Тогда
		Результат = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.АвторизоватьсяПоТокену(ГлавноеОкно.Кэш, Отказ);
	ИначеЕсли	ПараметрыАвторизацииВходщие.Режим = "посертификату"		Тогда
		ИзменитьПараметрСбис("Сертификат", ПараметрыАвторизацииВходщие.Сертификат);
		Результат = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.АвторизоватьсяПоСертификату(ГлавноеОкно.Кэш, ПараметрыАвторизацииВходщие.Сертификат,Отказ);		
	ИначеЕсли	ПараметрыАвторизацииВходщие.Режим = "пологинупаролю"	Тогда
		Результат = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.АвторизоватьсяПоЛогинуПаролю(ГлавноеОкно.Кэш,ПараметрыАвторизацииВходщие.Логин,ПараметрыАвторизацииВходщие.Пароль,Отказ);
	Иначе
		ВызватьСбисИсключение(, "МодульОбъектаКлиент.ВыполнитьАвторизациюВСбис", 100, "Неизвестный способ авторизации в СБИС");
	КонецЕсли;
	//Сюда возвращается ошибка, если нужно, сообщаем.   
	Если Отказ Тогда
		ВызватьСбисИсключение(Результат, "МодульОбъектаКлиент.ВыполнитьАвторизациюВСбис");
	КонецЕсли;
	ИзменитьПараметрСбис("ИдентификаторСессии", Результат);
	
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Документы

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Документы_Генератор

// Функция - генерирует набор вложений в пакет на основании подготовленных данных одного документа
//
// Параметры:
//  ПараметрыСгенерироватьВходящие	 - Структура	 - 
//		Вложение					- Структура - данные подготовленного вложения, на основании которого формируем вложения в пакет
//		ОснованиеПакета 			- ДокумнтСсылка	- основной документ пакета
//		Пакет(необяз)				- Структура - данные генерируемого пакета
//		МетодПодготовки(необяз)		- Строка - Имя иметода для подготовки вложения генератором (СформироватьДокументДляГенератора).
//      СтруктураДокумента(необяз)	- Структура - данные документа для формирования XML. Должно быть либо во входящем параметре, либо на Вложении
// Возвращаемое значение:
//  Массив - сгенерированные вложения на основании собранной структуры докумнта.
//
&НаКлиенте
Функция СгенерироватьНаборВложенийВПакет(ПараметрыСгенерироватьВходящие) Экспорт
	
	Если ИспользоватьГенераторДляВложения(ПараметрыСгенерироватьВходящие.Вложение) Тогда
		Возврат СформироватьВложенияГенератором(ПараметрыСгенерироватьВходящие, Новый Структура);
	Иначе
		Возврат СформироватьВложенияПрочие(ПараметрыСгенерироватьВходящие, Новый Структура)		
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Функция ИспользоватьГенераторДляВложения(ВложениеДанные) Экспорт
	Возврат 	ГлобальныйКэш.Парам.ИспользоватьГенератор = Истина
			И	ГлобальныйКэш.СБИС.ПараметрыИнтеграции.ГенераторФЭД
			И	ВложениеДанные.Свойство("ИспользоватьГенератор")
			И	ВложениеДанные.ИспользоватьГенератор = Истина ;
КонецФункции

&НаКлиенте
Функция СформироватьВложенияГенератором(ПараметрыФормированияВходящие, ДопПараметры)
	Перем СтруктураФайла, ВерсияФорматаПодстановки, МетодПодготовкиВложения;
	
	Попытка
		Вложение = ПараметрыФормированияВходящие.Вложение;
		Если	Не ПараметрыФормированияВходящие.Свойство("СтруктураДокумента", СтруктураФайла)
			И	Не Вложение.Свойство("СтруктураДокумента",						СтруктураФайла) Тогда
			Возврат СформироватьВложенияПрочие(ПараметрыФормированияВходящие, ДопПараметры);
		КонецЕсли;
		
		СтруктураВложения	= НовыйВложениеСБИС(Вложение, ПараметрыФормированияВходящие);
		Результат			= Новый Массив;
		СбисОбщиеФункции	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;
		
		СбисФормыПоиска			= Новый Массив;
		ПараметрыФормирования	= Новый Структура("Вложение, Документ, ФормыПоиска", Вложение, СтруктураФайла, СбисФормыПоиска);
		ШаблонXML				= "";
		ОшибкаФормирования		= Ложь;

		ПараметрыПримененияПодстановок = Новый Структура;
		Если Не СтруктураФайла.Файл.Свойство("ВерсияФормата", ВерсияФорматаПодстановки) Тогда
			ВерсияФорматаПодстановки = Вложение.ВерсияФормата;
		КонецЕсли;
		ИмяФормыПоФормату		= "Файл_"	+ СбисОбщиеФункции.СбисЗаменитьНедопустимыеСимволы(СтруктураФайла.Файл.Формат)
									+ "_"	+ СбисОбщиеФункции.СбисЗаменитьНедопустимыеСимволы(ВерсияФорматаПодстановки);
		СбисФормыПоиска.Добавить(ИмяФормыПоФормату);
		Если Не ВерсияФорматаПодстановки = "3.01" Тогда
			СбисФормыПоиска.Добавить("Файл_Шаблон_" + СтрЗаменить(ВерсияФорматаПодстановки, ".", "_"));
		КонецЕсли;
		СбисФормыПоиска.Добавить("Файл_Шаблон");
		ПараметрыПримененияПодстановок.Вставить("ФормыПоиска", СбисФормыПоиска);
		
		//Обогатить документ параметрами, которые не попадают в формат вложения подстановки, но нужны для более простой обработки
		Если Не ПараметрыФормированияВходящие.Свойство("МетодПодготовки", МетодПодготовкиВложения) Тогда
			МетодПодготовкиВложения = "СформироватьДокументДляГенератора";
		КонецЕсли;
		фрм = ГлавноеОкно.СбисНайтиФормуФункцииСеанса(ГлавноеОкно.Кэш, МетодПодготовкиВложения, ПараметрыПримененияПодстановок.ФормыПоиска, Новый Структура, ОшибкаФормирования);
		Если ОшибкаФормирования Тогда
			ВызватьСбисИсключение(фрм, "ГлавноеОкно.СбисНайтиФормуФункцииСеанса." + МетодПодготовкиВложения);
		ИначеЕсли фрм = Ложь Тогда
			ВызватьСбисИсключение(779, "ГлавноеОкно.СбисНайтиФормуФункцииСеанса." + МетодПодготовкиВложения,,,"Не удалось определить модуль для подготовки подстановки");
		КонецЕсли;
		
		ОбработчикГенератора = НовыйСбисОписаниеОповещения(МетодПодготовкиВложения, фрм, ГлавноеОкно.Кэш);
		ВыполнитьСбисОписаниеОповещения(ПараметрыФормирования, ОбработчикГенератора);
		//фрм.СформироватьДокументДляГенератора(ПараметрыФормирования, ГлавноеОкно.Кэш);

		//Обновить связки с изменениями подготовки генератора на всякий случай.
		СтруктураВложения.Вставить("СтруктураФайла", ПараметрыФормирования.Документ);
		Вложение.СтруктураДокумента = ПараметрыФормирования.Документ;
		
        РезультатПодставновки = СформироватьИПрименитьПодстановкуПоВложению(Вложение, ПараметрыПримененияПодстановок);
		
		Если ТипЗнч(РезультатПодставновки) = Тип("Массив") Тогда
			Для Каждого ВложениеПодстановки Из РезультатПодставновки Цикл
				Если ВложениеПодстановки.Формат.Основной Тогда
					СтруктураВложения.Вставить("XMLДокумента", ВложениеПодстановки.Тело);
					Продолжить;
				КонецЕсли;
				
				СтруктураВложенияДобавить = СбисОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СтруктураВложения,, Ложь);
				СтруктураВложенияДобавить.Вставить("XMLДокумента",	ВложениеПодстановки.Тело);
				СтруктураВложенияДобавить.Вставить("Документы1С",	Новый СписокЗначений);//Отвязка от документа, т.к. иначе сопоставление запишется на добавленный докумт
				ЗаполнитьЗначенияСвойств(СтруктураВложенияДобавить, ВложениеПодстановки.Формат);
				СтруктураВложенияДобавить.Тип = ВложениеПодстановки.Формат.ТипДокумента;
				//Обновить имя файла вложения.
				Если	СтруктураВложения.Свойство("СтруктураФайла")
					И	СтруктураВложения.СтруктураФайла.Свойство("Файл")
					И	ВложениеПодстановки.Формат.Свойство("ИмяФайла") Тогда
					СтруктураВложенияДобавить.СтруктураФайла			= СбисОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СтруктураВложения.СтруктураФайла,, Ложь);
					СтруктураВложенияДобавить.СтруктураФайла.Файл		= СбисОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СтруктураВложения.СтруктураФайла.Файл,, Ложь);
					СтруктураВложенияДобавить.СтруктураФайла.Файл.Имя	= ВложениеПодстановки.Формат.ИмяФайла;
				КонецЕсли;
				
				Результат.Добавить(СтруктураВложенияДобавить);
			КонецЦикла;
		Иначе
			СтруктураВложения.Вставить("XMLДокумента", РезультатПодставновки);
		КонецЕсли;
		Результат.Вставить(0, СтруктураВложения);
		Возврат Результат;
		
	Исключение
		ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.СформироватьИПрименитьПодстановкуПоВложению");
	КонецПопытки;

КонецФункции

&НаКлиенте
Функция СформироватьВложенияПрочие(ПараметрыСгенерироватьВходящие, ДопПараметры)
	
	Перем Документы1СВложения, СтруктураФайла, СтруктураДокумента;
	
	Попытка
		Вложение			= ПараметрыСгенерироватьВходящие.Вложение;
		СтруктураВложения	= НовыйВложениеСБИС(Вложение, ПараметрыСгенерироватьВходящие);
		Результат			= Новый Массив;
		
		Если		Вложение.Свойство("ИмяФайла") Тогда
			
			//Внешний файл. Это вложение не может быть первым, т.к. с первого берутся сведения об отправителе, получателе
			СтруктураВложения.Вставить("ПолноеИмяФайла",	Вложение.ПолноеИмяФайла);
			СтруктураВложения.Вставить("ИмяФайла",			Вложение.ИмяФайла);
			СтруктураВложения.Вставить("XMLДокумента",		?(Вложение.Свойство("XMLДокумента"),		Вложение.XMLДокумента,			""));
			СтруктураВложения.Вставить("СтруктураФайла",	?(Вложение.Свойство("СтруктураДокумента"),	Вложение.СтруктураДокумента,	Новый Структура));
			
		ИначеЕсли	ПараметрыСгенерироватьВходящие.Свойство("СтруктураДокумента", СтруктураДокумента) Тогда
			
			СтруктураВложения.Вставить("СтруктураФайла",	СтруктураДокумента);
			СтруктураВложения.Вставить("XMLДокумента",		ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисПолучитьXMLФайлаИзСтруктуры(ГлавноеОкно.Кэш, СтруктураВложения));
			
		ИначеЕсли	Вложение.Свойство("СтруктураДокумента", СтруктураФайла) Тогда 
			
			//XML с инишкой, сгенерировали мы
			СтруктураВложения.Вставить("СтруктураФайла",	СтруктураФайла);
			СтруктураВложения.Вставить("XMLДокумента",		ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисПолучитьXMLФайлаИзСтруктуры(ГлавноеОкно.Кэш, СтруктураВложения));
			
		Иначе 
			
			// XML без инишки, неизвестный. Добавить как есть
			СтруктураВложения.Вставить("СтруктураФайла",	Вложение.СтруктураФайла);
			СтруктураВложения.Вставить("XMLДокумента",		Вложение.XMLДокумента);
			
		КонецЕсли;
		
		Результат.Добавить(СтруктураВложения);
		Возврат Результат;
	Исключение
		ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.СформироватьВложенияПрочие");
	КонецПопытки;

	
КонецФункции

// Функция - Сформировать и применить подстановку по экземпляру вложения
//
// Параметры:
//  Вложение	 - Структура - экземпляр Вложение
//  ДопПараметры - Структура
//		ФормыПоиска - Массив альтернативных форм для поиска функций генератора.
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция СформироватьИПрименитьПодстановкуПоВложению(Вложение, ДопПараметры) Экспорт
	Перем СбисФормыПоиска;
	
	ОшибкаФормирования = Ложь;
	
	Попытка
		фрм = ГлавноеОкно.СбисНайтиФормуФункцииСеанса(ГлавноеОкно.Кэш, "СформироватьНаборПодстановок", ДопПараметры.ФормыПоиска, Новый Структура, ОшибкаФормирования);
		Если ОшибкаФормирования Тогда
			ВызватьСбисИсключение(фрм, "ГлавноеОкно.СбисНайтиФормуФункцииСеанса.СформироватьИПрименитьПодстановкуПоВложению");
		ИначеЕсли фрм = Ложь Тогда
			ВызватьСбисИсключение(779, "ГлавноеОкно.СбисНайтиФормуФункцииСеанса.СформироватьИПрименитьПодстановкуПоВложению",,,"Не удалось определить модуль для формирования подстановки");
		КонецЕсли;
		
		НаборПодстановок = фрм.СформироватьНаборПодстановок(Вложение, ДопПараметры);
		
		Если	ДопПараметры.Свойство("МассоваяОтправка")
			И	ДопПараметры.МассоваяОтправка Тогда
			Возврат НаборПодстановок.Получить("Генератор");	
		КонецЕсли;
		
		ПараметрыДокумента = Новый Структура("ВерсияФормата, ТипДокумента, ПодТип, ПодВерсияФормата");
		ПараметрыДокумента.ВерсияФормата 	= Вложение.ВерсияФормата;
		ПараметрыДокумента.ТипДокумента 	= Вложение.Тип;
		ПараметрыДокумента.ПодТип 			= Вложение.ПодТип;
		ПараметрыДокумента.ПодВерсияФормата = Вложение.ПодВерсияФормата;
		
		РезультатПодставновки = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.Интеграция_ФЭДМультиСгенерировать(
			ПараметрыДокумента, 
			НаборПодстановок, 
			Новый Структура("Кэш", ГлавноеОкно.Кэш));
			
		Возврат РезультатПодставновки;
		
	Исключение
		ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.СформироватьИПрименитьПодстановкуПоВложению");
	КонецПопытки;
			
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Документы_Загрузка

// Функция получает значение по указанному пути	
//
// Параметры:
//  ПараметрыДанные	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция ПолучитьДанныеПоПути(ПараметрыДанные, ДопПараметры = Неопределено) Экспорт
	
	ПутьКДаннымФайла	= СтрЗаменить(СтрЗаменить(СтрЗаменить(ПараметрыДанные.Путь, ".", Символы.ПС), "[", Символы.ПС), "]", "");
	ЗначениеРеквизита	= ПараметрыДанные.Данные;
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(ПутьКДаннымФайла) Цикл
		Узел = СтрПолучитьСтроку(ПутьКДаннымФайла, НомерСтроки);
		Если ТипЗнч(ЗначениеРеквизита) = Тип("Структура") Тогда
			ЗначениеРеквизита.Свойство(Узел, ЗначениеРеквизита);
		ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Соответствие") Тогда
			ЗначениеРеквизита = ЗначениеРеквизита.Получить(Узел);
		ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Массив") Тогда 
			//1190217292    
			Попытка
				ЗначениеРеквизита = ЗначениеРеквизита.Получить(Число(Узел));  
			Исключение
				Возврат Неопределено;
			КонецПопытки;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеСторонИзПакета(СоставПакета, ДопПараметры = Неопределено) Экспорт
		
	ДанныеОрганизации 	  = ПолучитьДанныеСтороны(СоставПакета.НашаОрганизация);
    ДанныеКонтрагента 	  = ПолучитьДанныеСтороны(?(СоставПакета.Свойство("Контрагент"), СоставПакета.Контрагент, Неопределено)); 
	ДанныеГрузополучателя = ПолучитьДанныеСтороны(ПолучитьГрузополучателяПакета(СоставПакета));
	
	ДанныеСторон = Новый Структура("ДанныеКонтрагента, ДанныеОрганизации, ДанныеГрузополучателя",	ДанныеКонтрагента, ДанныеОрганизации, ДанныеГрузополучателя);
	Возврат ДанныеСторон;
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеСтороны(Сторона)
	
	ДанныеСтороны = Новый Структура;
	ДанныеСтороны.Вставить("Ссылка");
	
	Если ЗначениеЗаполнено(Сторона) Тогда
		Если Сторона.Свойство("СвЮЛ") Тогда
			ИНН = Сторона.СвЮЛ.ИНН;
			КПП = Сторона.СвЮЛ.КПП; 
			
			Если Сторона.СвЮЛ.Свойство("КодФилиала") Тогда  
				ДанныеСтороны.Вставить("КодФилиала", Сторона.СвЮЛ.КодФилиала); 
			КонецЕсли;  
			
			Если Сторона.СвЮЛ.Свойство("GLN") Тогда
				ДанныеСтороны.Вставить("GLN", Сторона.СвЮЛ.GLN); 
			КонецЕсли;
			ДанныеСтороны.Вставить("КПП", КПП);
		Иначе
			ИНН = Сторона.СвФЛ.ИНН;
		КонецЕсли;
		ДанныеСтороны.Вставить("ИНН", ИНН);	
	КонецЕсли;
	
	Возврат ДанныеСтороны;
КонецФункции

&НаКлиенте
Функция ПолучитьГрузополучателяПакета(СоставПакета, ДопПараметры = Неопределено) Экспорт
	
	Грузополучатель = Неопределено;
	
	Если СоставПакета.Тип = "ЗаказИсх"
		Или СоставПакета.Тип = "ДокОтгрВх" Тогда
		
		СоставПакета.Участники.Свойство("Лицо3", Грузополучатель);
		
	Иначе
		
		СоставПакета.Участники.Свойство("Лицо2", Грузополучатель);
		
	КонецЕсли;
	
	Возврат Грузополучатель;
	
КонецФункции

&НаКлиенте
Процедура СформироватьВходящийКонтекстНаВложении(Параметры, ДопПараметры = Неопределено) Экспорт
	
	ПодготовленныеПараметрыКонтекста = Параметры.ПодготовленныеПараметрыКонтекста;
	
	Если НЕ Параметры.Вложение = Неопределено Тогда		
		Если Не Параметры.Вложение.Свойство("ВходящийКонтекст") Тогда
			Параметры.Вложение.Вставить("ВходящийКонтекст", Новый Структура("РассчитанноеЗначение", Новый Структура));
		КонецЕсли;
		
		Для Каждого Параметр Из ПодготовленныеПараметрыКонтекста Цикл
			
			Если НЕ Параметры.ЗаменятьЗаполненныеПараметры И Параметры.Вложение.ВходящийКонтекст.Свойство(Параметр.Ключ) Тогда
				Продолжить;	
			КонецЕсли;
			
			Параметры.Вложение.ВходящийКонтекст.РассчитанноеЗначение.Вставить(Параметр.Ключ, Параметр.Значение); 
			
		КонецЦикла;
	Иначе
		
		Для Каждого ВложениеПакета Из Параметры.СоставПакета.Вложение Цикл
			
			Если Не ВложениеПакета.Свойство("ВходящийКонтекст") Тогда
				ВложениеПакета.Вставить("ВходящийКонтекст", Новый Структура("РассчитанноеЗначение", Новый Структура));
			КонецЕсли;
			
			Для Каждого Параметр Из ПодготовленныеПараметрыКонтекста Цикл
				
				Если НЕ Параметры.ЗаменятьЗаполненныеПараметры И ВложениеПакета.ВходящийКонтекст.Свойство(Параметр.Ключ) Тогда
					Продолжить;	
				КонецЕсли;
				
				ВложениеПакета.ВходящийКонтекст.РассчитанноеЗначение.Вставить(Параметр.Ключ, Параметр.Значение); 
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьВходящийКонтекстСогласноНастройкам(ПараметрыФормированияВходящегоКонтекста, ДопПараметры = Неопределено) Экспорт
	
	МестныйКэш = ПараметрыФормированияВходящегоКонтекста.МестныйКэш;
	
	Если НЕ ПараметрыФормированияВходящегоКонтекста.Вложение.Свойство("ВходящийКонтекст") Тогда
		ПараметрыФормированияВходящегоКонтекста.Вложение.Вставить("ВходящийКонтекст", Новый Структура("РассчитанноеЗначение", Новый Структура));
	КонецЕсли;
	
	Если МестныйКэш.Парам.ЗаполнениеКонтрагента1С = "ГрузополучательСБИС" Тогда  
		
		Контрагент_Роль = "Грузополучатель";
				
		Если ПараметрыФормированияВходящегоКонтекста.Вложение.СтруктураИниФайла.Свойство("Контрагент_Роль")
			И ПараметрыФормированияВходящегоКонтекста.Вложение.СтруктураИниФайла.Контрагент_Роль.Свойство("Значение") 
			И ПараметрыФормированияВходящегоКонтекста.Вложение.Свойство("Контрагент1С") Тогда
			
				КонтрагентРоль = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Контрагент_Роль", ПараметрыФормированияВходящегоКонтекста.Вложение.СтруктураИниФайла, МестныйКэш);
				ИмяРеквизита = Сред(ПараметрыФормированияВходящегоКонтекста.Вложение.СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Значение, 
											Найти(ПараметрыФормированияВходящегоКонтекста.Вложение.СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Значение,".")+1);
											
				ПараметрыФормированияВходящегоКонтекста.Вложение.ВходящийКонтекст.РассчитанноеЗначение.Вставить(ИмяРеквизита, Контрагент_Роль);			
						
		КонецЕсли;
	Иначе
		
		Контрагент_Роль = "Покупатель";
		
		Если ПараметрыФормированияВходящегоКонтекста.Вложение.СтруктураИниФайла.Свойство("Контрагент_Роль")
			И ПараметрыФормированияВходящегоКонтекста.Вложение.СтруктураИниФайла.Контрагент_Роль.Свойство("Значение") 
			И ПараметрыФормированияВходящегоКонтекста.Вложение.Свойство("Контрагент1С") Тогда
			
				КонтрагентРоль = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Контрагент_Роль", ПараметрыФормированияВходящегоКонтекста.Вложение.СтруктураИниФайла, МестныйКэш);
				ИмяРеквизита = Сред(ПараметрыФормированияВходящегоКонтекста.Вложение.СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Значение, 
											Найти(ПараметрыФормированияВходящегоКонтекста.Вложение.СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Значение,".")+1);
				
				ПараметрыФормированияВходящегоКонтекста.Вложение.ВходящийКонтекст.РассчитанноеЗначение.Вставить(ИмяРеквизита, Контрагент_Роль);							
						
		КонецЕсли;
				
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МестныйКэш.Парам.СкладПоУмолчанию) Тогда
		
		ПараметрыФормированияВходящегоКонтекста.Вложение.ВходящийКонтекст.РассчитанноеЗначение.Вставить("Склад", МестныйКэш.Парам.СкладПоУмолчанию);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МестныйКэш.Парам.РасСчетПоУмолчанию) Тогда
		
		ПараметрыФормированияВходящегоКонтекста.Вложение.ВходящийКонтекст.РассчитанноеЗначение.Вставить("РасСчет", МестныйКэш.Парам.РасСчетПоУмолчанию);	
		
	КонецЕсли;
		
КонецПроцедуры

// Дополняет данные сторон по пакету данными, сопоставленными в маппинге
//
// Параметры:
//  ДанныеСторон  - <Структура> - данные сторон:
//						- ДанныеКонтрагента 	- <Структура> - ИНН, КПП, GLN, КодФилиала 
//						- ДанныеОрганизации 	- <Структура> - ИНН, КПП, GLN, КодФилиала
//						- ДанныеГрузополучателя - <Структура> - ИНН, КПП, GLN, КодФилиала
//
&НаКлиенте
Процедура ДополнитьДанныеСторонСопоставлением(ДанныеСторон, ДопПараметры = Неопределено) Экспорт
	
	Кэш = ГлавноеОкно.Кэш;
	
	ПараметрыПолучения = Новый Массив;
	СчСторона = 0;
	ТипыСторон = ТипыСторонДляМаппинга();
	
	Для каждого Сторона Из ДанныеСторон Цикл
		
		ПараметрыПолучения.Добавить(Новый Структура);   
		Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(ПараметрыПолучения[СчСторона], Сторона.Значение);
		Если	ТипЗнч(Сторона) = Тип("КлючИЗначение")
			И	Сторона.Ключ = "ДанныеОрганизации" Тогда
			
			ТипОбъекта = "НашаОрганизация";	
		Иначе
			ТипОбъекта = "Контрагент";
		КонецЕсли;
		ПараметрыПолучения[СчСторона].Вставить("Тип", ТипОбъекта);
		ПараметрыПолучения[СчСторона].Вставить("Тип1С", ТипыСторон[Сторона.Ключ]);
		СчСторона = СчСторона + 1;
		
	КонецЦикла;
	
	СопоставленныеДанныеСторон = НайтиСтороныНаМаппинге(ПараметрыПолучения, Новый Структура("ВидИД", 1));
	
	Если СопоставленныеДанныеСторон = Ложь Тогда   
		Возврат;
	КонецЕсли;
	
	Для каждого СопоставленнаяСторона Из СопоставленныеДанныеСторон Цикл
		Если Не ЗначениеЗаполнено(СопоставленнаяСторона.ClientId)
			Или Не ЗначениеЗаполнено(СопоставленнаяСторона.ClientType) Тогда 
			
			Продолжить;
		КонецЕсли;
		
		Сторона1С = ПолучитьУчастникаПоИд(СопоставленнаяСторона.ClientId, СопоставленнаяСторона.ClientType);
		Для каждого Сторона Из ДанныеСторон Цикл
			Если	?(Сторона.Значение.Свойство("ИНН"),
					Сторона.Значение.ИНН = СопоставленнаяСторона.SbisParam_1_1,
					Ложь)
				И	?(Сторона.Значение.Свойство("КПП"),
					Сторона.Значение.КПП = СопоставленнаяСторона.SbisParam_1_2,
					НЕ ЗначениеЗаполнено(СопоставленнаяСторона.SbisParam_1_2))
				И	?(Сторона.Значение.Свойство("КодФилиала") И ЗначениеЗаполнено(СопоставленнаяСторона.SbisParam_1_3),
					Сторона.Значение.КодФилиала = СопоставленнаяСторона.SbisParam_1_3,
					Истина)
				// GLN нет на сторонах пакета, но вдруг появится...
				//И	?(Сторона.Значение.Свойство("GLN"),
				//	Сторона.Значение.GLN = СопоставленнаяСторона.SbisParam_2,
				//	НЕ ЗначениеЗаполнено(СопоставленнаяСторона.SbisParam_2)) 
				И	ТипыСторон[Сторона.Ключ] = СопоставленнаяСторона.ClientType Тогда
				
				Сторона.Значение.Вставить("Ссылка", Сторона1С);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры
 
&НаКлиенте
Функция ТипыСторонИзИни(ИниКонфигурации)
	
	ОписаниеТипов = Новый Структура;
	ОписаниеТипов.Вставить("Организации",	ПолучитьТипМетаданных(ИниКонфигурации, "Организации"));
	ОписаниеТипов.Вставить("Контрагенты",	ПолучитьТипМетаданных(ИниКонфигурации, "Контрагенты"));
	ОписаниеТипов.Вставить("Партнеры",		ПолучитьТипМетаданных(ИниКонфигурации, "Партнеры"));
	
	Возврат ОписаниеТипов;
	
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ТипыСторонСопоставления() Экспорт 

	ОписаниеКонфигурации = ГлавноеОкно.Кэш.Ини.Конфигурация;
	
	ОписаниеТипов = ТипыСторонИзИни(ОписаниеКонфигурации);
	
	ТипыСторон = Новый Структура;
	ТипыСторон.Вставить("ДанныеОрганизации", ОписаниеТипов.Организации);
	ТипыСторон.Вставить("ДанныеКонтрагента", ОписаниеТипов.Контрагенты);
	
	ТипГрузополучателя = ПолучитьЗначениеПараметраСбис("ТипГрузополучателя");
	
	Если ТипГрузополучателя = "ГрузополучательКонтрагент" Тогда
		
		ТипыСторон.Вставить("ДанныеГрузополучателя", ОписаниеТипов.Контрагенты);
		
	ИначеЕсли ТипГрузополучателя = "ГрузополучательПартнер" Тогда
		
		ТипыСторон.Вставить("ДанныеГрузополучателя", ОписаниеТипов.Партнеры);
		
	Иначе 
		
		ТипыСторон.Вставить("ДанныеГрузополучателя", Неопределено);
		
	КонецЕсли;
	
	Возврат ТипыСторон;

КонецФункции // ТипыСторонСопоставления()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПодготовитьСтороныКЗагррузкеДокумента(ДанныеСторон, ДопПараметры = Неопределено) Экспорт 

	ДанныеСторонСБИС	= ДанныеСторон.ДанныеСторонСБИС;
	ДанныеСтороны1С		= ДанныеСторон.ДанныеСторон1С;
	
	ЗаполнениеКонтрагента1С = ПолучитьЗначениеПараметраСбис("ЗаполнениеКонтрагента1С");
	ТипГрузополучателя		= ПолучитьЗначениеПараметраСбис("ТипГрузополучателя");
	ЕстьПартнеры = ТипЗнч(ДопПараметры) = Тип("Структура") И  ДопПараметры.Свойство("ЕстьПартнеры") И ДопПараметры.ЕстьПартнеры = Истина;
	
	Если ЗаполнениеКонтрагента1С = "ГрузополучательСБИС" Тогда
		
        ДанныеСтороны1С.Вставить("ДанныеКонтрагента", ДанныеСторонСБИС.ДанныеГрузополучателя.Ссылка);
        ДанныеСтороны1С.Вставить("ДанныеГрузополучателя", Неопределено);
        ДанныеСтороны1С.Вставить("ДанныеПартнера", ?(ЕстьПартнеры, ПолучитьПартнераПоКонтрагенту(ДанныеСторонСБИС.ДанныеГрузополучателя.Ссылка), Неопределено));
		
	ИначеЕсли ТипГрузополучателя = "ГрузополучательНеВедется" Тогда 
		
        ДанныеСтороны1С.Вставить("ДанныеКонтрагента", ДанныеСторонСБИС.ДанныеКонтрагента.Ссылка);
        ДанныеСтороны1С.Вставить("ДанныеГрузополучателя", Неопределено);
        ДанныеСтороны1С.Вставить("ДанныеПартнера", ?(ЕстьПартнеры, ПолучитьПартнераПоКонтрагенту(ДанныеСторонСБИС.ДанныеКонтрагента.Ссылка), Неопределено)); 
		
	ИначеЕсли ТипГрузополучателя = "ГрузополучательКонтрагент" Тогда
		
        ДанныеСтороны1С.Вставить("ДанныеКонтрагента", ДанныеСторонСБИС.ДанныеКонтрагента.Ссылка);
        ДанныеСтороны1С.Вставить("ДанныеГрузополучателя", ДанныеСторонСБИС.ДанныеГрузополучателя.Ссылка);
        ДанныеСтороны1С.Вставить("ДанныеПартнера", ?(ЕстьПартнеры, ПолучитьПартнераПоКонтрагенту(ДанныеСторонСБИС.ДанныеКонтрагента.Ссылка), Неопределено)); 
		
	ИначеЕсли ТипГрузополучателя = "ГрузополучательПартнер" Тогда
		
        ДанныеСтороны1С.Вставить("ДанныеКонтрагента", ДанныеСторонСБИС.ДанныеКонтрагента.Ссылка);
        ДанныеСтороны1С.Вставить("ДанныеПартнера", ДанныеСторонСБИС.ДанныеГрузополучателя.Ссылка);
		Если ЕстьПартнеры Тогда
			ПартнерыКонтрагента = ПолучитьКонтрагентовПоПартнеру(ДанныеСторонСБИС.ДанныеГрузополучателя.Ссылка);
        	ДанныеСтороны1С.Вставить("ДанныеГрузополучателя", ?(ПартнерыКонтрагента.Количество(), ПартнерыКонтрагента[0], Неопределено)); 
		Иначе 
			ДанныеСтороны1С.Вставить("ДанныеГрузополучателя", Неопределено);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСтороны()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервереБезКонтекста
Функция ПолучитьПартнераПоКонтрагенту(Контрагент)
	
	Попытка
	
		Возврат Контрагент.Партнер;
	
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;

КонецФункции // ПолучитьПартнера()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервереБезКонтекста
Функция ПолучитьКонтрагентовПоПартнеру(Партнер)
	
	Результат = Новый Массив;
	Попытка
		Запрос = Новый Запрос("ВЫБРАТЬ
							  |	Контрагенты.Ссылка КАК Ссылка
							  |ИЗ
							  |	Справочник.Контрагенты КАК Контрагенты
							  |ГДЕ
							  |	Контрагенты.Партнер = &ТекущийЭлементНоменклатуры");
		Запрос.УстановитьПараметр("ТекущийЭлементНоменклатуры", Партнер);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Возврат Результат;

КонецФункции // ПолучитьПартнера()

&НаКлиенте
Функция ДоступнаПодстановкаСторонИзПакета(СоставПакета, ДопПараметры = Неопределено) Экспорт

	Результат = Истина;
	
	Если СоставПакета.Свойство("ДоступнаПодстановкаСторонИзПакета")  Тогда 
		
		Результат = СоставПакета.ДоступнаПодстановкаСторонИзПакета;
		
	Иначе 
		
		СписокТиповДокументов = Новый СписокЗначений;
		
		Для Каждого Вложение Из СоставПакета.Вложение Цикл
			
			ТипВложения = Вложение.Тип + "_" + Вложение.ВерсияФормата;
			Если СписокТиповДокументов.НайтиПоЗначению(ТипВложения) = Неопределено Тогда 
				
				СписокТиповДокументов.Добавить(ТипВложения);
				
			Иначе 
				
				Результат = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СоставПакета.Вставить("ДоступнаПодстановкаСторонИзПакета", Результат);
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПроверитьВложенияПакетаДляСторонПоПакету()

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Документы_Выгрузка

// Процедура - патчит дату, время, имя файла
//
// Параметры:
//  ФайлПропатчить		- Структура	- Вложение.СтруктураДокумента.Файл формируемого вложения
//  ВходящийКонтекст	- Структура
//		ФайлДанные		- Структура, грязный ини
//		ПолучательРоль	- Строка, роль получателя для поиска ИД
//		ОтправительРоль - Строка, роль отправителя для поиска ИД
//
&НаКлиенте
Процедура ПропатчитьФайлВложенияСБИС(ВложениеСБИС, ДопПараметры) Экспорт
	Перем ПолучательИд, ОтправительИд, ФайлИмяПропатчить, лДанныеСторон;
	
	ФайлПропатчить		= ВложениеСБИС.СтруктураДокумента.Файл;
	ДатаВремяСоздания	= ТекущаяДата();
	Если ДопПараметры.Свойство("ПутьКСторонам") Тогда
		лДанныеСторон = ПолучитьДанныеПоПути(Новый Структура("Данные, Путь", ФайлПропатчить, ДопПараметры.ПутьКСторонам));
	Иначе
		лДанныеСторон = ФайлПропатчить.Документ;
	КонецЕсли;
	Если ФайлПропатчить.Свойство("Имя", ФайлИмяПропатчить) Тогда
		Если	ДопПараметры.ГрязныйИни.Свойство("мСторона") 
			И	лДанныеСторон[ДопПараметры.ПолучательРоль].Свойство("Идентификатор",	ПолучательИД) 
			И	лДанныеСторон[ДопПараметры.ОтправительРоль].Свойство("Идентификатор",	ОтправительИД) Тогда
			ФайлИмяПропатчить = ФайлИмяПропатчить + ПолучательИД + "_" + ОтправительИД;
		Иначе
			ФайлИмяПропатчить = ФайлИмяПропатчить + "_";
		КонецЕсли;
		ФайлПропатчить.Имя = ФайлИмяПропатчить + "_" + Формат(ДатаВремяСоздания, "ДФ=ггггММдд") + "_" + Строка(Новый УникальныйИдентификатор());
	КонецЕсли;

	ФайлПерегенерируется = ИспользоватьГенераторДляВложения(ВложениеСБИС);
	//Патчим параметры для генератора или если есть XSLT, т.е. если документ ещё перегенерируется в процессе
	//В остальных случаях, документ грузится как есть и могут быть ошибки формата
	Если Не ФайлПерегенерируется Тогда
		ИмяXSLTВыгрузки		= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.сбисИмяXSLTДляВложения(ГлавноеОкно.Кэш, ФайлПропатчить, ВложениеСБИС);
		ФайлПерегенерируется= ГлавноеОкно.Кэш.XSLT.Свойство(ИмяXSLTВыгрузки);
	КонецЕсли;
	Если ФайлПерегенерируется Тогда
		//Дополнить отсутствующие параметры
		Если Не ФайлПропатчить.Свойство("Дата") Тогда
			ФайлПропатчить.Вставить("Дата",	Формат(ДатаВремяСоздания, "ДФ=dd.MM.yyyy"));
			ФайлПропатчить.Вставить("Время",Формат(ДатаВремяСоздания, "ДФ=HH.mm.ss"));
		КонецЕсли;
		
		//Для ИнОрг поместисть данные стороны в спец. узел, откуда они будут прокинуты в требуемые поля документа.
		//Для отправки, функция разложит данные стороны обратно, чтобы ЗаписатьДокумент правильно поставил сторону.
		ПолучательИО = ПрочитатьДополнительныйПараметрСтороны(лДанныеСторон[ДопПараметры.ПолучательРоль], "ИностраннаяОрганизация") = Истина;
		Если ПолучательИО Тогда
			//СтруктураИНО = Новый Структура("Идентиф, Название", );
			лДанныеСтороны = лДанныеСторон[ДопПараметры.ПолучательРоль].СвЮЛ;
			лДанныеСтороны.Вставить("Идентиф", лДанныеСтороны.ИНН);
			лДанныеСтороны.Удалить("ИНН");
			лДанныеСторон[ДопПараметры.ПолучательРоль].Вставить("СвИН", лДанныеСтороны);
			лДанныеСторон[ДопПараметры.ПолучательРоль].Удалить("СвЮЛ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Функция возвращает ключ стороны для получения доп. параметров в кэше
&НаКлиенте
Функция	 КлючСтороныДляДопПараметров(мСторона)
	Перем СвФлЮл;
	Если		мСторона.Свойство("СвЮЛ", СвФлЮл) Тогда
		Результат = СвФлЮл.ИНН + ?(СвФлЮл.Свойство("КПП"), "_" + СвФлЮл.КПП, "") + "_" + СвФлЮл.Название;
	ИначеЕсли   мСторона.Свойство("СвФЛ", СвФлЮл) Тогда 
		Результат = СвФлЮл.ИНН;
	ИначеЕсли   мСторона.Свойство("СвИн", СвФлЮл) Тогда
		Результат = СвФлЮл.ИНН + "_" + СвФлЮл.Название;
	Иначе
		Возврат мСторона.Название;
	КонецЕсли;
	Если СвФлЮл.Свойство("КодФилиала") Тогда
		Результат = Результат + "_" + СвФлЮл.КодФилиала;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Процедура - Сохраняет посчитанные дополнительные параметры стороны
//
// Параметры:
//  ДанныеУчастник		 - Структура	 - содержит СвЮл/СвФЛ
//  ДопПараметрыСтороны	 - Соответствие	 - данные, которые надо сохранить
//
&НаКлиенте
Процедура СохранитьДополнительныеПараметрыСтороны(ДанныеУчастник, ДопПараметрыСтороны) Экспорт
	Если Не ДопПараметрыСтороны.Количество() Тогда
		Возврат;
	КонецЕсли;                                      
	
	КлючДляПараметров = КлючСтороныДляДопПараметров(ДанныеУчастник);
	ГлобальныйКэш.ТекущийСеанс.РасчитанныеЗначения.мСторона.Вставить(КлючДляПараметров, ДопПараметрыСтороны);
	
КонецПроцедуры

// Процедура - Сохраняет посчитанные дополнительные параметры стороны
//
// Параметры:
//  ДанныеУчастник		 - Структура	 - содержит СвЮл/СвФЛ
//  ДопПараметрыСтороны	 - Соответствие	 - данные, которые надо сохранить
//
&НаКлиенте
Функция ПрочитатьДополнительныйПараметрСтороны(ДанныеУчастник, КлючПараметры=Неопределено)  Экспорт
    Перем Результат;
	
	КлючДляДопПараметров = КлючСтороныДляДопПараметров(ДанныеУчастник);
	Если	Не ГлобальныйКэш.ТекущийСеанс.РасчитанныеЗначения.Свойство("мСторона", Результат) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = Результат.Получить(КлючДляДопПараметров);
	Если Результат = Неопределено Тогда 
		Возврат Неопределено
	КонецЕсли;
	
	Если КлючПараметры = Неопределено Тогда 
		Возврат Результат;
	КонецЕсли;
	Возврат Результат.Получить(КлючПараметры);
	
КонецФункции

// Функция возвращает описание идентификатора СБИС по ссылке 1С
//
// Параметры:
//  ДокументСсылка	 - Ссылка на документ 1С - Ссылка, на документ 1С, по которому требуется извлечь сведения о пакете
//  ДопПараметры	 - Структура			 - 
//		ИмяРегламента 		- Строка			- имя регламента, для доп. разреза хранения статусов, если есть
//		СтруктураРаздела	- СтруктураРазделаГО- структура раздела обработки, для авто. определения регламента.
// Возвращаемое значение:
//  Структура - ИдДокумента, ИдАккаунта
//
&НаКлиенте
Функция ПрочитатьСведенияОИдСБИСПоДокументу1С(ДокументСсылка, ДопПараметры=Неопределено) Экспорт
	Перем СтруктураРазделаГО, ИмяРегламентаДокумента;
	
	МассивСтатусРегламент	= ПолучитьЗначениеПараметраСбис("МассивСтатусРегламент");
	СтатусРегламент			= "";
	
	Если Не ДопПараметры = Неопределено Тогда
		ДопПараметры.Свойство("ИмяРегламента",		ИмяРегламентаДокумента);
		ДопПараметры.Свойство("СтруктураРаздела",	СтруктураРазделаГО);
	КонецЕсли;
	Если		ЗначениеЗаполнено(МассивСтатусРегламент)
		И		ПолучитьЗначениеПараметраСбис("СтатусыВРазрезеРегламента") Тогда
		
		Если		ЗначениеЗаполнено(ИмяРегламентаДокумента) Тогда
			Если НЕ	МассивСтатусРегламент.Найти(ИмяРегламентаДокумента) = Неопределено Тогда
				СтатусРегламент = ИмяРегламентаДокумента;
			КонецЕсли;
		ИначеЕсли	ЗначениеЗаполнено(СтруктураРазделаГО) Тогда
			//Взять от раздела
			ИниРеестра = ИниПоПараметрам(СтруктураРазделаГО.ТипДок).мФайл;
			//первый ини
			Для Каждого Файл из ИниРеестра Цикл
				РегламентНазвание = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.РассчитатьЗначение("Регламент_Название", Файл.Значение);
				Если НЕ МассивСтатусРегламент.Найти(РегламентНазвание) = Неопределено Тогда 
					СтатусРегламент = РегламентНазвание;
				КонецЕсли;
				Прервать;
			КонецЦикла;
		Иначе
			//Регламента нет
		КонецЕсли;
		
    КонецЕсли;
	
	ПараметрыПрочитатьСвойство = Новый Структура("ДокументСсылка, Регламент", ДокументСсылка, СтатусРегламент);
	
	фрм = ГлавноеОкно.СбисНайтиФормуФункции("СбисПрочитатьСведенияОПакете", ПолучитьЗначениеПараметраСбис("ИмяМодуляРаботыСоСтатусами"));
	Возврат фрм.СбисПрочитатьСведенияОПакете(ПараметрыПрочитатьСвойство, ГлавноеОкно.Кэш);

КонецФункции

// Функция - читает стороны по данным 1С
//
// Параметры:
//  ДанныеПрочитатьВходящие	 - Массив	 - Организации, Контрагенты по которым нужно получить данные
//  ДопПараметры			 - Структура - возможность расширить
// 
// Возвращаемое значение:
//  Соответствие - Ключ - ссылка на справочник, Значение - структура Ошибка/Результат(посчитанная сторона)
//
&НаКлиенте
Функция ПрочитатьСтороныПоДанным1С(ДанныеПрочитатьВходящие, ДопПараметры=Неопределено) Экспорт 
	Перем СписокОбработать, УзелИниВСоответствие;
	
	ИниКонфигурации = ИниПоПараметрам("Конфигурация");
	МодульФункций	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;
	СоответствиеИни			= Новый Соответствие;
	СоответствиеПрочитать	= Новый Соответствие;
	СоответствиеРезультат	= Новый Соответствие;
	СоответствиеТипов		= Новый Соответствие;
	СоставПакета			= Новый СписокЗначений;
	//Распарсим файл ини.мСторона
	Если ИниКонфигурации.Свойство("мСторона") Тогда
		Для Каждого КлючИЗначение Из ИниКонфигурации.мСторона Цикл      
			СсылкаНаЭлемент = ПолучитьТипМетаданных(КлючИЗначение.Значение, "Сторона");      
			ИмяСправочника = СсылочныйТипСтрокой(СсылкаНаЭлемент);
			ИмяСправочника = СтрПолучитьСтроку(СтрЗаменить(ИмяСправочника, ".", Символы.ПС), 2);
			СоответствиеИни.Вставить(ИмяСправочника, КлючИЗначение.Значение);	
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СсылкаДанные Из ДанныеПрочитатьВходящие Цикл
		ТипСсылки				= ТипЗнч(СсылкаДанные);
		ПредставлениеТипаСсылки	= СоответствиеТипов.Получить(ТипСсылки);
		Если ПредставлениеТипаСсылки = Неопределено Тогда
			ПредставлениеТипаСсылки = МодульФункций.ПолучитьРеквизитМетаданныхОбъекта(СсылкаДанные, "Имя");
			СоответствиеТипов.Вставить(ТипСсылки, ПредставлениеТипаСсылки);
		КонецЕсли;
		УзелИниВСоответствие = СоответствиеИни.Получить(ПредставлениеТипаСсылки);
		Если УзелИниВСоответствие = Неопределено Тогда
			РезультатОшибка = НовыйСбисИсключение(,"МодульОбъектаКлиент.ПрочитатьСтороныПоДанным1С",,"В файле настроек отсутствует узел для обработки участников " + ПредставлениеТипаСсылки);
			СоответствиеРезультат.Вставить(СсылкаДанные, Новый Структура("Ошибка", РезультатОшибка));
			Продолжить;
		КонецЕсли;
		СоставПакета.Добавить(СсылкаДанные);
		СоответствиеПрочитать.Вставить(СсылкаДанные, Новый Структура("ИмяИни, ДокументДанные","Участник", УзелИниВСоответствие));
	КонецЦикла;
	МодульФункций.ПолучитьДанныеДокументов1С(СоответствиеПрочитать, Новый Структура("ТекущийПакет",Новый Структура), СоставПакета);

	Для Каждого Элемент Из СоответствиеПрочитать Цикл
		Сторона = МодульФункций.ПолучитьСторону(ГлавноеОкно.Кэш, Элемент.Значение.ДокументДанные);     
		Если Сторона = Неопределено Тогда
			РезультатОшибка	= НовыйСбисИсключение(721, "МодульОбъектаКлиент.ПрочитатьСтороныПоДанным1С",,,"У " + Элемент.Ключ + " не заполнен ИНН/КПП");
			СоответствиеРезультат.Вставить(Элемент.Ключ, Новый Структура("Ошибка", РезультатОшибка));
		Иначе
			СоответствиеРезультат.Вставить(Элемент.Ключ, Новый Структура("Результат", Сторона));
		КонецЕсли;
	КонецЦикла;
	Возврат СоответствиеРезультат;

КонецФункции

#КонецОбласти 

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Документы_Просмотр
 
// Процедура - патчит пакеты документов для передачи в форму просмотра 
//
// Параметры:
//  МассивПакетов		- Массив пакетов для дозаполнения
//  ДопПараметры		- Структура дополнительных параметров
//  1189641556
//
&НаКлиенте
Процедура ПодготовитьДокументСбисКПросмотру(МассивПакетов,ДопПараметры) Экспорт
	
	ТекущийРаздел = ДопПараметры.ТекущийРаздел; 
		
	Если ТекущийРаздел = "Продажа" Тогда
		ПодготовитьДокументСбисВРазделеПродажа(МассивПакетов,ДопПараметры);
	ИначеЕсли ТекущийРаздел = "Полученные" Тогда
		ПодготовитьДокументСбисВРазделеПолученные(МассивПакетов,ДопПараметры);	
	Иначе
		Возврат;
	КонецЕсли;		

КонецПроцедуры	

//1189641556
&НаКлиенте
Процедура ПодготовитьДокументСбисВРазделеПродажа(МассивПакетов,ДопПараметры)

	Перем СсылкаНаПервоеВложение, Вложения;
	
	Кэш = ГлавноеОкно.Кэш; 
	ПолныйСоставПакета = МассивПакетов;
	
	Если ДопПараметры.Свойство("Вложения", Вложения)		
		И Вложения[0].Свойство("Документы1С", СсылкаНаПервоеВложение)
		И	СсылкаНаПервоеВложение.Количество() Тогда
		СсылкаНаПервоеВложение = СсылкаНаПервоеВложение[0].Значение;
		Отказ = Ложь;
		ПараметрыПакетаСБИС	= Кэш.ОбщиеФункции.ИдентификаторСБИСПоДокументу(Кэш, СсылкаНаПервоеВложение);
		ИдДок				= ПараметрыПакетаСБИС.ИдДокумента;
		Если ЗначениеЗаполнено(ИдДок) Тогда
			ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
			РезультатЧтенияПоИд = Кэш.Интеграция.ПрочитатьДокумент(Кэш, ИдДок, ДопПараметры, Отказ);
			Если Не Отказ
				И	ТипЗнч(РезультатЧтенияПоИд) = Тип("Структура")
				И	РезультатЧтенияПоИд.Свойство("Событие") Тогда
				ПолныйСоставПакета.Вставить("Событие", РезультатЧтенияПоИд.Событие);
			КонецЕсли;
			//1189641556
			Если Не Отказ
				И	ТипЗнч(РезультатЧтенияПоИд) = Тип("Структура")
				И	РезультатЧтенияПоИд.Свойство("Расширение") Тогда
				ПолныйСоставПакета.Вставить("Расширение", РезультатЧтенияПоИд.Расширение);
			КонецЕсли;  
			Если НЕ Отказ Тогда
				ПолныйСоставПакета.Вставить("Идентификатор", ИдДок);   
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Элемент Из Вложения Цикл
		Если ЗначениеЗаполнено(Элемент.XMLДокумента) Тогда
			ТекстHTML = Кэш.Интеграция.ПолучитьHTMLПоXML(Кэш, Элемент);
		Иначе
			ТекстHTML = "";
		КонецЕсли;
		Элемент.Вставить("ТекстHTML",ТекстHTML);
	КонецЦикла; 
	
КонецПроцедуры 

//1189641556
&НаКлиенте
Процедура ПодготовитьДокументСбисВРазделеПолученные(МассивПакетов,ДопПараметры)

	Перем СсылкаНаПервоеВложение, Вложения;
	
	Кэш = ГлавноеОкно.Кэш; 
	ПолныйСоставПакета = МассивПакетов;
	
	сч = 0;
	Для Каждого Элемент Из ПолныйСоставПакета.Вложение Цикл
		Если ПолныйСоставПакета.Свойство("Событие") Тогда
			Элемент.Вставить("Событие", ПолныйСоставПакета.Событие);
		КонецЕсли;
		ТекстHTML = Кэш.Интеграция.ПолучитьHTMLВложения(Кэш, ПолныйСоставПакета.Идентификатор, Элемент);
		ПолныйСоставПакета.Вложение[сч].Вставить("ТекстHTML",ТекстHTML);
		ПолныйСоставПакета.Вложение[сч].Вставить("Отмечен",Истина);
		сч = сч+1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_РаботаСАккаунтом

&НаКлиенте
Процедура ЗаполнитьСведенияОПользователеИАккаунте(ПараметрыЗаполнить, Кэш) Экспорт
	Попытка
		ИнформацияОТекущемПользователе	= СбисПолучитьИнформациюОТекущемПользователе(ПараметрыЗаполнить, Кэш);
		Кэш.СБИС.ПараметрыИнтеграции.Вставить("ИдАккаунта");
		Кэш.СБИС.ПараметрыИнтеграции.Вставить("ИдПользователя");
		
		//Пока дублируем и на ГО и в параметры интеграции, чтобы не сломать текущую логику.
		Кэш.СБИС.ПараметрыИнтеграции.Пользователь	= ИнформацияОТекущемПользователе.Название;
		ГлавноеОкно.Пользователь					= ИнформацияОТекущемПользователе.Название; 
		
		ИнформацияОТекущемПользователе.Свойство("НомерАккаунта", Кэш.СБИС.ПараметрыИнтеграции.ИдАккаунта);
		
		Кэш.СБИС.Вставить("Сессии", Новый Соответствие());
		Если	ИнформацияОТекущемПользователе.Свойство("ИдПерсоны", Кэш.СБИС.ПараметрыИнтеграции.ИдПользователя)
			И	ЗначениеЗаполнено(Кэш.СБИС.ПараметрыИнтеграции.ИдПользователя) Тогда
			КлючСессии = Кэш.СБИС.ПараметрыИнтеграции.КодСервиса + "_" + Кэш.СБИС.ПараметрыИнтеграции.ИдПользователя;
			Кэш.СБИС.Сессии.Вставить(КлючСессии, Новый Структура());
			Кэш.СБИС.Сессии[КлючСессии].Вставить("params", Новый Структура());
			Кэш.СБИС.Сессии[КлючСессии].Вставить("accounts", Новый Соответствие());
			Кэш.СБИС.Сессии[КлючСессии].accounts.Вставить(Кэш.СБИС.ПараметрыИнтеграции.ИдАккаунта, Кэш.Парам.ИдентификаторСессии);
		Иначе	
			Кэш.СБИС.ПараметрыИнтеграции.ИдПользователя = "";
		КонецЕсли;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.ЗаполнитьСведенияОПользователеИАккаунте");
	КонецПопытки;	
КонецПроцедуры

&НаКлиенте
Функция СбисПолучитьСписокАккаунтов(Кэш, ДопПараметры, Отказ) Экспорт
	СписокАккаунтов = Кэш.Интеграция.СБИС_ПолучитьСписокАккаунтов(Кэш, Новый Структура(), Новый Структура(), Ложь);
	Если Отказ Тогда
		ВызватьСбисИсключение(, "МодульОбъектаКлиент.СбисПолучитьСписокАккаунтов",, "Не удалось получить список аккаунтов");
	КонецЕсли;
	Если ТипЗнч(СписокАккаунтов) = Тип("Структура") Тогда
		Если СписокАккаунтов.Свойство("Список") Тогда
			Возврат СписокАккаунтов.Список;
		КонецЕсли;
	КонецЕсли;	
	Возврат СписокАккаунтов;
КонецФункции 

&НаКлиенте	
Функция СбисПереключитьАккаунт(Кэш, param, ДопПараметры, Отказ) Экспорт    
	Результат = Кэш.Интеграция.СБИС_ПереключитьАккаунт(Кэш, param, Новый Структура(), Ложь);
	Если Отказ Тогда
		ВызватьСбисИсключение(, "МодульОбъектаКлиент.СбисПереключитьАккаунт",, "Не удалось переключить аккаунт");
	КонецЕсли;
	
	КлючПользователя =  Кэш.СБИС.ПараметрыИнтеграции.КодСервиса + "_" + Кэш.СБИС.ПараметрыИнтеграции.ИдПользователя;
	Кэш.СБИС.Сессии[КлючПользователя].accounts.Вставить(param.НомерАккаунта, Результат);
	Кэш.СБИС.ПараметрыИнтеграции.Вставить("ИдАккаунта", param.НомерАккаунта);
	Возврат Результат;
КонецФункции
                                                                                                        
&НаКлиенте	
Функция СбисПолучитьИнформациюОТекущемПользователе(ПараметрыЗапросаИнформации=Неопределено, Кэш) Экспорт  
	Отказ = Ложь;
	Результат = Кэш.Интеграция.СБИС_ПолучитьИнформациюОТекущемПользователе(Кэш, Новый Структура, Новый Структура(), Отказ);
	Если Отказ Тогда
		Кэш.ОбщиеФункции.СбисВызватьИсключение(Результат, "МодульОбъектаКлиент.ПолучитьИнформациюОТекущемПользователе",, "Не удалось получить информацию о текущем пользователе");
	КонецЕсли;
	
	Фамилия	= Неопределено;
	Имя		= Неопределено;
	Отчество= Неопределено;    
	
	Если Не Результат.Свойство("Фамилия", Фамилия) Тогда
		Фамилия = "";
	КонецЕсли;
	Если Не Результат.Свойство("Имя", Имя) Тогда
		Имя = "";
	КонецЕсли;
	Если Не Результат.Свойство("Отчество",	Отчество) Тогда
		Отчество = "";
	КонецЕсли; 
	
	Если Результат.Свойство("Пользователь") Тогда
		 Фамилия = Результат.Пользователь.Фамилия;
		 Имя = Результат.Пользователь.Имя;
		 Отчество = Результат.Пользователь.Отчество; 
		 Если Результат.Пользователь.Свойство("ИдПрофиля") Тогда
			Результат.Вставить("ИдПерсоны", Результат.Пользователь.ИдПрофиля);
		 КонецЕсли;
		 Если Результат.Пользователь.Свойство("Аккаунт") Тогда
		 	Результат.Вставить("НомерАккаунта", Результат.Пользователь.Аккаунт.Номер);
		 КонецЕсли;
	 КонецЕсли;
	Результат.Вставить("Название", Фамилия+" "+Имя+" "+Отчество); 
	Возврат Результат;
КонецФункции  

&НаКлиенте
Функция СбисДействияПриВыходеИзАккаунта(Кэш, ДопПараметры = Неопределено) Экспорт
 
	Кэш.Парам.ЗапомнитьПароль		= Ложь;
	Кэш.Парам.ЗапомнитьСертификат	= Ложь;
	Кэш.Парам.Пароль				= "";
	СохранитьМеткиСтатусов(Кэш, ДопПараметры);
	
	СохранитьМеткиСтатусов(Кэш, ДопПараметры);

	Если Кэш.КэшНастроек.Свойство("ВыбранныеНастройки") Тогда 
		
		Кэш.КэшНастроек.Удалить("ВыбранныеНастройки");
		
	КонецЕсли;

КонецФункции
	
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Статистика

// Процедура собирает статистику и отправляет на сервис.
//
// Параметры:
//  ПараметрыСтатистики	 - Структура	 - Действие
//  ДопПараметры		 - Структура	 - 
//
&НаКлиенте
Процедура СбисСтатистика_СформироватьИЗаписать(ПараметрыСтатистики, ДопПараметры = Неопределено) Экспорт
	                                                                                                                
	// При отключенном обмене или без авторизации записать ничего не сможем.
	Если Не (ПолучитьЗначениеПараметраСбис("ОбменВключен") И ПолучитьЗначениеПараметраСбис("Авторизован")) Тогда
		Возврат;
	КонецЕсли; 
	
	Попытка 
		
		ДанныеСтатистики = СбисСтатистика_СформироватьДанныеСообщений(ПараметрыСтатистики, ДопПараметры);
		Отказ = Ложь; 
		
		Для Каждого СообщениеСтатистики Из ДанныеСтатистики.Сообщения Цикл 
			
			РезультатОтправки = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СбисОтправитьСообщениеСтатистики(ГлавноеОкно.Кэш, СообщениеСтатистики, Отказ); 
			
			Если Отказ Тогда
				ВызватьСбисИсключение(РезультатОтправки, ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".СбисОтправитьСообщениеСтатистики");;
			КонецЕсли;  
			
		КонецЦикла;
		
		Для Каждого СообщениеОбОшибке Из ДанныеСтатистики.Ошибки Цикл
			
			РезультатОтправки = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СбисОтправитьСообщениеОшибки(ГлавноеОкно.Кэш, СообщениеОбОшибке, Отказ);
			
			Если Отказ Тогда
				ВызватьСбисИсключение(РезультатОтправки, ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".СбисОтправитьСообщениеОшибки");;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СообщениеСтатистики Из ДанныеСтатистики.Прикладная Цикл 
			
			ДопПараметрыОтправки = Новый Структура("Кэш", ГлавноеОкно.Кэш);
			РезультатОтправки = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ExtSysMarking_SendStatisticData(СообщениеСтатистики, ДопПараметрыОтправки, Отказ);
			
			Если Отказ Тогда
				ВызватьСбисИсключение(РезультатОтправки, ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".ExtSysMarking_SendStatisticData");;
			КонецЕсли;    
			
		КонецЦикла;    
		
	Исключение   
		
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектКлиент.СбисСтатистика_СформироватьИЗаписать");
		
	КонецПопытки;           
	
КонецПроцедуры

//Функция, в зависимости от выбранного действия, формирует параметры к отправке на сервис статистики
&НаКлиенте
Функция	СбисСтатистика_СформироватьДанныеСообщений(ПараметрыСтатистики, ДопПараметры = Неопределено) 
	Отказ = Ложь;
	Действие = ПараметрыСтатистики.Действие;
	Если Не ПараметрыСтатистики.Свойство("ИмяРеестра") Тогда
		ПараметрыСтатистики.Вставить("ИмяРеестра", ГлавноеОкно.Кэш.Текущий.ТипДок);
	КонецЕсли;
	Результат = Новый Структура("Сообщения, Ошибки, Прикладная", Новый Массив, Новый Массив, Новый Массив);	
	Если Действие = "Отправка" Тогда
		РезультатОтправки = ПараметрыСтатистики.РезультатОтправки;
		//обрабатываем результат в Кэш
		Если РезультатОтправки.Отправлено Тогда
			ПараметрыСообщения = Новый Структура("count, action_param, action_name", РезультатОтправки.Отправлено, ПараметрыСтатистики.ИмяРеестра, Действие);
			НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОперации(ПараметрыСообщения);
			Результат.Сообщения.Добавить(НовоеСообщение);
		КонецЕсли;
		Если РезультатОтправки.Ошибок Тогда
			ПараметрыСообщения = Новый Структура("count, code, action_param, action_name, error_name, error_detail", 0, 100, ПараметрыСтатистики.ИмяРеестра, Действие);
			Для Каждого ОшибкаОтправки Из РезультатОтправки.ДетализацияОшибок Цикл
				ТекстОшибки = ОшибкаОтправки.Ключ;
				ПараметрыСообщения.count		= 1;
				ПараметрыСообщения.error_name	= ТекстОшибки;
				ПараметрыСообщения.code			= 100;
				//Если нет соответствия кодов, то ставится код по-умолчанию 100.
				Если РезультатОтправки.Свойство("СоответствиеКодовИТекстовОшибок") Тогда
					КодОшибки = РезультатОтправки.СоответствиеКодовИТекстовОшибок.Получить(ТекстОшибки);
					Если Не КодОшибки = Неопределено Тогда
						ПараметрыСообщения.code = Формат(КодОшибки,"ЧГ=0");
					КонецЕсли;
				КонецЕсли;
				//Генерируем для каждой ошибки из детализации сообщение для статистики
				Для Каждого ДетализацияОшибки Из ОшибкаОтправки.Значение Цикл
					СбисСтек = Неопределено;
					//Если у ошибки нет стека, то генерируем
					Если Не ДетализацияОшибки.СтруктураОшибки.Свойство("stack", СбисСтек) Тогда
						СбисСтек	= Новый Массив;
						ЗаписьВСтек	= Новый Структура("message,details,code");
						ЗаполнитьЗначенияСвойств(ЗаписьВСтек, ДетализацияОшибки.СтруктураОшибки);
						ЗаписьВСтек.Вставить("method_name", "WriteDocumentEx");
						Если ДетализацияОшибки.СтруктураОшибки.Свойство("dump") Тогда
							ЗаписьВСтек.Вставить("dump", ДетализацияОшибки.СтруктураОшибки.dump);
						КонецЕсли;
						СбисСтек.Добавить(ЗаписьВСтек);
					КонецЕсли;
					
					ПараметрыОтправки = Новый Структура;
					ПараметрыОтправки.Вставить("ini_name",	ПараметрыСтатистики.ИмяРеестра);
					ПараметрыОтправки.Вставить("value",		Строка(ДетализацияОшибки.ОбработанДокумент1С));
					ПараметрыОтправки.Вставить("type",		"ДокументСсылка." + ПараметрыСтатистики.ИмяРеестра);
					
					ПараметрыСообщения.error_detail	= ДетализацияОшибки.Сообщение;
					НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОшибки(ПараметрыСообщения);
					НовоеСообщение.data.Вставить("stack", СбисСтек);
					НовоеСообщение.data.Вставить("param", ПараметрыОтправки);
					Результат.Ошибки.Добавить(НовоеСообщение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли Действие = "Загрузка" Тогда
		//обрабатываем результат
		Если ПараметрыСтатистики.Результат.Всего.Выполнено Тогда
			ПараметрыСообщения = Новый Структура("count, action_param, action_name", ПараметрыСтатистики.Результат.Всего.Выполнено, ПараметрыСтатистики.ИмяРеестра, Действие);
			НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОперации(ПараметрыСообщения);
			Результат.Сообщения.Добавить(НовоеСообщение);
		КонецЕсли;
		Для Каждого ОшибкаЗагрузки Из ПараметрыСтатистики.Результат.Ошибки.ДетализацияОшибок Цикл
			ПараметрыСообщения = Новый Структура("count, code, action_param, action_name, error_name, error_detail", 1, 100, ПараметрыСтатистики.ИмяРеестра, Действие);
			ТекстОшибки = ОшибкаЗагрузки.Ключ;
			ПараметрыСообщения.error_name	= ТекстОшибки;
			ПараметрыСообщения.code			= 100;
			//Если нет соответствия кодов, то ставится код по-умолчанию 100.
			КодОшибки = ПараметрыСтатистики.Результат.Ошибки.СоответствиеКодов.Получить(ТекстОшибки);
			Если Не КодОшибки = Неопределено Тогда
				ПараметрыСообщения.code = Формат(КодОшибки,"ЧГ=0");
			КонецЕсли;
			//Генерируем для каждой ошибки из детализации сообщение для статистики
			Для Каждого ДетализацияОшибки Из ОшибкаЗагрузки.Значение Цикл
				СбисСтек	= Новый Массив;
				ЗаписьВСтек	= Новый Структура(
				"message,						details,					code,					method_name", 
				ДетализацияОшибки.Состояние,	ДетализацияОшибки.Сообщение,ПараметрыСообщения.code,"ЗагрузитьУпорядоченныйСоставПакетаВыбраннымСпособом");
				
				СбисДампОшибки		= Новый Структура;
				ПараметрыОтправки	= Новый Структура;
				ПараметрыОтправки.Вставить("ini_name",	ПараметрыСтатистики.ИмяРеестра);
				Для Каждого СбисОбработанОбъект Из ДетализацияОшибки.ОбработаныОбъекты1С Цикл
					//Ищем первый объект, на котором свалилась загрузка. Пока что он будет основным в ошибке.
					Если Не СбисОбработанОбъект.Ошибки Тогда
						Продолжить;
					КонецЕсли;
					Если ПараметрыОтправки.Свойство("value") Тогда
						//Допишем остальные объекты в дамп на всякий.
						СбисДампДополнительныеОбъекты = Неопределено;
						Если Не СбисДампОшибки.Свойство("ДополнительныеОбъекты", СбисДампДополнительныеОбъекты) Тогда
							СбисДампДополнительныеОбъекты = Новый Массив;
							СбисДампОшибки.Вставить("ДополнительныеОбъекты", СбисДампДополнительныеОбъекты);
						КонецЕсли;
						СбисДампДополнительныеОбъекты.Добавить(Новый Структура("value, type", Строка(СбисОбработанОбъект.Ссылка), СбисОбработанОбъект.Тип));
						Продолжить;
					КонецЕсли;
					ПараметрыОтправки.Вставить("value",		Строка(СбисОбработанОбъект.Ссылка));
					ПараметрыОтправки.Вставить("type",		СбисОбработанОбъект.Тип);
				КонецЦикла;
				Если ЗначениеЗаполнено(СбисДампОшибки) Тогда
					ЗаписьВСтек.Вставить("dump", СбисДампОшибки);
				КонецЕсли;
				СбисСтек.Добавить(ЗаписьВСтек);					
				
				ПараметрыСообщения.error_detail	= ДетализацияОшибки.Сообщение;
				НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОшибки(ПараметрыСообщения);
				НовоеСообщение.data.Вставить("stack", СбисСтек);
				НовоеСообщение.data.Вставить("param", ПараметрыОтправки);
				Результат.Ошибки.Добавить(НовоеСообщение);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли Действие = "Ошибка" Тогда
		СбисСтек = Неопределено;
		ПараметрыСообщения	= Новый Структура("count, code, action_param, action_name, error_name, error_detail", 1, 100, "Ошибка", Действие);
		//Если у ошибки нет стека, то генерируем
		Если Не ПараметрыСтатистики.Ошибка.Свойство("stack", СбисСтек) Тогда
			СбисСтек = Новый Массив;
			ЗаписьВСтек	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисСкопироватьОбъектНаКлиенте(ПараметрыСтатистики.Ошибка);
			СбисСтек.Добавить(ЗаписьВСтек);
		КонецЕсли;
		
		ПараметрыСообщения.code			= Формат(ПараметрыСтатистики.Ошибка.code,"ЧГ=0");
		ПараметрыСообщения.error_name	= ПараметрыСтатистики.Ошибка.message;
		ПараметрыСообщения.error_detail	= ПараметрыСтатистики.Ошибка.details;
		
		НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОшибки(ПараметрыСообщения);
		НовоеСообщение.data.Вставить("stack", СбисСтек);
		Результат.Ошибки.Добавить(НовоеСообщение);
	ИначеЕсли Действие = "Обновление" Тогда
		ПараметрыСтатистикиОтправка	= Новый Структура;
		ПараметрыОтправки	= Новый Структура;
		РезультатДействия			= ПараметрыСтатистики.Результат;
		Отказ = Ложь;
		ДанныеПоНастройкам			= ГлавноеОкно.Кэш.ФормаНастроек.ПолучитьИнформациюПоНастройкам(ГлавноеОкно.Кэш, ПараметрыСтатистикиОтправка, Отказ);
		//Смотрим полученные данные и формируем детальную информацию
		Дамп = Новый Структура("Действия,Xslt,Ини,Функции", Новый Массив, Новый Массив, Новый Массив, ДанныеПоНастройкам.EPF.ЕстьИзменения);
		Для Каждого ФайлНастроек Из ДанныеПоНастройкам.XSLT Цикл
			Если	Не	ФайлНастроек.ЕстьИзменения
				Или		Найти(ФайлНастроек.ИмяФайла, "Утвердить") Тогда
				Продолжить;//Не отправляем статистику по изменениям титулов
			КонецЕсли;
			Дамп.Xslt.Добавить(Новый Структура("file_name", ФайлНастроек.ИмяФайла));
		КонецЦикла;
		Для Каждого ФайлНастроек Из ДанныеПоНастройкам.XML Цикл
			Если Не ФайлНастроек.ЕстьИзменения Тогда
				Продолжить;
			КонецЕсли;
			Дамп.Ини.Добавить(Новый Структура("ini_name", ФайлНастроек.Ини_ИмяИни));
		КонецЦикла;
		ДанныеСообщения = Новый Структура("ИнформацияОНастройках, Ошибки", Дамп, Новый Массив);
		ПараметрыСообщения = Новый Структура("count, code, action_param, action_name, error_name, error_detail", 0, 100, "Ошибка обновления", Действие);
		Для Каждого ОшибкаДействия Из РезультатДействия.Ошибки.ДетализацияОшибок Цикл
			ТекстОшибки = ОшибкаДействия.Ключ;
			ПараметрыСообщения.count		= 1;
			ПараметрыСообщения.error_name	= ТекстОшибки;
			ПараметрыСообщения.code			= "100";
			//Если нет соответствия кодов, то ставится код по-умолчанию 100.
			КодОшибки = РезультатДействия.Ошибки.СоответствиеКодов.Получить(ТекстОшибки);
			Если Не КодОшибки = Неопределено Тогда
				ПараметрыСообщения.code = Формат(КодОшибки,"ЧГ=0");
			КонецЕсли;
			//Генерируем для каждой ошибки из детализации сообщение для статистики
			Для Каждого ДетализацияОшибки Из ОшибкаДействия.Значение Цикл
				СбисСтек = Неопределено;
				ПараметрыСообщения.action_param = ДетализацияОшибки.Название;
				//Если у ошибки нет стека, то генерируем
				Если Не ДетализацияОшибки.Данные.Свойство("stack", СбисСтек) Тогда
					СбисСтек	= Новый Массив;
					ЗаписьВСтек	= Новый Структура("message,details,code");
					ЗаполнитьЗначенияСвойств(ЗаписьВСтек, ДетализацияОшибки.Данные);
					ЗаписьВСтек.Вставить("method_name", "Обновление");
					Если ДетализацияОшибки.Данные.Свойство("dump") Тогда
						ЗаписьВСтек.Вставить("dump", ДетализацияОшибки.Данные.dump);
					КонецЕсли;
					СбисСтек.Добавить(ЗаписьВСтек);
				КонецЕсли;
				
				ПараметрыОтправки = ДетализацияОшибки.Данные.dump;
				
				ПараметрыСообщения.error_detail	= ДетализацияОшибки.Сообщение;
				НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОшибки(ПараметрыСообщения);
				НовоеСообщение.data.Вставить("stack", СбисСтек);
				НовоеСообщение.data.Вставить("param", ПараметрыОтправки);
				Результат.Ошибки.Добавить(НовоеСообщение);
			КонецЦикла;
		КонецЦикла;
		Для Каждого ДействиеПриОбновлении Из РезультатДействия.Действие.ДетализацияВыполнено Цикл
			Дамп.Действия.Добавить(Новый Структура("update_action_name", ДействиеПриОбновлении.Ключ));
		КонецЦикла;
		
		ПараметрыСообщения	= Новый Структура("count, action_param, action_name, data", 1, РезультатДействия.Параметры.ВерсияБыло, Действие, Дамп);
		НовоеСообщение		= СбисСтатистика_СформироватьСтруктуруОперации(ПараметрыСообщения);
		Результат.Сообщения.Добавить(НовоеСообщение);
	ИначеЕсли Действие = "Аутентификация" Тогда
		ДетальноеСообщение = ПараметрыСтатистики.ДетальноеСообщение;
		ПараметрыСообщения	= Новый Структура("count, action_param, action_name", 1, ДетальноеСообщение, Действие);
		НовоеСообщение		= СбисСтатистика_СформироватьСтруктуруОперации(ПараметрыСообщения);
		Результат.Сообщения.Добавить(НовоеСообщение);
	ИначеЕсли Действие = "ПрикладнаяСтатистика" Тогда
		//Прикладная статистика сбора использования функциональности
		ФункционалПрикладнойИмя = "Обработка 1С";
		Если		ТипЗнч(ПараметрыСтатистики.Сообщения) = Тип("Структура") Тогда
			
			ПараметрыСообщения = Новый Структура("Функционал, Количество, Действие, Контекст", ФункционалПрикладнойИмя, 1); 	
			ЗаполнитьЗначенияСвойств(ПараметрыСообщения, ПараметрыСтатистики.Сообщения);
			Результат.Прикладная.Добавить(ПараметрыСообщения);
			
		ИначеЕсли   ТипЗнч(ПараметрыСтатистики.Сообщения) = Тип("Массив") Тогда
			
			Для Каждого ЭлементНаЗапись Из ПараметрыСтатистики.Сообщения Цикл
				ПараметрыСообщения = Новый Структура("Функционал, Количество, Действие, Контекст", ФункционалПрикладнойИмя, 1); 	
				ЗаполнитьЗначенияСвойств(ПараметрыСообщения, ЭлементНаЗапись);
				Результат.Прикладная.Добавить(ПараметрыСообщения);
			КонецЦикла;
			
		Иначе
			
			ПараметрыСообщения			= Новый Структура("Функционал, Количество, Действие, Контекст", ФункционалПрикладнойИмя, 1); 	
			СтрокаРазделить				= СтрЗаменить(ПараметрыСтатистики.Сообщения, ".", Символы.ПС);
			ПараметрыСообщения.Контекст	= СтрПолучитьСтроку(СтрокаРазделить, 1);
			ПараметрыСообщения.Действие	= СтрПолучитьСтроку(СтрокаРазделить, 2);
			Результат.Прикладная.Добавить(ПараметрыСообщения);
			
		КонецЕсли;

	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Функция генерирует сообщение об успешной операции на сервис статистики
&НаКлиенте
Функция СбисСтатистика_СформироватьСтруктуруОперации(ПараметрыСтатистики)
	СтруктураПараметров = Новый Структура();
	Для Каждого КлючИЗначение Из ПараметрыСтатистики Цикл 
		СтруктураПараметров.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	СтруктураПараметров.Вставить("service",		"ext1C");
	СтрокаМодуль = ГлобальныйКэш.ПараметрыСистемы.Обработка.КраткаяВерсия + "_" + ГлобальныйКэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя;
	СтруктураПараметров.Вставить("module", 			СтрокаМодуль);
	СтруктураПараметров.Вставить("subsystem",		ГлобальныйКэш.КэшНастроек.ПараметрыНастроек.ПрефиксУстановленныхНастроек);
	СтруктураПараметров.Вставить("connection_id",	"0");//connection_id не передаём.
	
	Возврат СтруктураПараметров;
	
КонецФункции

//Функция генерирует готовое сообщение об ошибке для сервиса статистики
&НаКлиенте
Функция СбисСтатистика_СформироватьСтруктуруОшибки(ПараметрыСтатистики)
	СтруктураПараметров = СбисСтатистика_СформироватьСтруктуруОперации(ПараметрыСтатистики);
	//Добавим в data поля шапки статистики
	stat_data = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисСкопироватьОбъектНаКлиенте(СтруктураПараметров);
	//Допишем информацию о системе для записи.
	system_info = Новый Структура;
	system_info.Вставить("configuration_info",		ГлобальныйКэш.ПараметрыСистемы.Конфигурация.ПодробнаяИнформация);
	system_info.Вставить("configuration_version",	ГлобальныйКэш.ПараметрыСистемы.Конфигурация.Версия);
	system_info.Вставить("platform_version",		ГлобальныйКэш.ПараметрыСистемы.Клиент.ВерсияПриложения);
	system_info.Вставить("os_client",				ГлобальныйКэш.ПараметрыСистемы.Клиент.ТипОС);
	system_info.Вставить("os_server",				ГлобальныйКэш.ПараметрыСистемы.Сервер.ТипОС);
	system_info.Вставить("first_launch",			ГлобальныйКэш.ПараметрыСистемы.Обработка.ПервыйЗапуск);
	system_info.Вставить("sdk_version",				ГлобальныйКэш.СБИС.ПараметрыИнтеграции.Версия);
	stat_data.Вставить("systemInfo", system_info);
	СтруктураПараметров.Вставить("data", stat_data);
	Возврат СтруктураПараметров;		
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Криптография_РаботаССертификатами

&НаКлиенте
Функция СертификатУстановленЛокально(СертификатВходящий, ДопПараметры = Неопределено) Экспорт
	
	Перем КэшСертификатовСБИС;
	
	Попытка
	 	СертПодходит = Ложь;
		Если Не ГлобальныйКэш.ТекущийСеанс.Свойство("КэшСертификатовСБИС",КэшСертификатовСБИС) Тогда
			ОбновитьКэшСертификатов();
		ИначеЕсли ТекущаяДата() - КэшСертификатовСБИС.ДатаПоследнегоОбновленияКэшаСерт > 60 Тогда
			ОбновитьКэшСертификатов(); 
		КонецЕсли;
		
		СертЛокальный = ГлобальныйКэш.ТекущийСеанс.КэшСертификатовСБИС.Сертификаты.Получить(СертификатВходящий.Отпечаток);
		Если СертЛокальный = Неопределено Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Возврат Истина 
	Исключение 
		Ошибка = ОписаниеОшибки();
		ВызватьСбисИсключение(ИнформацияОбОшибке(),"МодульОбъектаКлиент.СертификатУстановленЛокально");
	КонецПопытки;
	
КонецФункции   

&НаКлиенте
Процедура ОбновитьКэшСертификатов()
	
	СписокЛокальныхСертификатов = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ПолучитьСписокЛокальныхСертификатов(ГлавноеОкно.Кэш);
	
	СертификатыЛокальныеСоответствие = Новый Соответствие;
	Для Каждого Серт из СписокЛокальныхСертификатов Цикл
					
		СертификатыЛокальныеСоответствие.Вставить(Строка(Серт.Значение.Отпечаток),Серт); 
		
	КонецЦикла;
			
	КэшСертификатовСБИС = Новый Структура("Сертификаты, ДатаПоследнегоОбновленияКэшаСерт", СертификатыЛокальныеСоответствие, ТекущаяДата());
	ГлобальныйКэш.ТекущийСеанс.Вставить("КэшСертификатовСБИС",КэшСертификатовСБИС);
	
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_РаботаСоСтроками

&НаКлиенте
Функция СбисФормат(ФорматнаяСтрока, ПараметрыФорматнойСтроки) Экспорт
	Результат = ФорматнаяСтрока;
	Если ПараметрыФорматнойСтроки.Свойство("Заменить") Тогда
		Для Каждого КлючИЗначение Из ПараметрыФорматнойСтроки.Заменить Цикл
			Результат = СтрЗаменить(Результат, "{" + КлючИЗначение.Ключ + "}", КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Функция преобразует строку формата "25.10.2023 21.20.54" или "25.10.2023" в дату 
//для способа обмена SabyHttpsClient, где дата в ответах приходит строкой
&НаКлиенте
Функция ДатаИзСтроки(str) Экспорт
	
	Если ТипЗнч(str) = Тип("Дата") Тогда
		Возврат str;
	КонецЕсли;
	
	Результат = str;
	
	Если	Сред(str,3,1) = "."
		И	Сред(str,6,1) = "." Тогда
		//Переопределим значение как дату, если это действительно она
		Если		СтрДлина(str) = 10 Тогда
			Попытка
				Результат = Дата(Сред(str,7,4), Сред(str,4,2), Лев(str, 2));
			Исключение
				//В случае исключения, ничего не делаем. Это не дата, значение не меняется
			КонецПопытки;
		ИначеЕсли	СтрДлина(str) = 19 Тогда 
			Попытка
				Результат = Дата(Сред(str,7,4), Сред(str,4,2), Лев(str, 2), Сред(str,12, 2), Сред(str,15, 2), Сред(str,18, 2))
			Исключение
				//В случае исключения, ничего не делаем. Это не дата, значение не меняется
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции


#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_РаботаСМеткамиСтатусов

&НаКлиенте
Функция СохранитьМеткиСтатусов(Кэш, ДопПараметры = Неопределено) Экспорт	
	// Получение способа хранения меток статусов
	// 0 - Пользователя СБИС
	// 1 - Аккаунта СБИС
	// 2 - Информационной системы
	СпособХраненияМетокСтатусов	= Кэш.Парам.СпособХраненияМетокСтатусов;
	
	МеткиСтатусов = Кэш.ФормаНастроекОбщее.МеткиСтатусовПоУмолчанию();
	ЗаполнитьЗначенияСвойств(МеткиСтатусов, ГлавноеОкно);
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ДопПараметры.Вставить("СпособХраненияМетокСтатусов", СпособХраненияМетокСтатусов);
			
	Кэш.ФормаНастроек.СбисСохранитьМеткиСтатусов(Кэш, МеткиСтатусов, ДопПараметры);
	
КонецФункции

&НаКлиенте
Функция ПрочитатьМеткиСтатусов(ПараметрыЧтения=Неопределено, ДопПараметры=Неопределено) Экспорт
	
	Возврат ГлавноеОкно.Кэш.ФормаНастроек.СбисПрочитатьМеткиСтатусов(ГлавноеОкно.Кэш);
                             
КонецФункции

// Процедура - периодическая процедура для синхронизации меток статусов у пользователя
//
// Параметры:
//  ДействиеОбновления	 - 	 - 
//  ДопПараметры		 - 	 - 
//
&НаКлиенте
Процедура  ОбновитьМеткиСтатусов(ПараметрыОбновить = Неопределено, ДопПараметры) Экспорт
	МеткиСтатусов = ПрочитатьМеткиСтатусов(ПараметрыОбновить, ДопПараметры);
	Если Не ЗначениеЗаполнено(МеткиСтатусов) Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ГлавноеОкно, МеткиСтатусов);
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ДействияПриЗапуске

&НаКлиенте
Процедура ДействияПриСтарте(ПараметрыЗапуска, Кэш) Экспорт
	Попытка
		Если Кэш.ПараметрыСистемы.Обработка.ПервыйЗапуск Тогда
			СбисДействияПриПервомЗапуске(ПараметрыЗапуска, Кэш);
		КонецЕсли;
		Если Кэш.ПараметрыСистемы.Обработка.НоваяВерсия Тогда
			РезультатДействия = СбисДействияПриОбновленииВерсии(Кэш, ПараметрыЗапуска.СтараяВерсия, ПараметрыЗапуска.АктивнаяВерсия);
			СбисСтатистика_СформироватьИЗаписать(Новый Структура("Действие, Результат, ИмяРеестра", "Обновление", РезультатДействия, Кэш.Текущий.ТипДок), Новый Структура);
			ГлавноеОкно.ПредВерсия	= ПараметрыЗапуска.АктивнаяВерсия;
			Кэш.Парам.ПредВерсия		= ПараметрыЗапуска.АктивнаяВерсия;
			Кэш.ПараметрыСистемы.Обработка.НоваяВерсия = Ложь;
		КонецЕсли;

		//Установить отложенные операции после запуска
		ОбработчикДействия = НовыйСбисОписаниеОповещения("СбисПроверитьПоследнююВерсию", ГлавноеОкно, Кэш);
		ОтложенноеДействиеОбновления = НовыйОтложенноеДействие(
		Новый Структура("Аргумент, ОписаниеОповещения", ПараметрыЗапуска, ОбработчикДействия));
  		ПодключитьОтложенноеДействие(ОтложенноеДействиеОбновления);

		ОбработчикДействия = НовыйСбисОписаниеОповещения("СбисПроверитьНаличиеОбновлений", ГлавноеОкно, Кэш);
		ПодключитьОтложенноеДействие(НовыйОтложенноеДействие(
		Новый Структура("Периодичность,	Аргумент,							ОписаниеОповещения, ЧислоВызовов", 
						60*60*8,		Новый Структура("Режим", "Авто"),	ОбработчикДействия)));
		
		ОбработчикДействия = НовыйСбисОписаниеОповещения("ОбновитьМеткиСтатусов", ГлавноеОкно.МодульОбъектаКлиент(), Кэш);
		ПодключитьОтложенноеДействие(НовыйОтложенноеДействие(
		Новый Структура("Периодичность, ОписаниеОповещения, ЧислоВызовов", 600, ОбработчикДействия)));

		Если 	НЕ ПараметрыЗапуска.сбисПараметры.Свойство("НеОтображатьНовостьПриЗапуске")
			ИЛИ НЕ ПараметрыЗапуска.сбисПараметры.НеОтображатьНовостьПриЗапуске Тогда
			АргументПоказаНовости = Новый Структура("ВерсияПрочитана, АктивнаяВерсия", ГлавноеОкно.ПрочитаннаяНовость, ПараметрыЗапуска.АктивнаяВерсия);
			ОтложенноеДействиеОбновления = НовыйОтложенноеДействие(Новый Структура(
			"Аргумент,				ИмяПроцедуры,			Модуль,			ДополнительныеПараметры", 
			АргументПоказаНовости,	"СбисПроверитьНовость",	ГлавноеОкно,	Кэш));
			ПодключитьОтложенноеДействие( ОтложенноеДействиеОбновления);
		КонецЕсли;
		
		Если	ЗначениеЗаполнено(Кэш.Парам.ОжидаемаяВерсия) 
			И	Кэш.ОбщиеФункции.ЭтоНоваяВерсия(Кэш.Парам.ОжидаемаяВерсия, ПараметрыЗапуска.АктивнаяВерсия) Тогда
			ОтложенноеДействиеОбновления = НовыйОтложенноеДействие(Новый Структура(
			"Аргумент,				Периодичность,	ИмяПроцедуры,									Модуль", 
			"Предложить перезапуск",60*15,			"сбисУстановитьОформлениеГиперссылокОбновления",ГлавноеОкно));
			ПодключитьОтложенноеДействие(ОтложенноеДействиеОбновления);
		Иначе	
			Кэш.Парам.ОжидаемаяВерсия = "";
		КонецЕсли;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.ДействияПриСтарте");
	КонецПопытки;	
КонецПроцедуры
		
//При изменении версии внешней обработки со старой на новую
&НаКлиенте
Функция  СбисДействияПриОбновленииВерсии(Кэш, СтараяВерсия, НоваяВерсия) Экспорт
	РезультатДействия = Кэш.ОбщиеФункции.РезультатДействия_Новый(Кэш, Новый Структура("ПредставлениеОперации, ФормаВызова", "Обновление", ГлавноеОкно));
	
	Если НоваяВерсияБольшеКлиент(СтараяВерсия, "24.1100") Тогда
		//Если версия ДО 24.1100 то выставить опцию подразделений в "Не создавать ответственных и подразделения"
		ИзменитьПараметрСбис("ВариантВыгрузкиОтвПодр", 2);
	КонецЕсли;
	
	Если НоваяВерсияБольшеКлиент(СтараяВерсия, "24.2132")
		И НЕ ГлавноеОкно.РежимЗапускаГлавногоОкна = "ВнешнийИнтерфейс" Тогда
		
		ИзменитьПараметрСБИС("ИспользоватьНовуюОтправку", Истина);			
		
	КонецЕсли;
	
	// Обновим файлы настроек без поднятия версии к текущей версии конфигурации
	Если НЕ ПолучитьЗначениеПараметраСбис("НастройкиАвтообновление") Тогда
		Отказ = Ложь;
		СтрокаДетализации = Кэш.ОбщиеФункции.РезультатДействия_СформироватьСтрокуДетализации(Кэш,,Новый Структура("Название", "Освежение файлов настроек"));
		РезультатОсвеженияФайловНастроек = Кэш.ФормаНастроекОбщее.ОсвежитьФайлыНастроек(Кэш, Отказ);
		Если Отказ Тогда
			Кэш.ОбщиеФункции.РезультатДействия_ДобавитьОшибку(Кэш, РезультатДействия, СтрокаДетализации, РезультатОсвеженияФайловНастроек);
			Отказ = Ложь;
		Иначе
			Кэш.ОбщиеФункции.РезультатДействия_ДобавитьРезультат(Кэш, РезультатДействия, СтрокаДетализации, Новый Структура("Выполнено, КлючГруппировки", Истина, "Файлы настроек освежены"));
		КонецЕсли;	
	КонецЕсли;
		
	Отказ = Ложь;
	СтрокаДетализации = Кэш.ОбщиеФункции.РезультатДействия_СформироватьСтрокуДетализации(Кэш,,Новый Структура("Название", "Добавление печатных форм"));
	РезультатДобавленияПФ = Кэш.ФормаНастроекОбщее.СбисДобавитьПечатныеФормы(Кэш, Отказ);
	Если Отказ Тогда
		Кэш.ОбщиеФункции.РезультатДействия_ДобавитьОшибку(Кэш, РезультатДействия, СтрокаДетализации, РезультатДобавленияПФ);
		Отказ = Ложь;
	Иначе
		Кэш.ОбщиеФункции.РезультатДействия_ДобавитьРезультат(Кэш, РезультатДействия, СтрокаДетализации, Новый Структура("Выполнено, КлючГруппировки", Истина, "Добавлены печатные формы"));
	КонецЕсли;
	Возврат РезультатДействия;
КонецФункции

//Выполняется при первом запуске обработки
&НаКлиенте
Процедура СбисДействияПриПервомЗапуске(ПараметрыЗапуска, Кэш) Экспорт
	Попытка
		Отказ = Ложь;
		РезультатДобавленияПФ = Кэш.ФормаНастроекОбщее.СбисДобавитьПечатныеФормы(Кэш, Отказ);
		Если Отказ Тогда
			СбисПараметрыСтатистики = Новый Структура("Действие, Ошибка, ИмяРеестра", "Запись ошибки", РезультатДобавленияПФ, Кэш.Текущий.ТипДок);
			СбисСтатистика_СформироватьИЗаписать(СбисПараметрыСтатистики, Новый Структура);
		КонецЕсли;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисДействияПриПервомЗапуске");
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ПериодическиеПроцедуры

//НЕ РАБОТА ПО РАСПИСАНИЮ. Это обработчик периодических операций - раз в пару минут, +-10 секунд. Гарантированной точности в промежутках нет
&НаКлиенте
Процедура ВыполнитьОтложенныеПроцедуры(Кэш) Экспорт

	сбисОтложенныеОперации	= Кэш.ТекущийСеанс.сбисОтложенныеОперации;
	ОтложенныеПроцедуры		= сбисОтложенныеОперации.Процедуры;
	Если Не сбисОтложенныеОперации.Запущено Тогда
		Возврат;
	КонецЕсли;
	//Начало обработки
	сбисОтложенныеОперации.ПоследнийВызовМС = ПолучитьДатуВМиллисекундах(); 
	Если Кэш.Парам.РежимОтладки Тогда
		лОтладочныеДанные = Новый Структура(
		"Тип,		Модуль,					Вызов,							Время,			Идентификатор,	Сообщение", 
		"START",	"МодульОбъектаКлиент",	"ВыполнитьОтложенныеПроцедуры",	ТекущаяДата(),	"Begin",		"");
		ДанныеВЛог = Новый Массив;
		ДанныеВЛог.Добавить(лОтладочныеДанные);
		Кэш.ОбщиеФункции.сбисСохранитьОтладочныеДанные(Кэш, Новый Структура("Log", ДанныеВЛог));
	КонецЕсли;
	ОтложенныеПроцедурыОчистить = Новый Массив;
	СледующийВызов = сбисОтложенныеОперации.МаксимальныйПериод;
	//Выполним что можно
	Для Каждого КлючИЗначение Из ОтложенныеПроцедуры Цикл
		ВыполняемаяОперация = КлючИЗначение.Значение;
		Если ВыполняемаяОперация.СледующийВызовМС > сбисОтложенныеОперации.ПоследнийВызовМС Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ВремяНачала = ТекущаяДата(); 
			ВыполняемаяОперация.ПоследнийВызовМС = Кэш.ОбщиеФункции.СбисТекущаяДатаВМиллисекундах(Кэш);
			ВыполнитьСбисОписаниеОповещения(ВыполняемаяОперация.Аргумент, ВыполняемаяОперация.ОписаниеОповещения);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			РезультатОшибка = НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.ВыполнитьОтложенныеПроцедуры");
			Если сбисОтложенныеОперации.СообщатьПриОшибке Тогда
				СообщитьСбисИсключение(РезультатОшибка, Новый Структура("ФормаВладелец", ГлавноеОкно));
			КонецЕсли;
			Если Кэш.Парам.РежимОтладки Тогда
				лОтладочныеДанные = Новый Структура(
				"Тип,		Модуль,					Вызов,												Время,			Идентификатор,					Сообщение", 
				"ERROR",	"МодульОбъектаКлиент",	ВыполняемаяОперация.ОписаниеОповещения.ИмяПроцедуры,ТекущаяДата(),	ВыполняемаяОперация.ИдДействия,	РезультатОшибка);
				ДанныеВЛог = Новый Массив;
				ДанныеВЛог.Добавить(лОтладочныеДанные);
				СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
			КонецЕсли;
			//В случае ошибки - падения выполнения кода, удалить обработчик
			ОтложенныеПроцедурыОчистить.Добавить(КлючИЗначение.Ключ);
			Продолжить;
		КонецПопытки;
		Если Не ВыполняемаяОперация.ЧислоВызовов = Неопределено Тогда
			ВыполняемаяОперация.ЧислоВызовов = ВыполняемаяОперация.ЧислоВызовов - 1;
		КонецЕсли;
		Если Кэш.Парам.РежимОтладки Тогда
			ТекстСообщенияЛог = "Время выполнения: " + Окр(((Кэш.ОбщиеФункции.СбисТекущаяДатаВМиллисекундах(Кэш) - ВыполняемаяОперация.ПоследнийВызовМС)/1000), 2) + ".";
			Если ВыполняемаяОперация.ЧислоВызовов = Неопределено Тогда
				ТекстСообщенияЛог = ТекстСообщенияЛог + " Выполняется бесконечно.";
			Иначе
				ТекстСообщенияЛог = ТекстСообщенияЛог + " Осталось вызовов: " + ВыполняемаяОперация.ЧислоВызовов;
			КонецЕсли;
			лОтладочныеДанные = Новый Структура(
			"Тип,		Модуль,					Вызов,												Время,			Идентификатор,					Сообщение", 
			"SUСCESS",	"МодульОбъектаКлиент",	ВыполняемаяОперация.ОписаниеОповещения.ИмяПроцедуры,ВремяНачала,	ВыполняемаяОперация.ИдДействия,	ТекстСообщенияЛог);
			ДанныеВЛог = Новый Массив;
			ДанныеВЛог.Добавить(лОтладочныеДанные);
			СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
		КонецЕсли;
		Если	Не	ВыполняемаяОперация.ЧислоВызовов = Неопределено
			И		ВыполняемаяОперация.ЧислоВызовов < 1 Тогда
			ОтложенныеПроцедурыОчистить.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	//Очистим те, что уже отработали, либо упали с ошибкой
	Для Каждого КлючОчистить Из ОтложенныеПроцедурыОчистить Цикл
		ОтложенныеПроцедуры.Удалить(КлючОчистить);
	КонецЦикла;
	
	//Обновить сроки вызова с учетом задержки выполнения
	//сбисОтложенныеОперации.ПоследнийВызовМС = ПолучитьДатуВМиллисекундах(); 
	Если ОтложенныеПроцедуры.Количество() Тогда
		//Операции могли в процессе появится. Обновим периоды с их учетом
		Для Каждого КлючИЗначение Из ОтложенныеПроцедуры Цикл
			ВыполняемаяОперация = КлючИЗначение.Значение;
			Если ВыполняемаяОперация.СледующийВызовМС > сбисОтложенныеОперации.ПоследнийВызовМС Тогда
				ОбновитьПериодСледующегоВыза(Кэш, СледующийВызов, ВыполняемаяОперация, сбисОтложенныеОперации);
				Продолжить;
			КонецЕсли;
			Если ВыполняемаяОперация.ПоследнийВызовМС = Неопределено Тогда
				СледующийВызов = 0;//Сразу вызываем, т.к. есть команда, которая ещё не обрабатывалась
				Прервать;
			КонецЕсли;
			//Операция требуется ещё, определим время следующего вызова, но не более максимального срока.
			ВыполняемаяОперация.СледующийВызовМС = ВыполняемаяОперация.ПоследнийВызовМС + ВыполняемаяОперация.ПериодичностьМС;
			ОбновитьПериодСледующегоВыза(Кэш, СледующийВызов, ВыполняемаяОперация, сбисОтложенныеОперации);
		КонецЦикла;
	
		ВремяОбработки = Окр((ПолучитьДатуВМиллисекундах() - сбисОтложенныеОперации.ПоследнийВызовМС)/1000, 2);
		СледующийВызов = СледующийВызов - ВремяОбработки;
		Если СледующийВызов <= 0 Тогда
			СледующийВызов = 0.1;
		КонецЕсли;
		ГлавноеОкно.ПодключитьОбработчикОжидания("ВыполнениеОтложенныхПроцедур", СледующийВызов, Истина);
		Если Кэш.Парам.РежимОтладки Тогда
			лОтладочныеДанные = Новый Структура(
			"Тип,	Модуль,					Вызов,							Время,			Идентификатор,		Сообщение", 
			"END",	"МодульОбъектаКлиент",	"ВыполнитьОтложенныеПроцедуры",	ТекущаяДата(),	"That's all folks",	"Следующий вызов: " + СледующийВызов);
			ДанныеВЛог = Новый Массив;
			ДанныеВЛог.Добавить(лОтладочныеДанные);
			СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
		КонецЕсли;
	Иначе
		сбисОтложенныеОперации.Запущено = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПериодСледующегоВыза(Кэш, СледующийВызов, ВыполняемаяОперация, сбисОтложенныеОперации)
	СледующийВызовДляОперацииПотребуется = Окр((ВыполняемаяОперация.СледующийВызовМС - сбисОтложенныеОперации.ПоследнийВызовМС)/1000, 2);
	//СледующийВызовДляОперацииПотребуется = Окр((ВыполняемаяОперация.ПериодичностьМС - (Кэш.ОбщиеФункции.СбисТекущаяДатаВМиллисекундах(Кэш) - ВыполняемаяОперация.ПоследнийВызовМС))/1000, 2);
	Если СледующийВызов > СледующийВызовДляОперацииПотребуется Тогда
		СледующийВызов = СледующийВызовДляОперацииПотребуется;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ПереключениеАккаунта

&НаКлиенте
Функция СбисПолучитьТикетДляАккаунта(Кэш, ПараметрыПолученияТикета, Отказ) Экспорт

	ИдДокумента = ПараметрыПолученияТикета.ИдДокумента;
	ИдАккаунта = ПараметрыПолученияТикета.ИдАккаунта;

	СтарыйИдСессии = Кэш.Парам.ИдентификаторСессии;

	Попытка		
		ЗаписанныеСессии = Кэш.СБИС.Сессии;
		КлючПользователя =  Кэш.СБИС.ПараметрыИнтеграции.КодСервиса+"_"+Кэш.СБИС.ПараметрыИнтеграции.ИдПользователя;
		СессииПользователя = ЗаписанныеСессии.Получить(КлючПользователя);
		СессияПользователяПоАккаунту = СессииПользователя.accounts.Получить(ИдАккаунта); 
		Если СессияПользователяПоАккаунту = Неопределено Тогда
			СписокАккаунтов = СбисПолучитьСписокАккаунтов(Кэш, Новый Структура(), Ложь);
			АккаунтПользователя = Ложь;
			Для каждого Аккаунт Из СписокАккаунтов Цикл
				Если Аккаунт.НомерАккаунта = ИдАккаунта Тогда
					АккаунтПользователя = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;

			Если Не АккаунтПользователя Тогда
				ВызватьСбисИсключение("Аккаунт документа не подключен для данного пользователя", "МодульОбъектаКлиент.СбисПолучитьТикетДляАккаунта");
			КонецЕсли; 

			СессияПользователяПоАккаунту = СбисПереключитьАккаунт(Кэш, Новый Структура("НомерАккаунта", ИдАккаунта), Новый Структура(), Ложь); 
			Если СессияПользователяПоАккаунту = Неопределено Тогда 
				ВызватьСбисИсключение("Не удалось получить сессию для аккаунта документа", "МодульОбъектаКлиент.СбисПолучитьТикетДляАккаунта"); 
			КонецЕсли;
			Кэш.Парам.ИдентификаторСессии = СессияПользователяПоАккаунту;
		Иначе
			Кэш.Парам.ИдентификаторСессии = СессияПользователяПоАккаунту;
			СессияДействительна = Кэш.Интеграция.сбисСессияДействительна(Кэш) = 1;
			Если Не СессияДействительна Тогда
				СессияПользователяПоАккаунту = СбисПереключитьАккаунт(Кэш, Новый Структура("НомерАккаунта", ИдАккаунта), Новый Структура(), Ложь); 
				Если СессияПользователяПоАккаунту = Неопределено Тогда 
					ВызватьСбисИсключение("Не удалось получить сессию для аккаунта документа", "МодульОбъектаКлиент.СбисПолучитьТикетДляАккаунта");
				КонецЕсли;
				Кэш.Парам.ИдентификаторСессии = СессияПользователяПоАккаунту;
			КонецЕсли;
		КонецЕсли;	

		Тикет = Кэш.Интеграция.ПолучитьТикетДляТекущегоПользователя(Кэш);

		//Кэш.Парам.ИдентиФикаторСессии = СтарыйИдСессии;
	Исключение
		Кэш.Парам.ИдентиФикаторСессии = СтарыйИдСессии;
		ИнфоОбОбшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОбшибке, "МодульОбъектаКлиент.СбисПолучитьТикетДляАккаунта");	 
	КонецПопытки;
	Возврат Новый Структура("Тикет, СтарыйИдСессии", Тикет, СтарыйИдСессии);
КонецФункции	

&НаКлиенте
Процедура КомандаОткрытьДокументОнлайн (ОписаниеДокумента, ДопПараметры) Экспорт
	Кэш = ДопПараметры.Кэш;
	Результат = Новый Структура("Ссылка, Пакет", "");
	Попытка
		ПараметрыДокумента = Кэш.Интеграция.СБИС_ПолучитьПараметрыПакетаДляОткрытияОнлайн(ОписаниеДокумента.ПараметрыПакетаСБИС, Новый Структура("Кэш", Кэш));
		Если ЗначениеЗаполнено(ПараметрыДокумента.ИдДокумента) Тогда
			ДопПарам = Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
			СоставПакета = Кэш.Интеграция.ПрочитатьДокумент(Кэш, ПараметрыДокумента.ИдДокумента, ДопПарам);
			Если типЗнч(СоставПакета)= тип("Структура") И СоставПакета.Свойство("СсылкаДляНашаОрганизация") Тогда // alo
				Результат.Ссылка = СоставПакета.СсылкаДляНашаОрганизация;			
				Если ЗначениеЗаполнено(Результат.Ссылка) И Не ПараметрыДокумента.Тикет = "" Тогда
					Результат.Ссылка = Результат.Ссылка + "&ticket=" + ПараметрыДокумента.Тикет + "&nocheck=1";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Кэш.Парам.СпособОбмена <> 1 
			И (НЕ Кэш.Парам.СоздаватьЧерновик ИЛИ ДопПараметры.Свойство("ОткрытьОнлайн")
			И ДопПараметры.ОткрытьОнлайн) Тогда //1189641556
			// загружаем пакет в кабинет без отправки << alo Меркурий 
			лРежимДиалога = РежимДиалогаВопрос.ДаНет;
			лТекстДиалога = "Документ не сопоставлен со СБИС. Создать черновик?";
			сбисПараметрыСоздания= Новый Структура("Кэш, ОписаниеДокумента, Результат, ОбработчикРезультата", Кэш, ОписаниеДокумента, Результат, ДопПараметры.ОбработчикРезультата);
			ОбработчикДиалога = НовыйСбисОписаниеОповещения("СоздатьЧерновик", Кэш.ГлавноеОкно.МодульОбъектаКлиент(), сбисПараметрыСоздания);
			СбисПоказатьВопрос(ОбработчикДиалога, лТекстДиалога, лРежимДиалога, 0, КодВозвратаДиалога.Да);
			Возврат;
			// alo Меркурий >>
		//1189641556
		ИначеЕсли Кэш.Парам.СпособОбмена <> 1 И Кэш.Парам.СоздаватьЧерновик Тогда 
			ДопПараметры.ОбработчикРезультата.ДополнительныеПараметры.Вставить("СоздатьЧерновик",Истина); //1190434889
			сбисПараметрыСоздания= Новый Структура("Кэш, ОписаниеДокумента, Результат, ОбработчикРезультата", Кэш, ОписаниеДокумента, Результат, ДопПараметры.ОбработчикРезультата);
			СоздатьЧерновик(КодВозвратаДиалога.Да, СбисПараметрыСоздания);   
			Возврат;
		КонецЕсли;
		Если ПараметрыДокумента.Свойство("СтарыйИдСессии") Тогда
			Кэш.Парам.ИдентиФикаторСессии = ПараметрыДокумента.СтарыйИдСессии;
		КонецЕсли;	
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		Результат = Кэш.ОбщиеФункции.сбисИсключение(ИнфОбОшибке, "МодульОбъектаКлиент.ОткрытьДокументОнлайн");
		ДопПараметры.ОбработчикРезультата.ДополнительныеПараметры.Отказ = Истина;
	КонецПопытки;
	ВыполнитьСбисОписаниеОповещения(Результат, ДопПараметры.ОбработчикРезультата);

КонецПроцедуры	

&НаКлиенте
Процедура СоздатьЧерновик(Ответ, СбисПараметрыСоздания) Экспорт 
	Кэш = сбисПараметрыСоздания.Кэш;  
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СоздатьЧерновик",Истина);
	Попытка
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ВыполнитьСбисОписаниеОповещения("Отменено пользователем", сбисПараметрыСоздания.ОбработчикРезультата);
			Возврат;
		КонецЕсли;
		Пакет = сбисПараметрыСоздания.ОписаниеДокумента.Пакет;
		Результат = сбисПараметрыСоздания.Результат;
		ИниТекущегоРеестра = сбисПараметрыСоздания.Кэш.Текущий.ТипДок;
		ЗначениеИниТекущегоРеестра = сбисПараметрыСоздания.Кэш.ФормаНастроек.Ини(сбисПараметрыСоздания.Кэш, ИниТекущегоРеестра);
		Если  ЗначениеИниТекущегоРеестра.свойство("НеЗапускатьВДокументооборот") тогда
			СохранитьНеЗапускатьВДокументооборот=ЗначениеИниТекущегоРеестра.НеЗапускатьВДокументооборот;
		Иначе 
			СохранитьНеЗапускатьВДокументооборот=неопределено;
		КонецЕсли;
		ЗначениеИниТекущегоРеестра.Вставить("НеЗапускатьВДокументооборот", Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));

		СоставПакетаОтправить = Новый Структура("СоставПакета");
		ЗаполнитьЗначенияСвойств(СоставПакетаОтправить, сбисПараметрыСоздания.Кэш.ТаблДок.ТекущиеДанные);
		
		СписокОтмеченныхДокументов = Новый Массив;
		СписокОтмеченныхДокументов.Добавить(СоставПакетаОтправить);
		
		//Костыли пока черновик работает через старую отправку. В дальнейшем переделать на ЗапуститьМассовуюОтправкуДокументов
		Если Кэш.Свойство("РезультатОтправки") Тогда
			Кэш.Удалить("РезультатОтправки");
		КонецЕсли;
		
		фрмОД = ГлавноеОкно.сбисНайтиФормуФункции("ОтправитьДокументы","Документ_"+сбисПараметрыСоздания.Кэш.Текущий.ТипДок,"Документ_Шаблон",сбисПараметрыСоздания.Кэш);
		фрмОД.ОтправитьДокументы(Кэш,СписокОтмеченныхДокументов);
		Если  СохранитьНеЗапускатьВДокументооборот = Неопределено Тогда
			ЗначениеИниТекущегоРеестра.удалить("НеЗапускатьВДокументооборот");
		Иначе
			ЗначениеИниТекущегоРеестра.НеЗапускатьВДокументооборот = СохранитьНеЗапускатьВДокументооборот;
		КонецЕсли;
		Если сбисПараметрыСоздания.Кэш.РезультатОтправки.Отправлено Тогда
			фрм = ГлавноеОкно.СбисНайтиФормуФункции("СбисПрочитатьСведенияОПакете", сбисПараметрыСоздания.Кэш.ФормаРаботыСоСтатусами, "");
			ИдДокументаАккаунта	= фрм.СбисПрочитатьСведенияОПакете(Новый Структура("ДокументСсылка", Пакет), Кэш);
			Если ЗначениеЗаполнено(ИдДокументаАккаунта.ИдДокумента) Тогда
				СоставПакета		= сбисПараметрыСоздания.Кэш.Интеграция.ПрочитатьДокумент(сбисПараметрыСоздания.Кэш, ИдДокументаАккаунта.ИдДокумента);
				ПараметрыДокумента	= Кэш.Интеграция.СБИС_ПолучитьПараметрыПакетаДляОткрытияОнлайн(ИдДокументаАккаунта, Новый Структура("Кэш", Кэш));
				Если ТипЗнч(СоставПакета)= Тип("Структура") И СоставПакета.Свойство("СсылкаДляНашаОрганизация") Тогда
					Результат.Ссылка = СоставПакета.СсылкаДляНашаОрганизация;
					Если ЗначениеЗаполнено(Результат.Ссылка) И Не ПараметрыДокумента.Тикет = "" Тогда
						Результат.Ссылка = Результат.Ссылка + "&ticket=" + ПараметрыДокумента.Тикет + "&nocheck=1";
					КонецЕсли;
				КонецЕсли;
				Если ПараметрыДокумента.Свойство("СтарыйИдСессии") Тогда
					Кэш.Парам.ИдентиФикаторСессии = ПараметрыДокумента.СтарыйИдСессии;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		Результат = НовыйСбисИсключение(ИнфОбОшибке, "МодульОбъектаКлиент.СоздатьЧерновик");
		СбисПараметрыСоздания.ОбработчикРезультата.ДополнительныеПараметры.Отказ = Истина;
	КонецПопытки;
	ВыполнитьСбисОписаниеОповещения(Результат, СбисПараметрыСоздания.ОбработчикРезультата);

КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Отправка

&НаКлиенте
Процедура ЗаписатьВложенияСБИС(СоставПакета, Вложение, ПараметрыЗаписи, ДопПараметры) Экспорт
	
	Кэш = ГлавноеОкно.Кэш;
	
	Если Не (СоставПакета.Свойство("Идентификатор") и ЗначениеЗаполнено(СоставПакета.Идентификатор)) Тогда 
		ВызватьСбисИсключение("Не указан документ для записи", "МодульОбъектаКлиент.ЗаписатьВложенияСБИС");
	КонецЕсли;
	
	Если Вложение.Свойство("ПолноеИмяФайла") Тогда // внешний файл добавлен в пакет
		Имя= Вложение.ИмяФайла;
		ДвоичныеДанные=Кэш.Интеграция.СБИС_СериализоватьФайлВBase64(Кэш, Новый Структура("ПолноеИмяФайла", Вложение.ПолноеИмяФайла), Новый Структура, Ложь); 
	Иначе  // сформирован xml
		Если Вложение.Свойство("СтруктураФайла") Тогда
			Имя= Вложение.СтруктураФайла.Файл.Имя+".xml";
		Иначе
			Имя= Вложение.Файл.Имя+".xml";
		КонецЕсли;
		Если Вложение.Свойство("XMLДокумента") Тогда
			ДвоичныеДанные=Кэш.Интеграция.СБИС_СериализоватьСтрокуВBase64(Кэш, Новый Структура("Строка", Вложение.XMLДокумента), Новый Структура, Ложь);
		Иначе
			ДвоичныеДанные="";
		КонецЕсли
	КонецЕсли;

	Если ЗначениеЗаполнено(ДвоичныеДанные) Тогда
		document = Новый Структура;
		document.Вставить( "Идентификатор", СоставПакета.Идентификатор ); 
		attachmentList = Новый Массив;
		attachment = Новый Структура; 
		file = Новый Структура;
		file.Вставить( "Имя", Имя);
		file.Вставить( "ДвоичныеДанные", ДвоичныеДанные);
		attachment.Вставить( "Файл", file );
		Если Не( Вложение.Свойство("Идентификатор") и ЗначениеЗаполнено(Вложение.Идентификатор)) Тогда
			ИдВложения = Строка(Новый УникальныйИдентификатор());
			Вложение.Вставить("Идентификатор", ИдВложения);
		КонецЕсли;
		attachment.Вставить( "Идентификатор",  Вложение.Идентификатор);
		attachmentList.Добавить( attachment );
		document.Вставить( "Вложение", attachmentList );
		
		Отказ = Ложь;
		ДопПараметрыЗапроса	= Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ЖдатьОтвета, ЕстьРезультат", Ложь, Истина, Истина, Истина);
		Результат = Кэш.Интеграция.СБИС_ЗаписатьВложение(Кэш, document, ДопПараметрыЗапроса, Отказ);
		Если Отказ Тогда   
			ВызватьСбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ЗаписатьВложение");
		КонецЕсли;
	Иначе    
		ВызватьСбисИсключение("Нет файла для записи", "МодульОбъектаКлиент.ЗаписатьВложенияСБИС");
	КонецЕсли; 
	
КонецПроцедуры		// alo Меркурий >>

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Отправка_СоставПакета

&НаКлиенте
Функция НовыйСоставПакета(ПараметрыКонструктора) Экспорт

	НовыйСоставПакета = Новый Структура("Вложение", Новый Массив);
	Если ПараметрыКонструктора.Свойство("ОснованиеПакета") Тогда
		НовыйСоставПакета.Вложение.Добавить(НовыйВложениеСБИС(, ПараметрыКонструктора));
	КонецЕсли;
	//Новый пакет с установкой ошибки.
	Если ПараметрыКонструктора.Свойство("Ошибка") Тогда
		НовыйСоставПакета.Вставить("Ошибка", ПараметрыКонструктора.Ошибка);
	КонецЕсли;

	Возврат НовыйСоставПакета;
	
КонецФункции

&НаКлиенте
Функция СоставПакета_СтруктураКонтрагентаДляОтправки(СоставПакета) Экспорт
	Перем ДопПараметрыСтороны;
	
	kontr = Новый Структура; 
	
	//ИД контрагента
	Если	СоставПакета.Контрагент.Свойство("Идентификатор")
		И	ЗначениеЗаполнено(СоставПакета.Контрагент.Идентификатор) Тогда
		kontr.Вставить( "Идентификатор", СоставПакета.Контрагент.Идентификатор);
	Иначе		
		СбисИдентификаторКонтрагента = ПрочитатьДополнительныйПараметрСтороны(СоставПакета.Контрагент, "КодОператораАбонентскогоЯщика");
		
		Если Не СбисИдентификаторКонтрагента = Неопределено Тогда
			//ИД явно не указан, то проверить наличие ИД оператора А/Я
			kontr.Вставить("Идентификатор", СбисИдентификаторКонтрагента);
		Иначе
			СбисИдентификаторКонтрагента = ПрочитатьДополнительныйПараметрСтороны(СоставПакета.Контрагент, "Идентификатор");
			Если Не СбисИдентификаторКонтрагента = Неопределено Тогда
				kontr.Вставить("Идентификатор", СбисИдентификаторКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Контакты
	Если СоставПакета.Контрагент.Свойство("Контакт")  Тогда
		Если СоставПакета.Контрагент.Контакт.Свойство("Телефон")  Тогда
			kontr.Вставить( "Телефон", СоставПакета.Контрагент.Контакт.Телефон );
		КонецЕсли;
		Если СоставПакета.Контрагент.Контакт.Свойство("EMAIL")  Тогда
			kontr.Вставить( "Email", СоставПакета.Контрагент.Контакт.EMAIL );
		КонецЕсли;
	КонецЕсли;
	
	//СвФЛ/СвЮл
	Если СоставПакета.Контрагент.Свойство("СвФЛ") Тогда
		СвФЛ = Новый Структура;
		Если СоставПакета.Контрагент.Свойство("Параметр") Тогда
			Для Каждого Параметр из СоставПакета.Контрагент.Параметр Цикл
				Если Параметр.Имя = "ЧастноеЛицо" Тогда
					СвФЛ.Вставить("ЧастноеЛицо", Параметр.Значение);
				КонецЕсли;
				Если Параметр.Имя = "СНИЛС" Тогда
					СвФЛ.Вставить("СНИЛС", Параметр.Значение);						
				КонецЕсли;     					
			КонецЦикла;
		КонецЕсли;  
		Если СоставПакета.Контрагент.СвФЛ.Свойство("ИНН") Тогда  
			СвФЛ.Вставить( "ИНН", СоставПакета.Контрагент.СвФЛ.ИНН );
		КонецЕсли;
		Если СоставПакета.Контрагент.СвФЛ.Свойство("Фамилия") Тогда
			СвФЛ.Вставить( "Фамилия", СоставПакета.Контрагент.СвФЛ.Фамилия );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвФЛ.Свойство("Имя") Тогда
			СвФЛ.Вставить( "Имя", СоставПакета.Контрагент.СвФЛ.Имя );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвФЛ.Свойство("Отчество") Тогда
			СвФЛ.Вставить( "Отчество", СоставПакета.Контрагент.СвФЛ.Отчество );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвФЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(СоставПакета.Контрагент.СвФЛ.КодФилиала) Тогда
			СвФЛ.Вставить( "КодФилиала", СоставПакета.Контрагент.СвФЛ.КодФилиала );	
		КонецЕсли;

		kontr.Вставить( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = Новый Структура;
		СвЮЛ.Вставить( "ИНН", СоставПакета.Контрагент.СвЮЛ.ИНН ); 
		Если СоставПакета.Контрагент.СвЮЛ.Свойство("КПП") Тогда
			СвЮЛ.Вставить( "КПП", СоставПакета.Контрагент.СвЮЛ.КПП );
		КонецЕсли;
		Если СоставПакета.Контрагент.СвЮЛ.Свойство("КодСтраны") Тогда
			СвЮЛ.Вставить( "КодСтраны", СоставПакета.Контрагент.СвЮЛ.КодСтраны );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвЮЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(СоставПакета.Контрагент.СвЮЛ.КодФилиала) Тогда
			СвЮЛ.Вставить( "КодФилиала", СоставПакета.Контрагент.СвЮЛ.КодФилиала );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвЮЛ.Свойство("Название") Тогда
			СвЮЛ.Вставить( "Название", СоставПакета.Контрагент.СвЮЛ.Название );	
		КонецЕсли;
		kontr.Вставить( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	
	//Подразделение
	Если СоставПакета.Контрагент.Свойство("Подразделение") и СоставПакета.Контрагент.Подразделение.Свойство("Идентификатор") Тогда
		Подразделение = Новый Структура;
		Подразделение.Вставить( "Идентификатор", СоставПакета.Контрагент.Подразделение.Идентификатор); 
		kontr.Вставить( "Подразделение", Подразделение );
	КонецЕсли;	
	Возврат kontr;
	
КонецФункции 

&НаКлиенте
Функция СоставПакета_СтруктураОрганизацииДляОтправки(СоставПакета) Экспорт
	Перем СвФлЮлИсточник, КодФилиалаОрганизации;
	
	СторонаРезультат = Новый Структура;
	
	Если Не СоставПакета.Свойство("НашаОрганизация") Тогда
		
		ВызватьСбисИсключение("Неизвестный формат состава пакета для отправки.", "МодульОбъектаКлиент.СоставПакета_СтруктураОрганизацииДляОтправки");
		
	ИначеЕсли СоставПакета.НашаОрганизация.Свойство("СвФЛ", СвФлЮлИсточник) Тогда
		
		СвФлЮлРезультат = Новый Структура;
		СторонаРезультат.Вставить("СвФЛ", СвФлЮлРезультат);
		
	ИначеЕсли СоставПакета.НашаОрганизация.Свойство("СвЮЛ", СвФлЮлИсточник) Тогда
		
		СвФлЮлРезультат = Новый Структура;
		СторонаРезультат.Вставить("СвЮЛ", СвФлЮлРезультат);
		
		СвФлЮлРезультат.Вставить("КПП", СвФлЮлИсточник.КПП);
		
		Если СвФлЮлИсточник.Свойство("КодСтраны") Тогда
			
			СвФлЮлРезультат.Вставить("КодСтраны", СвФлЮлИсточник.КодСтраны);
			
		КонецЕсли;
		
	Иначе
		
		ВызватьСбисИсключение("Неизвестный формат стороны документооборота", "МодульОбъектаКлиент.СоставПакета_СтруктураОрганизацииДляОтправки");
		
	КонецЕсли;
	
	//ИНН обязан быть
	СвФлЮлРезультат.Вставить("ИНН", СвФлЮлИсточник.ИНН);
	
	//Проверим КФ организации.
	Если СоставПакета.Свойство("Контрагент") Тогда
		
		//Может быть задан на контрагенте как КФ отправителя
		КодФилиалаОрганизации = ПрочитатьДополнительныйПараметрСтороны(СоставПакета.Контрагент, "КодФилиалаОтправителя");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодФилиалаОрганизации)
		Или ( СвФлЮлИсточник.Свойство("КодФилиала", КодФилиалаОрганизации)
		И ЗначениеЗаполнено(КодФилиалаОрганизации)) Тогда
		
		//Есть КФ отправителя, или установлен КФ на органиации. Приоритет КФ отправителя от контрагента выше установленного на организации
		СвФлЮлРезультат.Вставить("КодФилиала", КодФилиалаОрганизации);
		
	КонецЕсли;
	
	Возврат СторонаРезультат;
	
КонецФункции
// Функция - формирует Отправку СБИС - готовый к отправке Документ на основании состава пакета, прочитанного из 1С
//
// Параметры:
//  СоставПакета - Экземпляр класса (Структура)	- документ СБИС, прочитанный от 1С
//  ДопПараметры - Структура	 				- возможность расширения
// 
// Возвращаемое значение:
//  Экземпляр класса ОтправкаДокументаСБИС (Струкутра) 
//
&НаКлиенте
Функция СоставПакета_ПодготовитьКОтправке(СоставПакета, ДопПараметры=Неопределено) Экспорт
	Перем СбисШифрование, Статус, Этап;
	
	Если		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("Шифрование", СбисШифрование) Тогда
		СбисШифрование = Ложь;
	КонецЕсли;
	
	МодульИнтеграции = ПолучитьЗначениеПараметраСбис("Интеграция");
	
	document = Новый Структура;
	//Сразу проставим статус, так как попали в функцию. В случае, если это не так, статус изменится (Например, в случае отправки вложения файл лоадером)
	Если	НЕ	ДопПараметры = Неопределено
		И		ДопПараметры.Свойство("Статус", Статус)
		И	НЕ	Статус = Неопределено
		И		Статус = 0 Тогда
		Результат	= НовыйОтправкаДокументаСБИС(СоставПакета, "Черновик");
	Иначе
		Результат	= НовыйОтправкаДокументаСБИС(СоставПакета, "Готов");  
	КонецЕсли;
	ОтправкаДокументаСБИС_Установить(Результат, "ДокументОтправить", document);
	
	//РезультатПодготовки = Новый Структура("СоставПакета, ДокументОтправить, Ошибки, Готов, Отказ", СоставПакета, document, Новый Массив, Истина, Отказ);
	Если СоставПакета.Свойство("Дата") И ЗначениеЗаполнено(СоставПакета.Дата) Тогда
		document.Вставить("Дата",СоставПакета.Дата);	
	КонецЕсли;
	Если СоставПакета.Свойство("Номер") И ЗначениеЗаполнено(СоставПакета.Номер) Тогда
		document.Вставить("Номер",СоставПакета.Номер);	
	КонецЕсли;
	//Для зашифрованных документов нет суммы
	Если СбисШифрование Тогда
		document.Вставить("Шифрование", Новый Структура("Зашифрован", "Да"));
	ИначеЕсли	СоставПакета.Свойство("Сумма")
			И	ЗначениеЗаполнено(СоставПакета.Сумма) Тогда
		document.Вставить("Сумма",СоставПакета.Сумма);	
	КонецЕсли;
	ИдПакета = СоставПакета_Идентификатор(СоставПакета, ДопПараметры);
	
	attachmentList = Новый Массив;
	Если ДопПараметры.Свойство("Этап", Этап)
		И ЗначениеЗаполнено(Этап) Тогда
		 document.Вставить("Этап",Этап);
		 document.Этап.Вставить("Вложение",		attachmentList );
	Иначе
		document.Вставить("Вложение",		attachmentList ); 
	КонецЕсли;	
	
	document.Вставить("Тип", СоставПакета.Тип);
	
	Если СоставПакета.Свойство("Подтип") И ЗначениеЗаполнено(СоставПакета.Подтип) Тогда
		document.Вставить( "Подтип",СоставПакета.Подтип);
	КонецЕсли;
	document.Вставить("Идентификатор",	ИдПакета); 
	
	СоставПакета.Вставить("Идентификатор", ИдПакета);
	//Обработка вложений
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		ИдВложения = Строка(Новый УникальныйИдентификатор());
		Вложение.Вставить("Идентификатор", ИдВложения);
		
		file		= Новый Структура;
		attachment	= Новый Структура("Идентификатор, Файл", ИдВложения, file);
		
		Если СбисШифрование Тогда
			Если ПолучитьЗначениеПараметраСбис("ШифроватьВыборочно") Тогда
				Если Вложение.Свойство("Шифрование") И Вложение.Шифрование = Истина Тогда
					attachment.Вставить("Шифрование", "Да" );
				Иначе
					attachment.Вставить("Шифрование", "Нет" );
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Вложение.Свойство("Зашифрован") Тогда
			// может быть в случае пересылки зашифрованных пакетов
			attachment.Вставить("Зашифрован", Вложение.Зашифрован);
		КонецЕсли;
		
		СбисПараметрыВложения = Новый Структура("Файл, Вложение, ВложениеВПакет", file, Вложение, attachment);
		
		Если		Вложение.Свойство("ПолноеИмяФайла") Тогда // внешний файл добавлен в пакет

			file.Вставить("Имя", Вложение.ИмяФайла);
			МодульИнтеграции.Отправка_ОбработатьВнешнийФайл(ГлавноеОкно.Кэш, СбисПараметрыВложения, Результат);

		ИначеЕсли	ТипЗнч(СбисПараметрыВложения.Вложение.XMLДокумента) = Тип("Соответствие") Тогда
			
			file.Вставить("Подстановка", СбисПараметрыВложения.Вложение.XMLДокумента);
			
		Иначе  // сформирован xml
			
			ИмяФайла = Вложение.СтруктураФайла.Файл.Имя + ".xml";
			file.Вставить("Имя", ИмяФайла);
			МодульИнтеграции.Отправка_ОбработатьXMLФайл(ГлавноеОкно.Кэш, СбисПараметрыВложения, Результат);
			
		КонецЕсли;
		
		attachmentList.Добавить(СбисПараметрыВложения.ВложениеВПакет);
		
		Если Вложение.Свойство("Подпись") Тогда //d.ch
			ЭЦП = Новый Массив;
			Для Каждого Запись из Вложение.Подпись Цикл
				ЗаписьЭЦП = Новый Структура;
				Если Запись.Свойство("Направление") Тогда
					ЗаписьЭЦП.Вставить("Направление",Запись.Направление);
				КонецЕсли;
				ФайлЭЦП = Новый Структура;
				ФайлЭЦП.Вставить( "Имя", Запись.Файл.Имя ); 
				ФайлЭЦП.Вставить( "ДвоичныеДанные", ПолучитьBASE64ПоИмениФайлаКлиент(Запись.Файл.ПолноеИмяФайла)); 
				ЗаписьЭЦП.Вставить("Файл",ФайлЭЦП);
				ЭЦП.Добавить(ЗаписьЭЦП);
			КонецЦикла;
			attachment.Вставить( "Подпись", ЭЦП );
		КонецЕсли;
		Если СбисШифрование Тогда
			Если	Вложение.Свойство("Тип")
				И	ЗначениеЗаполнено(Вложение.Тип)
				И	Вложение.Свойство("ПодТип")
				И	Вложение.Свойство("ВерсияФормата")
				И	ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
				attachment.Вставить( "Тип",  Вложение.Тип);
				attachment.Вставить( "Подтип",  Вложение.ПодТип);
				attachment.Вставить( "ВерсияФормата",  Вложение.ВерсияФормата);
				Если	Вложение.Свойство("ПодВерсияФормата")
					И	ЗначениеЗаполнено(Вложение.ПодВерсияФормата) Тогда
					attachment.Вставить( "ПодверсияФормата",  Вложение.ПодВерсияФормата);
				КонецЕсли;
			КонецЕсли;
			Если Вложение.Свойство("Название") и ЗначениеЗаполнено(Вложение.Название) Тогда
				// для зашифрованных документов убираем сумму из названия
				ПозСуммы = Найти(Вложение.Название, "на сумму");
				Если ПозСуммы Тогда
					Вложение.Название = Лев(Вложение.Название, ПозСуммы-1);
				КонецЕсли;
				attachment.Вставить("Название",  Вложение.Название);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СоставПакета.Свойство("ПользовательскийИдентификатор") 
		И (НЕ ДопПараметры.Свойство("Этап",Этап)
		ИЛИ НЕ ЗначениеЗаполнено(Этап)) Тогда
		redaction = Новый Структура;
		redaction.Вставить("ИдентификаторИС", СоставПакета.ПользовательскийИдентификатор);
		document.Вставить( "Редакция", redaction);
	КонецЕсли;
	Если СоставПакета.Свойство("Примечание") и ЗначениеЗаполнено(СоставПакета.Примечание) Тогда
		document.Вставить( "Примечание", СоставПакета.Примечание);
	КонецЕсли;
	
	document.Вставить( "НашаОрганизация", СоставПакета_СтруктураОрганизацииДляОтправки(СоставПакета));
	
	Если СоставПакета.Свойство("Контрагент") Тогда
		document.Вставить("Контрагент", СоставПакета_СтруктураКонтрагентаДляОтправки(СоставПакета));
	КонецЕсли;
	
	Если СоставПакета.Свойство("Ответственный") и СоставПакета.Ответственный.Количество()>0 Тогда
		otv = Новый Структура;
		Для Каждого Элемент Из СоставПакета.Ответственный Цикл
			otv.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
		document.Вставить( "Ответственный", otv ); 	
	КонецЕсли;
	Если СоставПакета.Свойство("Подразделение") и СоставПакета.Подразделение.Количество()>0 Тогда
		podrazdel = Новый Структура;
		Для Каждого Элемент Из СоставПакета.Подразделение Цикл
			podrazdel.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
		document.Вставить( "Подразделение", podrazdel ); 	
	КонецЕсли;
	Если СоставПакета.Свойство("Регламент") и СоставПакета.Регламент.Количество()>0 Тогда
		regl = Новый Структура;
		Для Каждого Элемент Из СоставПакета.Регламент Цикл
			regl.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
		document.Вставить( "Регламент", regl ); 	
	КонецЕсли;
	Если СоставПакета.Свойство("ДокументОснование") и СоставПакета.ДокументОснование.Количество()>0 Тогда
		osnovania = Новый Массив;
		Для Каждого ДокОсн Из СоставПакета.ДокументОснование Цикл 
			osn = Новый Структура;
			Если ДокОсн.Свойство("ВидСвязи") Тогда
				osn.Вставить( "ВидСвязи", ДокОсн.ВидСвязи );	
			КонецЕсли;
			doc = Новый Структура;
			Для Каждого Элемент Из ДокОсн Цикл
				Если Элемент.Ключ<>"ВидСвязи" Тогда
					doc.Вставить( Элемент.Ключ, Элемент.Значение );	
				КонецЕсли;
			КонецЦикла;
			osn.Вставить( "Документ", doc );
			osnovania.Добавить(osn);
		КонецЦикла;
		document.Вставить( "ДокументОснование", osnovania ); 				
	КонецЕсли;
	Если	СоставПакета.Свойство("НеЗапускатьВДокументооборот")
		И	СоставПакета.НеЗапускатьВДокументооборот = Истина Тогда
		document.Вставить("НеЗапускатьВДокументооборот", "Да");
	КонецЕсли;
	Если	СоставПакета.Свойство("ДопПоля") Тогда // alo ДопПоля
		DopPolya = Новый Массив;
		Для Каждого Поле Из СоставПакета.ДопПоля Цикл 
			DopPolya.Добавить(Поле.Ключ);
		КонецЦикла;
		document.Вставить( "ДопПоля", DopPolya );
	КонецЕсли;
	Если	СоставПакета.Свойство("Провести")	// alo Провести
		И	( СоставПакета.Провести = Истина или СоставПакета.Провести = "Да") Тогда
		document.Вставить("Провести", "Да");
	КонецЕсли;  
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СоставПакета_Идентификатор(СоставПакета, ДопПараметры = Неопределено) Экспорт 
	Перем ИдПакета, Статус;
	
	Если		СоставПакета.Свойство("ВременныйИдентификатор", ИдПакета) Тогда 
	ИначеЕсли  НЕ ДопПараметры = Неопределено
		И ДопПараметры.Свойство("Статус",Статус)
		И Статус = 0
		И СоставПакета.Свойство("Идентификатор",ИдПакета)
		И НЕ (ИдПакета = "" ИЛИ ИдПакета = Неопределено) Тогда 
		Возврат ИдПакета; //Вернем существующий идентификатор
	ИначеЕсли		СоставПакета.Свойство("ПользовательскийИдентификатор", ИдПакета)
			И	Не (	СоставПакета.Свойство("Контрагент")
					И	СоставПакета.Контрагент.Свойство("ЗапретРедакций")) Тогда
		ИдПакета = Сред(ИдПакета, Найти(ИдПакета,":")+1);
	Иначе
		ИдПакета = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	Возврат ИдПакета;
	
КонецФункции

&НаКлиенте
Функция СоставПакета_Получить(СоставПакета, КлючПолучить) Экспорт 
	Перем ЗначениеИтог;
	
	Если		КлючПолучить = "РегламентНазвание" Тогда
		Если 	СоставПакета.Свойство("Регламент",	ЗначениеИтог) 
			И	ЗначениеИтог.Свойство("Название",	ЗначениеИтог) Тогда
			Возврат ЗначениеИтог;
		Иначе
			ЗначениеИтог = "";
		КонецЕсли;
	ИначеЕсли	КлючПолучить = "Идентификатор" Тогда
		Если СоставПакета.Свойство("Идентификатор",ЗначениеИтог)
			И НЕ (ЗначениеИтог = "" ИЛИ ЗначениеИтог = Неопределено) Тогда
			Возврат ЗначениеИтог; //Вернем существующий идентификатор
		Иначе	
			ЗначениеИтог = СоставПакета_Идентификатор(СоставПакета);
		КонецЕсли;
	ИначеЕсли КлючПолучить = "ОсновнойДокумент1С" Тогда
		Если	СоставПакета.Вложение.Количество()
			И	СоставПакета.Вложение[0].Свойство("Документы1С") Тогда
			ЗначениеИтог = СоставПакета.Вложение[0].Документы1С[0].Значение;
		КонецЕсли; 
	ИначеЕсли КлючПолучить = "СтатусГосСистемы" Тогда
		ЗначениеИтог = СоставПакета_СтатусГоссистемыПоПакету(СоставПакета);
	ИначеЕсли КлючПолучить = "ЕстьРасхождения" Тогда
		ЗначениеИтог = СоставПакета_РасхожденияПоПакету(СоставПакета);
	Иначе
		ЗначениеИтог = СоставПакета[КлючПолучить]
	КонецЕсли;
	Возврат ЗначениеИтог;
	
КонецФункции 

&НаКлиенте
Функция СоставПакета_РасхожденияПоПакету(СоставПакета) 
	
	Перем СбисРасширение, Расхождение;  
	
	Возврат СоставПакета.Свойство("Расширение", СбисРасширение) 
		И СбисРасширение.Свойство("ЕстьРасхождения",Расхождение) 
		И Расхождение = "Да";
		
КонецФункции

// Функция возвращает статус из госсистем по состоянию или коду
//
// Параметры:
//  СоставПакета - Структура - Обрабатываемый пакет (Документ)
// 
// Возвращаемое значение:
//  Строка - Статус документа в госсистеме
//
&НаКлиенте
Функция СоставПакета_СтатусГоссистемыПоПакету(СоставПакета) 
	
	Перем СбисРасширение, СтатусГос;  
	
	Кэш = ГлавноеОкно.Кэш;
	
	Если	СоставПакета.Свойство("Расширение",	СбисРасширение) Тогда
		Если	СбисРасширение.Свойство("СостояниеМарк",СтатусГос)
			И	СтатусГос.Свойство("СостояниеОперации",			СтатусГос) Тогда 				
		//Прослеживаемой и маркируемой продукции, у одном документе, быть не может
		ИначеЕсли СбисРасширение.Свойство("СостояниеПросл",СтатусГос) 
			И СтатусГос.Свойство("КодСостоянияОперации", СтатусГос) Тогда 
			СтатусГос = Кэш.ОбщиеФункции.СостояниеПрослеживаемостиПоКоду(СтатусГос);; 
		Иначе
			СтатусГос = "";
		КонецЕсли; 	
	Иначе
		СтатусГос = "";	
	КонецЕсли; 
	
	Возврат СтатусГос;
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Отправка_Сторона

// Функция - выгружает данные стороны в плоском формате 
//
// Параметры:
//  ДанныеСтороны	 - экземпляр класса сторона	 - Структура СфЮл/СвФЛ
// 
// Возвращаемое значение:
//  Структура - формат с полями "ИНН, КПП, КодФилиала". Если чего-то не хватает, то ""
//
&НаКлиенте
Функция Сторона_Выгрузить(ДанныеСтороны) Экспорт
	Перем СвЮлФлСтороны;
	
	ДанныеСтороныПлоские = Новый Структура("ИНН, КПП, КодФилиала", "", "", "");
	Если		ДанныеСтороны = Неопределено Тогда
		
		Возврат ДанныеСтороныПлоские;
		
	ИначеЕсли	ДанныеСтороны.Свойство("СвЮЛ", СвЮлФлСтороны) Тогда
		
		Если СвЮлФлСтороны.Свойство("КПП") Тогда
			ДанныеСтороныПлоские.КПП = СвЮлФлСтороны.КПП;
		КонецЕсли;
		
	ИначеЕсли	ДанныеСтороны.Свойство("СвФЛ", СвЮлФлСтороны) Тогда 
		
		//Есть СвФЛ
		
	Иначе
		
		//Нет данных стороны
		ВызватьСбисИсключение(724, "РаботаСДокументами1С.СгенерироватьПакет",, "Сторона не определена", "Отсутствует ИНН/КПП");
		
	КонецЕсли;
	
	ДанныеСтороныПлоские.ИНН = СвЮлФлСтороны.ИНН;
	Если	СвЮлФлСтороны.Свойство("КодФилиала")
		И	ЗначениеЗаполнено(СвЮлФлСтороны.КодФилиала) Тогда
		ДанныеСтороныПлоские.КодФилиала = СвЮлФлСтороны.КодФилиала;
	КонецЕсли;
	
	Возврат ДанныеСтороныПлоские;
	
КонецФункции
	
// Функция ищет элемент справочника в базе 1С по данным участника в универсальном формате
//
// Параметры:
//  оУчастник	 - Структура	 - класс стороны
//  ДопПараметры - Струкутра	 - расширение поиска
//		УзелИниПоиска	- 
//		ТипСтороны		-
//		Тип1С			-
// 
// Возвращаемое значение:
//  Массив - Список найденныхссылок
//
&НаКлиенте
Функция Сторона_НайтиКарточки1С(оУчастник, ДопПараметры) Экспорт

	Возврат Сторона_НайтиКарточки1СЗапросом(оУчастник, ДопПараметры);
	
КонецФункции

// Функция ищет элемент справочника в базе 1С по данным участника в универсальном формате
//
// Параметры:
//  оУчастник	 - Структура	 - класс стороны
//  ДопПараметры - Струкутра	 - расширение поиска
//		УзелИниПоиска	- Структура, узел ини из мДокумент для поиска стороны под определенный документ
//		ТипСтороны		- Строка Контрагент/Организация. Должно быть определено в ини Конфигураици 
// 
// Возвращаемое значение:
//  Массив - Список найденных ссылок
//
&НаКлиенте
Функция Сторона_НайтиКарточки1СЗапросом(оУчастник, ДопПараметры) Экспорт
	Перем СвФлЮл, УзелИниПоиска, ТекстЗапроса, ТолькоПоИНН;

	Результат	= Новый Массив;
	Если	Не	ТипЗнч(оУчастник) = Тип("Структура")
		Или		оУчастник = Неопределено Тогда 
		Возврат Результат;
	КонецЕсли;
	ДопПараметры.Свойство("ТолькоПоИНН", ТолькоПоИНН);
	
	ТипСтороны					= ДопПараметры.ТипСтороны;
	ПараметрыПоискаРеквизиты	= ПолучитьЗначениеПараметраСбис("РеквизитыСторонДляПоиска");
	
	Если Не ПараметрыПоискаРеквизиты.Свойство(ТипСтороны, ПараметрыПоискаРеквизиты) Тогда
		ВызватьСбисИсключение(760, "МодульОбъектаКлиент.Сторона_НайтиКарточки1С",,, "Отсутствует описание стороны " + ТипСтороны + " в ини Конфигурация для поиска.");
	КонецЕсли;
	
	КлючЗапроса					= ПараметрыПоискаРеквизиты.КлючЗапроса;
	ТолькоПоИНН					= ПараметрыПоискаРеквизиты.ПоискТолькоПоИНН;
	ПараметрыПостроенияЗапроса	= Новый Структура;
	
	Если		оУчастник.Свойство("СвФЛ", СвФлЮл) Тогда
		ТолькоПоИНН = Истина;
		ПараметрыПостроенияЗапроса.Вставить("ИНН", СвФлЮл.ИНН);
	ИначеЕсли	оУчастник.Свойство("СвЮЛ", СвФлЮл) Тогда
		ПараметрыПостроенияЗапроса.Вставить("КПП", СвФлЮл.КПП);
		ПараметрыПостроенияЗапроса.Вставить("ИНН", СвФлЮл.ИНН);
	КонецЕсли;
		
	//Определить текст запроса
	СтрокаФильтрКПП = "И Участник." + ПараметрыПоискаРеквизиты.КПП + "=&КПП";
	Если  ДопПараметры.Свойство("УзелИниПоиска", УзелИниПоиска)
		И УзелИниПоиска.Свойство(КлючЗапроса) Тогда
		//В ини на поиск есть свой запрос для соответствующей стороны
		ТекстЗапроса = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.РассчитатьЗначение(КлючЗапроса, УзелИниПоиска);
	Иначе
		ИниКОнфигурации = ИниПоПараметрам("Конфигурация");
		Если ИниКОнфигурации.Свойство(КлючЗапроса) Тогда
			ТекстЗапроса = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.РассчитатьЗначение(КлючЗапроса, ИниКОнфигурации);
		КонецЕсли;
	КонецЕсли;
	
	Если	ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Участник.Ссылка
		|ИЗ
		|	Справочник." + ПараметрыПоискаРеквизиты.Тип + " КАК Участник
		|ГДЕ
		|	НЕ Участник.ПометкаУдаления 
		|	И Участник." + ПараметрыПоискаРеквизиты.ИНН + "=&ИНН";
		
		Если Не ТолькоПоИНН Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	" + СтрокаФильтрКПП;
		КонецЕсли;
	ИначеЕсли ТолькоПоИНН Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрокаФильтрКПП, "");
		
	КонецЕсли;
	
	//Подразделение, если есть
	Если	оУчастник.Свойство("Подразделение") 
		И	оУчастник.Подразделение.Свойство("Идентификатор") Тогда
		ПараметрыПостроенияЗапроса.Вставить("КодФилиала", оУчастник.Подразделение.Идентификатор);
	Иначе
		ПараметрыПостроенияЗапроса.Вставить("КодФилиала", "");
	КонецЕсли;
	
	//GLN, если есть
	Если	оУчастник.Свойство("GLN") Тогда
		ПараметрыПостроенияЗапроса.Вставить("GLN",	оУчастник.GLN);
	Иначе
		ПараметрыПостроенияЗапроса.Вставить("GLN",	"");
	КонецЕсли;
	
	//Пользовательские органичения
	Если оУчастник.Свойство("Ограничения") Тогда
		Для Каждого Параметр Из оУчастник.Ограничения Цикл
			ПараметрыПостроенияЗапроса.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;	
	КонецЕсли; 
	
	РезультатПоиска = Сторона_НайтиКарточки1СЗапросомСервер(ТекстЗапроса, ПараметрыПостроенияЗапроса);
	РезультатИтог	= Новый Массив;
	
	Для Каждого РезультатСтрока Из РезультатПоиска Цикл 
		Если ТипЗнч(РезультатСтрока) = Тип("Структура") Тогда
			РезультатИтог.Добавить(РезультатСтрока.Ссылка);
		Иначе
			РезультатИтог.Добавить(РезультатСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатИтог;
	
КонецФункции

&НаСервере
Функция Сторона_НайтиКарточки1СЗапросомСервер(ТекстЗапроса, ПараметрыЗапроса)
	
	Возврат МодульОбъектаСервер().ВыполнитьЗапросСПараметрами(ТекстЗапроса, ПараметрыЗапроса);
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Отправка_РезультатОтправки

// Функция - Конструктор класса для асинхронной отправки
//
// Параметры:
//  ПараметрыКонструктора	- Структура	 - ПараметрыОтправки, ДанныеКОтправке, ОбработчикРезультата, ВерсияФормата
//		ДанныеКОтправке	- Струкутра
//			СписокПакетов		- массив	- из структур с полем "СоставПакета", где в качестве значения - список значений из элементов:
//							значение - ссылка на документ 1С, представление - имя настройки которой обрабатывается документ
//			МодульПодготовки	- форма		- которой осуществляется расчёт документа на выгрузку.
// 
//		ВерсияФормата		- Число 1/2 версия класса - старая/новая отправка
// Возвращаемое значение:
//  РезультатОтправки	 - РезультатОтправки (Структура)	 - класс для отправки
//
&НаКлиенте
Функция НовыйРезультатОтправки(ПараметрыКонструктора) Экспорт
	
	//Число потоков в отправке - сколько можно впихнуть в компонент, отвечающий за отправку за раз
	//Размер пачки - сколько пакетов пихаем за итерацию.
	ВерсияФорматаКласса = 2;
	Если ПараметрыКонструктора.Свойство("ВерсияОтправки") Тогда
		ВерсияФорматаКласса = ПараметрыКонструктора.ВерсияОтправки;
	КонецЕсли;
		
	РезультатОтправки = РезультатОтправки_Пустой(ВерсияФорматаКласса);
	Если ВерсияФорматаКласса = 1 Тогда
		ПараметрыКонструктора.Свойство("ОбработчикРезультата", РезультатОтправки.ОбработчикРезультата);

		Возврат РезультатОтправки;
	КонецЕсли;
	
	//Подключить обработку прерывания
	ОбработкаЗавершения		= НовыйСбисОписаниеОповещения("РезультатОтправки_МассоваяОтправка_Завершение", МодульОбъектаКлиент(), РезультатОтправки);
	ФормаИндикатор			= ПолучитьФормуОбработки("ФормаИндикатора", Новый Структура("Новая", Истина));
	ФормаИндикатор.ОписаниеОповещенияОЗакрытии = ОбработкаЗавершения;
	ПараметрыИндикатора		= Новый Структура("Прерывать, БлокироватьИнтерфейс", Истина, Истина);

	ПараметрыОтправки = Новый Структура("КоличествоПотоков, РазмерПачки, МодульПодготовки, Владелец, ИмяРазделаОтправки, ОжиданиеОтвета", 10, 1);
	ЗаполнитьЗначенияСвойств(ПараметрыОтправки, ПараметрыКонструктора);
    //Значения по-умолчанию
	Если Не ПараметрыКонструктора.Свойство("Владелец") Тогда
		ПараметрыОтправки.Владелец = ГлавноеОкно;
	КонецЕсли;
	Если 	Не	ПараметрыКонструктора.Свойство("МодульПодготовки")
		И		ГлавноеОкно.Кэш.Текущий.Свойство("Форма") Тогда
		ПараметрыОтправки.МодульПодготовки = ГлавноеОкно.Кэш.Текущий.Форма;
	КонецЕсли;
	Если Не ПараметрыКонструктора.Свойство("ИмяРазделаОтправки") Тогда
		ПараметрыОтправки.ИмяРазделаОтправки = ГлавноеОкно.Кэш.Текущий.ТипДок;
	КонецЕсли;
	Если Не ПараметрыКонструктора.Свойство("КоличествоПотоков") Тогда
		ПараметрыОтправки.КоличествоПотоков = ПолучитьЗначениеПараметраСбис("Потоки_МаксимальноеКоличество");
	КонецЕсли;
	Если Не ПараметрыКонструктора.Свойство("ОжиданиеОтвета") Тогда
		ПараметрыОтправки.ОжиданиеОтвета = ПолучитьЗначениеПараметраСбис("ВремяОжиданияОтвета_Отправка");
		Если ПараметрыОтправки.ОжиданиеОтвета = Неопределено Тогда
			ПараметрыОтправки.ОжиданиеОтвета = ПолучитьЗначениеПараметраСбис("ВремяОжиданияОтвета") * 2;
		КонецЕсли;
	КонецЕсли;
	Если Не ПараметрыКонструктора.Свойство("РазмерПачки") Тогда
		ПараметрыОтправки.РазмерПачки = ПолучитьЗначениеПараметраСбис("Отправка_РазмерПачки");
	КонецЕсли;	
	
	ПараметрыОтправки.Вставить("Потоки",				Новый Соответствие);
	ПараметрыОтправки.Вставить("СтатусПоПачкам",		ПараметрыОтправки.РазмерПачки > 3);
	ПараметрыОтправки.Вставить("Индикатор",				ФормаИндикатор);
	ПараметрыОтправки.Вставить("ПараметрыИндикатора",	ПараметрыИндикатора);
	ПараметрыОтправки.Вставить("ОбработчикЗавершить",	ОбработкаЗавершения);
	ПараметрыОтправки.Вставить("ЕстьДоступКБЛ",			ПолучитьЗначениеПараметраСбис("Авторизован"));
	
	СчётчикиОтправки = Новый Структура("ВсегоСтрок", ПараметрыКонструктора.ДанныеКОтправке.СписокПакетов.Количество());
	СчётчикиОтправки.Вставить("СформированоПакетов",	0);//От одного документа 1С может нагенерированно несколько пакетов.
	СчётчикиОтправки.Вставить("ОтправленоПачек",		0);//Сколько было обработано пачек
	СчётчикиОтправки.Вставить("ИндексТекущегоПакета",	0);//Индекс обсчитываемых пакетов из СписокПакетов.
	СчётчикиОтправки.Вставить("ОшибокПодготовки",		0);//Число ошибок на стадии до отправки
	СчётчикиОтправки.Вставить("ОшибокОтправки",			0);//Число ошибок в моменте завершения подготовки и попытки отправить
	СчётчикиОтправки.Вставить("ПовторныхОтправок",		0);//Если теряли авторизацию, то сколько пакетов повторно было отправлено после переавторизации
	СчётчикиОтправки.Вставить("ПервичныхОтправок",		0);//Отправляли в поток после подготовки.
	
	
	ПодпискиПоУмолчанию = Новый Структура;
	ПодпискиПоУмолчанию.Вставить("BeforeCall",	Новый Структура("Функция, Модуль",	"РезультатОтправки_Асинх_ПередОтправкой",	МодульОбъектаКлиент()));
	ПодпискиПоУмолчанию.Вставить("AfterCall",	Новый Структура("Функция, Модуль",	"РезультатОтправки_Асинх_ПослеОтправки",	МодульОбъектаКлиент()));
	ПодпискиПоУмолчанию.Вставить("Error",		Новый Структура("Функция, Модуль",	"РезультатОтправки_Асинх_Ошибка",			МодульОбъектаКлиент()));
	ПодпискиПоУмолчанию.Вставить("Message",		Новый Структура("Функция, Модуль",	"РезультатОтправки_Асинх_Ответ",			МодульОбъектаКлиент()));
	
	//
	//
	//
	//ОтложенноеЗавершение	= НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения, Аргумент", ОбработкаЗавершения, "Прервано"));
	
	РезультатОтправки.ВремяНачала			= ПолучитьДатуВМиллисекундах();
	РезультатОтправки.ОбработчикРезультата	= ПараметрыКонструктора.ОбработчикРезультата;
	РезультатОтправки.ДанныеКОтправке		= ПараметрыКонструктора.ДанныеКОтправке;//Структура - СписокПакетов, МодульПодготовки, СчетчикПакетов
	Если Не РезультатОтправки.ДанныеКОтправке.Свойство("Сертификаты") Тогда
		РезультатОтправки.ДанныеКОтправке.Вставить("Сертификаты", Новый Структура("ИННАктивированы, ИННАктивировать, ИННОшибки, Список", Новый СписокЗначений, Новый СписокЗначений, Новый Соответствие));
	КонецЕсли;
	
	РезультатОтправки.Вставить("ПодпискиДляКоманд", 	ПодпискиПоУмолчанию);
	РезультатОтправки.Вставить("Счетчики",				СчётчикиОтправки);
	РезультатОтправки.Вставить("ПараметрыОтправки",		ПараметрыОтправки);
	РезультатОтправки.Вставить("Очередь",				Новый Структура("Подготовлены, Сформированы", Новый Соответствие, Новый Соответствие));
	
	Возврат РезультатОтправки;

КонецФункции

// Функция - Результат отправки версия
//
// Параметры:
//  РезультатОтправки	 - Структура - Результат отправки документа или пачки документов
// 
// Возвращаемое значение:
// ВерсияОтправки  - Решено было, что 1 - старая отправка, 2 - новая отправка
//
&НаКлиенте
Функция РезультатОтправки_Версия(РезультатОтправки) Экспорт

	Если РезультатОтправки.Свойство("ВерсияЭкземпляра") И РезультатОтправки.ВерсияЭкземпляра = 2 Тогда
		Возврат 2;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция РезультатОтправки_Пустой(ВерсияЭкземпляра = 2) Экспорт
	
	//Тут нужен рефактор по структуре этой помойки
	РезультатОтправки = Новый Структура(
	"_класс, ОбработчикРезультата, 
	|Отправлено, НеОтправлено, НеСформировано,Ошибок, КоличествоПереотправок, ВсегоПакетов, ОшибкиДоОтправки, ПорНомер, 
	|ОтправленоСообщений, ПолученоОтветов, ВремяНачала, ВремяФормирования, ВремяОтправки, ВремяЗаписиСтатусов, ВремяПолученияДанных, ВремяОжиданияОтвета", 
	"РезультатОтправки", ,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	РезультатОтправки.Вставить("ТипыОшибок", 			Новый СписокЗначений);
	РезультатОтправки.Вставить("ДанныеПоСтатусам",		Новый Массив);
	РезультатОтправки.Вставить("ДетализацияОшибок",		Новый Соответствие);
	РезультатОтправки.Вставить("ДетализацияОтправки",	Новый Соответствие);
	РезультатОтправки.Вставить("НаЗаписьСтатусов",		Новый Структура("Ошибки, Ответы", Новый Соответствие, Новый Соответствие));
	РезультатОтправки.Вставить("ВерсияЭкземпляра",		ВерсияЭкземпляра);
	РезультатОтправки.Вставить("ПрикладнаяСтатистика",	Новый Соответствие); // ВААл. Для накопления параметров прикладной статистистики
	Если ВерсияЭкземпляра = 2 Тогда
		РезультатОтправки.Вставить("ДанныеКОтправке",	Новый Соответствие);
	Иначе
		РезультатОтправки.Вставить("Новый",						Истина);//Если стоит признак, то считаем отправку пустой. Если признака нет, либо ложь, то требуется пересоздать
		РезультатОтправки.Вставить("ТипыОшибок",				Новый СписокЗначений);
		РезультатОтправки.Вставить("КоличествоСвободныхПотоков",ГлавноеОкно.Кэш.КоличествоПотоковОтправки);
		РезультатОтправки.Вставить("ВремяНачала",				ПолучитьДатуВМиллисекундах());
		РезультатОтправки.Вставить("СформированныеПакеты",		Новый Соответствие);
	КонецЕсли;
		
	Возврат РезультатОтправки;
	
	
КонецФункции

&НаКлиенте
Функция РезультатОтправки_Скопировать(РезультатОтправки, ДляСервера=Ложь) Экспорт
	
	РезультатНовый = РезультатОтправки_Пустой();
	ЗаполнитьЗначенияСвойств(РезультатНовый, РезультатОтправки);

	Если ДляСервера Тогда
		РезультатНовый.Удалить("ДанныеКОтправке");
		РезультатНовый.Удалить("ОбработчикРезультата");
		РезультатНовый.Удалить("ПараметрыОтправки");
		РезультатНовый.Удалить("ОтложенноеЗавершение");
		РезультатНовый.Удалить("ПодпискиДляКоманд");
	КонецЕсли;
	Возврат РезультатНовый;

КонецФункции

&НаКлиенте
Функция РезультатОтправки_Выгрузить(РезультатОтправки, ВерсияФорматаОтвета=1) Экспорт
	
	Если ВерсияФорматаОтвета = 1 Тогда
		РезультатНовый = РезультатОтправки_Пустой();
		ЗаполнитьЗначенияСвойств(РезультатНовый, РезультатОтправки);
		РезультатНовый.Вставить("Ошибок", РезультатОтправки.Счетчики.ОшибокПодготовки + РезультатОтправки.Счетчики.ОшибокОтправки - РезультатОтправки.Счетчики.ПовторныхОтправок);
		РезультатНовый.ОтправленоСообщений	= РезультатОтправки.Счетчики.ПервичныхОтправок + РезультатОтправки.Счетчики.ПовторныхОтправок;
		РезультатНовый.НеОтправлено			= РезультатОтправки.Ошибок;
		РезультатНовый.ОшибкиДоОтправки		= РезультатОтправки.Счетчики.ОшибокПодготовки;
		РезультатНовый.НеСформировано   	= РезультатОтправки.Счетчики.ОшибокПодготовки;
		РезультатНовый.ВсегоПакетов			= РезультатОтправки.Счетчики.СформированоПакетов;

		РезультатНовый.Удалить("ДанныеКОтправке");
		РезультатНовый.Удалить("ОбработчикРезультата");
		РезультатНовый.Удалить("ПараметрыОтправки");
		РезультатНовый.Удалить("ПодпискиДляКоманд");
		Если РезультатОтправки.Свойство("ПрерватьОтправку") Тогда
			РезультатНовый.Вставить("ПрерватьОтправку", РезультатОтправки.ПрерватьОтправку);
		КонецЕсли;
	Иначе
		РезультатНовый = РезультатОтправки;
	КонецЕсли;
	Возврат РезультатНовый;

КонецФункции

// Процедура - процедура запускает массовую отправку документов
//
// Параметры:
//  РезультатОтправки	 - класс РезльтатОтправки(Структура)
//  ДопПараметры		 - Структура, Необязательный	 - для расширения
//
&НаКлиенте
Процедура РезультатОтправки_МассоваяОтправка(РезультатОтправки, ДопПараметры=Неопределено) Экспорт
	
	ДанныеКОтправке = РезультатОтправки.ДанныеКОтправке;

	Попытка
		РезультатОтправки_ОбработкаПрерывания(РезультатОтправки);
	Исключение
		ОшибкаЗавершения = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_МассоваяОтправка_Завершение");
		Если ОшибкаЗавершения.code = 790 Тогда
			//Тут просто прервать отправку, форма индикатора должна вызвать завершение.
			Возврат;
		КонецЕсли;
	КонецПопытки;

	Если		Не	ОшибкаЗавершения = Неопределено Тогда
		ОтложенноВыполнить		= НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения, Аргумент", РезультатОтправки.ПараметрыОтправки.ОбработчикЗавершить, ОшибкаЗавершения));
	ИначеЕсли		РезультатОтправки.Счетчики.ИндексТекущегоПакета < ДанныеКОтправке.СписокПакетов.Количество() Тогда //Отправляемые пакеты
		//Делаем отложенно отправку пакета для пропуска и возможности нажать на прерывание
		ВыбранаСтрока = ДанныеКОтправке.СписокПакетов[РезультатОтправки.Счетчики.ИндексТекущегоПакета];
		ОбработкаОтправкиПакета	= НовыйСбисОписаниеОповещения("РезультатОтправки_ВыполнитьОтправкуПакета", МодульОбъектаКлиент(), РезультатОтправки);
		ОтложенноВыполнить		= НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения, ИдентификаторДействия, Аргумент", ОбработкаОтправкиПакета, Новый УникальныйИдентификатор, ВыбранаСтрока));
	Иначе
		//Всё отправлено, перейти к получению ответов.
		ОтложенноВыполнить		= НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения, Аргумент", РезультатОтправки.ПараметрыОтправки.ОбработчикЗавершить, "ОжиданиеОтветов"));
	КонецЕсли;
	РезультатОтправки.Вставить("ПоследнееОтложенноеДействие", ОтложенноВыполнить);
	
	ПодключитьОтложенноеДействие(ОтложенноВыполнить);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_ВыполнитьОтправкуПакета(СтрокаПакета, РезультатОтправки) Экспорт
	Перем МассивПодготовленныхПакетов;
	
	ДанныеКОтправке		= РезультатОтправки.ДанныеКОтправке;
	ПараметрыКОтправке	= РезультатОтправки.ПараметрыОтправки;
	ВсегоСтрок			= ДанныеКОтправке.СписокПакетов.Количество();
	
	СписокФорм = Новый Массив;
	СписокФорм.Добавить("Документ_" + ПараметрыКОтправке.ИмяРазделаОтправки);
	СписокФорм.Добавить("Документ_Шаблон");
	МодульПослеФормирования = НайтиФункциюСеансаОбработки("СбисПослеФормированияПакетаДокументов", СписокФорм);
	
	//ГлавноеОкно.СбисНайтиФормуФункции("СбисПослеФормированияПакетаДокументов", "Документ_" + ПараметрыКОтправке.ИмяРазделаОтправки, "Документ_Шаблон");
	
	Попытка
		ВыбранаСтрока = ДанныеКОтправке.СписокПакетов[РезультатОтправки.Счетчики.ИндексТекущегоПакета];
		Если ТипЗнч(ДанныеКОтправке.СписокПакетов) = Тип("СписокЗначений") Тогда
			ВыбранаСтрока = ВыбранаСтрока.Значение;
		КонецЕсли;
		РезультатОтправки.Счетчики.ИндексТекущегоПакета	= РезультатОтправки.Счетчики.ИндексТекущегоПакета + 1;
	
	    //Если нет подготовленных к отправке пакетов, то необходимо их сделать на основании имеющихся документов 1С
		Если Не ВыбранаСтрока.Свойство("МассивПодготовленныхПакетов", МассивПодготовленныхПакетов) Тогда
			СтатусИндекс = РезультатОтправки.Счетчики.ИндексТекущегоПакета*100/РезультатОтправки.Счетчики.ВсегоСтрок;
			РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Формирование электронных документов", СтатусИндекс, "(прервать -  Ctrl+Break)");
			
			ДатаНачалаФормированияПакета		= ПолучитьДатуВМиллисекундах();
			МассивПодготовленныхПакетов			= ПараметрыКОтправке.МодульПодготовки.ПодготовитьСтруктуруДокумента(ВыбранаСтрока, ГлавноеОкно.Кэш);
			ДатаОкончанияФормированияПакета		= ПолучитьДатуВМиллисекундах();
			РезультатОтправки.ВремяФормирования = РезультатОтправки.ВремяФормирования + (ДатаОкончанияФормированияПакета - ДатаНачалаФормированияПакета) / 1000;
		КонецЕсли;
		
		Для Каждого ПодготовленныйПакет Из МассивПодготовленныхПакетов Цикл
			ПолныйСоставПакета		= ПодготовленныйПакет;
			ОтправкаДокументаСБИС	= НовыйОтправкаДокументаСБИС(ПолныйСоставПакета);
			
			ОшибкаЧтенияПакета = Ложь;
			
			Если	ПараметрыКОтправке.ЕстьДоступКБЛ
				И	ВыбранаСтрока.Свойство("ИдПакета")
				И	ВыбранаСтрока.Свойство("Статус")
				И	НЕ ВыбранаСтрока.ИдПакета = "" 
				И	ВыбранаСтрока.Статус = 0 Тогда
				
				РезультатЧтенияДокумента = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ПрочитатьДокумент(ГлавноеОкно.Кэш, ВыбранаСтрока.ИдПакета,,ОшибкаЧтенияПакета);
				
				Если	ТипЗнч(РезультатЧтенияДокумента) = Тип("Структура") 
					И	РезультатЧтенияДокумента.Свойство("Этап")
					И	ЗначениеЗаполнено(РезультатЧтенияДокумента.Этап) Тогда
					ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "ТекущийЭтапЭДО", РезультатЧтенияДокумента.Этап[0]);
				КонецЕсли;    
				
			КонецЕсли; 
			
			Если ВыбранаСтрока.Свойство("ИдПакета") Тогда
				ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "ИдПакетаЭДО", ВыбранаСтрока.ИдПакета); 
			КонецЕсли;
			
			Если ВыбранаСтрока.Свойство("Статус") Тогда
				ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "ЗначениеСтатусаЭДО", ВыбранаСтрока.Статус); 
			КонецЕсли;
			
			Если ПолныйСоставПакета.Свойство("Ошибка") Тогда
				ПараметрыОшибки = Новый Структура("Подготовка, Исключение", Истина, ПолныйСоставПакета.Ошибка);
				РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ОтправкаДокументаСБИС, ПараметрыОшибки);
				Продолжить;
			ИначеЕсли Не ПолныйСоставПакета.Свойство("Вложение") Тогда
				//Нечего отправлять
				//Возможно, надо добавить генерацию исключение, т.к. о пустом пакете так же надо проинформировать пользователя.
				Продолжить;
			ИначеЕсли Не МодульПослеФормирования = Ложь Тогда
				//Точка входа "СбисПослеФормированияПакетаДокументов";
				ПолныйСоставПакета = МодульПослеФормирования.СбисПослеФормированияПакетаДокументов(ПолныйСоставПакета, ГлавноеОкно.Кэш);
			КонецЕсли;
			РезультатОтправки.Счетчики.СформированоПакетов = РезультатОтправки.Счетчики.СформированоПакетов + 1;
			
			//Проверка сертификатов по ИНН. Если надо что-то активировать, то вызвать форму ввода пин-кодов.
			ИННОтправителя = ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ИННОтправителя");
			Если ДанныеКОтправке.Сертификаты.ИННАктивированы.НайтиПоЗначению(ИННОтправителя) = Неопределено Тогда
				
				Если Не ДанныеКОтправке.Сертификаты.ИННОшибки.Получить(ИННОтправителя) = Неопределено Тогда
					//Добавим в очередь, чтобы на следующей итерации отправки накомпленных пакет уронить с ошибкой
				ИначеЕсли	ДанныеКОтправке.Сертификаты.ИННАктивированы.НайтиПоЗначению(ИННОтправителя)		= Неопределено
					И		ДанныеКОтправке.Сертификаты.ИННАктивировать.НайтиПоЗначению(ИННОтправителя)	= Неопределено Тогда
					ДанныеКОтправке.Сертификаты.ИННАктивировать.Добавить(ИННОтправителя);
				КонецЕсли;
				
				ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "СтатусПакета", "ОжидаетАктивации");
				РезультатОтправки_ПоставитьВОчередьКОтправке(РезультатОтправки, ОтправкаДокументаСБИС);
				
			Иначе
				
				РезультатОтправки_ПоставитьВОчередьКОтправке(РезультатОтправки, ОтправкаДокументаСБИС);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если	ДанныеКОтправке.Сертификаты.ИННАктивировать.Количество()
			И	РезультатОтправки.Очередь.Подготовлены.Количество() >= ПараметрыКОтправке.РазмерПачки Тогда
			
			//Нужно активировать сертификаты, если очередь достигла лимита. Прерываем отправку, запускаем активацию сертификатов
			РезультатОтправки_СпрятатьСтатус(РезультатОтправки);
			РезультатОтправки_МассоваяОтправка_АктивацияСертификатов(РезультатОтправки);
			Возврат;
			
		КонецЕсли;
	
		РезультатОтправки_ОтправитьНакопленные(РезультатОтправки);
		РезультатОтправки_ОбработатьОтветы_Асинхронно(РезультатОтправки);
	Исключение
		//Если прервано с ошибкой, то завершаем отправку и переходим к обработке завершения
		РезультатОтправки.Вставить("ПрерватьОтправку", НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_МассоваяОтправка_Завершение"));
	КонецПопытки;
	
	//Продолжить итерацию
	РезультатОтправки_МассоваяОтправка(РезультатОтправки);

КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_МассоваяОтправка_Завершение(АргументЗавершения="Завершено", РезультатОтправки) Экспорт 
	
	Отказ = Ложь;
	Если		АргументЗавершения = Неопределено Тогда
		
		//Ложное срабатывание. Возможно, закрыли форму индикатора.
		Возврат;
		
	ИначеЕсли	АргументЗавершения = "Завершено" Тогда
		
		//Всё ок, дошли до конца
		
	ИначеЕсли	АргументЗавершения = "Прервать" Тогда
		
		//Поступила команда прервать. Надо чтобы все прошлые обработчики закончили работу и уже потом позвать завершение 
		ОтложенноВыполнить = НовыйОтложенноеДействие(
			Новый Структура("ОписаниеОповещения, Аргумент, ИдентификаторДействия", 
			РезультатОтправки.ПараметрыОтправки.ОбработчикЗавершить, "Прервано", Новый УникальныйИдентификатор));
		ПодключитьОтложенноеДействие(ОтложенноВыполнить);
		Возврат		
	
	ИначеЕсли	АргументЗавершения = "Прервано" Тогда
		
		//Обработка прервалась
		Если РезультатОтправки.Свойство("ПоследнееОтложенноеДействие") Тогда
			ОтключитьОтложенноеДействие(РезультатОтправки.ПоследнееОтложенноеДействие);
			РезультатОтправки.Удалить("ПоследнееОтложенноеДействие");
		КонецЕсли;
		АргументЗавершения = НовыйСбисИсключение(790, "МодульОбъектаКлиент.РезультатОтправки_МассоваяОтправка_Завершение");
		Отказ = Истина;
		
	ИначеЕсли	АргументЗавершения = "ОжиданиеОтветов" Тогда
		
		ДанныеКОтправке = РезультатОтправки.ДанныеКОтправке;
		РезультатОтправки_СпрятатьСтатус(РезультатОтправки);
		
		Если ДанныеКОтправке.Сертификаты.ИННАктивировать.Количество() Тогда
			
			//Всё ещё нужно активировать сертификаты (не набрали пачку), запускаем активацию сертификатов
			РезультатОтправки_МассоваяОтправка_АктивацияСертификатов(РезультатОтправки);
			Возврат;
			
		КонецЕсли;
			
		РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Ожидание ответов", 0);
		ПараметрыЗавершить = Новый Структура("ОжидатьСвободныеПотоки, ЧислоПачекОтправить, ОтправлятьЦелуюПачку", Ложь, 1, Ложь);
		
		ОтложеннаяИтерацияответов = НовыйСбисОписаниеОповещения("РезультатОтправки_МассоваяОтправка_ЧтениеОтветов", МодульОбъектаКлиент(), РезультатОтправки);
		РезультатОтправки.ПараметрыОтправки.Вставить("ОбработчикОжиданияОтветов", ОтложеннаяИтерацияответов);
		
		ОтложенноВыполнить = НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения, Аргумент", ОтложеннаяИтерацияответов, ПараметрыЗавершить));
		ПодключитьОтложенноеДействие(ОтложенноВыполнить);
		Возврат;
		
	Иначе
		
		//Отправка прервана из-за ошибки
		СообщитьСбисИсключение(АргументЗавершения);
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		//Запишем что удалось получить.
		РезультатОтправки_СпрятатьСтатус(РезультатОтправки);
		РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Завершение отправки");
		АсинхронноеСбисСобытие = НовыйАсинхронноеСбисСобытие(, АргументЗавершения, "Error");
		
		Попытка

			ГлобальныйКэш_ЧтениеОтветовИВызовСобытий();
			РезультатОтправки_ОсвободитьПотоки(РезультатОтправки, АсинхронноеСбисСобытие);
			РезультатОтправки_ЗаписатьНакопленныеСтатусы(РезультатОтправки);
			
		Исключение
			
			СообщитьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_МассоваяОтправка_Завершение");
			
		КонецПопытки;
		
	КонецЕсли;
		
	РезультатОтправкиОтдать = РезультатОтправки_Выгрузить(РезультатОтправки);
	ГлавноеОкно.Кэш.Вставить("РезультатОтправки", РезультатОтправкиОтдать);
	
    РезультатОтправки_СпрятатьСтатус(РезультатОтправки, Истина);
	РезультатОтправки_ОтправитьЗаписиПрикладнойСтатистики(РезультатОтправки);
	
	МодульПользовательскойТочкиПослеОтправки = НайтиФункциюСеансаОбработки("сбисПослеОтправкиПакетов", "РаботаСДокументами1С");
	Если МодульПользовательскойТочкиПослеОтправки <> Ложь Тогда
		МодульПользовательскойТочкиПослеОтправки.сбисПослеОтправкиПакетов(ГлавноеОкно.Кэш);	
	КонецЕсли;

	ВыполнитьСбисОписаниеОповещения(РезультатОтправкиОтдать, РезультатОтправки.ОбработчикРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_МассоваяОтправка_ЧтениеОтветов(ПараметрыЗавершить, РезультатОтправки) Экспорт
	
	Попытка
		
		РезультатОтправки_ОбработкаПрерывания(РезультатОтправки);
		РезультатОтправки_ОбработатьОтветы_Асинхронно(РезультатОтправки);
		РезультатОтправки_ОтправитьНакопленные(РезультатОтправки, ПараметрыЗавершить);
		РезультатОтправки_ЗаписатьНакопленныеСтатусы(РезультатОтправки);

		ОбщееЧислоОжидания	= РезультатОтправки.Счетчики.СформированоПакетов + РезультатОтправки.Счетчики.ПовторныхОтправок;
		Если ОбщееЧислоОжидания = 0 Тогда
			ОбщееЧислоОжидания = 1;	
		КонецЕсли;
		РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Ожидание ответов", Окр(РезультатОтправки.ПолученоОтветов * 100 / ОбщееЧислоОжидания), "(прервать -  Ctrl+Break)");
		//Пока всё не прогрузилось, выполняем отправку остатков.
		Если	РезультатОтправки.Очередь.Подготовлены.Количество()
			Или	РезультатОтправки.ПараметрыОтправки.Потоки.Количество()
			Или	РезультатОтправки.НаЗаписьСтатусов.Ответы.Количество()
			Или	РезультатОтправки.НаЗаписьСтатусов.Ошибки.Количество() Тогда
			ОтложенноВыполнить = НовыйОтложенноеДействие(
				Новый Структура("ОписаниеОповещения, ИдентификаторДействия, Аргумент", 
				РезультатОтправки.ПараметрыОтправки.ОбработчикОжиданияОтветов, Новый УникальныйИдентификатор, ПараметрыЗавершить));
		Иначе
			ОтложенноВыполнить = НовыйОтложенноеДействие(
				Новый Структура("ОписаниеОповещения, ИдентификаторДействия, Аргумент", 
				РезультатОтправки.ПараметрыОтправки.ОбработчикЗавершить, Новый УникальныйИдентификатор, "Завершено"));
		КонецЕсли;
			
	Исключение
		//Упала неизвестная ошибка, завершить обработку.
		ОшибкаЗавершения	= НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_МассоваяОтправка_Завершение");
		Если ОшибкаЗавершения.code = 790 Тогда
			//Тут просто прервать отправку, форма индикатора должна вызвать завершение.
			Возврат;
		КонецЕсли;
		ОтложенноВыполнить	= НовыйОтложенноеДействие(
							Новый Структура("ОписаниеОповещения, Аргумент, ИдентификаторДействия", 
							РезультатОтправки.ПараметрыОтправки.ОбработчикЗавершить, ОшибкаЗавершения, Новый УникальныйИдентификатор));
	КонецПопытки;
	
	ПодключитьОтложенноеДействие(ОтложенноВыполнить);
	
КонецПроцедуры

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Отправка_РезультатОтправки_private

// Обработчик прерывания отправки через Ctrl+Break либо при получении пула ошибок, либо фатальной ошибки
//
// Параметры:
//  РезультатОтправки	 - РезультатОтправки (Структура)	 - класс для отправки
//
&НаКлиенте
Процедура РезультатОтправки_ОбработкаПрерывания(РезультатОтправки)
	
	Если		РезультатОтправки.Свойство("ПрерватьОтправку") Тогда
		ВызватьСбисИсключение(РезультатОтправки.ПрерватьОтправку, "МодульОбъектаКлиент.РезультатОтправки_ОбработкаПрерывания",,"Отправка была остановлена: " + РезультатОтправки.ПрерватьОтправку.message);
	ИначеЕсли	РезультатОтправки.ПараметрыОтправки.Индикатор.Прервано Тогда
		ВызватьСбисИсключение(790, "МодульОбъектаКлиент.РезультатОтправки_ОбработкаПрерывания");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_ПоказатьСтатус(РезультатОтправки, ТекстСостояния, СбисИндикатор = 0, СбисПояснение = "", ДопПараметры = Неопределено)
	
	ПараметрыДлительнойОперации = ДопПараметры;
	Если ПараметрыДлительнойОперации = Неопределено Тогда
		 ПараметрыДлительнойОперации = РезультатОтправки.ПараметрыОтправки.ПараметрыИндикатора;
	КонецЕсли;
	РезультатОтправки.ПараметрыОтправки.Индикатор.ПоказатьСостояниеДлительнойОперации(ТекстСостояния, СбисИндикатор, СбисПояснение, ПараметрыДлительнойОперации);

КонецПроцедуры

// Процедура - Прячет статус, сохраняя обработку прерывания
//
// Параметры:
//  РезультатОтправки	 - 	 - 
//
&НаКлиенте
Процедура РезультатОтправки_СпрятатьСтатус(РезультатОтправки, СбисЗавершить=Ложь)
			
	РезультатОтправки.ПараметрыОтправки.Индикатор.СпрятатьСтатусДлительнойОперации(СбисЗавершить);

КонецПроцедуры

// Отправляет сформированную пачку документов
//
// Параметры:
//  РезультатОтправки		 - РезультатОтправки (Структура)	 - класс для отправки
//  ПачкаДокументовКОтправке - Массив	 - массив из стурктур с готовым к отправке документом и пакетом
//  ОжидатьСвободныеПотоки	 - Булево	 - если Истина и потоков недостаточно для отправки всей пачки, то отправка не будет выполнена
// 
// Возвращаемое значение:
//  Булево - Отправили пачку, или нет
//
&НаКлиенте
Функция РезультатОтправки_ОтправитьПачкуДокументов(РезультатОтправки, ПачкаДокументовКОтправке, ОжидатьСвободныеПотоки)
	Перем ОшибкаОтправкиПачки;
	
	ПотоковСвободно = РезультатОтправки.ПараметрыОтправки.КоличествоПотоков - РезультатОтправки.ПараметрыОтправки.Потоки.Количество();
	Если 	ОжидатьСвободныеПотоки
		И	ПотоковСвободно < ПачкаДокументовКОтправке.Количество() Тогда
		//Набрана пачка документов, но её нельзя отправить, т.к. нет достаточного количества потоков
		Возврат Ложь;
	КонецЕсли;
		
	МодульОтправкиПачки = ГлавноеОкно.СбисНайтиФормуФункции("Отправка_ПачкаДокументов", ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя"));
	РезультатОтправки_СпрятатьСтатус(РезультатОтправки);
	Если МодульОтправкиПачки = Ложь Тогда
		СчетчикПачки = 0;
		ПараметрыИндикатораПачки = Новый Структура("Прерывать, БлокироватьИнтерфейс", Ложь, Истина);

		Для Каждого ДанныеОтправки Из ПачкаДокументовКОтправке Цикл
			СчетчикПачки = СчетчикПачки + 1;
			СтатусДоОтправки = ОтправкаДокументаСБИС_Получить(ДанныеОтправки, "СтатусПакета");
			Попытка
				РезультатОтправки_ОбработкаПрерывания(РезультатОтправки);
			Исключение
				//Прервано с ошибкой.
				Возврат Ложь;
			КонецПопытки;			
			Если РезультатОтправки.ПараметрыОтправки.СтатусПоПачкам Тогда
				
				РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Отправка пачки документов", Окр(СчетчикПачки * 100 / ПачкаДокументовКОтправке.Количество()),,ПараметрыИндикатораПачки);
				
			КонецЕсли;
			Если ОшибкаОтправкиПачки = Неопределено Тогда
				//Была фатальная ошибка отправки, роняем всё с ней.
				Попытка
					РезультатОтправки_ДокументВСвободныйПоток(РезультатОтправки, ДанныеОтправки);
					Если СтатусДоОтправки = ОтправкаДокументаСБИС_Получить(ДанныеОтправки, "СтатусПакета") Тогда
						//Статус должен измениться в процессе, сразу после отправки.
						ВызватьСбисИсключение(100, "МодульОбъектаКлиент.РезультатОтправки_ДокументВСвободныйПоток",,, "Неизвестная ошибка события в процессе отправки");
					КонецЕсли;
				Исключение
					ОшибкаОтправкиПачки			= НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_ОтправитьПачкуДокументов");
					ПараметрыОбработатьОшибку	= Новый Структура("Фатальная, Исключение", Истина, ОшибкаОтправкиПачки);
					РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ДанныеОтправки, ПараметрыОбработатьОшибку);
				КонецПопытки;
			Иначе
				ПараметрыОбработатьОшибку = Новый Структура("Фатальная, ИдентификаторОтправки", Истина, СоставПакета_Идентификатор(ДанныеОтправки.СоставПакета));
				РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ДанныеОтправки, ПараметрыОбработатьОшибку);
			КонецЕсли;
		КонецЦикла;
	Иначе
		РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Отправка пачки документов");

		Попытка
			РезультатОтправки_ОбработкаПрерывания(РезультатОтправки);
		Исключение
			//Прервано с ошибкой.
			Возврат Ложь;
		КонецПопытки;
		
		СбисОтправки = Новый Массив;
		Для Каждого ДокументВПачке Из ПачкаДокументовКОтправке Цикл
			
			КомандаДляПотока = РезультатОтправки_НовыйАсинхроннаяСбисКоманда(РезультатОтправки, ДокументВПачке);
			АсинхроннаяСбисКоманда_ВызватьСобытие(КомандаДляПотока, НовыйАсинхронноеСбисСобытие(,,"AfterCall"));
			СбисОтправки.Добавить(КомандаДляПотока);
			
		КонецЦикла;
		Попытка
			
			ДатаНач = ТекущаяДата();

			ПараметрыОбработки		= Новый Структура("Отправки, РезультатОтправки", СбисОтправки, РезультатОтправки);
			МодульОтправкиПачки.Отправка_ПачкаДокументов(ПараметрыОбработки, ГлавноеОкно.Кэш);
			
			ДатаКнц = ТекущаяДата();
			
			РезультатОтправки.ВремяОтправки = РезультатОтправки.ВремяОтправки + (ДатаКнц - ДатаНач);
			
			РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Обработка ответов");
			МодульОтправкиПачки.Отправка_ОбработкаРезультатаПачкиДокументов(ПараметрыОбработки, ГлавноеОкно.Кэш);
			
		Исключение
			ОшибкаПачки					= НовыйСбисИсключение(ИнформацияОбОшибке(), ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".Отправка_ПачкаДокументов");
			ПараметрыОбработатьОшибку	= Новый Структура("Исключение, Фатальная", ОшибкаПачки, Истина);
			Для Каждого ДанныеОтправки Из ПачкаДокументовКОтправке Цикл
				РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ДанныеОтправки, ПараметрыОбработатьОшибку);
			КонецЦикла;
		КонецПопытки;
	КонецЕсли;
	РезультатОтправки_СпрятатьСтатус(РезультатОтправки);
	
	Возврат Истина
	
КонецФункции
	
// Процедура - поставить пакет в очередь к отправке
//
// Параметры:
//  РезультатОтправки	 - РезультатОтправки (Структура)	 - класс для отправки
//  ДанныеОтправки		 - Струкутра	 - СоставПакета, Документ, СтатусПакета, ИНН
//
&НаКлиенте
Процедура РезультатОтправки_ПоставитьВОчередьКОтправке(РезультатОтправки, ОтправкаДокументаСБИС) Экспорт
	Перем ПодготовленныеСоответствие;
	
	ИдОтправки	= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ИдентификаторОтправки");
	
	Если  ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СтатусПакета") = "Подготовка" Тогда
		Попытка
			//Подготовить пакет к отправке
			ОтправкаДокументаСБИС_Подготовить(ОтправкаДокументаСБИС);
			РезультатОтправки.ПорНомер = РезультатОтправки.ПорНомер + 1;
		Исключение
			СбисИсключение	= НовыйСбисИсключение(ИнформацияОбОшибке(), ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".РезультатОтправки_Асинх_Отправка");
			ПараметрыОшибки	= Новый Структура("Исключение, Подготовка", СбисИсключение, Истина);
			РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ОтправкаДокументаСБИС, ПараметрыОшибки);
			Возврат;
		КонецПопытки;
	КонецЕсли;	
	РезультатОтправки.Очередь.Подготовлены.Вставить(ИдОтправки, ОтправкаДокументаСБИС);
	
КонецПроцедуры

// Процедура - поставить пакет в очередь к отправке
//
// Параметры:
//  РезультатОтправки		- РезультатОтправки (Структура)- класс для отправки
//  ИдентификаторОтправки	- Строка	 					- Ид уже сформированного документа, который переотправляем
//
&НаКлиенте
Процедура РезультатОтправки_ПоставитьВОчередьНаПовторнуюОтправку(РезультатОтправки, ОтправкаДокументаСБИС) Экспорт
	
	РезультатОтправки.Счетчики.ОшибокОтправки	= РезультатОтправки.Счетчики.ОшибокОтправки + 1;		
	ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "СтатусПакета", "Переотправка");
	РезультатОтправки_ПоставитьВОчередьКОтправке(РезультатОтправки, ОтправкаДокументаСБИС);
		
КонецПроцедуры

//Отправляет подготовленные пакеты пока есть свободные потоки
&НаКлиенте
Процедура РезультатОтправки_ОтправитьНакопленные(РезультатОтправки, ДопПараметры=Неопределено)
	Перем ПодготовленныеКОтправкеПакеты;
	
	ПодготовленныеКОтправкеПакеты	= РезультатОтправки.Очередь.Подготовлены;
	ОжидатьСвободныеПотоки			= Истина;
	ОтправлятьЦелуюПачку			= Истина;
	ЧислоПачекОтправить				= 1;
	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("ОжидатьСвободныеПотоки") Тогда
			ОжидатьСвободныеПотоки = ДопПараметры.ОжидатьСвободныеПотоки;
		КонецЕсли;
		Если ДопПараметры.Свойство("ЧислоПачекОтправить") Тогда
			ЧислоПачекОтправить = ДопПараметры.ЧислоПачекОтправить;
		КонецЕсли;
		Если ДопПараметры.Свойство("ОтправлятьЦелуюПачку") Тогда
			ОтправлятьЦелуюПачку = ДопПараметры.ОтправлятьЦелуюПачку;
		КонецЕсли;
	КонецЕсли;
	
	ПачекОтправлено		= 0;
	ПачкаКОтправке		= Новый Массив;//Собираем пачку по числу отправок за раз.
	ПакетыОтправлены	= Новый Массив;
	Для Каждого КлючИЗначениеПодготовлен Из ПодготовленныеКОтправкеПакеты Цикл		
		ОтправкаДокументаСбис = КлючИЗначениеПодготовлен.Значение;
		Если 	 ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСбис, "СтатусПакета") = "ОжидаетАктивации" Тогда
			ИННОтправки = ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСбис, "ИННОтправителя");
			Если РезультатОтправки.ДанныеКОтправке.Сертификаты.ИННАктивированы.НайтиПоЗначению(ИННОтправки) = Неопределено Тогда
				
				ОшибкаПодготовки = РезультатОтправки.ДанныеКОтправке.Сертификаты.ИННОшибки.Получить(ИННОтправки);
				Если ОшибкаПОдготовки = Неопределено Тогда
					//Дожидаемся активации, либо проверки что всё активированно.
					Продолжить;
				КонецЕсли;
				ПараметрыОбработатьОшибку = Новый Структура("Исключение, Подготовка", ОшибкаПодготовки, Истина);
				РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ОтправкаДокументаСбис, ПараметрыОбработатьОшибку);
				Продолжить;
			Иначе
				
				ОтправкаДокументаСБИС_Установить(КлючИЗначениеПодготовлен.Значение, "СтатусПакета", "Подготовка");
				Попытка
					//Подготовить пакет к отправке
					ОтправкаДокументаСБИС_Подготовить(КлючИЗначениеПодготовлен.Значение);
					РезультатОтправки.ПорНомер = РезультатОтправки.ПорНомер + 1;
				Исключение
					СбисИсключение	= НовыйСбисИсключение(ИнформацияОбОшибке(), ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".РезультатОтправки_Асинх_Отправка");
					ПараметрыОшибки	= Новый Структура("Исключение, Подготовка", СбисИсключение, Истина);
					РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ОтправкаДокументаСБИС, ПараметрыОшибки);
				КонецПопытки;
				
			КонецЕсли;
			
		ИначеЕсли Не	(	КлючИЗначениеПодготовлен.Значение.СтатусПакета = "Готов"
						Или	КлючИЗначениеПодготовлен.Значение.СтатусПакета = "Подготовка" 
						Или КлючИЗначениеПодготовлен.Значение.СтатусПакета = "Черновик") Тогда
			Продолжить;
		КонецЕсли;
		
		ПачкаКОтправке.Добавить(КлючИЗначениеПодготовлен.Значение);
		ПакетыОтправлены.Добавить(КлючИЗначениеПодготовлен.Ключ);
		
		Если ПачкаКОтправке.Количество() = РезультатОтправки.ПараметрыОтправки.РазмерПачки Тогда
			
			Если РезультатОтправки_ОтправитьПачкуДокументов(РезультатОтправки, ПачкаКОтправке, ОжидатьСвободныеПотоки) Тогда
				//Пачка ушла
				ПачекОтправлено = ПачекОтправлено + 1;
			КонецЕсли;
			ПачкаКОтправке.Очистить();//Собираем пачку по числу отправок за раз.
			
		КонецЕсли;
		Если ПачекОтправлено = ЧислоПачекОтправить Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если		ПачкаКОтправке.Количество()
		И	Не	ОтправлятьЦелуюПачку
		И	Не  ПачекОтправлено > ЧислоПачекОтправить Тогда
		//На последний проход, если пачка не наберётся, отправить что есть
		РезультатОтправки_ОтправитьПачкуДокументов(РезультатОтправки, ПачкаКОтправке, ОжидатьСвободныеПотоки);
		ПачекОтправлено = ПачекОтправлено + 1;
	КонецЕсли;
	
	ЧислоВОчереди		= РезультатОтправки.Очередь.Подготовлены.Количество() + РезультатОтправки.Очередь.Сформированы.Количество();
	ОчередьПереполнена	= ЧислоВОчереди / 2 > РезультатОтправки.ПараметрыОтправки.РазмерПачки;
	
	Если	ПачекОтправлено = 0
		И	ОчередьПереполнена Тогда
		//Очередь переполнилась, надо отправить хоть что-то.
		//Пробуем отправить по числу свободных потоков
		РазмерНовойПачки = Мин(РезультатОтправки.ПараметрыОтправки.КоличествоПотоков - РезультатОтправки.ПараметрыОтправки.Потоки.Количество(), ПачкаКОтправке.Количество());
		Если РазмерНовойПачки Тогда
			НоваяПачка = Новый Массив;
			Для СчетчикПачки = 0 По РазмерНовойПачки - 1 Цикл
				НоваяПачка.Добавить(ПачкаКОтправке[СчетчикПачки])
			КонецЦикла;
			РезультатОтправки_ОтправитьПачкуДокументов(РезультатОтправки, НоваяПачка, ОжидатьСвободныеПотоки);
		Иначе
			//Потоков нет, отправляем пачку с ожиданием освобождения потоков
			РезультатОтправки_ОтправитьПачкуДокументов(РезультатОтправки, ПачкаКОтправке, Ложь);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ПакетОтправлен Из ПакетыОтправлены Цикл
		//Отправка должна проставить статус отправлен, либо Ошибка, иначе могло выйти так, что в процессе необходимо выполнить дополнительные действия и пакет пока не был отправлен
		ОтправкаДокументаСбис	= ПодготовленныеКОтправкеПакеты.Получить(ПакетОтправлен);
		СтатусПакета			= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСбис, "СтатусПакета");
		Если	СтатусПакета = "Отправлен"
			Или	СтатусПакета = "ОтправленВПоток"//Отправлен, но что-то упало в процессе
			Или	СтатусПакета = "Ошибка"
			Или	СтатусПакета = "Обработан" Тогда
			ПодготовленныеКОтправкеПакеты.Удалить(ПакетОтправлен);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Подготавливаем параметры для прикладной статистики
// по отправке документов для каждого вложения пакета
//
// Параметры:
//  РезультатОтправки	 - Структура	 - Объект класса РезультатОтправки
//  СоставПакета		 - Структура	 - Объект класса СоставПакета
//
&НаКлиенте
Процедура РезультатОтправки_ПодготовитьЗаписиПрикладнойСтатистики(РезультатОтправки, СоставПакета)
	
	// На случай, если состав пакета не соответствует требованиям, чтоб не падала ошибка
	Если Не (ТипЗнч(СоставПакета) = Тип("Структура")
		И СоставПакета.Свойство("Вложение")) Тогда
		Возврат
	КонецЕсли;
	
	// Добавление для записи в прикладную статистику отправленных вложений
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		
		// Если вложение доблавлено вручную без привязки к документу 1С
		Если Не (Вложение.Свойство("Документы1С")
			И ТипЗнч(Вложение.Документы1С) = Тип("СписокЗначений")) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Документ1С Из Вложение.Документы1С Цикл
			
			ТипДокумента = СсылочныйТипСтрокой(Документ1С.Значение);
			Действие = Вложение.Тип + " - " + Сред(ТипДокумента, Найти(ТипДокумента, ".") + 1);
			Количество = РезультатОтправки.ПрикладнаяСтатистика.Получить(Действие);
			
			Если Количество = Неопределено Тогда
				РезультатОтправки.ПрикладнаяСтатистика.Вставить(Действие, 1);
			Иначе 
				РезультатОтправки.ПрикладнаяСтатистика.Вставить(Действие, Количество + 1);
			КонецЕсли; 
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_ОтправитьЗаписиПрикладнойСтатистики(РезультатОтправки)
	
	// Нет узла с прикладной статистикой, почему-то
	Если Не РезультатОтправки.Свойство("ПрикладнаяСтатистика") Тогда
		Возврат;
	КонецЕсли;
	
	Сообщения = Новый Массив;
	
	Для Каждого ЗаписьПрикладнойСтатистики Из РезультатОтправки.ПрикладнаяСтатистика Цикл
		
		СоставСтатистики = Новый Структура;
		СоставСтатистики.Вставить("Контекст",	"Отправка документов");
		СоставСтатистики.Вставить("Действие",	ЗаписьПрикладнойСтатистики.Ключ);
		СоставСтатистики.Вставить("Количество",	ЗаписьПрикладнойСтатистики.Значение);
		Сообщения.Добавить(СоставСтатистики);
		
	КонецЦикла;
	
	СбисСтатистика_СформироватьИЗаписать(Новый Структура("Действие, Сообщения", "ПрикладнаяСтатистика", Сообщения));
	
КонецПроцедуры

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Отправка_РезультатОтправки_private_МассоваяОтправка

&НаКлиенте
Процедура РезультатОтправки_МассоваяОтправка_АктивацияСертификатов(РезультатОтправки, ДопПараметры = Неопределено) Экспорт
	
	РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Проверка сертификатов");
	ОбработчикПродолжить	= НовыйСбисОписаниеОповещения("РезультатОтправки_МассоваяОтправка_АктивацияСертификатов_Продолжить", МодульОбъектаКлиент(), РезультатОтправки);
	СертификатыАктивировать = РезультатОтправки.ДанныеКОтправке.Сертификаты;
	
	СертификатыАктивировать.Список = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ПолучитьСертификатыДляАктивации(ГлавноеОкно.Кэш, СертификатыАктивировать.ИННАктивировать);
	Если СертификатыАктивировать.Список.Количество() Тогда
		СертификатыАктивировать.Вставить("Текущий",				0);
		СертификатыАктивировать.Вставить("ОбработчикАктивации", ОбработчикПродолжить);
		РезультатОтправки_МассоваяОтправка_АктивацияСертификатов_ВводПинКодов(РезультатОтправки);
	Иначе
		ВыполнитьСбисОписаниеОповещения("Не требуется", ОбработчикПродолжить);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_МассоваяОтправка_АктивацияСертификатов_ВводПинКодов(РезультатОтправки) Экспорт
	
	СертификатыАктивировать = РезультатОтправки.ДанныеКОтправке.Сертификаты;
	СертификатТекущий		= СертификатыАктивировать.Список[СертификатыАктивировать.Текущий].Значение;
	
	РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Активация сертификатов", Окр(СертификатыАктивировать.Текущий*100/СертификатыАктивировать.Список.Количество()));
	Если СертификатТекущий.Ключ.СпособАктивации <> "СтатическийКод" Тогда
		ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ПолучитьКодАктивацииСертификата(ГлавноеОкно.Кэш, СертификатТекущий);				
	КонецЕсли;
	СертификатИмя			= "Введите код активации сертификата " + ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.ПолучитьПредставлениеСертификата(СертификатТекущий, "[ФИО].([Должность])., [Название].(ИНН [ИНН])", Истина);
	ОбработчикПродолжить	= НовыйСбисОписаниеОповещения("РезультатОтправки_МассоваяОтправка_АктивацияСертификатов_Продолжить", МодульОбъектаКлиент(), РезультатОтправки);
	ФормаВвода				= ПолучитьФормуОбработки("ФормаВводаПинкода", Новый Структура("Владелец", РезультатОтправки.ДанныеКОтправке.ВладелецОтправки));
	ФормаВвода.ОписаниеОповещенияОЗакрытии = ОбработчикПродолжить;
	ФормаВвода.Показать(Новый Структура("СертификатИмя", СертификатИмя));
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_МассоваяОтправка_АктивацияСертификатов_Продолжить(РезультатАктивации = Неопределено, РезультатОтправки) Экспорт
	
	СертификатыАктивировать = РезультатОтправки.ДанныеКОтправке.Сертификаты;
	Если		РезультатАктивации = "Не требуется" Тогда
		//Не сертификатов для активации
		Для Каждого Элемент Из СертификатыАктивировать.ИННАктивировать Цикл
			СертификатыАктивировать.ИННАктивированы.Добавить(Элемент.Значение);
		КонецЦикла;
	Иначе
		СертификатыАктивировать = РезультатОтправки.ДанныеКОтправке.Сертификаты;
		СертификатТекущий		= СертификатыАктивировать.Список[СертификатыАктивировать.Текущий].Значение;
		Если	РезультатАктивации = Неопределено Тогда
			//Продолжим отправку, пакеты с не активированным ИНН упадут при следующей итерации
			ИННОтмена = СертификатТекущий.ИНН;
			ОшибкаОтмена = НовыйСбисИсключение(755, "МодульОбъектаКлиент.РезультатОтправки_МассоваяОтправка_АктивацияСертификатов_Продолжить",,"Активация отменена пользователем");
			СертификатыАктивировать.ИННОшибки.Вставить(ИННОтмена, ОшибкаОтмена);
			СертификатыАктивировать.Удалить(СертификатыАктивировать.ИННАктивировать.НайтиПоЗначению(ИННОтмена));
		Иначе
			СертификатТекущий		= СертификатыАктивировать.Список[СертификатыАктивировать.Текущий].Значение;
			СертификатТекущий.Вставить("КодАктивации", РезультатАктивации.ПинКод);
			Если СертификатыАктивировать.Текущий = РезультатОтправки.ДанныеКОтправке.Сертификаты.Список.Количество() - 1 Тогда
				
				// если ввели все пин-коды
				Если ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.АктивироватьСерверныеСертификаты(ГлавноеОкно.Кэш, РезультатОтправки.ДанныеКОтправке.Сертификаты.Список) = Ложь Тогда
					//Активация не удалась, на следующей итерации отвалится
					ОшибкаАктивации = НовыйСбисИсключение(755, "МодульОбъектаКлиент.РезультатОтправки_МассоваяОтправка_АктивацияСертификатов_Продолжить",,"Ошибка активации сертификатов");

					Для Каждого Элемент Из СертификатыАктивировать.ИННАктивировать Цикл
						СертификатыАктивировать.ИННОшибки.Вставить(Элемент.Значение, ОшибкаАктивации);
					КонецЦикла;
				Иначе
					
					//Активация успешна
					Для Каждого Элемент Из СертификатыАктивировать.ИННАктивировать Цикл
						РезультатОтправки.ИННАктивированы.Добавить(Элемент.Значение);
					КонецЦикла;
				
				КонецЕсли;
				
			Иначе
				//Продолжаем банкет
				
				СертификатыАктивировать.Текущий = СертификатыАктивировать.Текущий + 1;
				РезультатОтправки_МассоваяОтправка_АктивацияСертификатов_ВводПинКодов(РезультатОтправки);
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Продолжаем отправку
	СертификатыАктивировать.ИННАктивировать.Очистить();
	РезультатОтправки_СпрятатьСтатус(РезультатОтправки);
	
	ОтложенноеДействие = НовыйСбисОписаниеОповещения("РезультатОтправки_МассоваяОтправка", МодульОбъектаКлиент());
	ОтложенноеДействие = НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения, ИдентификаторДействия, Аргумент", ОтложенноеДействие, Строка(Новый УникальныйИдентификатор), РезультатОтправки));
	ПодключитьОтложенноеДействие(ОтложенноеДействие);

КонецПроцедуры
	
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Отправка_РезультатОтправки_private_Асинх

//Готовит пакет к отправке, формиует события-обработчики, делает вызов
//ПараметрыОтправки - СоставПакета, ДокументОтправить
&НаКлиенте
Процедура РезультатОтправки_Асинх_Отправка(РезультатОтправки, ОтправкаДокументаСБИС)

	Если ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СтатусПакета") = "Готов" Тогда
		
		ПараметрыОтправки	= Новый Структура("Кэш, РезультатОтправки", ГлавноеОкно.Кэш, РезультатОтправки);
		ОбработчикОтправки	= НовыйСбисОписаниеОповещения("WriteDocumentEx", ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция, ПараметрыОтправки);
		Сбис3Команда		= РезультатОтправки_НовыйАсинхроннаяСбисКоманда(РезультатОтправки, ОтправкаДокументаСБИС, ОбработчикОтправки);
		
		Попытка
			
			АсинхроннаяСбисКоманда_Выполнить(Сбис3Команда);
			
		Исключение
			
			//Упала отправка в поток, сами пропишем ошибку
			АсинхронноеСбисСобытие = НовыйАсинхронноеСбисСобытие(Сбис3Команда.Идентификатор, НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_Асинх_Отправка"), "Error");
			АсинхроннаяСбисКоманда_ВызватьСобытие(Сбис3Команда, АсинхронноеСбисСобытие);
			
		КонецПопытки; 
		
	ИначеЕсли ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СтатусПакета") = "Черновик" Тогда
		
		ПараметрыОтправки	= Новый Структура("Кэш, РезультатОтправки", ГлавноеОкно.Кэш, РезультатОтправки);
		ОбработчикОтправки	= НовыйСбисОписаниеОповещения("ExecuteActionEx", ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция, ПараметрыОтправки);
		Сбис3Команда		= РезультатОтправки_НовыйАсинхроннаяСбисКоманда(РезультатОтправки, ОтправкаДокументаСБИС, ОбработчикОтправки);
		
		Попытка
			
			АсинхроннаяСбисКоманда_Выполнить(Сбис3Команда);
			
		Исключение
			
			//Упала отправка в поток, сами пропишем ошибку
			АсинхронноеСбисСобытие = НовыйАсинхронноеСбисСобытие(Сбис3Команда.Идентификатор, НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_Асинх_Отправка"), "Error");
			АсинхроннаяСбисКоманда_ВызватьСобытие(Сбис3Команда, АсинхронноеСбисСобытие);
			
		КонецПопытки;
		
	Иначе
		
		//Подгтовка ещё не закончена. Добавим команду в очередь, пока не будет проставлен СтатусПакета "Готов"
		РезультатОтправки_ПоставитьВОчередьКОтправке(РезультатОтправки, ОтправкаДокументаСБИС);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция РезультатОтправки_НовыйАсинхроннаяСбисКоманда(РезультатОтправки, ОтправкаДокументаСБИС, ОбработчикОтправки=Неопределено) Экспорт
	
	//Для готового пакета вызываем отправку
	ПараметрыКоманды	= Новый Структура("АргументВызова, ВремяОжиданияОтвета, ПодпискиНаСобытия");
	ПараметрыКоманды.АргументВызова			= ОтправкаДокументаСБИС;
	ПараметрыКоманды.ВремяОжиданияОтвета	= РезультатОтправки.ПараметрыОтправки.ОжиданиеОтвета;
	ПараметрыКоманды.ПодпискиНаСобытия		= РезультатОтправки.ПодпискиДляКоманд;
	
	Если ОбработчикОтправки = Неопределено Тогда
		ПараметрыКоманды.Вставить("Идентификатор", ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ИдентификаторОтправки"));
	КонецЕсли;
		
	Сбис3Команда		= НовыйАсинхроннаяСбисКоманда(ОбработчикОтправки, ПараметрыКоманды);
	Если Не ОбработчикОтправки = Неопределено И (ОбработчикОтправки.ИмяПроцедуры = "WriteDocumentEx" Или ОбработчикОтправки.ИмяПроцедуры = "ExecuteActionEx") Тогда
		//Если умная отправка, то подписки по-умолчанию. Иначе события на команду требуется установить руками.
		ПараметрыСобытий	= Новый Структура("Кэш, РезультатОтправки, Команда", ГлавноеОкно.Кэш, РезультатОтправки, Сбис3Команда);
		СобытияОтправки		= ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.Отправка_ПодпискиСобытия(ПараметрыСобытий);
		АсинхроннаяСбисКоманда_Установить(Сбис3Команда, "События", СобытияОтправки);
		АсинхроннаяСбисКоманда_Установить(Сбис3Команда, "ПараметрыСобытий", ПараметрыСобытий);
	КонецЕсли;
	
	Возврат Сбис3Команда;

КонецФункции

//Отправляет пакет в свободный поток или добавляет в очередь
&НаКлиенте
Процедура РезультатОтправки_ДокументВСвободныйПоток(РезультатОтправки, ОтправкаДокументаСБИС)
	
	РезультатОтправки_ОжиданиеПотоков(РезультатОтправки);
	РезультатОтправки_Асинх_Отправка(РезультатОтправки, ОтправкаДокументаСБИС);

КонецПроцедуры

// Процедура - ожидание нужного числа потоков для отправки.
//
// Параметры:
//  РезультатОтправки			- экземпляр класса РезультатОтправки (Структура)
//  СвободныхПотоковТребуется	- Число	 - ожидание требуемого количества потоков отправки
// Вызывает исключение, если за значение параметра времени ожидания ответа не удалось получить нужное количество к отправке.
&НаКлиенте
Процедура РезультатОтправки_ОжиданиеПотоков(РезультатОтправки, СвободныхПотоковТребуется = 1)
	
	ВремяНачалаОжиданияПотока	= ТекущаяДата();
	//ОбновитьОтображение			= Истина;
	//ПараметрыИндикатора			= Новый Структура("Прерывать", Ложь);
	Пока	РезультатОтправки.ПараметрыОтправки.КоличествоПотоков - ГлобальныйКэш.СБИС.ДанныеИнтеграции.Потоки.Количество() < СвободныхПотоковТребуется Цикл 
		ОсталосьОжидать = РезультатОтправки.ПараметрыОтправки.ОжиданиеОтвета - Цел(ТекущаяДата() - ВремяНачалаОжиданияПотока);
		Если ОсталосьОжидать < 0 Тогда
			
			ВызватьСбисИсключение(775, "МодульОбъектаКлиент.РезультатОтправки_ОжиданиеПотоков",,, "Не удалось получить потоки для отправки за разумное время.");
			
		КонецЕсли;
		РезультатОтправки_ОбработкаПрерывания(РезультатОтправки);
		
		//Если ОсталосьОжидать < РезультатОтправки.ПараметрыОтправки.ОжиданиеОтвета - 10 Тогда 
		//	//Покажем отсчёт до прерывания отправки с ошибкой
		//	Если ОбновитьОтображение Тогда
		//		РезультатОтправки_СпрятатьСтатус(РезультатОтправки);
		//	КонецЕсли;
		//	ОбновитьОтображение = Ложь;
		//	РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Ожидание свободных потоков", ОсталосьОжидать / РезультатОтправки.ПараметрыОтправки.ОжиданиеОтвета * 100,,ПараметрыИндикатора);
		////Иначе
		////	ГлавноеОкно.СбисПоказатьСостояние("Ожидание свободных потоков");
		//КонецЕсли;
		
		РезультатОтправки_ОбработатьОтветы_Асинхронно(РезультатОтправки);
		РезультатОтправки_ЗаписатьНакопленныеСтатусы(РезультатОтправки);
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Документы_РезультатОтправки_ОбработкаОтветов

// Процедура - готовит структуру статусов на запись. Сама запись статусов проходит в промежутках ожидания ответов
//
// Параметры:
//  РезультатОтправки	 - Струкутра, РезультатОтправки	 - 
//  СоставПакета		 - Структура, СоставПакета	 - 
//  ДопПараметры		 - 	 - 
//
&НаКлиенте
Процедура РезультатОтправки_ПодготовитьСтатусыПоИтогуОтправки(РезультатОтправки, ОтправкаДокументаСБИС) Экспорт
	Перем СтатусРегламент, ОсновнойДокумент1С, ИдентификаторВызова, СтатусУстановить;
	
	МассивСтатусРегламент	= ПолучитьЗначениеПараметраСбис("МассивСтатусРегламент");
	ИдОтправки				= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ИдентификаторОтправки");
	ДокументСБИС			= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ДокументОтправить");
 	СоставПакета			= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СоставПакета");

	Если ДокументСБИС = Неопределено Тогда
		//Отправки не было, статуса тоже нет.
		Возврат;
	КонецЕсли;

	//СоставПакета			= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СоставПакета");
	РегламентПакета			= СоставПакета_Получить(ДокументСБИС, "РегламентНазвание");
	
	Статусы			= Новый Массив;
	СтатусРегламент	= "";
	Если Не МассивСтатусРегламент = Неопределено Тогда
		Если Не МассивСтатусРегламент.Найти(РегламентПакета) = Неопределено Тогда
			СтатусРегламент = РегламентПакета; 
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Не Вложение.Свойство("Документы1С") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Документ1С Из Вложение.Документы1С Цикл
			
			СтруктураСвойств = Новый Структура("ДокументСБИС_Ид, ДокументСБИС_ИдВложения, ДокументСБИС_Статус", ДокументСБИС.Идентификатор, Вложение.Идентификатор, СтатусУстановить);
			Статусы.Добавить(Новый Структура("СтруктураСвойств, Документ1С, Регламент", СтруктураСвойств, Документ1С.Значение, СтатусРегламент));
			
		КонецЦикла;
	КонецЦикла;
	
	Если	СоставПакета.Вложение.Количество()
		И	СоставПакета.Вложение[0].Свойство("Документы1С") Тогда
		ОсновнойДокумент1С = СоставПакета.Вложение[0].Документы1С[0].Значение;
	КонецЕсли;
	
	РезультатОтправки.ДанныеПоСтатусам.Добавить(Новый Структура("Идентификатор, ОсновнойДокумент1С, Статусы", ИдОтправки, ОсновнойДокумент1С, Статусы));
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ОтправкаДокументаСБИС, ПараметрыОшибки) Экспорт
	Перем лОшибкаФатальная;

	ИдОтправки		= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ИдентификаторОтправки");
	СбисИсключение	= ПараметрыОшибки.Исключение;
	СоставПакета	= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СоставПакета");
	
	ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "СтатусПакета", "Ошибка");
	РезультатОтправки.НаЗаписьСтатусов.Ошибки.Вставить(ИдОтправки, СбисИсключение);

	ТекстОшибки				= СбисИсключение.message;
	ОписаниеРасширенное		= СбисИсключение.details;	
	ЭлементСписка			= РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);

	РезультатОтправки.Ошибок = РезультатОтправки.Ошибок + 1;
	
	Если ЭлементСписка = Неопределено Тогда
		РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, 1);
	Иначе
		ЭлементСписка.Представление = Число(ЭлементСписка.Представление) + 1;
	КонецЕсли;
	
	Если	ПараметрыОшибки.Свойство("Подготовка")
		И	ПараметрыОшибки.Подготовка Тогда
		//Ошибка из пакета документов, до отправкиподготовки
		РезультатОтправки.Счетчики.ОшибокПодготовки	= РезультатОтправки.Счетчики.ОшибокПодготовки + 1;
	Иначе
		РезультатОтправки.Счетчики.ОшибокОтправки	= РезультатОтправки.Счетчики.ОшибокОтправки + 1;		
	КонецЕсли;
	
	Если	ПараметрыОшибки.Свойство("ПотеряАвторизации")
		И	ПараметрыОшибки.ПотеряАвторизации Тогда
		АсинхроннаяСбисКоманда	= ПараметрыОшибки.Команда;
		УспешнаяАвторизация		= Ложь;
		Если	РезультатОтправки.Свойство("ВремяПоследнейАвторизации")
			И	АсинхроннаяСбисКоманда.ВремяВызова <= РезультатОтправки.ВремяПоследнейАвторизации Тогда
			// если уже переавторизовались, но получаем более ранние ответы с ошибкой авторизации
			УспешнаяАвторизация = Истина;
		Иначе
			Если	(	ПолучитьЗначениеПараметраСбис("ВходПоСертификату")
					И	ПолучитьЗначениеПараметраСбис("ЗапомнитьСертификат"))
				Или (Не	ПолучитьЗначениеПараметраСбис("ВходПоСертификату")
					И	ПолучитьЗначениеПараметраСбис("ЗапомнитьПароль")) Тогда
					
				// переавторизуемся
				формаАвторизации	= ПолучитьФормуОбработки("ФормаАвторизация");
				УспешнаяАвторизация	= формаАвторизации.Авторизоваться(ГлавноеОкно.Кэш) = Истина;
				РезультатОтправки.Вставить("ВремяПоследнейАвторизации", ТекущаяДата());
				
			КонецЕсли;
			
		КонецЕсли;
		Если УспешнаяАвторизация Тогда
			
			РезультатОтправки_ПоставитьВОчередьНаПовторнуюОтправку(РезультатОтправки, ОтправкаДокументаСБИС);
			Возврат;
			
		Иначе//Фатальная ошибка авторизации, прерываем отправку, ибо без авторизации ничего и не уйдёт.
			
			ПараметрыОшибки.Вставить("Фатальная", Истина);
			
		КонецЕсли;
	КонецЕсли;
	
	ЭлементСоответствия = РезультатОтправки.ДетализацияОшибок.Получить(ТекстОшибки);
	Если ЭлементСоответствия = Неопределено Тогда
		ЭлементСоответствия = Новый Массив;
		РезультатОтправки.ДетализацияОшибок.Вставить(ТекстОшибки, ЭлементСоответствия);
	КонецЕсли;
	
	//Дополнить детализацию по документам 1С
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Не Вложение.Свойство("Документы1С") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Документ1С Из Вложение.Документы1С Цикл
			
			СтрокаВСоответствие = Новый Структура("ОбработанДокумент1С, Сообщение, СтруктураОшибки", Документ1С.Значение, ОписаниеРасширенное, СбисИсключение); 
			СтрокаВСоответствие.Вставить("ИдВложения",		ВложениеСБИС_Получить(Вложение, "Идентификатор")); 
			СтрокаВСоответствие.Вставить("ДокументСБИС",	ВложениеСБИС_Получить(Вложение, "Название"));

			СтрокаВСоответствие.Вставить("ИДПакета",		СоставПакета_Получить(СоставПакета, "Идентификатор"));
			СтрокаВСоответствие.Вставить("Регламент",		СоставПакета_Получить(СоставПакета, "РегламентНазвание"));
			ЭлементСоответствия.Добавить(СтрокаВСоответствие);
			
		КонецЦикла;
	КонецЦикла;	
	
	Если	Не	ПараметрыОшибки.Свойство("Фатальная", лОшибкаФатальная)
		Или	Не	лОшибкаФатальная	Тогда
		//Считаем нефатальные ошибки по коду и детализации. Если накопится ряд однотипных, без ответов то прерываем отправку.
		СоответствиеНФО = Неопределено;
		Если Не РезультатОтправки.ПараметрыОтправки.Свойство("НефатальныеОшибки", СоответствиеНФО) Тогда
			СоответствиеНФО = Новый Соответствие;
			РезультатОтправки.ПараметрыОтправки.Вставить("НефатальныеОшибки", СоответствиеНФО);
		КонецЕсли;
		СоответствиеПоКоду			= СоответствиеНФО.Получить(СбисИсключение.code);
		СоответствиеПоДетализации	= СоответствиеНФО.Получить(СбисИсключение.details);
		Если СоответствиеПоКоду = Неопределено Тогда
			СоответствиеПоКоду = 0;
		КонецЕсли;
		Если СоответствиеПоДетализации = Неопределено Тогда
			СоответствиеПоДетализации = 0;
		КонецЕсли;
		СоответствиеПоКоду			= СоответствиеПоКоду + 1;
		СоответствиеПоДетализации	= СоответствиеПоДетализации + 1;
		ИсключениеПрерывания		= Неопределено;
		Если		СоответствиеПоКоду >= 10 Тогда
			
			ИсключениеПрерывания = НовыйСбисИсключение(,"МодульОбъектаКлиент.РезультатОтправки_ОбработатьОшибку",
														700, 
														"Повторите попытку позже.", 
														"Получен ряд однотипных ошибок: " + СбисИсключение.message, 
														Новый Структура("Ошибка", СбисИсключение));
		ИначеЕсли	СоответствиеПоДетализации >= 5 Тогда
			ИсключениеПрерывания = НовыйСбисИсключение(,"МодульОбъектаКлиент.РезультатОтправки_ОбработатьОшибку",
														700, 
														"Повторите попытку позже.", 
														"Получен ряд одинаковых ошибок: " + СбисИсключение.details, 
														Новый Структура("Ошибка", СбисИсключение));
		КонецЕсли;
		Если Не ИсключениеПрерывания = Неопределено Тогда
			//Если накоплено n нефатальных ошибок (не получиили ниодного успешного ответа, то прерываем отправку)
			РезультатОтправки.Вставить("ПрерватьОтправку", ИсключениеПрерывания);
		КонецЕсли;
		СоответствиеНФО.Вставить(СбисИсключение.code,		СоответствиеПоКоду);
		СоответствиеНФО.Вставить(СбисИсключение.details,	СоответствиеПоДетализации);
		
		
	ИначеЕсли лОшибкаФатальная Тогда
		Если Не РезультатОтправки.Свойство("ПрерватьОтправку") Тогда
			РезультатОтправки.Вставить("ПрерватьОтправку", НовыйСбисИсключение(СбисИсключение, "МодульОбъектаКлиент.РезультатОтправки_ОбработатьОшибку",,"Получена фатальная ошибка. Отправка прервана."));
		КонецЕсли;
	КонецЕсли;

	//Надо прописать на запись статусы по пакету. Сам статус появится в момент записи РезультатОтправки_ЗаписатьНакопленныеСтатусы
	РезультатОтправки_ПодготовитьСтатусыПоИтогуОтправки(РезультатОтправки, ОтправкаДокументаСБИС);
		
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_Асинх_ПередОтправкой(АсинхронноеСбисСобытие, ПараметрыВызова) Экспорт

	РезультатОтправки = ПараметрыВызова.РезультатОтправки;
    ПараметрыНачалаОтправки = Новый Структура("ДатНач, ВремяНачала, ВремяВыполнения", ПолучитьДатуВМиллисекундах(), АсинхронноеСбисСобытие.Получено);
	РезультатОтправки.ДетализацияОтправки.Вставить(ПараметрыВызова.Команда.Идентификатор, ПараметрыНачалаОтправки);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_Асинх_ПослеОтправки(АсинхронноеСбисСобытие, ПараметрыВызова) Экспорт

	РезультатОтправки			= ПараметрыВызова.РезультатОтправки;
	ОтправкаДокументаСБИС		= ПараметрыВызова.Команда.АргументВызова;
	СтатусОтправленногоПакета	= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СтатусПакета");
	
	Если		СтатусОтправленногоПакета = "Переотправка" Тогда
			
		РезультатОтправки.Счетчики.ПовторныхОтправок = РезультатОтправки.Счетчики.ПовторныхОтправок + 1;

	ИначеЕсли 	СтатусОтправленногоПакета = "Готов" Тогда
		
		РезультатОтправки.Счетчики.ПервичныхОтправок = РезультатОтправки.Счетчики.ПервичныхОтправок + 1; 
		
	ИначеЕсли 	СтатусОтправленногоПакета = "Черновик" Тогда
		
		РезультатОтправки.Счетчики.ПервичныхОтправок = РезультатОтправки.Счетчики.ПервичныхОтправок + 1;
		
	Иначе
		
		//Вероятно, ошибка отправки или произошло что-то неожидаемое. Поток не занимать.
		Возврат;
		
	КонецЕсли;
	
	ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "СтатусПакета", "Отправлен");
	
	РезультатОтправки.ПараметрыОтправки.Потоки.Вставить(ПараметрыВызова.Команда.Идентификатор, ПараметрыВызова.Команда);
	
КонецПроцедуры

//Обработка события успешной отправки пакета
&НаКлиенте
Процедура РезультатОтправки_Асинх_Ответ(АсинхронноеСбисСобытие, ПараметрыВызова) Экспорт
	
	Перем СостояниеДокументаОтправки;
	
	РезультатОтправки = ПараметрыВызова.РезультатОтправки;
	
	Если РезультатОтправки.ПараметрыОтправки.Свойство("НефатальныеОшибки") Тогда
		//Получен ответ, все накопленные НФО удаляем
		РезультатОтправки.ПараметрыОтправки.Удалить("НефатальныеОшибки");
	КонецЕсли;
	
	ДанныеОтвета = АсинхронноеСбисСобытие.Данные;
	
	Если	Не	(ДанныеОтвета.Свойство("Состояние", СостояниеДокументаОтправки) Или (ДанныеОтвета.Свойство("Result") И ДанныеОтвета.Result.Свойство("Состояние", СостояниеДокументаОтправки)))
		Или	Не	СостояниеДокументаОтправки.Свойство("Название", СостояниеДокументаОтправки)
		Или	Не	ЗначениеЗаполнено(СостояниеДокументаОтправки) Тогда
		
		ИсключениеОтвета = НовыйСбисИсключение(, "МодульОбъектаКлиент.РезультатОтправки_Асинх_Ответ", 700,, "В ответе отсутствует состояние документа.", Новый Структура("Ответ", ДанныеОтвета));
		НовоеАсинхронноеСбисСобытие = НовыйАсинхронноеСбисСобытие(АсинхронноеСбисСобытие.Идентификатор, ИсключениеОтвета, "Error");
		РезультатОтправки_Асинх_Ошибка(НовоеАсинхронноеСбисСобытие, ПараметрыВызова);
		
		//Отправка неуспешна, т.к. нет состояния документа
		Возврат;
		
	КонецЕсли;
		
	ИдентификаторОтправки	= ПараметрыВызова.Команда.Идентификатор;
	ОтправкаДокументаСБИС	= ПараметрыВызова.Команда.АргументВызова;
	ИдентификаторДляОтвета	= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ИдентификаторОтправки");
	
	РезультатОтправки.Отправлено		= РезультатОтправки.Отправлено + 1;
	РезультатОтправки.ПолученоОтветов	= РезультатОтправки.ПолученоОтветов + 1;
	РезультатОтправки.НаЗаписьСтатусов.Ответы.Вставить(ИдентификаторДляОтвета, АсинхронноеСбисСобытие.Данные);
	
	РезультатОтправки_ПодготовитьЗаписиПрикладнойСтатистики(РезультатОтправки, ПараметрыВызова.Команда.АргументВызова.СоставПакета);
	РезультатОтправки_ПодготовитьСтатусыПоИтогуОтправки(РезультатОтправки, ОтправкаДокументаСБИС);
	РезультатОтправки_ВремяОтправки(РезультатОтправки, ИдентификаторОтправки);
	
	//Очистить отслеживаемый поток.
	РезультатОтправки.ПараметрыОтправки.Потоки.Удалить(АсинхронноеСбисСобытие.Идентификатор);
	
КонецПроцедуры

//Обработка события ошибки отправки пакета
&НаКлиенте
Процедура РезультатОтправки_Асинх_Ошибка(АсинхронноеСбисСобытие, ПараметрыВызова) Экспорт

	РезультатОтправки			= ПараметрыВызова.РезультатОтправки;
	ОтветИсключение				= НовыйСбисИсключение(АсинхронноеСбисСобытие.Данные, ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".РезультатОтправки_Асинх_Ошибка");
	ОтправкаДокументаСБИС		= ПараметрыВызова.Команда.АргументВызова;
	ПараметрыОбработатьОшибку	= Новый Структура("Исключение", ОтветИсключение);
	Если ПараметрыВызова.Свойство("Фатальная") Тогда
		ПараметрыОбработатьОшибку.Вставить("Фатальная",			ПараметрыВызова.Фатальная);
	КонецЕсли;	
	Если ПараметрыВызова.Свойство("ПотеряАвторизации") Тогда
		ПараметрыОбработатьОшибку.Вставить("ПотеряАвторизации", ПараметрыВызова.ПотеряАвторизации);
	КонецЕсли;
	
	РезультатОтправки.НеОтправлено		= РезультатОтправки.НеОтправлено + 1;
	РезультатОтправки.ПолученоОтветов	= РезультатОтправки.ПолученоОтветов + 1;

	РезультатОтправки_ОбработатьОшибку	(РезультатОтправки, ОтправкаДокументаСБИС, ПараметрыОбработатьОшибку);
	РезультатОтправки_ВремяОтправки		(РезультатОтправки, ПараметрыВызова.Команда.Идентификатор);
	//Очистить отслеживаемый поток.
	РезультатОтправки.ПараметрыОтправки.Потоки.Удалить(АсинхронноеСбисСобытие.Идентификатор);
	
КонецПроцедуры

//Проверяет наличие ответа от плагина и вызывает событие обработки полученного ответа.
//Имеет смысл сделать обработчиком ожидания, но тогда придётся кардинально переделывать отправку на других формах
&НаКлиенте
Процедура РезультатОтправки_ОбработатьОтветы_Асинхронно(РезультатОтправки)

	//Читаем все ответы, которые пришли
	ГлобальныйКэш_ЧтениеОтветовИВызовСобытий();
	ГлобальныйКэш_ОбработатьПросроченныеВызовы();
	
КонецПроцедуры

//Удаляет поток из отслеживаемых отправкой
&НаКлиенте
Процедура РезультатОтправки_УдалитьПоток(РезультатОтправки, АсинхронноеСбисСобытие) Экспорт
	
	РезультатОтправки.ПараметрыОтправки.Потоки.Удалить(АсинхронноеСбисСобытие.Идентификатор);
	
КонецПроцедуры

//Добавляет поток в отслеживаемые отправкой
&НаКлиенте
Процедура РезультатОтправки_ДобавитьПоток(РезультатОтправки, АсинхронноеСбисКоманда) Экспорт
	
	РезультатОтправки.ПараметрыОтправки.Потоки.Вставить(АсинхронноеСбисКоманда.Идентификатор, АсинхронноеСбисКоманда);
	
КонецПроцедуры

//Освобождает отслеживаемые отправкой потоки сгенерированным событием. Например, при получении критической ошибки
&НаКлиенте
Процедура РезультатОтправки_ОсвободитьПотоки(РезультатОтправки, АсинхронноеСбисСобытие) Экспорт
	
	Для Каждого КлючИЗначениеКомандаВыполнена Из РезультатОтправки.ПараметрыОтправки.Потоки Цикл
		АсинхронноеСбисСобытие_ОсвободитьПоток(АсинхронноеСбисСобытие, КлючИЗначениеКомандаВыполнена.Значение);
	КонецЦикла;
	РезультатОтправки.ПараметрыОтправки.Потоки.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Документы_РезультатОтправки_ЗаписьИтогов

//Записываем статусы из полученных ответов
&НаКлиенте
Процедура РезультатОтправки_ЗаписатьНакопленныеСтатусы(РезультатОтправки) Экспорт
	Перем лНаЗаписьСтатусов, СостояниеДокументаОтправки;
	
	Если Не РезультатОтправки.Свойство("НаЗаписьСтатусов", лНаЗаписьСтатусов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыСтатусов	= ПолучитьЗначениеПараметраСбис("ИмяМодуляРаботыСоСтатусами");
	ЕстьСостянияЭД		= ПолучитьЗначениеПараметраСбис("СостояниеЭД") = Истина;
	КаталогХраненияСБИС	= ПолучитьЗначениеПараметраСбис("КаталогНастроек");
	
	МодульЗаписатьПараметрыСБИС = НайтиФункциюСеансаОбработки("ЗаписатьПараметрыДокументовСБИС", ИмяФормыСтатусов);

	Если ЕстьСостянияЭД Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ЗаписатьПараметрыДокументовСБИС");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
		МодульСтатусыСостоянияЭД = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.сбисНайтиФормуФункцииПодсистемы(ГлавноеОкно.Кэш, ПараметрыПоиска);
	КонецЕсли;
	
	ИндексыДляУдаления	= Новый СписокЗначений;
	ДанныеПоСтатусам	= Новый Массив;
	Для СчетчикПоСтатусам = 0 По РезультатОтправки.ДанныеПоСтатусам.Количество()-1 Цикл
		ЭлементДанныхСтатусов = РезультатОтправки.ДанныеПоСтатусам[СчетчикПоСтатусам]; 
		
		//Получаем ответ, либо ошибку и пишем в статус
		СообщениеОтправки = РезультатОтправки.НаЗаписьСтатусов.Ответы.Получить(ЭлементДанныхСтатусов.Идентификатор);
		Если		СообщениеОтправки = Неопределено Тогда
			
			СообщениеОтправки = РезультатОтправки.НаЗаписьСтатусов.Ошибки.Получить(ЭлементДанныхСтатусов.Идентификатор);
			Если СообщениеОтправки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДокументСБИС_Статус = "Ошибка: " + СообщениеОтправки.message;
			
		ИначеЕсли СообщениеОтправки.Свойство("Состояние",СостояниеДокументаОтправки)
			ИЛИ (СообщениеОтправки.Свойство("Result") И СообщениеОтправки.Result.Свойство("Состояние",СостояниеДокументаОтправки)) Тогда  
			
			ДокументСБИС_Статус = СостояниеДокументаОтправки["Название"]; 
			
		Иначе 
			
			ДокументСБИС_Статус = "";
			
		КонецЕсли;
		
		Для Каждого Стр Из ЭлементДанныхСтатусов.Статусы Цикл
			
			СтрокаЗаписьСтатусы = Новый Структура("Регламент, СтруктураСвойств, Документ1С, ИдАккаунта","");
			ЗаполнитьЗначенияСвойств(СтрокаЗаписьСтатусы, Стр);
			
			СтрокаЗаписьСтатусы.Документ1С	= Стр.Документ1С;
			Если Не ЗначениеЗаполнено(СтрокаЗаписьСтатусы.ИдАккаунта) Тогда
				СтрокаЗаписьСтатусы.ИдАккаунта	= ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ПолучитьИдТекущегоАккаунта(ГлавноеОкно.Кэш);
			КонецЕсли;
			
			СтрокаЗаписьСтатусы.СтруктураСвойств.ДокументСБИС_Статус = ДокументСБИС_Статус;
			
			ДанныеПоСтатусам.Добавить(СтрокаЗаписьСтатусы);
			
		КонецЦикла;
		
		ИндексыДляУдаления.Добавить(СчетчикПоСтатусам);
	КонецЦикла;
	
	РезультатОтправки.НаЗаписьСтатусов.Ошибки.Очистить();
	РезультатОтправки.НаЗаписьСтатусов.Ответы.Очистить();
	
	Если Не ДанныеПоСтатусам.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНач = ПолучитьДатуВМиллисекундах();
	
	МодульЗаписатьПараметрыСБИС.ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, ИниПоПараметрам("Конфигурация"), КаталогХраненияСБИС);

	Если ЕстьСостянияЭД Тогда
		Если МодульСтатусыСостоянияЭД = Ложь Тогда
			СбисСообщить(Новый Структура("Текст", "Дублирование событий СБИС в типовых регистрах 1с в данной конфигурации не поддерживается"));
		Иначе
			МодульСтатусыСостоянияЭД.ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, ИниПоПараметрам("Конфигурация"), КаталогХраненияСБИС);
		КонецЕсли;
	КонецЕсли;	// alo >>  	
	
	//Точка входа после отправки партии пакетов документов с данными по статусам.
	МодульОбработатьСписокОтправленных	= ГлавноеОкно.сбисНайтиФормуФункции("сбисОбработатьСписокОтправленных",	"РаботаСДокументами1С");
	Если Не МодульОбработатьСписокОтправленных = Ложь Тогда
		//Данные по детализации статусов и списка номенклатуры смотреть в кэше.
		Контекст = Новый Структура("ДанныеПоСтатусам", ДанныеПоСтатусам);//Структура для возможности расширения, если понадобится добавить что-то ещё.
		МодульОбработатьСписокОтправленных.сбисОбработатьСписокОтправленных(ГлавноеОкно.Кэш, Контекст);
	КонецЕсли;
	//
	ДатаКнц = ПолучитьДатуВМиллисекундах();
	РезультатОтправки.ВремяЗаписиСтатусов = РезультатОтправки.ВремяЗаписиСтатусов+(ДатаКнц-ДатаНач)/1000;
	
	//Очищаем записанные статусы
	ИндексыДляУдаления.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	Для Каждого Элемент Из ИндексыДляУдаления Цикл
		РезультатОтправки.ДанныеПоСтатусам.Удалить(Элемент.Значение);		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Документы_РезультатОтправки_Замер

//Подсчет времени на отправку.
&НаКлиенте
Процедура РезультатОтправки_ВремяОтправки(РезультатОтправки, ИдентификаторОтправки) Экспорт
	
	ДетализацияОтправки = РезультатОтправки.ДетализацияОтправки.Получить(ИдентификаторОтправки);
	Если ДетализацияОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДатКнц = ПолучитьДатуВМиллисекундах();
	
	ДетализацияОтправки.ВремяВыполнения	= (ДатКнц - ДетализацияОтправки.ДатНач)/1000;
	РезультатОтправки.ВремяОтправки		= РезультатОтправки.ВремяОтправки + ДетализацияОтправки.ВремяВыполнения;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Отправка_Проверки 

// Функция проверяет параметры бокумента в СБИС и возвращает описание причины блокировки 
//
// Параметры:
//  СоставПакета - Структура - обрабатываемый пакет (документ) 
//  ДопПараметры - Структура - Набор полей, работа с которыми может расширить результат работы функции. 
// 
// Возвращаемое значение:
//   Структура   - Результат проверки. Флаг блокировки и описание причины блокировки
//
&НаКлиенте
Функция ПроверитьБлокировкуОтправкиПакетаВСБИС(СоставПакета, ДопПараметры = Неопределено) Экспорт
	
	ПроверкаБлокировки = Новый Структура("БлокироватьОтправку,ПричинаБлокировки",Ложь,""); 
		
	СкладскиеПараметры = ПолучитьСкладскиеПараметрыДокумента(СоставПакета, ДопПараметры);  
	
	УказанКонтракт = СкладскиеПараметры.ПоказатьГосконтракт;
	НомерКонтракта = СкладскиеПараметры.ИдентификаторГосконтракта;
	
	Если УказанКонтракт И СтрДлина(СокрЛП(НомерКонтракта)) < 20 Тогда
		ПроверкаБлокировки.БлокироватьОтправку = Истина;
		ПроверкаБлокировки.ПричинаБлокировки = "Некорректно заполнены обязательные поля: № контракта должен содержать от 20 до 25 символов";
	КонецЕсли;
	
	Возврат ПроверкаБлокировки;
	
КонецФункции

#КонецОбласти
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Отладка

&НаКлиенте
Процедура СохранитьОтладочныеДанныеСБИС(ДанныеЗаписать, ДопПараметры=Неопределено) Экспорт
	Перем ПараметрКЗаписи;	
	ОбщиеФункцииДокументов = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;
	Если ДанныеЗаписать.Свойство("XML", ПараметрКЗаписи) Тогда
		Для Каждого ЗаписьПараметра Из ПараметрКЗаписи Цикл
			ШаблонXML = ЗаписьПараметра.Данные;
			Если ЗаписьПараметра.Отказ Тогда
				ШаблонXML = СбисРаботаСJson.ПреобразоватьЗначениеВJson(ШаблонXML);
			КонецЕсли;
			ОшибкаЗаписи	= Ложь;
			сбисПутьЗаписи	= ГлобальныйКэш.Парам.КаталогОтладки;
			Если	ЗаписьПараметра.Свойство("Папка")
				И	ЗначениеЗаполнено(ЗаписьПараметра.Папка) Тогда
				сбисПутьЗаписи = ОбщиеФункцииДокументов.СбисФорматКаталога(сбисПутьЗаписи + ЗаписьПараметра.Папка, ГлобальныйКэш.ПараметрыСистемы.Клиент);
			КонецЕсли;
			РезультатЗаписи = ОбщиеФункцииДокументов.сбисЗаписатьФайл_Клиент(ГлобальныйКэш, Новый Структура("Путь, Имя, Расширение, Данные, Кодировка", сбисПутьЗаписи, ЗаписьПараметра.Имя, "xml", ШаблонXML, "windows-1251"), ОшибкаЗаписи);
			Если ОшибкаЗаписи Тогда
				СообщитьСбисИсключение(РезультатЗаписи);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ДанныеЗаписать.Свойство("XSLT", ПараметрКЗаписи) Тогда
		Для Каждого ЗаписьПараметра Из ПараметрКЗаписи Цикл
			ОшибкаЗаписи	= Ложь;
			сбисПутьЗаписи	= ГлобальныйКэш.Парам.КаталогОтладки;
			Если	ЗаписьПараметра.Свойство("Папка")
				И	ЗначениеЗаполнено(ЗаписьПараметра.Папка) Тогда
				сбисПутьЗаписи = ОбщиеФункцииДокументов.сбисФорматКаталога(сбисПутьЗаписи + ЗаписьПараметра.Папка, ГлобальныйКэш.ПараметрыСистемы.Клиент);
			КонецЕсли;
			РезультатЗаписи = ОбщиеФункцииДокументов.СбисЗаписатьФайл_Клиент(ГлобальныйКэш, Новый Структура("Путь, Имя, Расширение, Данные, Кодировка", сбисПутьЗаписи, ЗаписьПараметра.Имя, "xslt", ЗаписьПараметра.Данные,  КодировкаТекста.UTF8), ОшибкаЗаписи);
			Если ОшибкаЗаписи Тогда
				СообщитьСбисИсключение(РезультатЗаписи);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ДанныеЗаписать.Свойство("Log", ПараметрКЗаписи) Тогда
		СбисИмяМодуля	= Неопределено;
		ОшибкаЗаписи	= Ложь;
		СбисИмяПапкиЛог	= Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
		СбисПутьЗаписи	= ОбщиеФункцииДокументов.сбисФорматКаталога(ОбщиеФункцииДокументов.сбисФорматКаталога(ГлобальныйКэш.Парам.КаталогОтладки + "Log", ГлобальныйКэш.ПараметрыСистемы.Клиент) + СбисИмяПапкиЛог, ГлобальныйКэш.ПараметрыСистемы.Клиент);
		//Если Не	ЗаписьПараметра.Свойство("Модуль", СбисИмяМодуля) Тогда
		//	СБисИмяМодуля = "Неизвестно";
		//КонецЕсли;
		ФайлТест = Новый Файл(СбисПутьЗаписи);
		Если	Не ФайлТест.Существует()
			Или	Не ФайлТест.ЭтоКаталог() Тогда 
			Попытка
				СоздатьКаталог(СбисПутьЗаписи);
			Исключение
				ГлобальныйКэш.Парам.РежимОтладки = Ложь;
				СтруктураОшибки = НовыйСбисИсключение(,"МодульОбъектаКлиент.СбисСохранитьОтладочныеДанные", 772, "Ошибка работы с файловой системой", "Ошибка доступа к каталогу записи логов " + СбисПутьЗаписи + ". Детально: " + ИнформацияОбОшибке().Описание);
				СообщитьСбисИсключение(СтруктураОшибки);
				Возврат;
			КонецПопытки;
		КонецЕсли;
	
		СбисФорматЛога = "{Время}{Тип}{Вызов}{Идентификатор}{Сообщение}";
		Для Каждого ЗаписьПараметра Из ПараметрКЗаписи Цикл
			Если ЗаписьПараметра.Свойство("_класс") Тогда
				Если ЗаписьПараметра._класс = "АсинхроннаяСбисКоманда" Тогда
					Если	ТипЗнч(ЗаписьПараметра.АргументВызова) = Тип("Структура")
						И	ЗаписьПараметра.АргументВызова.Свойство("Метод")
						И	ЗаписьПараметра.АргументВызова.Свойство("ПараметрыМетода") Тогда
						//В команде прописан вызов метода 
						СбисИмяВызова		= ЗаписьПараметра.АргументВызова.Метод;
						ОбъектСообщенияЛога	= ЗаписьПараметра.АргументВызова.ПараметрыМетода;
					Иначе
						СбисИмяВызова		= ЗаписьПараметра.ОбработчикВызова.ИмяПроцедуры;
						ОбъектСообщенияЛога	= ЗаписьПараметра.АргументВызова;
					КонецЕсли;
					Если ЗаписьПараметра.Ответ = Неопределено Тогда
						//Пишется вызов команды
						СбисТипСообщения	= "CALL";
						СбисВремяЛога		= ЗаписьПараметра.ВремяВызова;
					Иначе
						СбисТипСообщения	= ВРег(ЗаписьПараметра.Ответ.Тип);
						ОбъектСообщенияЛога	= ЗаписьПараметра.Ответ.Данные;
						СбисВремяЛога		= ЗаписьПараметра.Ответ.Получено;
					КонецЕсли;	
					СбисИмяМодуля		= ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя");
					СбисИдЛога			=  ЗаписьПараметра.Идентификатор;
				Иначе
					СбисТипСообщения	= "UNKNOWN";
					СбисВремяЛога		= ТекущаяДата();
					СбисИмяМодуля		= "МодульОбъектаКлиент";
					СбисИмяВызова		= ЗаписьПараметра._класс;
					СбисИдЛога			= ЗаписьПараметра._класс;
					ОбъектСообщенияЛога	= ЗаписьПараметра;
				КонецЕсли;
			ИначеЕсли ЗаписьПараметра.Свойство("Исключение") Тогда
				СбисИсключение = ЗаписьПараметра.Исключение;
				Попытка
					СбисПоследняяЗаписьСтек = СбисИсключение.stack[0].methodName;
				Исключение
					СбисПоследняяЗаписьСтек	= "МодульОбъектаКлиент.ЗаписьБезСтека";
				КонецПопытки;
				СбисИмяМодуля		= СтрПолучитьСтроку(СтрЗаменить(СбисПоследняяЗаписьСтек, ".", Символы.ПС), 1);
				СбисИмяВызова		= СтрПолучитьСтроку(СтрЗаменить(СбисПоследняяЗаписьСтек, ".", Символы.ПС), 2);
				СбисВремяЛога		= ТекущаяДата();
				ОбъектСообщенияЛога = СбисИсключение;
				СбисТипСообщения	= "ERROR";
				СбисИдЛога			= "";
				Если СбисИсключение.Свойство("code") Тогда
					СбисИдЛога		= СбисИсключение.code;
				КонецЕсли;
			Иначе
				СбисИмяМодуля		= ЗаписьПараметра.Модуль;
				СбисИмяВызова		= ЗаписьПараметра.Вызов;
				СбисВремяЛога		= ЗаписьПараметра.Время;
				ОбъектСообщенияЛога	= ЗаписьПараметра.Сообщение;
				СбисТипСообщения	= ЗаписьПараметра.Тип;
				Если ЗаписьПараметра.Свойство("Идентификатор") Тогда
					СбисИдЛога		= ЗаписьПараметра.Идентификатор;
				Иначе
					СбисИдЛога		= "";
				КонецЕсли;
			КонецЕсли;
			СбисИмяМодуля = СбисИмяМодуля + ".txt";
			СтрокаНаВывод = СтрЗаменить(СтрЗаменить(СтрЗаменить(СбисФорматЛога, 
			"{Время}",		СбисДополнитьСтроку(Формат(СбисВремяЛога, "ДФ=HH:mm:ss"),10)),
			"{Тип}",		СбисДополнитьСтроку(СбисТипСообщения, 10)),
			"{Сообщение}",	СбисРаботаСJSON.ПреобразоватьЗначениеВJSON(ОбъектСообщенияЛога));
			Если СбисИдЛога = "" Тогда
				СтрокаНаВывод = СтрЗаменить(СтрЗаменить(СтрокаНаВывод, 
				"{Вызов}",			СбисДополнитьСтроку(СбисИмяВызова, 70)),
				"{Идентификатор}",	"");
			Иначе
				СтрокаНаВывод = СтрЗаменить(СтрЗаменить(СтрокаНаВывод, 
				"{Вызов}",			СбисДополнитьСтроку(СбисИмяВызова, 40)),
				"{Идентификатор}",	СбисДополнитьСтроку(СбисИдЛога, 40));
			КонецЕсли;
			ТекстДок = Новый ТекстовыйДокумент;
			ФайлТест = Новый Файл(СбисПутьЗаписи + СбисИмяМодуля);
			Если ФайлТест.Существует() Тогда
				ТекстДок.Прочитать(СбисПутьЗаписи + СбисИмяМодуля);
			КонецЕсли;							
			ТекстДок.ДобавитьСтроку(СтрокаНаВывод);
			ТекстДок.Записать(СбисПутьЗаписи + СбисИмяМодуля);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция СбисДополнитьСтроку(СтрокаИсх, ДлинаСтрокиДополнить, СимволДополнить = " ")
	СтрокаРезультат = Лев(СтрокаИсх, ДлинаСтрокиДополнить);
	Пока  СтрДлина(СтрокаРезультат) < ДлинаСтрокиДополнить Цикл
		СтрокаРезультат = СтрокаРезультат + СимволДополнить;
	КонецЦикла;
	Возврат СтрокаРезультат;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбновлениеСтатусов

// Функция - применяет изменения по документам ЭД в 1С
//
// Параметры:
//  ПараметрыОбновленияВходящие	 - 	 - 
//  ДопПараметры				 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция ОбновитьИзмененияПоДокументамСбис(ПараметрыОбновленияВходящие, ДопПараметры) Экспорт
	Перем МодульРаботыСоСтатусами1С, МеткиПользовательские, ДопПараметрыФильтра, ДействиеОбновления, ЕстьОбработкаПрерывания;
	Кэш		= ГлавноеОкно.Кэш;
	Отказ	= Ложь;
	ПараметрыБлокировкиСтатусов	= Новый Структура("Ключ, Пользователь, Значение", "status_update",	ГлавноеОкно.Пользователь);
	ПараметрыБлокировкиСтатусов.Вставить("Идентификатор",			Кэш.ТекущийСеанс.Параметры.Идентификатор);
	ПараметрыБлокировкиСтатусов.Вставить("Режим",					Кэш.Парам.СпособХраненияМетокСтатусов);
	ПараметрыБлокировкиСтатусов.Вставить("Аккаунт",					Кэш.Интеграция.ПолучитьИдТекущегоАккаунта(Кэш));
	ПараметрыБлокировкиСтатусов.Значение = ПрочитатьОбщиеНастройки(ПараметрыБлокировкиСтатусов.Ключ, ПараметрыБлокировкиСтатусов);
	
	ДопПараметрыВызовов = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);
		
	ГлавноеОкно.СбисПоказатьСостояние("Подготовка обновления статусов");

	//Тут ищем новую функцию. Переназначение на старые обработчики происходит внутри типовой формы работы со статусами
	МодульРаботыСоСтатусамиСБИС		= ГлавноеОкно.СбисНайтиФормуФункции("СбисЗаписатьИзмененияПоДокументам1С",	ГлавноеОкно.Кэш.ФормаРаботыСоСтатусами,	"");
	МодульОбработкиСпискаИзменений	= ГлавноеОкно.сбисНайтиФормуФункции("ОбработатьСписокИзменений",			"РаботаСДокументами1С",		"");
	МодульРаботыСоСтатусами1С		= Ложь;
	Если ГлобальныйКэш.Парам.СостояниеЭД Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ЗаписатьИзмененияПоДокументам1С");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
		МодульРаботыСоСтатусами1С = Кэш.ОбщиеФункции.СбисНайтиФормуФункцииПодсистемы(Кэш, ПараметрыПоиска);
	КонецЕсли;
	Если Не ПараметрыОбновленияВходящие.Свойство("РезультатДействия", ДействиеОбновления) Тогда
		ДействиеОбновления = НовыйРезультатДействия(Новый Структура("Тип", "ОбновлениеСтатусов"), Новый Структура);
	КонецЕсли;
		
	ДействиеОбновления.Параметры.Метки = Новый Структура("ДатаПоследнегоЗапросаСтатусов, ИдентификаторПоследнегоСобытия, ДатНачЧтенияСтатусов, ДатКнцЧтенияСтатусов",
			ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов,
			ГлавноеОкно.ИдентификаторПоследнегоСобытия,
			ГлавноеОкно.ДатНачЧтенияСтатусов,
			ГлавноеОкно.ДатКнцЧтенияСтатусов);
	Если ПараметрыОбновленияВходящие.Свойство("Метки", МеткиПользовательские) Тогда
		ЗаполнитьЗначенияСвойств(ДействиеОбновления.Параметры.Метки, МеткиПользовательские);
	КонецЕсли;
	Если Не ПараметрыОбновленияВходящие.Свойство("ДополнительныеПараметрыФильтра",	ДопПараметрыФильтра) Тогда
		ДопПараметрыФильтра = Новый Структура;
	КонецЕсли;
	Если Не ПараметрыОбновленияВходящие.Свойство("ОбработкаПрерывания",	ЕстьОбработкаПрерывания) Тогда
		ЕстьОбработкаПрерывания = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДействиеОбновления.Параметры.Метки.ДатаПоследнегоЗапросаСтатусов) Тогда
		ДействиеОбновления.Параметры.Метки.ДатаПоследнегоЗапросаСтатусов = НачалоДня(Кэш.Интеграция.СБИС_ТекущаяДата(Кэш));
	КонецЕсли;
	
	ДопПараметрыОбновления = Новый Структура("Кэш, ДопПараметрыФильтра", ГлавноеОкно.Кэш, ДопПараметрыФильтра);
	ДопПараметрыОбновления.Вставить("ПараметрыБлокировки",	ПараметрыБлокировкиСтатусов);
	Если МодульРаботыСоСтатусамиСБИС = Ложь Тогда
		СбисИсключение = НовыйСбисИсключение(, "МодульОбъектаКлиент.СбисВыполнитьОбновлениеСтатусов",779,,"Не удалось определить модуль для обработки статусов СБИС");
		СтрокаДетализации = Кэш.ОбщиеФункции.РезультатДействия_СформироватьСтрокуДетализации(Кэш, "ОбновлениеСтатусов", Новый Структура("Название", "Обновление статусов"));
		Кэш.ОбщиеФункции.РезультатДействия_ДобавитьОшибку(Кэш, ДействиеОбновления, СтрокаДетализации, СбисИсключение);
		Возврат ДействиеОбновления;
	Иначе
		ДопПараметрыОбновления.Вставить("МодульСтатусовСбис",	МодульРаботыСоСтатусамиСБИС);
	КонецЕсли;
	Если Не МодульРаботыСоСтатусами1С = Ложь Тогда
		ДопПараметрыОбновления.Вставить("МодульСтатусов1С",		МодульРаботыСоСтатусами1С);
	КонецЕсли;
	Если Не МодульОбработкиСпискаИзменений = Ложь Тогда
		ДопПараметрыОбновления.Вставить("МодульОбработкиСписка",МодульОбработкиСпискаИзменений);
	КонецЕсли;
	Если ПараметрыОбновленияВходящие.Свойство("ОбработчикЗавершения") Тогда
		ДопПараметрыОбновления.Вставить("ОбработчикПослеЗавершения", ПараметрыОбновленияВходящие.ОбработчикЗавершения);
	КонецЕсли;
	
	ОбработкаЗавершения		= НовыйСбисОписаниеОповещения("ОбновитьИзмененияПоДокументамСбис_Завершение", МодульОбъектаКлиент(), ДопПараметрыОбновления);
	ОтложенноеЗавершение	= НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения, Аргумент", ОбработкаЗавершения, ДействиеОбновления));
	Если ЕстьОбработкаПрерывания Тогда
		//На случай прерывания пользователем, отложенное завершение обновления
		ПодключитьОтложенноеДействие(ОтложенноеЗавершение);
	КонецЕсли;
	Пока ДействиеОбновления.Параметры.ПродолжатьЗапрос Цикл
		Попытка
			СбисВыполнитьОбновлениеПачкиСтатусов(ДействиеОбновления, ДопПараметрыОбновления);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			СтрокаДетализации = Кэш.ОбщиеФункции.РезультатДействия_СформироватьСтрокуДетализации(Кэш, "ОбновлениеСтатусов", Новый Структура("Название", "Обновление статусов"));
			Кэш.ОбщиеФункции.РезультатДействия_ДобавитьОшибку(Кэш, ДействиеОбновления, СтрокаДетализации, НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисВыполнитьОбновлениеСтатусов"));
			Прервать;
		КонецПопытки;
		//СохранитьМеткиСтатусов(Кэш);
		Если ЕстьОбработкаПрерывания Тогда
			ОбработкаПрерыванияПользователя();
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОбработкаПрерывания Тогда
		//Если не прерывалось, то отключить отложенное действие и выполнить завершение в обычном режиме.
		ОтключитьОтложенноеДействие(ОтложенноеЗавершение);
	КонецЕсли;
	ВыполнитьСбисОписаниеОповещения(ДействиеОбновления, ОбработкаЗавершения); 
	Возврат ДействиеОбновления;
КонецФункции

// Процедура - завершает обновление статусов - снимает блокировку на чтение изменений, обновляет метки
//
// Параметры:
//  ДействиеОбновления	 - 	 - 
//  ДопПараметры				 - 	 - 
//
&НаКлиенте
Процедура  ОбновитьИзмененияПоДокументамСбис_Завершение(ДействиеОбновления, ДопПараметры) Экспорт
	Кэш = ДопПараметры.Кэш;
	
	СбисСоответствиеКодов	= ДействиеОбновления.Ошибки.СоответствиеКодов;
	КонфликтБлокировок		= Ложь;
	Для Каждого СбисСоответствиеКода Из СбисСоответствиеКодов Цикл
		Если СбисСоответствиеКода.Значение = 710 Тогда
			КонфликтБлокировок = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не КонфликтБлокировок Тогда
		Попытка	
			РазблокироватьСтатусыСбис(ДопПараметры.ПараметрыБлокировки);
		Исключение
			СтрокаДетализации = Кэш.ОбщиеФункции.РезультатДействия_СформироватьСтрокуДетализации(Кэш, "ОбновлениеСтатусов", Новый Структура("Название", "Обновление статусов"));
			ИнфоОбОшибке = ИнформацияОбОшибке();
			Кэш.ОбщиеФункции.РезультатДействия_ДобавитьОшибку(Кэш, ДействиеОбновления, СтрокаДетализации, НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисВыполнитьОбновлениеСтатусов_Завершение"));
		КонецПопытки;
	КонецЕсли;
	
	//При успешном выполнении добавить строку в результат для вывода сообщения 
	Если Не ДействиеОбновления.Всего.ОшибокВыполнения И Не ДействиеОбновления.Всего.ОшибокПодготовки Тогда
		СтрокаДетализации = Кэш.ОбщиеФункции.РезультатДействия_СформироватьСтрокуДетализации(Кэш, "ОбновлениеСтатусов", Новый Структура("Название", "Обновление статусов"));
		СтрокаДетализации.Состояние = "Завершено";
		СтрокаДетализации.Сообщение = "Статусы обновлены до " + Формат(ДействиеОбновления.Параметры.Метки.ДатаПоследнегоЗапросаСтатусов, "ДФ=dd.MM.yyyy");
		Кэш.ОбщиеФункции.РезультатДействия_ДобавитьРезультат(Кэш, ДействиеОбновления, СтрокаДетализации, Новый Структура("Выполнено, КлючГруппировки, Считать", Истина, "Статусы обработаны", Ложь));
	КонецЕсли;

	Если КонфликтБлокировок Тогда
		ОбновитьМеткиСтатусов(, Кэш);
	Иначе
		ЗаполнитьЗначенияСвойств(ГлавноеОкно, ДействиеОбновления.Параметры.Метки);
		СохранитьМеткиСтатусов(Кэш);
	КонецЕсли;
	
	ГлавноеОкно.СбисСпрятатьСостояние(ГлавноеОкно);
	Если ДопПараметры.Свойство("ОбработчикПослеЗавершения") Тогда
		ВыполнитьСбисОписаниеОповещения(ДействиеОбновления, ДопПараметры.ОбработчикПослеЗавершения);
	КонецЕсли;
КонецПроцедуры

// Процедура - выполняет обновление пачки статусов
//
// Параметры:
//  ДействиеОбновления	 - объект РезультатДействия	 - описание и параметры запущенной операции обновления
//  ДопПараметры		 - Структура	 - Кэш, ПараметрыБлокировки, модули для записи изменений в 1С
//
&НаКлиенте
Процедура СбисВыполнитьОбновлениеПачкиСтатусов(ДействиеОбновления, ДопПараметры) Экспорт
	Перем 	ПоследнееСобытие, ПоследнееСобытиеСИД, ТекущееСобытие; 
	
	Кэш					= ДопПараметры.Кэш;
	СтруктураНастроек	= ДействиеОбновления.Параметры.Метки;	

	ГлавноеОкно.СбисПоказатьСостояние(СтрЗаменить(ДействиеОбновления.Параметры.СтрокаСостояния, "{счетчик}", ДействиеОбновления.Параметры.СчетчикСобытий), ГлавноеОкно,, "(прервать -  Ctrl+Break)");

	СтруктураНастроек.ДатНачЧтенияСтатусов = Кэш.Интеграция.СБИС_ТекущаяДата(Кэш);
	СтрокаДетализации = Кэш.ОбщиеФункции.РезультатДействия_СформироватьСтрокуДетализации(Кэш, "ОбновлениеСтатусов", Новый Структура("Название", "Обновление статусов"));

	Попытка	
		ЗаблокироватьСтатусыСбис(СтруктураНастроек, ДопПараметры.ПараметрыБлокировки);
		ДатаДоЗапросаСписка = Кэш.Интеграция.СБИС_ТекущаяДата(Кэш);
		СписокИзменений = СбисВыполнитьЧтениеИзменений(ДействиеОбновления, ДопПараметры);
	Исключение
		ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.СбисВыполнитьОбновлениеПачкиСтатусов");
	КонецПопытки;
	
	ДействиеОбновления.Параметры.СчетчикПачек		= ДействиеОбновления.Параметры.СчетчикПачек + 1;
	ДействиеОбновления.Параметры.ПродолжатьЗапрос	= СписокИзменений.Навигация.ЕстьЕще = "Да";

	МассивДокументов = Новый Массив;

#Область include_core2_ТребуетРефактор_Модуль_ОбновлениеСтатусов
	Для Каждого оДокумент Из СписокИзменений.Документ Цикл
		ДействиеОбновления.Параметры.СчетчикСобытий = ДействиеОбновления.Параметры.СчетчикСобытий + 1;
		ГлавноеОкно.сбисПоказатьСостояние(СтрЗаменить(ДействиеОбновления.Параметры.СтрокаСостояния, "{счетчик}", ДействиеОбновления.Параметры.СчетчикСобытий),,, "(прервать -  Ctrl+Break)");
		МассивДокументов.Добавить(оДокумент);
		Если оДокумент.Свойство("Событие", ПоследнееСобытие) Тогда
			ПоследнееСобытие = ПоследнееСобытие[ПоследнееСобытие.Количество() -1];
			Если	ПоследнееСобытие.Свойство("Идентификатор")
				И	ПоследнееСобытие.Свойство("ДатаВремя") Тогда
				ПоследнееСобытиеСИД = ПоследнееСобытие;
			КонецЕсли;
		КонецЕсли;
		Если Не Кэш.ИспользоватьОбработчикиСобытий = Истина Тогда
			//Может быть неопределено
			Продолжить;
		КонецЕсли;
		ИмяОбработчика = СтрЗаменить("сбис" + оДокумент.Регламент.Название + "_" + оДокумент.Событие[0].Название, " ", "_");
		фрмОбработчика = ГлавноеОкно.СбисНайтиФормуФункции(ИмяОбработчика, "РаботаСДокументами1С", "", Кэш);
		Если фрмОбработчика = Ложь Тогда
			Продолжить;
		КонецЕсли;
		//Переписать на ОписаниеОповещения.
		Контекст = Новый структура("Док, Кэш", оДокумент, Кэш);
		Результат= Вычислить("фрмОбработчика." + ИмяОбработчика + "(Контекст)");
	КонецЦикла;
#КонецОбласти

	СтруктураНастроек.ДатКнцЧтенияСтатусов = Кэш.Интеграция.СБИС_ТекущаяДата(Кэш);
	
	ГлавноеОкно.СбисПоказатьСостояние(СтрЗаменить(ДействиеОбновления.Параметры.СтрокаСостояния, "{счетчик}", ДействиеОбновления.Параметры.СчетчикСобытий),,, "(прервать -  Ctrl+Break)");
	
	//Взять с последнего обработанного события его ИД и дату время для метки. В случае, даже если ИД потрётся, запрос продолжится от даты последнего события
	Если ЗначениеЗаполнено(ПоследнееСобытие) Тогда
		Если ПоследнееСобытиеСИД = Неопределено Тогда
			//События есть, но в них нет ИД и времени. Поставить для фильтра дату.
			СообщениеДеталиазции = "Неверный формат списка: отсутствует описание событий документов. Часть статусов в диапазоне от "+ СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов + " до " + ДатаДоЗапросаСписка + " может быть пропущена.";
			СтруктураНастроек.ИдентификаторПоследнегоСобытия	= "";
			СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов		= ДатаДоЗапросаСписка;
			ВызватьСбисИсключение(, "МодульОбъектаКлиент.СбисВыполнитьОбновлениеПачкиСтатусов",726,,СообщениеДеталиазции);
		Иначе
			СтруктураНастроек.ИдентификаторПоследнегоСобытия	= ПоследнееСобытиеСИД.Идентификатор;
			СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов		= ПоследнееСобытиеСИД.ДатаВремя;
		КонецЕсли;
		ДействиеОбновления.Параметры.ЕстьИзменения = Истина;
	ИначеЕсли Не СписокИзменений.Документ.Количество() Тогда
		Возврат;
	Иначе
		//Либо список документов есть, но у всех список событий пуст, дату/идентификатор никак не обновить.
		СообщениеДеталиазции = "Неверный формат списка: отсутствует описание событий документов. Часть статусов в диапазоне от "+ СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов + " до " + ДатаДоЗапросаСписка + " может быть пропущена.";
		СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов		= ДатаДоЗапросаСписка;
		СтруктураНастроек.ИдентификаторПоследнегоСобытия	= "";
		ВызватьСбисИсключение(, "МодульОбъектаКлиент.СбисВыполнитьОбновлениеПачкиСтатусов",726,,СообщениеДеталиазции);
	КонецЕсли;
	
	ДопПараметры.МодульСтатусовСбис.СбисЗаписатьИзмененияПоДокументам1С(Кэш, МассивДокументов, Новый Структура("ИдАккаунта", Кэш.Интеграция.ПолучитьИдТекущегоАккаунта(Кэш)));
	Если ДопПараметры.Свойство("МодульСтатусов1С") Тогда        
		ДопПараметры.МодульСтатусов1С.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, ГлавноеОкно.Кэш.Парам.КаталогНастроек);
	КонецЕсли;                             
	Если ДопПараметры.Свойство("МодульОбработкиСписка") Тогда
		ДопПараметры.МодульОбработкиСписка.ОбработатьСписокИзменений(МассивДокументов, Кэш);	
	КонецЕсли;
	//Считаем без детализации, т.к. пока нечего детализировать
	Кэш.ОбщиеФункции.РезультатДействия_ДобавитьРезультат(Кэш, ДействиеОбновления,, Новый Структура("Выполнено, КлючГруппировки", Истина, "Статусы обработаны"));
	
	СтруктураНастроек.ДатКнцЧтенияСтатусов = Кэш.Интеграция.СБИС_ТекущаяДата(Кэш);
	Если СписокИзменений.Свойство("ОбработчикПослеИзменений") Тогда
		//Для интеграции через каталог надо почистить файлы после обработки
		ВыполнитьСбисОписаниеОповещения(ДействиеОбновления, СписокИзменений.ОбработчикПослеИзменений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СбисВыполнитьЧтениеИзменений(ДействиеОбновления, ДопПараметры) Экспорт
	
	Кэш		= ДопПараметры.Кэш;
	Отказ	= Ложь;
	СтруктураНастроек = ДействиеОбновления.Параметры.Метки;
	
	filter = Новый Структура("ПолныйСертификатЭП", "Нет"); 
	Если ЗначениеЗаполнено(СтруктураНастроек.ИдентификаторПоследнегоСобытия) Тогда
		filter.Вставить("ИдентификаторСобытия", СтруктураНастроек.ИдентификаторПоследнегоСобытия);	
	Иначе
		filter.Вставить("ДатаВремяС", Формат(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов, "ДФ=""дд.ММ.гггг ЧЧ.мм.сс""")); 
	КонецЕсли;
	Для Каждого ДопПарам Из ДопПараметры.ДопПараметрыФильтра Цикл
		filter.Вставить(ДопПарам.Ключ, ДопПарам.Значение);     
	КонецЦикла;
	
	navigation = Новый Структура; 
	navigation.Вставить("РазмерСтраницы", "50"); 
	filter.Вставить("Навигация", navigation);
	//navigation.Вставить( "ВернутьРазмерСписка", "Да" );
	
	Результат = Кэш.Интеграция.СБИС_СписокИзменений(Кэш, filter, Новый Структура, Отказ);
	Если Отказ Тогда
		//Если проблемы с соединением, то просто закончим работу.
		Если	Результат.code = 775
			Или	Результат.code = 400 Тогда
			ВызватьСбисИсключение(Результат, "МодульОбъектаКлиент.СбисВыполнитьЧтениеИзменений");
		КонецЕсли;
		
		//Пытаемся воостановить цепочку по дату, если в первый проход событие не было найдено (возможно, было удалено).
		Если	Не	ЗначениеЗаполнено(СтруктураНастроек.ИдентификаторПоследнегоСобытия)
			Или		ДействиеОбновления.Параметры.ЕстьИзменения Тогда
			//СохранитьМеткиСтатусов(Кэш);
			ВызватьСбисИсключение(Результат, "МодульОбъектаКлиент.СбисВыполнитьЧтениеИзменений");
		КонецЕсли;
		
		//Если событие на онлайне удалили, то пытаемся по дате запросить
		filter = Новый Структура;
		filter.Вставить("ПолныйСертификатЭП",	"Нет");
		filter.Вставить("ДатаВремяС",			Формат(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс""") );
		filter.Вставить("Навигация",			navigation );
		Для Каждого ДопПарам Из ДопПараметры.ДопПараметрыФильтра Цикл
			filter.Вставить( ДопПарам.Ключ, ДопПарам.Значение);     
		КонецЦикла;
		
		Отказ = Ложь;
		Результат = Кэш.Интеграция.СБИС_СписокИзменений(Кэш, filter, Новый Структура, Отказ);
		Если Отказ Тогда
			ВызватьСбисИсключение(Результат, "МодульОбъектаКлиент.СбисВыполнитьЧтениеИзменений");
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Проверка блокировки обновления статусов. Если другой пользователь запустил обработку статусов.
&НаКлиенте
Функция ПрочитатьПараметрыБлокировкиСбис(ПараметрыБлокировкиСтатусов)
	
	Если ИспользоватьСбисПараметрыДляХраненияОбщихНастроек() Тогда
		Возврат СбисОбщиеПараметрыИзПодключения(ПараметрыБлокировкиСтатусов.Ключ);
	Иначе
		Возврат ПрочитатьОбщиеНастройки(ПараметрыБлокировкиСтатусов.Ключ);
	КонецЕсли;
	
КонецФункции

//Проверка блокировки обновления статусов. Если другой пользователь запустил обработку статусов.
&НаКлиенте
Процедура РазблокироватьСтатусыСбис(ПараметрыБлокировкиСтатусов)
	Попытка
		СбисКлючБлокировки = КлючБлокировкиСтатусовСБИС(ПараметрыБлокировкиСтатусов);
		Если Не ЗначениеЗаполнено(ПараметрыБлокировкиСтатусов.Значение) Тогда
			ПараметрыБлокировкиСтатусов.Значение = Новый Структура;
		КонецЕсли;
		
		ПараметрыБлокировкиСтатусов.Значение.Удалить(СбисКлючБлокировки);
		
		ПараметрыЗаписать = Новый Структура(ПараметрыБлокировкиСтатусов.Ключ, ПараметрыБлокировкиСтатусов.Значение);
		ДопПараметрыЗаписиБлокировки = Новый Структура;
		ДопПараметрыЗаписиБлокировки.Вставить("Заменить",				Истина);
		
		СохранитьОбщиеНастройки(ПараметрыЗаписать, ДопПараметрыЗаписиБлокировки)
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисЗаблокироватьСтатусы");		
	КонецПопытки;
КонецПроцедуры

//Проверка блокировки обновления статусов. Если другой пользователь запустил обработку статусов.
&НаКлиенте
Процедура ЗаблокироватьСтатусыСбис(СтруктураМетокСтатусов, ПараметрыБлокировкиСтатусов)
	Попытка
		Если Не ЗначениеЗаполнено(ПараметрыБлокировкиСтатусов.Значение) Тогда
			ПараметрыБлокировкиСтатусов.Значение = Новый Структура;
		Иначе
			ПроверитьБлокировкуСтатусовСбис(СтруктураМетокСтатусов, ПараметрыБлокировкиСтатусов);
		КонецЕсли;
		ОбновлениеЗапущено	= ПараметрыБлокировкиСтатусов.Значение;
		СбисКлючБлокировки	= КлючБлокировкиСтатусовСБИС(ПараметрыБлокировкиСтатусов);
		Если ТипЗнч(ОбновлениеЗапущено) = Тип("Структура") Тогда
			ТекущаяБлокировка = Неопределено;
			ОбновлениеЗапущено.Свойство(СбисКлючБлокировки, ТекущаяБлокировка);
		Иначе
			ТекущаяБлокировка = ОбновлениеЗапущено.Получить(СбисКлючБлокировки);
		КонецЕсли;
		Если ТекущаяБлокировка = Неопределено Тогда
			//Таймаут 10 минут на блокировку.
			ТекущаяБлокировка = Новый Структура("user, account, timeout, date_begin", ПараметрыБлокировкиСтатусов.Пользователь, ПараметрыБлокировкиСтатусов.Аккаунт, 600);
		КонецЕсли;
		//Обновить дату начала по текущим меткам
		ТекущаяБлокировка.date_begin = СтруктураМетокСтатусов.ДатНачЧтенияСтатусов;
		ОбновлениеЗапущено.Вставить(СбисКлючБлокировки, ТекущаяБлокировка);
		
		ПараметрыЗаписать = Новый Структура(ПараметрыБлокировкиСтатусов.Ключ, ПараметрыБлокировкиСтатусов.Значение);
		
		ДопПараметрыЗаписиБлокировки = Новый Структура;
		ДопПараметрыЗаписиБлокировки.Вставить("Заменить", Истина);
		СохранитьОбщиеНастройки(ПараметрыЗаписать, ДопПараметрыЗаписиБлокировки)
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисЗаблокироватьСтатусы");		
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Функция КлючБлокировкиСтатусовСБИС(ПараметрыБлокировкиСтатусов)
	
	Если ТипЗнч(ПараметрыБлокировкиСтатусов.Значение) = Тип("Соответствие") Тогда
		Возврат ПараметрыБлокировкиСтатусов.Идентификатор;
	КонецЕсли;
	Возврат "_" + СтрЗаменить(ПараметрыБлокировкиСтатусов.Идентификатор, "-", "");
	
КонецФункции

//Проверка блокировки обновления статусов. Если другой пользователь запустил обработку статусов.
&НаКлиенте
Процедура ПроверитьБлокировкуСтатусовСбис(СтруктураМетокСтатусов, ПараметрыБлокировкиСтатусов)
    Перем ОперацияПроверкиСтатусов, ОбновлениеЗапущено;
	
	ДатаПроверки		= ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СБИС_ТекущаяДата(ГлавноеОкно.Кэш);
	КлючиИстекли		= Новый Массив;
	ОбновлениеЗапущено	= ПараметрыБлокировкиСтатусов.Значение;
	СбисКлючБлокировки	= КлючБлокировкиСтатусовСБИС(ПараметрыБлокировкиСтатусов);
	Для Каждого КлючИЗначениеБлокировки Из ОбновлениеЗапущено Цикл
		Если		КлючИЗначениеБлокировки.Ключ = СбисКлючБлокировки Тогда
			//Это текущий сеанс
			Продолжить;
		ИначеЕсли	ДатаПроверки - Дата(КлючИЗначениеБлокировки.Значение.date_begin) >= Число(КлючИЗначениеБлокировки.Значение.timeout) Тогда
			//У блокировки истёк таймаут
			КлючиИстекли.Добавить(КлючИЗначениеБлокировки.Ключ);
		ИначеЕсли	ПараметрыБлокировкиСтатусов.Режим	= 2 Тогда
			//В рамках ИС - обновление блокируется при любом пользователе
			ВызватьСбисИсключение(,"МодульОбъектаКлиент.СбисПроверитьБлокировкуСтатусов", 710, "Ошибка блокировки данных", "Обновление статусов уже выполняется по запросу пользователя: " + КлючИЗначениеБлокировки.Значение.user); 
		ИначеЕсли	ПараметрыБлокировкиСтатусов.Режим	= 1 Тогда
			//В рамках аккаунта - если уже запущено от того же аккаунта
			Если	ПараметрыБлокировкиСтатусов.Аккаунт	= КлючИЗначениеБлокировки.Значение.account Тогда
				ВызватьСбисИсключение(,"МодульОбъектаКлиент.СбисПроверитьБлокировкуСтатусов", 710, "Ошибка блокировки данных", "Обновление статусов уже выполняется по запросу Вашего аккаунта."); 
			КонецЕсли;
		//В рамках пользователя
		ИначеЕсли	ПараметрыБлокировкиСтатусов.Пользователь= КлючИЗначениеБлокировки.Значение.user Тогда
			ВызватьСбисИсключение(,"МодульОбъектаКлиент.СбисПроверитьБлокировкуСтатусов", 710, "Ошибка блокировки данных", "Обновление статусов уже выполняется по запросу Вашего пользователя."); 
		//Иначе
		//	ВызватьСбисИсключение(,"МодульОбъектаКлиент.СбисПроверитьБлокировкуСтатусов", 710, "Ошибка блокировки данных", "Обновление статусов уже выполняется по запросу пользователя: " + КлючИЗначениеБлокировки.Значение.Пользователь); 
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючИстек Из КлючиИстекли Цикл 
		ОбновлениеЗапущено.Удалить(КлючИстек);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ПроверкиМетаданных

&НаКлиенте
Функция		СбисСуществуетОбъектКонфигурацииКлиент(ИмяГлобальногоТипаОбъекта, ИмяЛокальногоТипаОбъекта) Экспорт
	
	Возврат СбисСуществуетОбъектКонфигурацииВызовСервера(ИмяГлобальногоТипаОбъекта, ИмяЛокальногоТипаОбъекта);
	
КонецФункции

&НаСервере
Функция		СбисСуществуетОбъектКонфигурацииВызовСервера(ИмяГлобальногоТипаОбъекта, ИмяЛокальногоТипаОбъекта)
	
	Возврат МодульОбъектаСервер().СбисСуществуетОбъектКонфигурацииСервер(ИмяГлобальногоТипаОбъекта, ИмяЛокальногоТипаОбъекта) 
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеНастройки

//Для определенных ИБ нельзя хранить настройки в хранилище из-за ограничения прав. Используем СБИС параметры для такого.
&НаКлиенте
Функция		ИспользоватьСбисПараметрыДляХраненияОбщихНастроек() Экспорт
	Результат = 	ГлобальныйКэш.ПараметрыСистемы.Клиент.РежимЗапускаПриложения = "ТолстыйКлиентОбычноеПриложение"
			И	Не	ГлобальныйКэш.ПараметрыСистемы.Конфигурация.Файловая;
			
	Если	Результат
		И	ГлобальныйКэш.Парам.СпособХраненияМетокСтатусов = 2 Тогда
		ИзменитьПараметрСбис("СпособХраненияМетокСтатусов", 1);
		МеткиСтатусов = ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.СбисПрочитатьМеткиСтатусов(ГлавноеОкно.Кэш);
		ЗаполнитьЗначенияСвойств(ГлавноеОкно, МеткиСтатусов);
		ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.ИнициализироватьКэшНастроек(ГлавноеОкно.Кэш, Новый Структура("Обновить, Параметр", Истина, "status_marks")); //для способа хранения меток в разрезе аккаунта добавим status_marks в список параметров, хранящихся на шаблоне	
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПараметрыКлючаОбщихНастроекКлиент() Экспорт
	
	Возврат ПараметрыКлючаОбщихНастроек();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыКлючаОбщихНастроек()
	
	Возврат Новый Структура("КлючОбъекта, КлючНастроек, ИмяПользователя", "Saby", "params", "Saby");
	
КонецФункции

// Функция - читает общие настройки Saby
//
// Параметры:
//  КлючНастройки	 - Строка Необязательный	 - При необходимости получить не все настройки, а конкретное значение
// 
// Возвращаемое значение:
//  Значение настроек/настройки по ключу - Соответствие/Произвольный
//
&НаКлиенте
Функция ПрочитатьОбщиеНастройки(КлючНастройки=Неопределено, ДопПараметры=Неопределено) Экспорт
	
	Попытка
		Если ИспользоватьСбисПараметрыДляХраненияОбщихНастроек() Тогда
			Возврат СбисОбщиеПараметрыИзПодключения(КлючНастройки);
		Иначе
			Возврат СбисОбщиеПараметрыИзХранилищаСервер(КлючНастройки);
		КонецЕсли;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.ПрочитатьОбщиеНастройки");
	КонецПопытки;
	
КонецФункции

// Функция - читает общие настройки на стороне сервера
//
// Параметры:
//  КлючНастройки	 - Строка Необязательный	 - При необходимости получить не все настройки, а конкретное значение
// 
// Возвращаемое значение:
//  Значение настроек/настройки по ключу - Соответствие/Произвольный
//
&НаКлиенте
Функция СбисОбщиеПараметрыИзПодключения(КлючНастройки=Неопределено)
	Перем СбисПараметрыПользователей, ЗначениеНастройки;
	
	СбисКлючи			= ПараметрыКлючаОбщихНастроек();
	СбисКлючНастроек	= СбисКлючи.КлючОбъекта + "_" + СбисКлючи.КлючНастроек;
	
	Попытка
		ПараметрыЧтения		= Новый Структура("Ключ, КлючНастройки", СбисКлючНастроек, КлючНастройки);
		ЗначениеНастройки	= ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.ПрочитатьОбщуюНастройкуПодключения(ПараметрыЧтения, ГлавноеОкно.Кэш);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисОбщиеПараметрыИзПодключения");
	КонецПопытки;
	Если	КлючНастройки		= Неопределено
		И	ЗначениеНастройки	= Неопределено Тогда 
		ЗначениеНастройки = Новый Структура
	КонецЕсли;
	
	Возврат ЗначениеНастройки;
	
КонецФункции

// Функция - читает общие настройки на стороне сервера
//
// Параметры:
//  КлючНастройки	 - Строка Необязательный	 - При необходимости получить не все настройки, а конкретное значение
// 
// Возвращаемое значение:
//  Значение настроек/настройки по ключу - Соответствие/Произвольный
//
&НаСервере
Функция СбисОбщиеПараметрыИзХранилищаСервер(КлючНастройки)
	
	УстановитьПривилегированныйРежим(Истина);
	КлючНастроекСохранить = ПараметрыКлючаОбщихНастроек();
	Результат = ХранилищеОбщихНастроек.Загрузить(КлючНастроекСохранить.КлючОбъекта, КлючНастроекСохранить.КлючНастроек, , КлючНастроекСохранить.ИмяПользователя);
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	Если Не КлючНастройки = Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
			Результат = Результат.Получить(КлючНастройки);
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Свойство(КлючНастройки, Результат);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Функция - читает общие настройки на стороне сервера
//
// Параметры:
//  КлючНастройки	 - Строка Необязательный	 - При необходимости получить не все настройки, а конкретное значение
// 
// Возвращаемое значение:
//  Значение настроек/настройки по ключу - Соответствие/Произвольный
//
&НаСервере
Функция СбисОбщиеНастройкиИзИнтеграции(КлючНастройки)	
	//УстановитьПривилегированныйРежим(Истина);
	Результат = ХранилищеОбщихНастроек.Загрузить("Saby", "params", , "Saby");
	//УстановитьПривилегированныйРежим(Ложь);
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	Если Не КлючНастройки = Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
			Результат = Результат.Получить(КлючНастройки);
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Свойство(КлючНастройки, Результат);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Процедура - сохраняет общую настройку Saby
//
// Параметры:
//  КлючНастройки		 - Строка	- Ключ записи
//  ЗначениеНастройки	 - Произвольный	 - Значение для записи
//
&НаКлиенте
Процедура СохранитьОбщуюНастройку(КлючНастройки, ЗначениеНастройки) Экспорт
	Попытка
		ПараметрыОбновитьДляСервера = Новый Структура;
		ПараметрыОбновитьДляСервера.Вставить(КлючНастройки, ЗначениеНастройки);
		СохранитьОбщиеНастройки(ПараметрыОбновитьДляСервера)
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СохранитьОбщуюНастройку");
	КонецПопытки;	
КонецПроцедуры

// Процедура - сохраняет общие настройки Saby
//
// Параметры:
//  КлючНастройки		 - Строка	- Ключ записи
//  ЗначениеНастройки	 - Произвольный	 - Значение для записи
//
&НаКлиенте
Процедура СохранитьОбщиеНастройки(НастройкиЗаписать, ДопПараметры=Неопределено) Экспорт
	
	Попытка
		Если ИспользоватьСбисПараметрыДляХраненияОбщихНастроек() Тогда
			СбисСохранитьОбщиеНастройкиВПодключение(НастройкиЗаписать, ДопПараметры);
		Иначе
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				СбисСохранитьОбщиеНастройкиВХранилищеСервер(НастройкиЗаписать);
			#Иначе
				СбисСохранитьОбщиеНастройкиВХранилищеВызовСервера(НастройкиЗаписать);
			#КонецЕсли
		КонецЕсли;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СохранитьОбщиеНастройки");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СбисСохранитьОбщиеНастройкиВПодключение(ЗначенияОбновить, ДопПараметры)
	
	Перем СбисПараметрыПользователей, ЗначениеПараметраВШаблоне;
	
	Отказ						= Ложь;
	СбисКлючи					= ПараметрыКлючаОбщихНастроек();
	СбисКлючНастроек			= СбисКлючи.КлючОбъекта + "_" + СбисКлючи.КлючНастроек;
	Попытка
		СбисПараметрыПользователей	= СбисОбщиеПараметрыИзПодключения();
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисСохранитьОбщиеНастройкиВПодключение");
	КонецПопытки;
	лЗаменитьЗначение = ДопПараметры.Свойство("Заменить") И ДопПараметры.Заменить;
	
	//Дополнить текущую структуру параметров новыми значениями
	Для Каждого Элемент Из ЗначенияОбновить Цикл
		Если Не СбисПараметрыПользователей.Свойство(Элемент.Ключ, ЗначениеПараметраВШаблоне)
			Или	лЗаменитьЗначение Тогда
			СбисПараметрыПользователей.Вставить(Элемент.Ключ, Элемент.Значение);
		ИначеЕсли	ТипЗнч(ЗначениеПараметраВШаблоне)	= Тип("Структура")
				И	ТипЗнч(Элемент.Значение)			= Тип("Структура") Тогда
			ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисСкопироватьСтруктуруНаКлиенте(ЗначениеПараметраВШаблоне, Элемент.Значение);
			СбисПараметрыПользователей.Вставить(Элемент.Ключ, ЗначениеПараметраВШаблоне);
		Иначе
			СбисПараметрыПользователей.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗаписи = Новый Структура("Настройка",  Новый Структура(СбисКлючНастроек, СбисПараметрыПользователей));
	Попытка
		ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.ЗаписатьОбщуюНастройкуПодключения(ПараметрыЗаписи, ГлавноеОкно.Кэш);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисСохранитьОбщиеНастройкиВПодключение");
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СбисСохранитьОбщиеНастройкиВХранилищеВызовСервера(Знач ЗначенияОбновить)
	
	СбисСохранитьОбщиеНастройкиВХранилищеСервер(ЗначенияОбновить);
	
КонецПроцедуры

&НаСервере
Процедура СбисСохранитьОбщиеНастройкиВХранилищеСервер(ЗначенияОбновить)
	
	КлючНастроекСохранить = ПараметрыКлючаОбщихНастроек();
	УстановитьПривилегированныйРежим(Истина);
	ОбщиеНастройки = ХранилищеОбщихНастроек.Загрузить(КлючНастроекСохранить.КлючОбъекта, КлючНастроекСохранить.КлючНастроек, , КлючНастроекСохранить.ИмяПользователя);
	Если ОбщиеНастройки = Неопределено Тогда
		ОбщиеНастройки = ЗначенияОбновить;
	Иначе
		Для Каждого Элемент Из ЗначенияОбновить Цикл
			ОбщиеНастройки.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	ХранилищеОбщихНастроек.Сохранить(КлючНастроекСохранить.КлючОбъекта, КлючНастроекСохранить.КлючНастроек, ОбщиеНастройки, , КлючНастроекСохранить.ИмяПользователя);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Печать

&НаКлиенте
Функция ПечатьЗапуск(ОбъектыНазначения, ДопПараметры) Экспорт
	
	ИдентификаторКоманды = ДопПараметры.ИдентификаторКоманды;
	
    ДополнительныеПараметрыКэша	= Новый Структура;
	ДополнительныеПараметрыКэша.Вставить("РежимЗапускаГлавногоОкна",	"ПечатнаяФорма");
	ДополнительныеПараметрыКэша.Вставить("МодульОбъекта",				МодульОбъектаКлиент());
	ГлавноеОкно.КэшПодготовить(ДополнительныеПараметрыКэша);
	ГлавноеОкно.СбисПолучитьПарам();

	ПечатьПодключитьРасширение(ОбъектыНазначения, Новый Структура("ИдентификаторКоманды", ИдентификаторКоманды));
	
КонецФункции

&НаКлиенте
Процедура ПечатьПодключитьРасширение(ОбъектыНазначения, ДопПараметры = Неопределено) Экспорт
    Перем ИдентификаторКоманды;
	
	Если		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("ИдентификаторКоманды", ИдентификаторКоманды) Тогда
		ИдентификаторКоманды = "Печать";
	КонецЕсли;
	
	ПараметрыЗапускаПечати		= Новый Структура("ИдентификаторКоманды", ИдентификаторКоманды);
	ОбработчикЗапуститьПечать	= НовыйСбисОписаниеОповещения("ПечатьУстановленоРасширениеРаботыСФайлами", МодульОбъектаКлиент(), ПараметрыЗапускаПечати);
	#Если ВебКлиент Тогда
		Если ПодключитьРасширениеРаботыСФайлами() = Ложь Тогда
			ПараметрыПослеРасширения		= Новый Структура("ОбъектыНазначения, ОбработчикПродолжить", ОбъектыНазначения, ОбработчикЗапуститьПечать);
			ОбработчикПодключитьРасширение	= НовыйСбисОписаниеОповещения("ПечатьПослеПодключенияРасширения", МодульОбъектаКлиент(), ПараметрыПослеРасширения);
			НачатьУстановкуРасширенияРаботыСФайлами(ОбработчикПодключитьРасширение);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	ВыполнитьСбисОписаниеОповещения(ОбъектыНазначения, ОбработчикЗапуститьПечать);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПослеПодключенияРасширения(Подключено=Истина, ПараметрыЗапускаПечати) Экспорт
	
	Если Не Подключено Тогда
	   
	 	СбисСообщить("Расширение работы с файлами не подключено");
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьСбисОписаниеОповещения(ПараметрыЗапускаПечати.ОбъектыНазначения, ПараметрыЗапускаПечати.ОбработчикПродолжить);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУстановленоРасширениеРаботыСФайлами(ОбъектыНазначения, ДопПараметры) Экспорт
	
	Кэш						= ГлавноеОкно.Кэш;
	ИдентификаторКоманды	= ДопПараметры.ИдентификаторКоманды;
	ВсеВключилось			= ГлавноеОкно.ОпределитьИнтеграциюРабочиеФормы(Кэш, Кэш.Парам);
	Если Не ВсеВключилось Тогда//Не удалось включить интеграцию, либо форма хранения настроек недоступна
		Возврат;
	КонецЕсли;	

	формаАвторизации = ПолучитьФормуОбработки("ФормаАвторизация");
	Если 	(	Кэш.Парам.ВходПоСертификату И Кэш.Парам.ЗапомнитьСертификат) 
		Или (НЕ	Кэш.Парам.ВходПоСертификату И Кэш.Парам.ЗапомнитьПароль)
		Или Кэш.Парам.СпособОбмена = 1 Тогда
		УспешнаяАвторизация = формаАвторизации.Авторизоваться(ГлавноеОкно.Кэш);
	КонецЕсли;
	
	СбисДополнительныеПараметры	= Новый Структура("ИдентификаторКоманды, Документ", ИдентификаторКоманды, ОбъектыНазначения[0]);
	ОбработчикПослеАвторизации	= НовыйСбисОписаниеОповещения("ПечатьПослеАвторизацииСБИС", МодульОбъектаКлиент(), СбисДополнительныеПараметры);
	Если УспешнаяАвторизация = Истина Тогда
		ВыполнитьСбисОписаниеОповещения(Истина, ОбработчикПослеАвторизации);
		Возврат;
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Результат = формаАвторизации.ОткрытьМодально();
		ВыполнитьСбисОписаниеОповещения(Результат, ОбработчикПослеАвторизации);
	#Иначе
		формаАвторизации.ОписаниеОповещенияОЗакрытии = ОбработчикПослеАвторизации;
		формаАвторизации.Открыть();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПослеАвторизацииСБИС(Результат, Параметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Кэш = ГлавноеОкно.Кэш;
	
	Кэш.ФормаНастроек.ПараметрыРаботы.Вставить("ИзменениеПользователя", Истина);
	Кэш.Текущий.Раздел = "3";
	Кэш.Текущий.ТипДок = Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Параметры.Документ, "Имя");  // alo Меркурий
	Попытка
		ЗаполнитьСведенияОПользователеИАккаунте(Новый Структура, Кэш);
	Исключение
		СообщитьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.СбисПечать_ПослеАвторизации");
		Возврат;
	КонецПопытки;
	ГлавноеОкно.сбисПолучитьУстановитьНастройки(Кэш, Ложь);
	
	Если Не Кэш.КэшНастроек.ИниВПорядке Тогда
		Возврат;
	КонецЕсли;
	
	Документ		= Параметры.Документ;
	ИмяДокумента	= Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ, "Имя");
	
	//Получим настройки документа
	Попытка
		НаборПодходящихИни = ИниПоПараметрам(Новый Структура("Тип1С", ИмяДокумента));
	Исключение
		СообщитьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.Найти_мФайлПоВложению");
		Возврат;
	КонецПопытки;
	
	//Получим настройки документа
	СписокИни = Новый СписокЗначений;
	Для Каждого КлючИЗначениеИни Из НаборПодходящихИни Цикл
		ЗначениеИни			= КлючИЗначениеИни.Значение;
		ТипИни				= Кэш.ОбщиеФункции.РассчитатьЗначение("ТипИни", ЗначениеИни);
		Реестр1С_Название	= Кэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_Название", ЗначениеИни);
		Если	ТипИни = "Загрузка"
			Или	Реестр1С_Название = Неопределено
			Или	ЗначениеИни.Свойство("мДокумент") Тогда
			Продолжить;
		КонецЕсли;
		//Если	ЗначениеИни.Свойство("ЗапросСпискаДокументов")
		//	И	ЗначениеИни.Свойство("Реестр1С_Название") Тогда 
		//	Реестр1С_Название = Кэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_Название", ЗначениеИни, Кэш);
		//	СписокИни.Добавить(КлючИЗначениеИни.Ключ, ?(ЗначениеЗаполнено(Реестр1С_Название),Реестр1С_Название, ИмяДокумента));
		//КонецЕсли;
		
		СписокИни.Добавить(КлючИЗначениеИни.Ключ, Реестр1С_Название);
	КонецЦикла;  
	
	ОбработчикВыбора = НовыйСбисОписаниеОповещения("ПечатьПослеВыбораИни", МодульОбъектаКлиент(), Параметры);

	Если	Не	СписокИни.Количество() Тогда
		СбисСообщить("Выгрузка данного типа документов не поддерживается!");
		Возврат;
	ИначеЕсли	СписокИни.Количество() = 1 Тогда
		ВыполнитьСбисОписаниеОповещения(СписокИни[0], ОбработчикВыбора);
	Иначе
		СписокИни.СортироватьПоПредставлению();
		СбисВыбратьИзСписка(СписокИни, Новый Структура("Заголовок, Обработчик", "Выберите настройку для формирования документов", ОбработчикВыбора));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПослеВыбораИни(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документ	= Параметры.Документ;
	Кэш			= ГлавноеОкно.Кэш;

	Если	Параметры.Свойство("ИдентификаторКоманды")
		И	Параметры.ИдентификаторКоманды = "sbis1cПогаситьВСД" Тогда
		ПечатьПогаситьВСД(Результат, Документ);
		Возврат;
	Конецесли;
	
	ЗначениеИни			= ИниПоПараметрам(Результат.Значение);
	Кэш.Текущий.ТипДок	= Результат.Значение;
		
	// Подготовим фильтр для запроса документов
	ПараметрыФильтра = Новый Структура;
	ПараметрыФильтра.Вставить("ФильтрДокумент", Документ); 		

	// << alo Меркурий 
	Контекст		= Новый Структура("Ини", Новый структура("Документ",новый структура("РассчитанноеЗначение", Документ)));
	// Получим массив выгружаемых документов по запросу
	ТекстЗапроса	= Кэш.ОбщиеФункции.РассчитатьЗначение("ЗапросСпискаДокументов", ЗначениеИни);
	
	Если ТекстЗапроса = Неопределено Тогда
		
        // Если в выбранной инишке нет запроса списка документов, то сэмулировать строку от текущий ини.
		МассивДокументов1С	= Новый Массив;
		СоставПакета		= Новый СписокЗначений;
		СоставПакета.Добавить(Документ, Результат.Значение);
		МассивДокументов1С.Добавить(Новый Структура("СоставПакета", СоставПакета));
		
	Иначе
		
		// Прогнать документ через запрос (сохранение старой логики, чтобы не отъехало)
		ПараметрыФильтра.Вставить( "ФильтрДатаНач", Дата(1,1,1)); 
		ПараметрыФильтра.Вставить( "ФильтрДатаКнц", Дата(1,1,1)); 
		ПараметрыФильтра.Вставить( "ФильтрКонтрагент", "");
		ПараметрыФильтра.Вставить( "ФильтрКонтрагентПодключен", "");
		ПараметрыФильтра.Вставить( "ФильтрОрганизация", "");
		ПараметрыФильтра.Вставить( "ФильтрСостояние", "Все документы");
		ИниКонфигурация = Кэш.ФормаНастроек.Ини(Кэш, "Конфигурация");
		Если ИниКонфигурация.Свойство("Ответственные") Тогда
			ИмяСправочника = СокрЛП(Сред(ИниКонфигурация.Ответственные.Значение, Найти(ИниКонфигурация.Ответственные.Значение, ".")+1));
			ТипСправочника = "СправочникСсылка." + ИмяСправочника;
		Иначе
			ТипСправочника = "СправочникСсылка.Пользователи";
		КонецЕсли;
		ОписаниеТипа = Новый ОписаниеТипов(ТипСправочника);
		ПараметрыФильтра.Вставить( "ФильтрОтветственный", ОписаниеТипа.ПривестиЗначение()); // alo Меркурий >>
		ПараметрыФильтра.Вставить( "ФильтрМаска", "");
		ПараметрыФильтра.Вставить( "РазмерСтраницы", 1 ); 
		ПараметрыФильтра.Вставить( "Страница", 1 );
		ПараметрыФильтра.Вставить( "ВсеДокументы", Истина );
		ПараметрыФильтра.Вставить( "ФильтрЕстьЕще", Ложь );
		
		Если Кэш.ПараметрыФильтра.Количество() Тогда
			ПараметрыФильтра.Вставить( "Пользовательские", Новый Структура);
			Для Каждого Элемент Из Кэш.ПараметрыФильтра Цикл
				ПараметрыФильтра.Пользовательские.Вставить( Элемент.Ключ, Элемент.Значение);		
			КонецЦикла;
		КонецЕсли;
		
		МассивДокументов1С = Кэш.ОбщиеФункции.ЗаполнитьМассивДокументов1С(ТекстЗапроса, ПараметрыФильтра, ГлавноеОкно.КаталогНастроек);
		
	КонецЕсли;
	
	//Подготовим список документов
	Для Каждого ТекущаяСтрока Из МассивДокументов1С Цикл
		
		ТекущиеРазделы	= Кэш.ОбщиеФункции.РассчитатьЗначение("ДокументРаздел", ЗначениеИни);
		// Документ может находиться в нескольких разделах одновременно (напр., АктСверкиВзаиморасчетов). Обрабатываем все.
		ТекущиеРазделы = Кэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(ТекущиеРазделы, ",");
		Для i = 0 По ТекущиеРазделы.ВГраница() Цикл
			ТекущиеРазделы[i] = "Раздел_" + ТекущиеРазделы[i] + "_Шаблон";
		КонецЦикла;
		
		фрм				= МодульОбъектаКлиент().НайтиФункциюСеансаОбработки("ПоказатьДокумент", ТекущиеРазделы);
		фрм.ПоказатьДокумент(Кэш, ТекущаяСтрока);	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция ПечатьПогаситьВСД(ИмяИни, Документ)
	
	Кэш = ГлавноеОкно.Кэш;
	Кэш.Текущий.Раздел = "1";
	ПолучилосьАвтоматически = Ложь;
	Ини = Кэш.ФормаНастроек.Ини(Кэш, ИмяИни);
	Если ЗначениеЗаполнено(Ини) И Ини.свойство("мФайл") И Ини.мФайл.свойство("АктРасхождение") Тогда
		РеквизитДатаВх = ?(Ини.Свойство("Документ_ДатаВх"), Ини.Документ_ДатаВх.Значение, ?(Ини.Свойство("Документ_Дата"), Ини.Документ_Дата.Значение, ""));
		РеквизитНомерВх = ?(Ини.Свойство("Документ_НомерВх"), Ини.Документ_НомерВх.Значение, ?(Ини.Свойство("Документ_Номер"), Ини.Документ_Номер.Значение, ""));
		Если ЗначениеЗаполнено(РеквизитДатаВх) ИЛИ ЗначениеЗаполнено(РеквизитНомерВх) Тогда
			ЗаписейНаСтранице = 2;
			ФильтрСтраница = 1;
			Контекст=новый структура("ини, Документ",Ини,Документ);
			
			Если Ини.Свойство("Контрагент_Роль") Тогда
				РольКонтрагента = СтрЗаменить(Ини.Контрагент_Роль.Значение,"'","");
				Если ЗначениеЗаполнено(РольКонтрагента) И Ини.мСторона.Свойство(РольКонтрагента) Тогда
					ФильтрКонтрагент = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(Ини.мСторона[РольКонтрагента].Сторона.Значение,Контекст);
				КонецЕсли;
			КонецЕсли;
			
			РольОрганизации = ""; 
			Если Ини.Свойство("Организация_Роль") Тогда
				РольОрганизации = СтрЗаменить(Ини.Организация_Роль.Значение,"'","");
			ИначеЕсли Ини.Свойство("НашаОрганизация_Роль") Тогда
				РольОрганизации = СтрЗаменить(Ини.НашаОрганизация_Роль.Значение,"'","");
			КонецЕсли;
			Если ЗначениеЗаполнено(РольОрганизации) И Ини.мСторона.Свойство(РольОрганизации) Тогда
				ФильтрОрганизация = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(Ини.мСторона[РольОрганизации].Сторона.Значение,Контекст);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитДатаВх) Тогда
				ФильтрДатаНач = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(РеквизитДатаВх,Контекст);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитНомерВх) Тогда
				ФильтрМаска = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(РеквизитНомерВх,Контекст);
			КонецЕсли;
				
			БазоваяИнтеграция = ?(Кэш.ИнтеграцияИмя = "ExtSDK2", Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK, Кэш.Интеграция);
	
			filter = БазоваяИнтеграция.ПолучитьФильтр(ГлавноеОкно, Новый Структура("Тип", "ДокОтгрВх"));
			ПакетыСБИС = Кэш.Интеграция.сбисПолучитьСписокДокументовПоФильтру(Кэш, filter, Кэш.ГлавноеОкно); 
			Если ЗначениеЗаполнено(ПакетыСБИС) И ПакетыСБИС.Таблица_РеестрДокументов.количество()=1 Тогда
				ПакетСБИС = ПакетыСБИС.Таблица_РеестрДокументов[0];
				фрм = НайтиФункциюСеансаОбработки("ЗаписатьПараметрыДокументаСБИС", Кэш.ФормаРаботыСоСтатусами);
						СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения", ПакетСБИС.ИдСБИС,"");
				фрм.ЗаписатьПараметрыДокументаСБИС(СтруктураСвойств, Документ, Кэш.Ини.Конфигурация, ГлавноеОкно.КаталогНастроек);
				
				ПолныйСоставПакета = Кэш.Интеграция.ПрочитатьДокумент(Кэш, ПакетСБИС.ИдСБИС);
				
				фрм = НайтиФункциюСеансаОбработки("СформироватьРасхождениеНажатие","ФормаПросмотрДокумента");
				фрм.МестныйКэш = Кэш;
				фрм.СоставПакета = Кэш.ОбщиеФункции.РазобратьСтруктуруДокументаСбис(ПолныйСоставПакета, Кэш);
				фрм.ЗаполнитьТаблицуДокументов(фрм.СоставПакета);
				фрм.СформироватьРасхождениеНажатие(неопределено);
				Если фрм.СоставПакета.Вложение.количество()>0 Тогда	
					Вложение = фрм.СоставПакета.Вложение[фрм.СоставПакета.Вложение.количество()-1];
					Если Вложение.Тип = "АктРасхождение" Тогда
						Кэш.Интеграция.СБИСЗаписатьВложения(Кэш, фрм.СоставПакета, Вложение);
						Сообщить("Обновлен документ "+фрм.СоставПакета.Название);
						ГлавноеОкно.ОткрытьДокументОнлайнПоПакету(фрм.СоставПакета, Кэш);
						ПолучилосьАвтоматически= Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ПолучилосьАвтоматически Тогда    // открыть форму для ручной работы и инструкцию
		ЗапуститьПриложение("https://sbis.ru/help/integration/1C_set/modul/vsd?tb=tab2");
		ГлавноеОкно.ПерейтиВРаздел("АккордеонДокОтгрВх11");
		Кэш.ГлавноеОкно.Открыть();
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Расхождения

// Функция - Получить расхождения по выбранным документам
//
// Параметры:
//  ПараметрыСравненияВходящие	 - 	Структура
//		МодульПодготовкиРасхождений - Форма	 			- форма раздела для подготовки данных документов к сравнению
//		СписокСопоставлений			- СписокЗначений	- Список структур документов к сравнению
//			КлючДетализации		- Строка		- ключ детализации для поиска итога в результате действия
//			Документ1С			- Ссылка		- сравниваемый документ 1С
//			ДокументСБИСНазвание- Строка		- название вложения СБИС
//			ИдВложения			- Строка, УИД	- Ид вложения СБИС
//			СоставПакета        - Структура		- документ СБИС
//  ДопПараметры				 - Структура 
// 
// Возвращаемое значение:
//  РезультатДействия - Структура, объект РезультатДействия сравнения
//
&НаКлиенте
Функция СравнитьВыбранныеДокументы(ПараметрыСравненияВходящие, ДопПараметры) Экспорт
	
	Перем РеестрДляСтатистики;
	
	РезультатДействия			= НовыйРезультатДействия(Новый Структура("Тип", "ПроверкаРасхождений"), Новый Структура);
	МодульПодготовкиРасхождений	= ПараметрыСравненияВходящие.МодульПодготовкиРасхождений;
	СбисСчётчикСтрок			= 0;
	СбисВсегоСтрок				= ПараметрыСравненияВходящие.СписокСопоставлений.Количество();
	ПараметрыПроверкиРасхождений= Новый Структура("РезультатДействия", РезультатДействия);
	Если ДопПараметры.Свойство("ОбработчикДельты") Тогда
		ПараметрыПроверкиРасхождений.Вставить("ОбработчикДельты", ДопПараметры.ОбработчикДельты);
	КонецЕсли;
	
	ПрокидыватьДанныеДокументов = ДопПараметры.Свойство("ДетализацияСДаннымиДокументов") И ДопПараметры.ДетализацияСДаннымиДокументов;
	
	Для Каждого ЭлементСпискаСопоставления Из ПараметрыСравненияВходящие.СписокСопоставлений Цикл
		СтрокаСопоставления = ЭлементСпискаСопоставления.Значение;
		
		ГлавноеОкно.СбисПоказатьСостояние("Формирование расхождения", , Мин(100, Окр(СбисСчётчикСтрок * 100 / СбисВсегоСтрок)));
		Попытка
			СоответствиеДокументов = МодульПодготовкиРасхождений.ПодготовитьСтруктуруДокументаДляРасхождений(СтрокаСопоставления, ГлавноеОкно.Кэш);
			РезультатДействия_ОбновитьВремя(РезультатДействия, "Подготовка");
		Исключение
			СбисИсключение = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.СравнитьВыбранныеДокументы");
			ПараметрыРезультата = Новый Структура("Тип, КлючГруппировки", "НеВыполнено", СтрокаСопоставления.КлючДетализации);
			РезультатДействия_ОбработатьРезультат(РезультатДействия, СбисИсключение, ПараметрыРезультата);
			Продолжить;
		КонецПопытки;	

		Попытка
			СтрокаСоответствия = СоответствиеДокументов.Получить(СтрокаСопоставления.КлючДетализации);
			Если СтрокаСоответствия = Неопределено Тогда
				ВызватьСбисИсключение(735, "Не удалось собрать данные для сравнения", "СоответствиеДокументов.Получить",,,,);
			КонецЕсли;
			Если ПрокидыватьДанныеДокументов Тогда
				РезультатДействия.Вставить("ДанныеДокумента1С",СтрокаСоответствия.СтруктураДокументаПоДанным1С);
			КонецЕсли;	   
   
			РезультатСравнения	= ВыполнитьПроверкуРасхожденийПоСтрокеСоответствия(Новый Структура("Ключ, Значение", СтрокаСопоставления.КлючДетализации, СтрокаСоответствия), ПараметрыПроверкиРасхождений);
   
			Если ПрокидыватьДанныеДокументов Тогда
				РезультатСравнения.Значение.Вставить("ДанныеДокументов",СтрокаСоответствия);
			КонецЕсли;																 
   
			ПараметрыРезультата = Новый Структура("Тип, КлючГруппировки", "Выполнено", СтрокаСопоставления.КлючДетализации);
			РезультатСравнения.Значение.Вставить("ДанныеСравнение",СтрокаСоответствия);																																	 
			РезультатДействия_ОбработатьРезультат(РезультатДействия, РезультатСравнения.Значение, ПараметрыРезультата);
   
		Исключение
			СбисИсключение = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.СравнитьВыбранныеДокументы");
			ПараметрыРезультата = Новый Структура("Тип, КлючГруппировки", "Ошибка", СтрокаСопоставления.КлючДетализации);
			РезультатДействия_ОбработатьРезультат(РезультатДействия, СбисИсключение, ПараметрыРезультата);
		КонецПопытки;	
	КонецЦикла;
	
	Если ДопПараметры.Свойство("Владелец") Тогда
		РеестрДляСтатистики = ДопПараметры.Владелец.СбисИнформацияОМодуле().Наименование;
	Иначе
		РеестрДляСтатистики = "Неизвестно";
	КонецЕсли;
	
	ПараметрыСтатистики = Новый Структура("Действие, Сообщения", "ПрикладнаяСтатистика", "Сравнение документов." + РеестрДляСтатистики);

	Попытка
		
		СбисСтатистика_СформироватьИЗаписать(ПараметрыСтатистики);
		
	Исключение
		
		СообщитьСбисИсключение(ИнформацияОбОшибке(), "ПолучитьПротоколПроверкиВложения");
		
	КонецПопытки;  				 
 
	ГлавноеОкно.СбисСпрятатьСостояние();
 
	Возврат	РезультатДействия;	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкуРасхожденийПоСоответствию (ОписаниеПроверкиРасхождения, ДопПараметры) Экспорт
	Для Каждого СтрокаСоответствия Из ОписаниеПроверкиРасхождения.Соответствие Цикл
		Попытка
			РезультатСравнения = ВыполнитьПроверкуРасхожденийПоСтрокеСоответствия(СтрокаСоответствия, ДопПараметры);
			ПараметрыРезультата = Новый Структура("Тип, КлючГруппировки", "Выполнено", СтрокаСоответствия.Ключ);
			РезультатДействия_ОбработатьРезультат(ДопПараметры.РезультатДействия, РезультатСравнения.Значение, ПараметрыРезультата);
		Исключение
			ПараметрыРезультата = Новый Структура("Тип, КлючГруппировки", "Ошибка", СтрокаСоответствия.Ключ);
			РезультатДействия_ОбработатьРезультат(ДопПараметры.РезультатДействия, ИнформацияОбОшибке(), ПараметрыРезультата);
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры	

//весь результат помещается в переданный объект ДопПараметры.РезультатДействия
&НаКлиенте
Функция ВыполнитьПроверкуРасхожденийПоСтрокеСоответствия (ОписаниеПроверкиРасхождения, ДопПараметры) Экспорт

	Перем ОбработчикДельтыОбъектов, СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С, ИнформацияОДокументах, Ини;
	РезультатДействия	= ДопПараметры.РезультатДействия;
	
	Если		Не ОписаниеПроверкиРасхождения.Значение.Свойство("СтруктураДокументаПоДаннымСбис",	СтруктураДокументаПоДаннымСбис) Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ВыполнитьПроверкуРасхожденийПоСтрокеСоответствия",,,"Отсутствует описание структуры документа по данным СБИС");
	ИначеЕсли	Не ОписаниеПроверкиРасхождения.Значение.Свойство("СтруктураДокументаПоДанным1С",	СтруктураДокументаПоДанным1С) Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ВыполнитьПроверкуРасхожденийПоСтрокеСоответствия",,,"Отсутствует описание структуры документа по данным 1С");
	ИначеЕсли	Не ОписаниеПроверкиРасхождения.Значение.Свойство("ИнформацияОДокументах",			ИнформацияОДокументах) Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ВыполнитьПроверкуРасхожденийПоСтрокеСоответствия",,,"Отсутствует описание структуры настройки расхождения");
	КонецЕсли;
	
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьКартуСравнения", "Файл_" + ИнформацияОДокументах.Формат + "_" + СтрЗаменить(ИнформацияОДокументах.Версия, ".", "_"), "Файл_Шаблон");
	Если фрм = Ложь Тогда
		ВызватьСбисИсключение(, "МодульОбъектаКлиент.ВыполнитьПроверкуРасхожденийПоСтрокеСоответствия",,,"Отсутствует описание карты расхождения");
	КонецЕсли;
	Карта				= фрм.ПолучитьКартуСравнения();
	НовДопПараметры		= Новый Структура("Карта", Карта);
	РасхожденияОбъектов	= ПолучитьРасхождениеОбъектов(СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С, НовДопПараметры);
	
	Если Не ДопПараметры.Свойство("ОбработчикДельты", ОбработчикДельтыОбъектов) Тогда
		Возврат РасхожденияОбъектов;
	КонецЕсли;
	
	ПараметрыДельты = Новый Структура("ОписаниеПроверки, Дельта, Результат", ОписаниеПроверкиРасхождения, РасхожденияОбъектов);
	ВыполнитьСбисОписаниеОповещения(ПараметрыДельты, ОбработчикДельтыОбъектов);
	Возврат ПараметрыДельты.Результат;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьСтруктуруДокументаСбисДляРасхождений(СтрокаСпискаДокументов) Экспорт
	
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("НайтиДокументы1СПоПакетуСБИС",ГлавноеОкно.Кэш.ФормаРаботыСоСтатусами,"");
	МассивПакетов = Новый Массив;
	ПолныйСоставПакета = Новый Структура;
	
	Для каждого Строка из СтрокаСпискаДокументов.СоставПакета Цикл		
		Документ = Строка.Значение;
		ИдентификаторПакета = Строка.Значение.Идентификатор;
		//+tda//Если интеграция через каталог, передаём не идентификатор, а сам пакет
		Если ГлобальныйКэш.Парам.СпособОбмена = 1 Тогда
			ИдентификаторПакета = Строка.Значение;
		КонецЕсли;
		//-tda//
		ОшибкаЧтения = Ложь;
		ПолныйСоставПакета = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ПрочитатьДокумент(ГлавноеОкно.Кэш, ИдентификаторПакета,,ОшибкаЧтения);
		Если ОшибкаЧтения Тогда
			Продолжить;
		КонецЕсли;
		МассивСлужебных = Новый Массив;
		Если ПолныйСоставПакета.Свойство("Вложение") Тогда
			фрм.НайтиДокументы1СПоПакетуСБИС(ПолныйСоставПакета, ГлавноеОкно.Кэш.Ини, ГлавноеОкно.КаталогНастроек, МассивСлужебных);
			// Удалим служебные вложения
			счУдаленных = 0;
			Для Каждого Элемент Из МассивСлужебных Цикл
				ПолныйСоставПакета.Вложение.Удалить(Элемент-счУдаленных);
				счУдаленных = счУдаленных+1;
			КонецЦикла;
			МассивПакетов.Добавить(ПолныйСоставПакета);
		ИначеЕсли	ТипЗнч(СтрокаСпискаДокументов) = Тип("Структура") 
			И	СтрокаСпискаДокументов.Свойство("ВернутьПустойСоставПакета")
			И	СтрокаСпискаДокументов.ВернутьПустойСоставПакета Тогда
			МассивПакетов.Добавить(ПолныйСоставПакета);
		Иначе
			ВызватьСбисИсключение(, "МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаСбисДляРасхождений", 726, ,"В пакете " + ПолныйСоставПакета.Название + " отсутствуют вложения.");
		КонецЕсли;
		Возврат МассивПакетов;
	КонецЦикла;	
	Возврат МассивПакетов;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьСтруктуруДокумента1СДляРасхождений(СтрокаСпискаДокументов) Экспорт
	МассивВложений = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.ПодготовитьСтруктуруДокумента1С(СтрокаСпискаДокументов, ГлавноеОкно.Кэш);
	Возврат МассивВложений;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДокумента1СПоПакетуСбис(ОписаниеПроверки, ДопПараметры) Экспорт

	Кэш							= ГлавноеОкно.Кэш;
	Вложение					= ОписаниеПроверки.Вложение;
	СоставПакета				= ОписаниеПроверки.СоставПакета;
	ДанныеДокумента				= Новый Структура();
	СоответствиеДокументДанные	= Новый Соответствие;	

	Если ОписаниеПроверки.Свойство("Документ1С") Тогда
		ПодготовитьСоответствиеРасхожденияДокумент1С_Вложение(Вложение, ОписаниеПроверки.Документ1С, СоответствиеДокументДанные)
	Иначе
		//Если документа нет, то проверить на вложении
		Для Каждого Документ1С Из Вложение.Документы1С Цикл
			ПодготовитьСоответствиеРасхожденияДокумент1С_Вложение(Вложение, ОписаниеПроверки.Документ1ССсылка, СоответствиеДокументДанные)
		КонецЦикла;
	КонецЕсли;
	Если Не СоответствиеДокументДанные.Количество() Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение("Не найден файл для формирования расхождения " + Вложение.Название, "МодульОбъектаКлиент.ПолучитьСтруктуруДокумента1СПоПакетуСбис");
	КонецЕсли;
	НовыйСоставПакета = Новый СписокЗначений;
	НовыйСоставПакета.Добавить(ОписаниеПроверки.Документ1С);
	
	Контекст = Новый Структура("МассивПакетов", Новый Массив);
	//Кэш.КэшЗначенийИни.ТекущийПакет.Вставить("СоответствиеДокументДанные", СоответствиеДокументДанные);
	
	Кэш.ОбщиеФункции.ПолучитьДанныеДокументов1С(СоответствиеДокументДанные, Кэш.КэшЗначенийИни, НовыйСоставПакета, Кэш.Парам);
	Если	Не Кэш.ОбщиеФункции.ОбработатьДанныеДокументов1С(Кэш, Контекст, НовыйСоставПакета, СоответствиеДокументДанные)
		Или	Не ЗначениеЗаполнено(Контекст.МассивПакетов) Тогда
		ВызватьСбисИсключение(745, "МодульОбъектаКлиент.ПолучитьСтруктуруДокумента1СПоПакетуСбис",,, "Документ " + НовыйСоставПакета[0].Значение + " не обработан");
	КонецЕсли;  
                 
	ДанныеРезультат = Контекст.МассивПакетов[0];
	Если	Не ДанныеРезультат.Количество()
		Или Не ЗначениеЗаполнено(ДанныеРезультат)
		Или	Не ДанныеРезультат.Свойство("Вложение")
		Или	Не ДанныеРезультат.Вложение.Количество() Тогда;                       
		ВызватьСбисИсключение(745, "МодульОбъектаКлиент.ПолучитьСтруктуруДокумента1СПоПакетуСбис",,, "Не удалось сформировать " + Вложение.Тип + " от " + НовыйСоставПакета[0].Значение);
	КонецЕсли;
	
	Возврат ДанныеРезультат.Вложение[0].СтруктураДокумента.Файл.Документ;
	
КонецФункции

&НаКлиенте
Процедура ПодготовитьСоответствиеРасхожденияДокумент1С_Вложение(Вложение, Документ1ССсылка, СоответствиеДокументДанные)
	
	ВходящийКонтекстРасчета = Новый Структура;
	мФайлДляРасчета = Найти_мФайлПоВложению(Вложение, Документ1ССсылка);                
	
	Если мФайлДляРасчета <> Неопределено Тогда
		СравнениеНеНужно = ГлавноеОкно.Кэш.Общиефункции.РассчитатьЗначение("СравнениеДокументаНеПоддерживается",мФайлДляРасчета.Значение);
		Если СравнениеНеНужно = Истина Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеИниДокумента = Новый Структура;
	ЗначениеИниДокумента.Вставить("мФайл",											Новый Структура(мФайлДляРасчета.Ключ, мФайлДляРасчета.Значение));
	//ЗначениеИниДокумента.Вставить("Формат2019",										Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
	//ЗначениеИниДокумента.Вставить("ФорматУКД2020",									Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
	//ЗначениеИниДокумента.Вставить("ВходящийКонтекст",								Новый Структура("Значение,РассчитанноеЗначение", "", ВходящийКонтекстРасчета));
	//ЗначениеИниДокумента.Вставить("ИспользоватьШтрихкодыНоменклатурыКонтрагентов",	Новый Структура("Значение,РассчитанноеЗначение", ГлобальныйКэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов, ГлобальныйКэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов));
	
	ИниДокумента = СтрПолучитьСтроку(СтрЗаменить(ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.ПолучитьИмяИСПоСсылке(Документ1ССсылка), ".", Символы.ПС), 2);
	СоответствиеДокументДанные.Вставить(Документ1ССсылка, Новый Структура("ИмяИни, ДокументДанные",ИниДокумента,ЗначениеИниДокумента)); 	

КонецПроцедуры
	
&НаКлиенте
Функция ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС(СтрокаСпискаДокументов) Экспорт
	Перем СтруктураИниФайла, СтруктураФайла, мДокументы, СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С;

	Если СтрокаСпискаДокументов.Документ1С = Неопределено Тогда
		ВызватьСбисИсключение(735, "МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",,,"Отсутствует сопоставленный документ 1С для сравнения");
	КонецЕсли;
	Если СтрокаСпискаДокументов.ИдВложения = Неопределено Тогда
		ВызватьСбисИсключение(735, "МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",,,"Отсутствует сопоставленный документ СБИС для сравнения");
	КонецЕсли;
	СбисМодулиСеансов = ГлобальныйКэш.ТекущийСеанс.Модули;

	МассивРазобранныхПакетов	= Новый Массив();
	СоответствиеРезультат		= Новый Соответствие();
	МассивПакетов				= ПодготовитьСтруктуруДокументаСбисДляРасхождений(СтрокаСпискаДокументов);
	Для Каждого Пакет Из МассивПакетов Цикл
		ПараметрыПодготовитьСтруктуру = Новый Структура("СоставПакета, Документ1С, Вложение", Пакет, СтрокаСпискаДокументов.Документ1С);
		Для Каждого Вложение Из Пакет.Вложение Цикл
			Если	Не Вложение.Свойство("Идентификатор")
				Или	Не Вложение.Идентификатор = СтрокаСпискаДокументов.ИдВложения Тогда
				Продолжить;
			КонецЕсли;
			ОшибкаРазбораВложения = Ложь;
			//разобрать и дозаполнить
			РазобранныеДанныеВложения = СбисМодулиСеансов.ФункцииДокументов.ПолучитьРазобранныеДанныеВложенияСбис(ГлавноеОкно.Кэш, Пакет, Вложение, Новый Структура, ОшибкаРазбораВложения);
			Если ОшибкаРазбораВложения Тогда
				ВызватьСбисИсключение(РазобранныеДанныеВложения, "Раздел_Отправленные_Отправленные.ПодготовитьСтруктуруДокументаДляРасхождений");
			КонецЕсли;
			Для Каждого КлючИЗначениеДанных Из РазобранныеДанныеВложения Цикл
				Вложение.Вставить(КлючИЗначениеДанных.Ключ, КлючИЗначениеДанных.Значение);
			КонецЦикла;
			Если Не	Вложение.Свойство("ИмяИни") Тогда
				ВызватьСбисИсключение(,	"МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",
										735,,"Отсутствует файл настроек для обработки документа СБИС.",
										Новый Структура("ИдВложения,Название", СтрокаСпискаДокументов.ИдВложения, СтрокаСпискаДокументов.ДокументСБИСНазвание));
			ИначеЕсли	Не Вложение.Свойство("СтруктураИниФайла",	СтруктураИниФайла)
					Или	Не Вложение.Свойство("СтруктураФайла",	СтруктураФайла)
					Или	Не ЗначениеЗаполнено(СтруктураИниФайла) Тогда
				ВызватьСбисИсключение(,	"МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",
										735,,"Проверка документа не поддерживается.");
			КонецЕсли;
			ИниВложение = ИниПоПараметрам(Вложение.ИмяИни);
			Если Не ИниВложение.Свойство("мДокумент", мДокументы) Тогда
				ВызватьСбисИсключение(,	"МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",
										735,,"В файле настроек " + Вложение.ИмяИни + " отсутствует описание мДокумент.");
			КонецЕсли;
			
			ПараметрыПодготовитьСтруктуру.Вложение = Вложение;
			СтруктураДокументаПоДаннымСбис	= Вложение.СтруктураФайла.Файл.Документ;
			СтруктураДокументаПоДанным1С	= ПолучитьСтруктуруДокумента1СПоПакетуСбис(ПараметрыПодготовитьСтруктуру, Новый Структура);
				
			ИнформацияОДокументах	= Новый Структура("Формат, Версия", Вложение.ФорматДляЗагрузки, Вложение.ВерсияФорматаДляЗагрузки);
			РезультатДетализации	= Новый Структура("СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С, ИнформацияОДокументах", СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С, ИнформацияОДокументах);
			Если Вложение.Свойство("НастройкаПроверкаРасхождения") Тогда
				РезультатДетализации.Вставить("ИмяИниДельты", Вложение.НастройкаПроверкаРасхождения);
			КонецЕсли;
			
			СоответствиеРезультат.Вставить(СтрокаСпискаДокументов.КлючДетализации, РезультатДетализации);	
			Прервать;
		КонецЦикла;
	КонецЦикла;
	Возврат СоответствиеРезультат;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестра1C(СтрокаСпискаДокументов) Экспорт
	Перем СтруктураИниФайла, СтруктураФайла, мДокументы, СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С;

	Кэш = ГлавноеОкно.Кэш;
	Если СтрокаСпискаДокументов.Документ1С = Неопределено Тогда
		ВызватьСбисИсключение(735, "МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",,,"Отсутствует сопоставленный документ 1С для сравнения");
	КонецЕсли;
	Если СтрокаСпискаДокументов.ИдВложения = Неопределено Тогда
		ВызватьСбисИсключение(735, "МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",,,"Отсутствует сопоставленный документ СБИС для сравнения");
	КонецЕсли;

	СбисМодулиСеансов	= ГлобальныйКэш.ТекущийСеанс.Модули;
	Соответствие		= Новый Соответствие();
	КэшПакетов			= Новый Структура("Успешно, Ошибки", Новый Соответствие(), Новый Соответствие());
	
	МассивПакетов = ГлобальныйКэш.Модули.ФункцииДокументов.ПодготовитьСтруктуруДокумента1С(СтрокаСпискаДокументов, ГлавноеОкно.Кэш);
	
	Для каждого Пакет Из МассивПакетов Цикл
		Для Каждого ВложениеПакета Из Пакет.Вложение Цикл
			СтруктураДокументаПоДанным1С = ВложениеПакета.СтруктураФайла.Файл.Документ;
			
			ИдДок = СбисМодулиСеансов.ФункцииДокументов.ИдентификаторСБИСПоДокументу(Кэш, ВложениеПакета.Документы1С[0].Значение);
			Если Не ЗначениеЗаполнено(ИдДок) Тогда
				ВызватьСбисИсключение(735, "МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",,,"Не удалось получить документ СБИС");
			КонецЕсли;
			
			Если Не КэшПакетов.Ошибки.Получить(ИдДок) = Неопределено Тогда
				ВызватьСбисИсключение(735, "МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",,,"Не удалось получить вложение СБИС");
			КонецЕсли;
			
			ПолныйСоставПакетаСбис = КэшПакетов.Успешно.Получить(ИдДок);
			Если ПолныйСоставПакетаСбис = Неопределено Тогда 
				Попытка
					ПараметрыДокумента = Кэш.Интеграция.СБИС_ПолучитьПараметрыПакетаДляОткрытияОнлайн(ИдДок, Новый Структура("Кэш", Кэш));
					ДопПарам = Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
					СоставПакетаСбис = Кэш.Интеграция.ПрочитатьДокумент(Кэш,ПараметрыДокумента.ИдДокумента, ДопПарам);
					//Для Каждого ВложениеСбис Из СоставПакетаСбис.Вложение Цикл
					//	Если ВложениеСбис.Идентификатор = СтрокаСпискаДокументов.ИдВложения Тогда
					//		Прервать;
					//	КонецЕсли;
					//	ВложениеСбис = 
					//КонецЦикла;
					
					
										
					ПолныйСоставПакетаСбис = СбисМодулиСеансов.ФункцииДокументов.РазобратьСтруктуруДокументаСбис(СоставПакетаСбис, Кэш); //только по вложению сбис	
					
					ВложениеСбис = НайтиВложениеСбисПоВложению1С(Новый Структура("СоставПакетаСбис,Вложение1С",СоставПакетаСбис, ВложениеПакета), Новый Структура("Кэш", Кэш));
					СтруктураДокументаПоДаннымСбис = ВложениеСбис.СтруктураФайла.Файл.Документ; 
					КэшПакетов.Успешно.Вставить(ИдДок, ПолныйСоставПакетаСбис);
				Исключение
					ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",,,"Не удалось получить вложение СБИС");
				КонецПопытки;
			Иначе
				Попытка
					ВложениеСбис = НайтиВложениеСбисПоВложению1С(Новый Структура("СоставПакетаСбис,Вложение1С",СоставПакетаСбис, ВложениеПакета), Новый Структура("Кэш", Кэш));
                	СтруктураДокументаПоДаннымСбис = ВложениеСбис.СтруктураФайла.Файл.Документ;  
				Исключение
					СтруктураДокументаПоДаннымСбис = Неопределено;
				КонецПопытки;
			КонецЕсли;
			
			Если Не СтруктураДокументаПоДанным1С = Неопределено Тогда
				
				ПараметрыПоискаИниРасхождения = Новый Структура("ТипДокумента, ВерсияДокумента, НастройкаПроверкаРасхождения", ВложениеСБИС.ФорматДляЗагрузки, ВложениеСБИС.ВерсияФорматаДляЗагрузки);
				ВложениеСБИС.Свойство("НастройкаПроверкаРасхождения", ПараметрыПоискаИниРасхождения.НастройкаПроверкаРасхождения);
				ИниПоискаРасхождения = НайтиИниПроверкиРасхождения(ПараметрыПоискаИниРасхождения);
				
				ИнформацияОДокументах = Новый Структура("ИниСравненияДокументов, Формат, Версия", Новый Структура("мСравнениеДокументов", ИниПоискаРасхождения), ВложениеСБИС.ФорматДляЗагрузки, ВложениеСБИС.ВерсияФорматаДляЗагрузки);
				Соответствие.Вставить(ВложениеСБИС.Название, Новый Структура("СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С, ИнформацияОДокументах", СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С, ИнформацияОДокументах));
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	Возврат Соответствие;	
КонецФункции

&НаКлиенте
Функция Найти_мФайлПоВложению(Вложение, Документ1С)
	Перем ТекстОшибки, ВерсияФорматаВложения;
	
	МодульФункцийДокументов	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;
	ТипДокумента1С			= СтрПолучитьСтроку(СтрЗаменить(МодульФункцийДокументов.ПолучитьИмяИСПоСсылке(Документ1С), ".", Символы.ПС), 2);
	Если Вложение.Свойство("ВерсияФорматаДляЗагрузки", ВерсияФорматаВложения) Тогда
		ВерсияФорматаВложения = СтрЗаменить(ВерсияФорматаВложения, "_", ".");
	Иначе
		ВерсияФорматаВложения = Вложение.ВерсияФормата;
	КонецЕсли;
	
	Попытка
		НаборПодходящихИни = ИниПоПараметрам(Новый Структура("Тип1С, ТипИни", ТипДокумента1С, "Выгрузка"));
	Исключение
		ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.Найти_мФайлПоВложению");
	КонецПопытки;

	ПараметрыПроверкиИни= Новый Структура("ДокументСсылка, Версия, Тип", Документ1С, ВерсияФорматаВложения, Вложение.Тип);
	ТекстОшибки			= "В файлах настроек для документов {ТипДок} отсутствует описание формирования {Тип}, версии {Версия}";
	
	//Основная ини - одноименная с типом документа.
	Если НаборПодходящихИни.Свойство(ТипДокумента1С) Тогда
		
		ДанныеВыгрузки = ПолучитьИзИниВыгрузкуТипаВложения(НаборПодходящихИни[ТипДокумента1С], ПараметрыПроверкиИни);
		Если Не ДанныеВыгрузки = Неопределено Тогда
			Возврат ДанныеВыгрузки;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого КлючИЗначениеИни Из НаборПодходящихИни Цикл
		
		Если КлючИЗначениеИни.Ключ = ТипДокумента1С Тогда 
			//Одноименная ини уже проверена.
			Продолжить;
		КонецЕсли;
		
		ДанныеВыгрузки = ПолучитьИзИниВыгрузкуТипаВложения(КлючИЗначениеИни.Значение, ПараметрыПроверкиИни);
		Если ДанныеВыгрузки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат ДанныеВыгрузки	
	КонецЦикла;
	Если ТекстОшибки = Неопределено Тогда
		ТекстОшибки = "Не удалось найти файл настроек для {ТипДок}";
	Иначе
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "{Тип}",		ПараметрыПроверкиИни.Тип);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "{Версия}",	ВерсияФорматаВложения);
	КонецЕсли;
	ТекстОшибки = СтрЗаменить(ТекстОшибки, "{ТипДок}",	Строка(ТипЗнч(Документ1С)));
	
	ВызватьСбисИсключение(726, "МодульОбъектаКлиент.Найти_мФайлПоВложению",,,ТекстОшибки);
	
КонецФункции

&НаКлиенте
Функция ПолучитьИзИниВыгрузкуТипаВложения(ДанныеИни, ПараметрыПроверки)

	Если	Не ТипЗнч(ДанныеИни) = Тип("Структура") 
		Или	Не ДанныеИни.Свойство("мФайл") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МодульФункцийДокументов	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;
	Документ1С				= ПараметрыПроверки.ДокументСсылка;
	
	Для Каждого КлючИЗначение Из ДанныеИни.мФайл Цикл
		КонтекстИни				= Новый Структура("Ини, Документ", МодульФункцийДокументов.СбисСкопироватьОбъектНаКлиенте(КлючИЗначение.Значение), Документ1С);
		ВходящийКонтекстРасчета	= Новый Структура;
		ВходящийКонтекстРасчета.Вставить("ИспользоватьНовыйФорматАктаСверки", ГлобальныйКэш.Парам.ИспользоватьНовыйФорматАктаСверки);

		ЕстьШККонтрагентов = ГлобальныйКэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов;
		ЗначениеИниДокумента = КонтекстИни.Ини;
		ЗначениеИниДокумента.Вставить("Формат2016",										Новый Структура("Значение,РассчитанноеЗначение", Истина,			Истина));
		ЗначениеИниДокумента.Вставить("Формат2019",										Новый Структура("Значение,РассчитанноеЗначение", Истина,			Истина));
		ЗначениеИниДокумента.Вставить("ФорматУКД2020",									Новый Структура("Значение,РассчитанноеЗначение", Истина,			Истина));
		ЗначениеИниДокумента.Вставить("ВходящийКонтекст",								Новый Структура("Значение,РассчитанноеЗначение", "",				ВходящийКонтекстРасчета));
		ЗначениеИниДокумента.Вставить("ИспользоватьШтрихкодыНоменклатурыКонтрагентов",	Новый Структура("Значение,РассчитанноеЗначение", ЕстьШККонтрагентов,ЕстьШККонтрагентов));
		
		//Говнокод, но расчёт должен быть на сервере.
		ТипИзИни				= МодульФункцийДокументов.РассчитатьЗначениеНаСервере("Файл_Формат",		КонтекстИни);
		ВерсияФорматаИзИни		= МодульФункцийДокументов.РассчитатьЗначениеНаСервере("Файл_ВерсияФормата",	КонтекстИни);

		//ТипИзИни				= МодульФункцийДокументов.РассчитатьЗначениеНаСервере("Вложение_Тип",				КонтекстИни);
		//ПодтипИзИни				= МодульФункцийДокументов.РассчитатьЗначениеНаСервере("Вложение_ПодТип",			КонтекстИни);
		//ВерсияФорматаИзИни		= МодульФункцийДокументов.РассчитатьЗначениеНаСервере("Вложение_ВерсияФормата",		КонтекстИни);
		
		Если	ПараметрыПроверки.Тип	= ТипИзИни
			//И	ПараметрыПроверкиИни.Подтип	= ПодтипИзИни
			И	ПараметрыПроверки.Версия= ВерсияФорматаИзИни Тогда 
			Результат = Новый Структура("Ключ, Значение", КлючИЗначение.Ключ, ЗначениеИниДокумента);   
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция НайтиВложениеСбисПоВложению1С(ОписаниеПакета, ДопПараметры) Экспорт
	СоставПакетаСбис = ОписаниеПакета.СоставПакетаСбис;
	Вложение1С = ОписаниеПакета.Вложение1С;
	Для Каждого ВложениеСбис Из СоставПакетаСбис.Вложение Цикл
		Если (Не ВложениеСбис.Свойство("Служебный") или ВложениеСбис.Служебный = "Нет")
			И Вложение1С.Тип = ВложениеСбис.Тип
			И Вложение1С.ПодТип = ВложениеСбис.ПодТип
			И Вложение1С.ВерсияФормата = ВложениеСбис.ВерсияФормата
			И Строка(Вложение1С.ПодВерсияФормата) = ВложениеСбис.ПодВерсияФормата Тогда
			Возврат ВложениеСбис;
		КонецЕсли;	
	КонецЦикла;		
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция НайтиИниПроверкиРасхождения(ИнформацияОДокументе, ДопПараметры=Неопределено) Экспорт
	Перем НастройкаПроверкаРасхождения, ТипДокумента, ВерсияДокумента, Результат;
	
	Кэш = ГлавноеОкно.Кэш;
	Если Не (ЗначениеЗаполнено(ИнформацияОДокументе)
		И ТипЗнч(ИнформацияОДокументе) = Тип("Структура")) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИнформацияОДокументе.Свойство("НастройкаПроверкаРасхождения", НастройкаПроверкаРасхождения)
		И ЗначениеЗаполнено(НастройкаПроверкаРасхождения) Тогда
		Возврат ИниПоПараметрам(Новый Структура("Имя", НастройкаПроверкаРасхождения));
	КонецЕсли;
	
	Если ИнформацияОДокументе.Свойство("ТипДокумента", ТипДокумента)
		И ИнформацияОДокументе.Свойство("ВерсияДокумента", ВерсияДокумента)
		И ЗначениеЗаполнено(ТипДокумента)
		И ЗначениеЗаполнено(ВерсияДокумента) Тогда
		
		ТипИни			= "ПроверкаРасхождения";
		ВерсияДокумента	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисЗаменитьНедопустимыеСимволы(ВерсияДокумента);
		ИмяИни = ТипИни + "_"
			 +	ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисЗаменитьНедопустимыеСимволы(ТипДокумента) + "_"
			 +	ВерсияДокумента;
			
		Попытка
			Ини = ИниПоПараметрам(Новый Структура("Имя, ТипИни", ИмяИни, "ПроверкаРасхождения"));
		Исключение
			ИмяИни = ТипИни + "_Шаблон_" + ВерсияДокумента;
			Ини = ИниПоПараметрам(Новый Структура("Имя, ТипИни", ИмяИни, "ПроверкаРасхождения"));
		КонецПопытки;
			
		Если Не Ини = Неопределено Тогда
			Результат = Новый Структура("мСравнениеДокументов");
			ЗаполнитьЗначенияСвойств(Результат, Ини);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;	
КонецФункции

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Расхождения_СравнениеОбъектов

//Первый объект - эталлоный, с ним происходит сравнение 
//Второй объект - сравниваемый объект
//ДопПараметры  - Карта - Структура идентичная описанию первого объекта, с полями для сравнения 
				//Путь - Стек, где находимся по отношению к первому объекту,      
&НаКлиенте   
Функция ПолучитьРасхождениеОбъектов(ПервыйОбъект, ВторойОбъект, ДопПараметры) Экспорт 
	КонтекстСравнения = Новый Структура("Карта, Путь",,Новый Массив);
	
	Если Не ДопПараметры.Свойство("Карта", КонтекстСравнения.Карта) Тогда
		КонтекстСравнения.Карта = ПервыйОбъект;	
	КонецЕсли;

	Возврат	СравнитьОбъекты(ПервыйОбъект, ВторойОбъект, КонтекстСравнения);

КонецФункции      

&НаКлиенте
Функция СравнитьОбъекты(ПервыйОбъект, ВторойОбъект, ТекущийКонтекстСравнения)
	ТекущийТип = ТипЗнч(ПервыйОбъект);
    Результат = Неопределено;
	
	//Если дошли до конца карты, тогда проверка по всем элементам первого объекта
	Если ТекущийКонтекстСравнения.Карта = Неопределено Тогда  
		ТекущийКонтекстСравнения.Карта = ПервыйОбъект;
	КонецЕсли;
	
	Если ТекущийТип <> ТипЗнч(ВторойОбъект) Тогда  
		Результат = ВторойОбъект;
	ИначеЕсли ТекущийТип = Тип("Структура") Тогда 
		Результат = СравнитьСтруктуры(ПервыйОбъект, ВторойОбъект, ТекущийКонтекстСравнения);
	ИначеЕсли ТекущийТип = Тип("Массив") Тогда    
        Результат = СравнитьМассивы(ПервыйОбъект, ВторойОбъект, ТекущийКонтекстСравнения);
	ИначеЕсли Не ПреобразованитьТип(ПервыйОбъект, ТекущийКонтекстСравнения.Карта) = ПреобразованитьТип(ВторойОбъект, ТекущийКонтекстСравнения.Карта) Тогда  //Простые типы
		Результат = ВторойОбъект;
	Иначе
		//ВызватьИсключение("Не удалось сравнить объекты по их типу");
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПреобразованитьТип(ОбъектПреобразования, ЗначениеПоУмолчанию)
	Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("Число") Тогда
		Попытка
			Возврат Число(ОбъектПреобразования);
		Исключение
			Возврат ЗначениеПоУмолчанию;
		КонецПопытки;
	Иначе 
		Возврат ОбъектПреобразования;   
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция СравнитьСтруктуры(ПервыйОбъект, ВторойОбъект, КонтекстСравнения)
	Перем Значение_ПервыйОбъект, Значение_ВторойОбъект;
	
	ТекущийКонтекстСравнения = Новый Структура("Карта, Путь", КонтекстСравнения.Карта, КонтекстСравнения.Путь);
	Результат = Новый Структура;											
	
	Для Каждого КлючИЗначение Из КонтекстСравнения.Карта Цикл
		ТекКлюч = КлючИЗначение.Ключ; 
		ТекущийКонтекстСравнения.Путь.Вставить(0, ТекКлюч);  
		ПервыйЗаполнен = ПервыйОбъект.Свойство(ТекКлюч, Значение_ПервыйОбъект);
		ВторойЗаполнен = ВторойОбъект.Свойство(ТекКлюч, Значение_ВторойОбъект);
		Если ВторойЗаполнен И ПервыйЗаполнен Тогда 
			ТекущийКонтекстСравнения.Карта = КлючИЗначение.Значение; 
			РезультатСравнения = СравнитьОбъекты(Значение_ПервыйОбъект, Значение_ВторойОбъект, ТекущийКонтекстСравнения);
			Если	ЗначениеЗаполнено(РезультатСравнения)
				И (ТипЗнч(РезультатСравнения) = Тип("Массив") 
					Или	ТипЗнч(РезультатСравнения) = Тип("Структура")) Тогда
				
				Результат.Вставить(ТекКлюч, РезультатСравнения);
			ИначеЕсли ЗначениеЗаполнено(РезультатСравнения) Тогда 
				Результат.Вставить(ТекКлюч + "1", Значение_ПервыйОбъект);			
				Результат.Вставить(ТекКлюч + "2", Значение_ВторойОбъект);
			КонецЕсли;				
		Иначе
			Если ПервыйЗаполнен Тогда
				Результат.Вставить(ТекКлюч + "1", Значение_ПервыйОбъект);
			КонецЕсли;
			Если ВторойЗаполнен Тогда
				Результат.Вставить(ТекКлюч + "2", Значение_ВторойОбъект);
			КонецЕсли;
		КонецЕсли; 

		ТекущийКонтекстСравнения.Путь.Удалить(0);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СравнитьМассивы(ПервыйОбъект, ВторойОбъект, КонтекстСравнения)

	ТекущийКонтекстПоиска = Новый Структура("Карта, Путь", КонтекстСравнения.Карта.КлючПоиска, КонтекстСравнения.Путь);
	ТекущийКонтекстСравнения = Новый Структура("Карта, Путь", КонтекстСравнения.Карта.КлючСравнения, КонтекстСравнения.Путь);
												
	//ключ - Строки, значение - строка 
	//НеНайденыРасхождения1 - не нашли во втором массиве, ключ - индекс строки в первом объекте в виде строки без разделителей
	//НеНайденыРасхождения2 - оставшиеся не обработнае строки второго массива, ключ - индекс строки во втором объекте в виде строки без разделителей
	//РасхожденияНайдены - найдены соответствия, есть различия; ключ - индекс строки в первом объекте + во втором объекте в виде двухуровневой строки без разделителей	
	Результат 			= Новый Структура("НеНайденыРасхождения1, НеНайденыРасхождения2, РасхожденияНайдены", Новый Соответствие, Новый Соответствие, Новый Соответствие);
    ИндексыПроверены 	= Новый Массив;
	РасхожденияНайдены	= Ложь;
	
	Для Индекс = 0 По ПервыйОбъект.ВГраница() Цикл
		
		ТекущийКонтекстСравнения.Путь.Вставить(0, "[" + Индекс + "]");  
		ТекущийЭлементСравнения1 = ПервыйОбъект[Индекс];
		Если ЗначениеЗаполнено(ТекущийКонтекстПоиска.Карта) Тогда
			ТекущийЭлементСравнения2 = НайтиПохожийЭлементВМассиве(ТекущийЭлементСравнения1, ВторойОбъект, ИндексыПроверены, ТекущийКонтекстПоиска);
		Иначе
			ТекущийЭлементСравнения2 = ?(Индекс < ВторойОбъект.Количество(), ВторойОбъект[Индекс], Неопределено);
			ИндексыПроверены.Добавить(Индекс);
			ТекущийКонтекстПоиска.Вставить("ИндексЭлементаСравнения2", Индекс);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущийЭлементСравнения2) Тогда
			
			РезультатСравнения = СравнитьОбъекты(ТекущийЭлементСравнения1, ТекущийЭлементСравнения2, ТекущийКонтекстСравнения);
			
			Если ЗначениеЗаполнено(РезультатСравнения) Тогда
				РасхожденияНайдены = Истина;
				Если ТипЗнч(ТекущийКонтекстПоиска.Карта) = Тип("Структура") Тогда
					Для Каждого ЭлемКарты Из ТекущийКонтекстПоиска.Карта Цикл
						РезультатСравнения.Вставить(ЭлемКарты.Ключ, ТекущийЭлементСравнения1[ЭлемКарты.Ключ]);
					КонецЦикла;
				КонецЕсли;
				
				Результат.РасхожденияНайдены.Вставить(Формат(Индекс, "ЧН=0; ЧГ=") + "," + Формат(ТекущийКонтекстПоиска.ИндексЭлементаСравнения2, "ЧН=0; ЧГ="), РезультатСравнения);
			КонецЕсли; 
		
		Иначе
			
			РасхожденияНайдены = Истина;
			Результат.НеНайденыРасхождения1.Вставить(Формат(Индекс, "ЧН=0; ЧГ="), ТекущийЭлементСравнения1);
			
		КонецЕсли;
				
		ТекущийКонтекстСравнения.Путь.Удалить(0); 
		
	КонецЦикла;  
	
	Если ИндексыПроверены.Количество() <> ВторойОбъект.Количество() Тогда
		
		Для Индекс = 0 По ВторойОбъект.ВГраница() Цикл
			
			Если ИндексыПроверены.Найти(Индекс) = Неопределено Тогда      
				РасхожденияНайдены = Истина;
				Результат.НеНайденыРасхождения2.Вставить(Формат(Индекс, "ЧН=0; ЧГ="), ВторойОбъект[Индекс]);
			КонецЕсли;
			
		КонецЦикла;	
			
	КонецЕсли;
	
	Если РасхожденияНайдены Тогда
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции      

//Функция ищет соответствующий элемент в массиве.
&НаКлиенте
Функция		НайтиПохожийЭлементВМассиве(Элемент, Массив, ИндексыПроверены, ТекущийКонтекстСравнения)
	
	Если ТипЗнч(Элемент) = Тип("Структура")	Тогда//Если элемент массива структура
		
		КонтекстДляПоиска = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СкопироватьОбъектСПараметрамиКлиент(ТекущийКонтекстСравнения,,Ложь);
		Для	ИндексМассива = 0 По Массив.ВГраница() Цикл
			
			Если Не	ИндексыПроверены.Найти(ИндексМассива) = Неопределено Тогда
				Продолжить; 
			КонецЕсли; 
			
			ЭлементСравнение = Массив[ИндексМассива];	
			Если Не	ТипЗнч(ЭлементСравнение) = Тип("Структура")	Тогда 
				Продолжить;
			КонецЕсли;                                                                    
			
			РасхождениеЭлементов = СравнитьОбъекты(Элемент, ЭлементСравнение, ТекущийКонтекстСравнения);			
			Если Не	ЗначениеЗаполнено(РасхождениеЭлементов)	Тогда
				ИндексыПроверены.Добавить(ИндексМассива);
				ТекущийКонтекстСравнения.Вставить("ИндексЭлементаСравнения2", ИндексМассива);
				Возврат	ЭлементСравнение;					
			КонецЕсли;
								
		КонецЦикла; 
		
	ИначеЕсли	ТипЗнч(Элемент)	= Тип("Массив")	Тогда//Если элемент массива массив
		
		//Для	ИндексМассива = 0 По Массив.Количество() -1	Цикл 
		//	
		//	Если Не	ИндексыПроверены.Найти(ИндексМассива) = Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;   
		//	
		//	ЭлементСравнение		= Массив[ИндексМассива];
		//	Если Не	ТипЗнч(ЭлементСравнение) = Тип("Массив") Тогда 
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	РасхождениеЭлементов = СравнитьМассивы(Элемент, ЭлементСравнение, ТекущийКонтекстСравнения);
		//	
		//	Если Не	ЗначениеЗаполнено(РасхождениеЭлементов)	Тогда
		//		ИндексыПроверены.Добавить(ИндексМассива);
		//		ТекущийКонтекстСравнения.Вставить("ИндексЭлементаСравнения2", ИндексМассива);
		//		Возврат	ЭлементСравнение;					
		//	КонецЕсли;
		//	
		//КонецЦикла; 
		
		Возврат Неопределено;
		
	Иначе//Обычный элемент массива   
		
		ИндексВМассиве = Массив.Найти(Элемент);
		Если ИндексВМассиве = Неопределено Тогда
			Возврат	Неопределено;
		КонецЕсли; 
		
		Если ИндексыПроверены.Найти(ИндексВМассиве)	= Неопределено Тогда
			
			ИндексыПроверены.Добавить(ИндексВМассиве);
			ТекущийКонтекстСравнения.Вставить("ИндексЭлементаСравнения2", ИндексМассива);
			Возврат	Массив[ИндексВМассиве];
			
		Иначе  
			
			Для	ИндексМассива = 0 По Массив.Количество() -1	Цикл  
				
				Если Не	ИндексыПроверены.Найти(ИндексМассива) = Неопределено Тогда
					Продолжить;
				КонецЕсли;     
				
				ЭлементСравнение = Массив[ИндексМассива];
				
				Если ЭлементСравнение = Элемент	Тогда
					ИндексыПроверены.Добавить(ИндексМассива); 
					ТекущийКонтекстСравнения.Вставить("ИндексЭлементаСравнения2", ИндексМассива);
					Возврат	ЭлементСравнение;					
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат	Неопределено;

КонецФункции
#КонецОбласти

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры

// Функция - сравнивает две версии по разрядно и сообщает, больше ли новая версия старой, или нет	
//
// Параметры:
//  ВерсияДляСравнения	 - Строка	 - формат 1.1.1.1 старая версия, с которой проводится сравнение
//  ВерсияНоваяСравнить	 - Строка	 - формат 1.1.1.1 новая версия для сравнения
// 
// Возвращаемое значение:
//  Булево - Истина если ВерсияНоваяСравнить больше ВерсияДляСравнения
//
&НаКлиенте
Функция НоваяВерсияБольшеКлиент(ВерсияДляСравнения, ВерсияНоваяСравнить) Экспорт

	Возврат СравнитьВерсииБольшеМеньше(ВерсияДляСравнения, ВерсияНоваяСравнить);
	
КонецФункции

// Функция - сравнивает две версии по разрядно и сообщает, больше ли новая версия старой, или нет	
//
// Параметры:
//  ВерсияДляСравнения	 - Строка	 - формат 1.1.1.1 старая версия, с которой проводится сравнение
//  ВерсияНоваяСравнить	 - Строка	 - формат 1.1.1.1 новая версия для сравнения
// 
// Возвращаемое значение:
//  Булево - Истина если ВерсияНоваяСравнить больше ВерсияДляСравнения
//
&НаКлиентеНаСервереБезКонтекста
Функция СравнитьВерсииБольшеМеньше(ВерсияДляСравнения, ВерсияНоваяСравнить) 
	
	Если		Не ЗначениеЗаполнено(ВерсияДляСравнения) Тогда
		Возврат Истина;
	ИначеЕсли	Не ЗначениеЗаполнено(ВерсияНоваяСравнить) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Версия1Разделить	= СтрЗаменить(ВерсияДляСравнения, ".", Символы.ПС);
	Версия2Разделить	= СтрЗаменить(ВерсияНоваяСравнить, ".", Символы.ПС);
	сЧислоРазрядов		= Макс(СтрЧислоСтрок(Версия1Разделить), СтрЧислоСтрок(Версия2Разделить));
	ОписаниеЧисло		= Новый ОписаниеТипов("Число");
	Для Индекс = 1 По сЧислоРазрядов Цикл
		Если СтрЧислоСтрок(Версия1Разделить) >= Индекс Тогда
			Число1Сравнить = ОписаниеЧисло.ПривестиЗначение(СтрПолучитьСтроку(Версия1Разделить, Индекс));
		Иначе
			Число1Сравнить = 0;
		КонецЕсли;
		
		Если СтрЧислоСтрок(Версия2Разделить) >= Индекс Тогда
			Число2Сравнить = ОписаниеЧисло.ПривестиЗначение(СтрПолучитьСтроку(Версия2Разделить, Индекс));
		Иначе
			Число2Сравнить = 0;
		КонецЕсли;
		
		Если		Число1Сравнить = Число2Сравнить		Тогда
			Продолжить;
		ИначеЕсли	Число2Сравнить > Число1Сравнить		Тогда
			Возврат Истина;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Процедура СбисОткрытьДокументы(ОписаниеДокументовОткрыть, ДопПараметры=Неопределено) Экспорт
    Перем ДокументыОткрыть;
	
	Если ОписаниеДокументовОткрыть.Свойство("СписокСсылок", ДокументыОткрыть) Тогда	
		Для Каждого Документ1С Из ДокументыОткрыть Цикл
			СбисОткрытьКарточку1С(Документ1С.Значение);
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СбисОткрытьКарточку1С(КарточкаСсылка, ДопПараметры=Неопределено)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		ОткрытьЗначение(КарточкаСсылка);
		
	#Иначе
		
		ПоказатьЗначение(, КарточкаСсылка);
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ЗапуститьМассовуюОтправкуДокументов(МассивПакетов, ДопПараметры) Экспорт
    Перем ОбработчикРезультатОтправки;
	
	ИспользоватьНовуюОтправку = ПолучитьЗначениеПараметраСбис("ИспользоватьНовуюОтправку") 
							Или (ДопПараметры.Свойство("ИспользоватьНовуюОтправку") И ДопПараметры.ИспользоватьНовуюОтправку);
	Если ИспользоватьНовуюОтправку Тогда	
		ГлавноеОкно.Кэш.СписокНоменклатуры.Очистить();
		
		Если Не ДопПараметры.Свойство("ОбработчикРезультата", ОбработчикРезультатОтправки) Тогда
			ОбработчикРезультатОтправки	= НовыйСбисОписаниеОповещения("ЗапуститьМассовуюОтправкуДокументов_Завершение", МодульОбъектаКлиент());
		КонецЕсли;
		
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("ДанныеКОтправке",		Новый Структура("СписокПакетов", МассивПакетов));
		ПараметрыОтправки.Вставить("ОбработчикРезультата",	ОбработчикРезультатОтправки);
		ПараметрыОтправки.Вставить("ВерсияОтправки",		2);
		Если ДопПараметры.Свойство("МодульПодготовки") Тогда
			ПараметрыОтправки.Вставить("МодульПодготовки",	ДопПараметры.МодульПодготовки);
		КонецЕсли;
		
		РезультатОтправки = НовыйРезультатОтправки(ПараметрыОтправки);
		ГлавноеОкно.Кэш.Вставить("РезультатОтправки", РезультатОтправки);
		
		РезультатОтправки_МассоваяОтправка(РезультатОтправки);
	Иначе
		
		ДопПараметры.Вставить("ВерсияОтправки", 1);
		КлассОтправки = НовыйРезультатОтправки(ДопПараметры);
		ГлавноеОкно.Кэш.Вставить("РезультатОтправки", КлассОтправки);
		
		ФормыПоискаОтправки = Новый Массив;
		ФормыПоискаОтправки.Добавить("Документ_" + ДопПараметры.ИмяРеестра);
		ФормыПоискаОтправки.Добавить("Документ_Шаблон");
		фрм = НайтиФункциюСеансаОбработки("ОтправитьДокументы", ФормыПоискаОтправки);
		фрм.ОтправитьДокументы(ГлавноеОкно.Кэш, МассивПакетов);
		
	КонецЕсли;
	
КонецФункции

// Процедура - завершение отправки и обработка результата
//
// Параметры:
//  РезультатОтправки	 - Структура РезультатОтправки в старом формате
//  ДопПараметры		 - 	 - 
//
&НаКлиенте
Процедура ЗапуститьМассовуюОтправкуДокументов_Завершение(РезультатОтправки, ДопПараметры=Неопределено) Экспорт
	
	Кэш = ГлавноеОкно.Кэш;
	Кэш.Вставить("РезультатОтправки", МодульОбъектаКлиент().РезультатОтправки_Скопировать(РезультатОтправки, Истина));
	
	фрм = НайтиФункциюСеансаОбработки("ПоказатьРезультатОтправки", "ФормаРезультатОтправки");
	фрм.ПоказатьРезультатОтправки(Кэш);
	Если РезультатОтправки.Свойство("ОтправкаИзПересылки") Тогда
		ПолучитьФормуОбработки("ФормаПересылкаПакетов").ПослеОтправки(Кэш);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - запускает редактор файлов настроек
//
// Параметры:
//  ПараметрыЗапускаВходящие - 	 - 
//
&НаКлиенте
Процедура ЗапуститьРедакторИни(ПараметрыЗапускаВходящие=Неопределено) Экспорт
	
	фрм = ГлавноеОкно.СбисПолучитьФорму("ФайлыНастроекОбщее");
	Если фрм = Ложь Тогда
		СбисИсключение = НовыйСбисИсключение(, "ФормаГлавноеОкно.ЗапуститьРедакторИни",,,"Не удалось получить форму редактора файлов настроек");
		СообщитьСбисИсключение(СбисИсключение);
		Возврат;
	КонецЕсли;
    фрм.ЗакрыватьПриЗакрытииВладельца = Истина;
	фрм.Показать(ПараметрыЗапускаВходящие);

КонецПроцедуры

// Процедура - сообщить пользователю
//
// Параметры:
//  ПараметрыСообщения	 - 	Структура - Текст, СтатусСообщения, ЭлементНазначения, ФормаВладелец
//  ДопПараметры		 - 	 - 
//
&НаКлиенте
Процедура СбисСообщить(ПараметрыСообщения, ДопПараметры=Неопределено) Экспорт
	Перем СбисСтатусСообщения, СбисТекстСообщения;
	
	Если	ГлобальныйКэш.ТихийРежим
		И	(		ДопПараметры = Неопределено
			Или	Не	ДопПараметры.Свойство("ТихийРежим")
			Или 	ДопПараметры.ТихийРежим) Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ПараметрыСообщения) = Тип("Строка") Тогда
		СбисТекстСообщения	= ПараметрыСообщения;
	Иначе
		СбисТекстСообщения	= ПараметрыСообщения.Текст;
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		Если    	ТипЗнч(ПараметрыСообщения) = Тип("Строка")
			Или	Не	ПараметрыСообщения.Свойство("СтатусСообщения", СбисСтатусСообщения) Тогда
			СбисСтатусСообщения = СтатусСообщения.Обычное
		КонецЕсли;
		Сообщить(СбисТекстСообщения, СбисСтатусСообщения);
		
	#Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = СбисТекстСообщения;
		
		Если ТипЗнч(ПараметрыСообщения) = Тип("Структура") Тогда
			
			Если ПараметрыСообщения.Свойство("ЭлементНазначения") Тогда
				Сообщение.Поле = ПараметрыСообщения.ЭлементНазначения;
			КонецЕсли;
			Если		ПараметрыСообщения.Свойство("ФормаВладелец")
				И Не	ПараметрыСообщения.ФормаВладелец = Неопределено  Тогда
				Сообщение.ИдентификаторНазначения = ПараметрыСообщения.ФормаВладелец.УникальныйИдентификатор;
			КонецЕсли;
			
		КонецЕсли;	
		
		Сообщение.Сообщить(); 
		
	#КонецЕсли	
КонецПроцедуры

// Процедура - Сбис показать вопрос. Идентично ПоказатьВопрос, с учетом модальности ОФ.
//
// Параметры:
//  СбисОписаниеОповещенияОЗавершении	 - СбисОписаниеОповещения	 - обработчик диалога
//  ТекстВопроса						 - Строка					 - 
//  Кнопки								 - Список					 - 
//  Таймаут								 - Таймаут					 - 
//  КнопкаПоУмочанию					 - Кнопка/элемент списка	 - 
//  Заголовок							 - Строка					 - 
//  КнопкаТаймаута						 - Кнопка/элемент списка	 - 
//
&НаКлиенте
Процедура СбисПоказатьВопрос(СбисОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, Таймаут=0, КнопкаПоУмочанию = Неопределено, Заголовок="", КнопкаТаймаута=Неопределено) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ВыполнитьСбисОписаниеОповещения(Вопрос(ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмочанию, Заголовок, КнопкаТаймаута), СбисОписаниеОповещенияОЗавершении);
	#Иначе
		ПоказатьВопрос(СбисОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмочанию, Заголовок, КнопкаТаймаута);
	#КонецЕсли
КонецПроцедуры

// Процедура - завершает работу обработки
//
&НаКлиенте
Процедура СбисЗавершитьРаботу() Экспорт
	
	Оповестить("ЗакрытьСБИС");

	Попытка
		
		ГлавноеОкно.СбисСохранитьЗначения(Новый Структура("ВыполнитьВручную,Парам", Ложь, ГлобальныйКэш.Парам));
		Если ГлобальныйКэш.СБИС.Авторизован Тогда
			СохранитьМеткиСтатусов(ГлавноеОкно.Кэш);
		КонецЕсли;
		
		Если ГлобальныйКэш.ТекущийСеанс.Свойство("ВременныеФайлы") Тогда 
			ГлобальныйКэш.ТекущийСеанс.ВременныеФайлы.Параметры.ВремяЖизни = 0;
			ГлавноеОкно.Кэш.ОбщиеФункции.СбисОчиститьВременныеФайлы();
			ГлавноеОкно.ОтключитьОбработчикОжидания("СбисОчиститьВременныеФайлы");
		КонецЕсли;
		
		ГлавноеОкно.ОтключитьОбработчикОжидания("ВыполнениеОтложенныхПроцедур");
		ГлавноеОкно.Кэш.Интеграция.Завершить(ГлавноеОкно.Кэш, Новый Структура, Ложь);
		
	Исключение
		
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СбисИсключение = НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисЗавершитьРаботу");  
		СообщитьСбисИсключение(СбисИсключение, Новый Структура("СтатусСообщения", "platform_warning"));
				
	КонецПопытки;
	
	
	ГлавноеОкно.ЗавершитьРаботу = Истина; 
	ГлавноеОкно.Закрыть();
	
КонецПроцедуры

//Процедура показывает пользователю выбор из сформированного списка значений
&НаКлиенте
Процедура СбисВыбратьИзСписка(СписокВыбора, ДопПараметры) Экспорт
	
	Если	ДопПараметры.Свойство("ОтметитьЭлементы")
		И	ДопПараметры.ОтметитьЭлементы Тогда
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			Если СписокВыбора.ОтметитьЭлементы(ДопПараметры.Заголовок) Тогда
				
				ВыполнитьСбисОписаниеОповещения(СписокВыбора, ДопПараметры.Обработчик);
				
			Иначе
				
				ВыполнитьСбисОписаниеОповещения(Неопределено, ДопПараметры.Обработчик);
				
			КонецЕсли;
		#Иначе
			
			СписокВыбора.ПоказатьОтметкуЭлементов(ДопПараметры.Обработчик, ДопПараметры.Заголовок);
			
		#КонецЕсли
		
	Иначе
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВыполнитьСбисОписаниеОповещения(СписокВыбора.ВыбратьЭлемент(ДопПараметры.Заголовок), ДопПараметры.Обработчик);
			
		#Иначе
			
			СписокВыбора.ПоказатьВыборЭлемента(ДопПараметры.Обработчик, ДопПараметры.Заголовок);
			
		#КонецЕсли	
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура выполняет выбранное действие с пакетом (документом СБИС)
//ПараметрыДействия:
// СоставПакета			- Структура,	обрабатываемый пакет (документ)
// Этап					- Структура,	активный этап
// Действие				- Структура,	действие, которое требуется выполнить
// Сертификат			- Структура,	сертификат, с которым выполняется действие
// Комментарий(необяз)	- Строка,		коммментарий этапа
//ДопПараметры: пока не требуется
&НаКлиенте
Процедура ВыполнитьДействиеСДокументомСБИС(ПараметрыДействия, ДопПараметры=Неопределено) Экспорт 
	Перем ИмяФайла, ПакетВложения,СертификатДляПодписания;
	
	Отказ		= Ложь;
	СоставПакета= ПараметрыДействия.СоставПакета;
	Этап		= ПараметрыДействия.Этап;
	Действие	= ПараметрыДействия.Действие;
	Сертификат	= ПараметрыДействия.Сертификат;
	
	ДопПараметрыЗапроса	= Новый Структура("СообщитьОбОшибке, ВернутьОшибку", Ложь, Истина);
	
	// Назначение действие на этап
	action = Новый Структура("Название", Действие.Название);
	Если Не Сертификат = Неопределено Тогда
		action.Вставить("Сертификат", Сертификат);
	КонецЕсли;
	Если Не Сертификат = Неопределено И Не Действие.Свойство("Сертификат") Тогда
		Действие.Вставить("Сертификат", Сертификат);
	КонецЕсли;
	Если ПараметрыДействия.Свойство("Комментарий") И Не ПараметрыДействия.Комментарий = "" Тогда
		action.Вставить("Комментарий", ПараметрыДействия.Комментарий);
	КонецЕсли;	
		
	// Назначение этапа
	stage		= Новый Структура("Название, Идентификатор, Действие", Этап.Название, Этап.Идентификатор, action);
	document_in	= Новый Структура("Этап, Идентификатор", stage, СоставПакета.Идентификатор);
	
	Если СоставПакета.Свойство("Вложение", ПакетВложения) Тогда
		Для Каждого Вложение Из ПакетВложения Цикл
			Если Не (Вложение.Свойство("ТребуетПодписания") И Вложение.ТребуетПодписания) Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				ЗаписатьВложенияСБИС(СоставПакета, Вложение, Новый Структура, Новый Структура("Кэш", ГлавноеОкно.Кэш));
			Исключение
				ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");	
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ДокументПодготовлен",document_in);
	ИмяФункции = ГлавноеОкно.Кэш.ОбщиеФункции.СбисЗаменитьНедопустимыеСимволы("ПодготовитьДействие" + "_" + Действие.Название + "_" +СоставПакета.Тип);
	
	Если  СоставПакета.Свойство("Вложение") Тогда
		фрм = ГлавноеОкно.СбисНайтиФормуФункции(ИмяФункции, 
					"Файл_" + СоставПакета.Тип + "_" + СтрЗаменить(СоставПакета.Вложение[0].ВерсияФормата, ".", "_"), "РаботаСДокументами1С");
	Иначе
		фрм = ГлавноеОкно.СбисНайтиФормуФункции(ИмяФункции, "РаботаСДокументами1С");
	КонецЕсли;
		
	Если не фрм = ложь Тогда
		//фрм.ПодготовитьДействие_Утвердить_ДокОтгрВх(ПараметрыДействия,ГлавноеОкно.Кэш);
		ОбработчикПодготовитьДействие = НовыйСбисОписаниеОповещения(ИмяФункции, фрм);
		ВыполнитьСбисОписаниеОповещения(ПараметрыДействия, ОбработчикПодготовитьДействие);
	КонецЕсли;
	
	// Подготовка этапа
	prepared_document = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СБИС_ПодготовитьДействие(ГлавноеОкно.Кэш, ПараметрыДействия.ДокументПодготовлен, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		ВызватьСбисИсключение(prepared_document, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
	КонецЕсли;
	
	attachmentListPrepared = ?(prepared_document.Этап[0].Свойство("Вложение"),prepared_document.Этап[0].Вложение,Новый Массив);
	attachmentList = Новый Массив;  // вложения, которые будем передавать в ВыполнитьДействие
	
	//UAA формирование титулов
	сбисПараметрыТитулов = Новый Структура("РезультатПодготовки", prepared_document);
	РезультатФормирования = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисСформироватьТитулы(ГлавноеОкно.Кэш, СоставПакета, Действие, СбисПараметрыТитулов, Отказ);
	Если Отказ Тогда
		ВызватьСбисИсключение(РезультатФормирования, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
	КонецЕсли;
	// формирование титулов для зашифрованных вложений
	Шифрование	= сбисПараметрыТитулов.Шифрование;
	Размер		= attachmentListPrepared.Количество();
	// если ключ клиентский, то надо передать все вложения в ExecuteAction для подписания
	ТребуетсяПередачаВложений =	Сертификат <> Неопределено
							И	Сертификат.Ключ.Тип = "Клиентский"
							И	Действие.ТребуетПодписания = "Да";
	
	Если ТребуетсяПередачаВложений Тогда  
		Для сч = 0 По Размер - 1 Цикл
			Запись = attachmentListPrepared[сч];
			attachment = Новый Структура;
			attachment.Вставить("Идентификатор", Запись.Идентификатор);
			file = Новый Структура;
			file.Вставить("Имя", Запись.Файл.Имя);
			file.Вставить("Хеш", Запись.Файл.Хеш);
			file.Вставить( "Ссылка", Запись.Файл.Ссылка );
			Если Запись.Свойство("Зашифрован") И Запись.Зашифрован = "Да" Тогда
				//Для зашифрованных вложений передаем ссылку, чтобы в ExecuteAction получить данные, расшифровать и подписать
				//Для SDK должно отвалиться на стадии подготовки.
				attachment.Вставить( "Зашифрован",  "Да");	
				file.Вставить("Ссылка", Запись.Файл.Ссылка);
			КонецЕсли;
			attachment.Вставить("Файл", file);
			attachmentList.Добавить(attachment);
		КонецЦикла;	
	КонецЕсли;
	
	СтруктураПодготовленныхВложенийПоТипам = Новый Структура;
	Если СоставПакета.Свойство("Вложение", ПакетВложения) Тогда
		// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
		ИдПодтвЗаказа = "";
		НомПодтвЗаказа = 0;
		Для сч = 0 По Размер - 1 Цикл
			Запись = attachmentListPrepared[сч];
			Попытка
				// Формируем структуру подготовленных вложений по типам, чтобы можно было их заменить на сформированные в 1С
				ПолныйТип = СтрЗаменить(СтрЗаменить(Запись.Тип+Запись.Подтип+Запись.ВерсияФормата + Запись.ПодверсияФормата, " ", ""), ".", "_");
				СтруктураПодготовленныхВложенийПоТипам.Вставить(ПолныйТип, Новый Структура("Идентификатор, сч", Запись.Идентификатор, сч));	
			Исключение
			КонецПопытки;
			Если Запись.Свойство("Тип") и Запись.Тип = "ПодтверждениеЗаказа" Тогда
				ИдПодтвЗаказа = Запись.Идентификатор;
				НомПодтвЗаказа = сч;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Вложение Из ПакетВложения Цикл
			Если Вложение.Свойство("Идентификатор") Тогда
				//Если есть ИД, то вложение уже готово
				Продолжить;
			КонецЕсли;
			
			Если Не Вложение.Свойство("ИмяФайла", ИмяФайла) Тогда
				//Генерируем имя файла, если не указано
				ИмяФайла = Вложение.СтруктураФайла.Файл.Имя + "__" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + "_" + Строка(Новый УникальныйИдентификатор()) + ".xml";
			КонецЕсли;
			ДвоичныеДанныеXMLДокумента = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СБИС_СериализоватьСтрокуВBase64(ГлавноеОкно.Кэш, Новый Структура("Строка", Вложение.XMLДокумента), Новый Структура, Отказ);
			Если Отказ Тогда
				ВызватьСбисИсключение(ДвоичныеДанныеXMLДокумента, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
			КонецЕсли;
				
			file		= Новый Структура("Имя, ДвоичныеДанные", ИмяФайла, ДвоичныеДанныеXMLДокумента);
			attachment	= Новый Структура("Файл", file);
			Если Вложение.Название = "Подтверждение заказа" И ЗначениеЗаполнено(ИдПодтвЗаказа) Тогда 
				ИдВложения = ИдПодтвЗаказа; 
				Если ТребуетсяПередачаВложений Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
					attachmentList.Удалить(НомПодтвЗаказа);
				КонецЕсли;
			Иначе 
				Попытка
					// Проверяем нет ли такого же вложения, сформированного онлайном и если есть, то берем его идентификатор, чтобы заменить своим вложением
					ПолныйТип =  СтрЗаменить(СтрЗаменить(Вложение.Тип + Вложение.Подтип+Вложение.ВерсияФормата + ?(Вложение.Свойство("ПодверсияФормата"),Вложение.ПодверсияФормата, ""), " ", ""), ".", "_");
					Если СтруктураПодготовленныхВложенийПоТипам.Свойство(ПолныйТип) Тогда
						ИдВложения = СтруктураПодготовленныхВложенийПоТипам[ПолныйТип].Идентификатор; 
						Если ТребуетсяПередачаВложений Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
							attachmentList.Удалить(СтруктураПодготовленныхВложенийПоТипам[ПолныйТип].сч);
						КонецЕсли;
					Иначе
						ИдВложения = строка(Новый УникальныйИдентификатор());
					КонецЕсли;
				Исключение
					ИдВложения = строка(Новый УникальныйИдентификатор());
				КонецПопытки;
			КонецЕсли;
			attachment.Вставить( "Идентификатор",  ИдВложения);
			Если Шифрование Тогда      // если входящие документы зашифрованы, то и ответ шифруем
				attachment.Вставить( "ТребуетШифрования",  "Да");
				Если Вложение.Свойство("Тип") и ЗначениеЗаполнено(Вложение.Тип) и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
					attachment.Вставить( "Тип",  Вложение.Тип);
					attachment.Вставить( "Подтип",  Вложение.ПодТип);
					attachment.Вставить( "ВерсияФормата",  Вложение.ВерсияФормата);
				КонецЕсли;
				Если Вложение.Свойство("Дата") и ЗначениеЗаполнено(Вложение.Дата) Тогда
					attachment.Вставить( "Дата",  Вложение.Дата);
				КонецЕсли;
				Если Вложение.Свойство("Название") и ЗначениеЗаполнено(Вложение.Название) Тогда
					attachment.Вставить( "Название",  Вложение.Название);
				КонецЕсли;
			КонецЕсли;
			
			attachment.Вставить( "Служебный",  ?(Вложение.Свойство("Служебный"),Вложение.Служебный,"Нет"));
			attachmentList.Добавить( attachment );
		КонецЦикла;
	КонецЕсли;
	
	Если Сертификат <> Неопределено Тогда
		Если ПараметрыДействия.Свойство("СертификатДляПодписания",СертификатДляПодписания) Тогда
			ПараметрыПодписанияВложения = Новый Структура("СертификатДляПодписания, Алгоритм");
			ЗаполнитьЗначенияСвойств(ПараметрыПодписанияВложения, ПараметрыДействия);          
			ПараметрыДействия.Вставить("ПараметрыПодписанияВложения", ПараметрыПодписанияВложения);
		ИначеЕсли Сертификат.Свойство("Доверенность") Тогда
			ПараметрыПодписанияВложения = Новый Структура("СертификатДляПодписания", Сертификат);
			ПараметрыДействия.Вставить("ПараметрыПодписанияВложения", ПараметрыПодписанияВложения);
		КонецЕсли;
		
		Если ПараметрыДействия.Свойство("ПараметрыПодписанияВложения",ПараметрыПодписанияВложения) Тогда
			РезультатПодписания = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.сбисПодписатьВложения(ГлавноеОкно.Кэш, attachmentList, ПараметрыДействия, Отказ);
			Если Отказ Тогда 
				ВызватьСбисИсключение(РезультатПодписания, "ОбщиеФункции.СбисВыполнитьДействие");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	prepared_stage = prepared_document.Этап[0];
	prepared_action = prepared_document.Этап[0].Действие[0];
	prepared_certificates = ?(prepared_action.Свойство("Сертификат"),prepared_action.Сертификат,Неопределено);
	certificates = Новый Массив;
	Если prepared_certificates<>Неопределено Тогда
		КолСерт = prepared_certificates.Количество();
		Для сч=0 По КолСерт-1 Цикл
			certificate = Новый Структура;
			certificate.Вставить( "Отпечаток", prepared_certificates[сч].Отпечаток );
			certificate.Вставить( "Ключ", Новый Структура("Тип", prepared_certificates[сч]["Ключ"]["Тип"]));
			certificates.Добавить( certificate );
		КонецЦикла;
	КонецЕсли;
	action = Новый Структура("Комментарий, Название, Идентификатор", prepared_action.Комментарий, prepared_action.Название, "");
	Если prepared_action.Свойство("Идентификатор") Тогда
		action.Идентификатор = prepared_action.Идентификатор;
	КонецЕсли;
	Если ЗначениеЗаполнено(certificates) Тогда
		action.Вставить("Сертификат", certificates);
	КонецЕсли;
	action.Вставить("ТребуетПодписания", prepared_action.ТребуетПодписания);
	stage = Новый Структура("Действие, Вложение, Идентификатор, Название", action, attachmentList, prepared_stage.Идентификатор, prepared_stage.Название);
	Если Этап.Свойство("Исполнитель") Тогда
		stage.Вставить("Исполнитель", Этап.Исполнитель);
	КонецЕсли;
	
	prepared_redact = prepared_document.Редакция;
	redactions = Новый Массив;
	КолРедакций = prepared_redact.Количество();
	Для сч = 0 По КолРедакций - 1 Цикл
		redaction = Новый Структура;
		redaction.Вставить( "Идентификатор", prepared_redact[сч].Идентификатор );
		redactions.Добавить( redaction );
	КонецЦикла;
	
	document_in = Новый Структура("Идентификатор, Редакция, Этап", prepared_document.Идентификатор, redactions, stage);
	// добавляем на случай шифрования
	Если СоставПакета.Свойство("НашаОрганизация") Тогда
		document_in.Вставить( "НашаОрганизация", СоставПакета.НашаОрганизация );
	КонецЕсли;
	Если СоставПакета.Свойство("Контрагент") Тогда
		document_in.Вставить( "Контрагент", СоставПакета.Контрагент);
	КонецЕсли;
	
	// Завершение этапа
	РезультатДействия = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СБИС_ВыполнитьДействие(ГлавноеОкно.Кэш, document_in, ДопПараметрыЗапроса, Отказ);
	
	Если Отказ Тогда
		ВызватьСбисИсключение(РезультатДействия, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
	КонецЕсли;
	
КонецПроцедуры 

//Процедура выполняет выбранное действие с пакетом (документом СБИС)
//ПараметрыДействия:
// СоставПакета			- Структура,	обрабатываемый пакет (документ)
// Этап					- Структура,	активный этап
// Действие				- Структура,	действие, которое требуется выполнить
// Сертификат			- Структура,	сертификат, с которым выполняется действие
// Комментарий(необяз)	- Строка,		коммментарий этапа
//ДопПараметры: пока не требуется
&НаКлиенте
Процедура НачатьФормироватьРасхождениеСДокументомСБИС(СписокДляРасхождения, ДопПараметры) Экспорт 
	
	ОбработчикПродолжить = НовыйСбисОписаниеОповещения("СформироватьРасхождениеСДокументомСБИС", МодульОбъектаКлиент(), ДопПараметры);
	Если Не ЗначениеЗаполнено(СписокДляРасхождения) Тогда
		
		Возврат;
		
	ИначеЕсли СписокДляРасхождения.Количество() = 1 Тогда
		
		ВыполнитьСбисОписаниеОповещения(СписокДляРасхождения[0], ОбработчикПродолжить);
		
	Иначе
		
		СбисВыбратьИзСписка(СписокДляРасхождения, Новый Структура("Обработчик, Заголовок", ОбработчикПродолжить, "Выберите документ расхождения"));
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура СформироватьРасхождениеСДокументомСБИС(ПараметрыВходящие, ДопПараметры) Экспорт 
	Перем ВложениеРасхождение, ИниВычиткиРасхождения, ОшибкаФормирования, МФайлОтклонение;
	
	Если		ПараметрыВходящие = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли	ТипЗнч(ПараметрыВходящие) = Тип("ЭлементСпискаЗначений") Тогда
		
		ПараметрыРасхождения = ПараметрыВходящие.Значение;
		
	Иначе
		
		ПараметрыРасхождения = ПараметрыВходящие;
		
	КонецЕсли;
	
	МодульФункцийДок	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;
	ДокументОтклонения	= ПараметрыРасхождения.ИмяОтклонения;
	ИмяИниДокумента		= ПараметрыРасхождения.ИмяИниДокумента;
	ИниДокумента		= ИниПоПараметрам(ИмяИниДокумента);
	
	Если Не ПараметрыРасхождения.Свойство("МФайлОтклонение", МФайлОтклонение) Тогда
		
		МФайлОтклонение = СбисРазложитьСтрокуВМассивПодстрокНаСервереБезКонтекста(ДокументОтклонения, "_")[0];
		
	КонецЕсли;
	
	Если	ИниДокумента.Свойство("мФайл", ИниВычиткиРасхождения)
		И	ИниВычиткиРасхождения.Свойство(МФайлОтклонение, ИниВычиткиРасхождения) Тогда
		
		//Если есть совпадение с мФайл по отклонению, то берём только этот мФайл.
		ЗначениеИни = Новый Структура("мФайл", Новый Структура(МФайлОтклонение, ИниВычиткиРасхождения));
		
	Иначе
		
		//Считается вся ини для вычитки документа. Медленно и не рекомендуется
		ЗначениеИни = ИниДокумента;
		
	КонецЕсли;
	
	//Грязный ини
	МассивФормПоиска	= Новый Массив;
	МассивФормПоиска.Добавить("Файл_" + ДокументОтклонения);
	МассивФормПоиска.Добавить("Файл_Шаблон");
		
	МодульКонтекст_Расхождение = НайтиФункциюСеансаОбработки("ПолучитьКонтекст_Расхождение", МассивФормПоиска);
	
	ОписаниеРасхождения = Новый Структура("СоставПакета, Документ1С, ЗначениеИни", ДопПараметры.СоставПакета, ПараметрыРасхождения.Документ1С, ЗначениеИни); 
	КонтекстРасхождение	= МодульКонтекст_Расхождение.ПолучитьКонтекст_Расхождение(ОписаниеРасхождения, Новый Структура("Кэш", ГлавноеОкно.Кэш));

	Если Не КонтекстРасхождение.ДокументДанные.Свойство("мФайл") Тогда
		
		ИсключениеОшибки = НовыйСбисИсключение(726, "МодульОбъектаКлиент.СформироватьРасхождениеСДокументомСБИС",,, "Документ по настройке " + ИмяИниДокумента + ".мФайл." + МФайлОтклонение + " не рассчитан!");
		ВыполнитьСбисОписаниеОповещения(ИсключениеОшибки, ДопПараметры.ОбработчикРезультата);
		Возврат;

	КонецЕсли;

	ДопПараметры.Вставить("КонтекстРасхождение",	КонтекстРасхождение);
	ДопПараметры.Вставить("мФайлОтклонение",		мФайлОтклонение);
	ДопПараметры.Вставить("МассивФормПоиска",		МассивФормПоиска);
	ДопПараметры.Вставить("ПараметрыРасхождения",	ПараметрыРасхождения);
	
	Если ПолучитьЗначениеФичи("РасширенныйФункционалСопоставленияНоменклатуры_ОбратноеСопоставление") Тогда
		Обработчик = НовыйСбисОписаниеОповещения("СформироватьРасхождениеСДокументомСБИС_ПослеСопоставления", МодульОбъектаКлиент(), ДопПараметры);
		
		ФормаОбратногоСопоставления = ПолучитьФормуОбработки("ФормаОбратногоСопоставления");
		ЗаголовокФормы = "Сопоставление номенклатуры по документу " + Строка(ПараметрыРасхождения.Документ1С);
		
		ПараметрыСопоставления = Новый Структура();
		ПараметрыСопоставления.Вставить("ДокументДанные",			КонтекстРасхождение.ДокументДанные);
		ПараметрыСопоставления.Вставить("Контрагент",				КонтекстРасхождение.Контрагент);
		ПараметрыСопоставления.Вставить("МестныйКэш",				ГлавноеОкно.Кэш);
		ПараметрыСопоставления.Вставить("ЗаголовокФормы",			ЗаголовокФормы);
		ПараметрыСопоставления.Вставить("ИдентификаторДокумента",	ДопПараметры.СоставПакета.Идентификатор);
		
		ФормаОбратногоСопоставления.ОписаниеОповещенияОЗакрытии = Обработчик;
		ФормаОбратногоСопоставления.Показать(ПараметрыСопоставления);
	Иначе
		СформироватьРасхождениеСДокументомСБИС_ПослеСопоставления(ПараметрыВходящие, ДопПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьРасхождениеСДокументомСБИС_ПослеСопоставления(РезультатСопоставления, ДопПараметры) Экспорт

	КонтекстРасхождение		= ДопПараметры.КонтекстРасхождение;
	мФайлОтклонение			= ДопПараметры.мФайлОтклонение;
	МассивФормПоиска		= ДопПараметры.МассивФормПоиска;
	ПараметрыРасхождения	= ДопПараметры.ПараметрыРасхождения;
	ОбработчикРезультата	= ДопПараметры.ОбработчикРезультата;
	ИмяИниДокумента			= ПараметрыРасхождения.ИмяИниДокумента;
	
	Если РезультатСопоставления <> Неопределено И РезультатСопоставления.Свойство("ДокументДанные") Тогда
		КонтекстРасхождение.Вставить("ДокументДанные", РезультатСопоставления.ДокументДанные);
	КонецЕсли;
	
	//ПрочитатьДокумент
	МассивФормПоискаПрочитать	= Новый Массив;
	МассивФормПоискаПрочитать.Добавить("Документ_" + ИмяИниДокумента);
	МассивФормПоискаПрочитать.Добавить("Документ_Шаблон");

	МодульКонтекст_Расхождение = НайтиФункциюСеансаОбработки("ПрочитатьДокумент", МассивФормПоискаПрочитать);
	Если	Не МодульКонтекст_Расхождение.ПрочитатьДокумент(ГлавноеОкно.Кэш, КонтекстРасхождение)
		Или	Не КонтекстРасхождение.СоставПакета.Вложение.Количество() Тогда
		
		ИсключениеОшибки = НовыйСбисИсключение(726, "МодульОбъектаКлиент.СформироватьРасхождениеСДокументомСБИС",,, "Документ по настройке " + ИмяИниДокумента + ".мФайл." + МФайлОтклонение + " не сформирован!");
		ВыполнитьСбисОписаниеОповещения(ИсключениеОшибки, ДопПараметры.ОбработчикРезультата);
		Возврат;
		
	КонецЕсли;
	
	СтруктураФайлаНаша				= КонтекстРасхождение.СоставПакета.Вложение[0].СтруктураДокумента;
	МодульСформироватьРасхождение	= НайтиФункциюСеансаОбработки("СформироватьРасхождение", МассивФормПоиска);
	РасхождениеСформировано			= Ложь;
	
	Попытка
		
		ПараметрыСформироватьасхождение	= Новый Структура(
		"СтруктураФайлаКонтрагента,				ВложениеНаше, Пакет", 
		ПараметрыРасхождения.СтруктураФайла,	КонтекстРасхождение.СоставПакета.Вложение[0],  КонтекстРасхождение.СоставПакета);
		ВложениеРасхождение		= МодульСформироватьРасхождение.СформироватьРасхождение(ПараметрыСформироватьасхождение, ГлавноеОкно.Кэш);
		РасхождениеСформировано = Истина;
		
	Исключение
		// ветка для тех, у кого вынесено формирование расхождения во внешние функции
		
		ОшибкаФормирования = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.СформироватьРасхождениеНажатие");
		
	КонецПопытки;
	
	Если Не РасхождениеСформировано Тогда
		
		Попытка
			
			ВложениеРасхождение = МодульСформироватьРасхождение.СформироватьРасхождение(ПараметрыРасхождения.СтруктураФайла, СтруктураФайлаНаша, ГлавноеОкно.Кэш);
			ОшибкаФормирования	= Неопределено;
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Если Не Найти(ИнформацияОбОшибке.Описание, "Слишком много фактических параметров") Тогда
				//Вызов был, перегенерируем ошибку, если свалилось
				ОшибкаФормирования = НовыйСбисИсключение(ИнформацияОбОшибке, "МодульОбъектаКлиент.СформироватьРасхождениеНажатие");
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не ОшибкаФормирования = Неопределено Тогда
		
		ВыполнитьСбисОписаниеОповещения(ОшибкаФормирования, ДопПараметры.ОбработчикРезультата);
		Возврат;

	КонецЕсли;

	ВыполнитьСбисОписаниеОповещения(ВложениеРасхождение, ДопПараметры.ОбработчикРезультата);
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьСписокДляВызоваРасхождений(СтрокиОтмеченные, ДопПараметры) Экспорт
	Перем Документ1ССсылка, УзелДокументОтклонения, ИмяДокумента;
	
	ИниКонфигурации		= ИниПоПараметрам("Конфигурация");
	МодульФункцийДок	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;	//Для рассчитать значение от ини выгрузки
	МодульШаблонДок		= ПолучитьФормуОбработки("Документ_Шаблон");			//Для рассчитать значени от ини загрузки
	РезультатСписок		= Новый СписокЗначений;
	СоставПакета		= ДопПараметры.СоставПакета;
	
	Для Каждого СтрокаТаблДок Из СтрокиОтмеченные Цикл
		
		Если Не СтрокаТаблДок.Документы1С.Количество() Тогда
			Продолжить;
		КонецЕсли;
		ВложениеСБИС		= СтрокаТаблДок.Вложение[0].Значение;
		Документ1ССсылка	= СтрокаТаблДок.Документы1С[0].Значение;
		
		СтруктураФайлаКонтрагента	= ВложениеСБИС_Получить(ВложениеСБИС, "СтруктураФайла");
		СтруктураИниВложения		= ВложениеСБИС_Получить(ВложениеСБИС, "СтруктураИниФайла");

		Если	СтруктураИниВложения		= Неопределено
			Или	СтруктураФайлаКонтрагента	= Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяДокумента	= МодульФункцийДок.ПолучитьРеквизитМетаданныхОбъекта(Документ1ССсылка, "Имя");
		
		Если СтруктураИниВложения.Свойство("ФайлНастроекРасхождения") Тогда
			
			Контекст = Новый Структура("Ини, Документ, Переменные, СтруктураФайла, СоставПакета, ИниКонфигурация");
			Контекст.Ини			= СтруктураИниВложения;
			Контекст.Документ		= Документ1ССсылка;
			Контекст.Переменные		= Новый Структура;
			Контекст.СтруктураФайла	= СтруктураФайлаКонтрагента;
			Контекст.СоставПакета	= СоставПакета;
			Контекст.ИниКонфигурация= ИниКонфигурации;
			
			ИмяИниДокумента = МодульШаблонДок.РассчитатьЗначение("ФайлНастроекРасхождения", Контекст);
			Если Не ИмяИниДокумента = Неопределено Тогда
				
				ИмяДокумента = ИмяИниДокумента;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИниДокумента = ИниПоПараметрам(ИмяДокумента);
		
		Если ИниДокумента = Неопределено Тогда
			
			//Нет файла настроек
			Продолжить;
			
		КонецЕсли;
		
		УзелДокументОтклонения = МодульФункцийДок.РассчитатьЗначение("ДокументОтклонения", ИниДокумента);
		
		Если Не ЗначениеЗаполнено(УзелДокументОтклонения) Тогда
			
			//Не указан файл настройки отклонения
			Продолжить;
			
		КонецЕсли;
		
		МассивОтклонений = СбисРазложитьСтрокуВМассивПодстрокНаСервереБезКонтекста(УзелДокументОтклонения, ",",, Истина);
		
		Для Каждого ДокументОтклонения Из МассивОтклонений Цикл
			
			Если Лев(ДокументОтклонения, 19) = "ПодтверждениеЗаказа" Тогда
				
				//Костыль для подтверждения заказа - формируется без прямого указания ини отклонения
				
			Иначе
				
				ИниОтклонения = ИниПоПараметрам(ДокументОтклонения);
				Если ИниОтклонения = Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыСписок = Новый Структура("Документ1С, Вложение, СтруктураФайла, ИмяИниДокумента, ИмяОтклонения");
			ПараметрыСписок.Документ1С		= Документ1ССсылка;
			ПараметрыСписок.Вложение		= ВложениеСБИС;
			ПараметрыСписок.СтруктураФайла	= СтруктураФайлаКонтрагента;
			ПараметрыСписок.ИмяИниДокумента	= ИмяДокумента;
			ПараметрыСписок.ИмяОтклонения	= ДокументОтклонения;
			
			НазваниеРеестра = МодульШаблонДок.РассчитатьЗначение("Реестр1С_Название", ИниОтклонения);

			Если НазваниеРеестра = Неопределено Тогда
				
				НазваниеРеестра = ДокументОтклонения;
				
			КонецЕсли;
			
			РезультатСписок.Добавить(ПараметрыСписок, НазваниеРеестра);
		КонецЦикла;
		
		Прервать;
		
	КонецЦикла;

	Если Документ1ССсылка = Неопределено Тогда	
		// нет сопоставление с вложениями - проверим сопоставление с пакетом
		МодульДокументаПоИд = НайтиФункциюСеансаОбработки("ДокументыПоИдПакета", ПолучитьЗначениеПараметраСбис("ИмяМодуляРаботыСоСтатусами"));
		
		Если МодульДокументаПоИд = Ложь Тогда
			Возврат РезультатСписок;
		КонецЕсли;
		
		СписокДокументы1С = МодульДокументаПоИд.ДокументыПоИдПакета(ДопПараметры.СоставПакета.Идентификатор, ИниКонфигурации);
		
		Если Не списокДокументы1С.Количество() Тогда
			Возврат РезультатСписок;
		КонецЕсли;	
		
		Для  Каждого Документ1С Из СписокДокументы1С Цикл
			ИмяДокумента = МодульФункцийДок.ПолучитьРеквизитМетаданныхОбъекта(Документ1С, "Имя");
			ИниДокумента = ИниПоПараметрам(ИмяДокумента);
			
			Если ИниДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			УзелДокументОтклонения		= МодульФункцийДок.РассчитатьЗначение("ДокументОтклонения", ИниДокумента);
			Если Не ЗначениеЗаполнено(УзелДокументОтклонения) Тогда
				
				//Не указан файл настройки отклонения
				Продолжить;
				
			КонецЕсли;
			
			МассивОтклонений			= СбисРазложитьСтрокуВМассивПодстрокНаСервереБезКонтекста(УзелДокументОтклонения, ",",, Истина);
			СтруктураФайлаКонтрагента	= ПолучитьФормуОбработки("Файл_Шаблон").НовыйСтруктураФайла(ДопПараметры.СоставПакета);
			ВложениеСБИС				= НовыйВложениеСБИС();
			
			Для Каждого ДокументОтклонения Из МассивОтклонений Цикл
				
				Если Лев(ДокументОтклонения, 19) = "ПодтверждениеЗаказа" Тогда
					
					//Костыль для подтверждения заказа - формируется без прямого указания ини отклонения
					
				Иначе
					
					ИниОтклонения = ИниПоПараметрам(ДокументОтклонения);
					Если ИниОтклонения = Неопределено Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ПараметрыСписок = Новый Структура("Документ1С, Вложение, СтруктураФайла, ИмяИниДокумента, ИмяОтклонения");
				ПараметрыСписок.Документ1С		= Документ1ССсылка;
				ПараметрыСписок.Вложение		= ВложениеСБИС;
				ПараметрыСписок.СтруктураФайла	= СтруктураФайлаКонтрагента;
				ПараметрыСписок.ИмяИниДокумента	= ИмяДокумента;
				ПараметрыСписок.ИмяОтклонения	= ДокументОтклонения;
				
				НазваниеРеестра = МодульШаблонДок.РассчитатьЗначение("Реестр1С_Название", ИниОтклонения);
				
				Если НазваниеРеестра = Неопределено Тогда
					
					НазваниеРеестра = ДокументОтклонения;
					
				КонецЕсли;
				
				РезультатСписок.Добавить(ПараметрыСписок, НазваниеРеестра);
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
	Если Не РезультатСписок.Количество() Тогда
		Если		Не УзелДокументОтклонения = Неопределено Тогда
			
			СообщениеДетализации = "Для формирования расхождения требуется подключить файл настроек: " + УзелДокументОтклонения;
			ВызватьСбисИсключение(610, "МодульОбъектаКлиент.СформироватьСписокДляВызоваРасхождений",,, СообщениеДетализации);
			
		ИначеЕсли	Не ИмяДокумента = Неопределено Тогда
			
			Если ИниДокумента = Неопределено Тогда
				
				СообщениеДетализации = "Для формирования расхождения требуется подключить файл настроек: " + ИмяДокумента;
				ВызватьСбисИсключение(610, "МодульОбъектаКлиент.СформироватьСписокДляВызоваРасхождений",,, СообщениеДетализации);
				
			Иначе
				
				СообщениеДетализации = "Для формирования расхождения требуется задать опцию ""ДокументОтклонения"" в настройке " + ИмяДокумента + ".";
				ВызватьСбисИсключение(735, "МодульОбъектаКлиент.СформироватьСписокДляВызоваРасхождений",,, СообщениеДетализации);
				
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатСписок;
	
КонецФункции

&НаКлиенте 
Функция ПодобратьСертификатДляДействияСДокументомСБИС(ПараметрыДействия, ДопПараметры=Неопределено) Экспорт
	
	Перем ПодходящийСертДок;

	Если ПараметрыДействия.Действие.Свойство("Сертификат") Тогда 
		Для Каждого Сертификат Из ПараметрыДействия.Действие.Сертификат Цикл
			Если СертификатУстановленЛокально(Сертификат) Тогда
				
				ПодходящийСертДок =  Сертификат;
				Прервать;
				
			ИначеЕсли Сертификат.Ключ.Тип = "Отложенный" 
				Или Сертификат.Ключ.Тип = "ОтложенныйСПодтверждением"
				Или Сертификат.Ключ.Тип = "Серверный" 
				И ПодходящийСертДок = Неопределено Тогда // Проверка на отложенный сертификат 
				
				ПодходящийСертДок = Сертификат;
					
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПодходящийСертДок = Неопределено И ПараметрыДействия.СоставПакета.Свойство("НашаОрганизация") Тогда
		Отказ = Ложь;
		ИННОрг = ?(ПараметрыДействия.СоставПакета.НашаОрганизация.Свойство("СвЮЛ"), ПараметрыДействия.СоставПакета.НашаОрганизация.СвЮЛ.ИНН,ПараметрыДействия.СоставПакета.НашаОрганизация.СвФЛ.ИНН); 
		filter = Новый Структура("ИНН", ИННОрг);
		Сертификаты = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ПолучитьСписокСертификатовПоФильтру(ГлавноеОкно.Кэш,filter,Отказ);
		Если Отказ Тогда
			ВызватьСбисИсключение(Сертификаты,"МодульОбъектаКлиент.ПодобратьСертификатДляДействияСДокументомСБИС");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сертификаты) Тогда 
			ПодходящийСертДок = Сертификаты[0].Значение;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ПодходящийСертДок;
	
КонецФункции

// Возвращает запрашиваемую форму при успехе, вызывает СбисИсключение при неудаче, Ложь, если формы нет.
//
// Параметры:
//  ИмяФормы	 - 	 - 
//  ДопПараметры - 	 - 
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция ПолучитьФормуОбработки(СбисИмяФормы, ДопПараметры=Неопределено) Экспорт 
	Перем СбисОбъект1С, СбисПараметрыФормы, СбисВладелецФормы, СбисОписаниеОшибки, ПолноеИмяФормы, КэшироватьПолученную, ПолучитьНовую, Результат;

	Если Не ДопПараметры = Неопределено Тогда
		ДопПараметры.Свойство("КэшироватьФорму",	КэшироватьПолученную);
		ДопПараметры.Свойство("ПолучитьНовую",		ПолучитьНовую);
		ДопПараметры.Свойство("Владелец",			СбисВладелецФормы);
		ДопПараметры.Свойство("ОбработкаОбъект",	СбисОбъект1С);
		ДопПараметры.Свойство("Параметры",			СбисПараметрыФормы);
	КонецЕсли;

	Если КэшироватьПолученную = Неопределено Тогда
		КэшироватьПолученную = Истина;
	КонецЕсли;
	Если ПолучитьНовую = Неопределено Тогда
		ПолучитьНовую = Ложь;
	КонецЕсли;

	Стандартная			= СбисОбъект1С = Неопределено;
	ПолноеИмяФормы		= ПолучитьФормуОбработки_ПолноеИмяФормы(СбисИмяФормы, СбисОбъект1С);
	БезопасноеИмяФормы	= ПолучитьФормуОбработки_БезопасноеИмяФормы(ПолноеИмяФормы, СбисОбъект1С);
	ЭтоГлавноеОкно		= СбисИмяФормы = "ФормаГлавноеОкно" И Стандартная;
	
	Если		ЭтоГлавноеОкно Тогда
		//Если ГО установлено, то отдаём его. Иначе требуется получить.
		Если Не ГлавноеОкно = Неопределено Тогда
		Возврат ГлавноеОкно;
		КонецЕсли;
	ИначеЕсли	СбисВладелецФормы = Неопределено Тогда
		СбисВладелецФормы = ГлавноеОкно;
	КонецЕсли;

	Если		ПолучитьНовую
		Или		ЭтоГлавноеОкно
		Или	Не	ГлобальныйКэш.ТекущийСеанс.Формы.Получены.Свойство(БезопасноеИмяФормы, Результат) Тогда
		
		Если		ЭтоГлавноеОкно		
			Или		Стандартная И ГлобальныйКэш.ТекущийСеанс.Формы.Стандартные.НайтиПоЗначению(СбисИмяФормы)	<> Неопределено
			Или	Не	Стандартная И ГлобальныйКэш.ТекущийСеанс.Формы.Клиентские.НайтиПоЗначению(СбисИмяФормы)		<> Неопределено Тогда
			//Не должно быть исключения при получении формы, это считаем ошибкой. Отсеиваем несуществующие формы по списку форм.
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Если Стандартная Тогда
					СбисОбъект1С = ЭтотОбъект;
				КонецЕсли;
				Попытка
					Результат = СбисОбъект1С.ПолучитьФорму(СбисИмяФормы, СбисВладелецФормы);
				Исключение
					ИнфоОбОшибке = ИнформацияОбОшибке();
					ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисПолучитьФормуОбработки",773);
				КонецПопытки;
				Если Не СбисПараметрыФормы = Неопределено Тогда 
					Попытка
						Результат.Параметры = СбисПараметрыФормы;
					Исключение
						//Нет реквизита под параметры формы.
					КонецПопытки;
				КонецЕсли;
			#Иначе
				Попытка
					Результат = ПолучитьФорму(ПолноеИмяФормы, СбисПараметрыФормы, СбисВладелецФормы);
					Если Результат = Неопределено Тогда
						ВызватьСбисИсключение(773, "МодульОбъектаКлиент.СбисПолучитьФормуОбработки",,,"Неизвестная ошибка события формы " + ПолноеИмяФормы + " ПриСозданииНаСервере.");
					КонецЕсли;
				Исключение
					ИнфоОбОшибке = ИнформацияОбОшибке();
					ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисПолучитьФормуОбработки",773);
				КонецПопытки;
			#КонецЕсли
		Иначе
			//Нет такой формы
			Результат = Ложь;
		КонецЕсли;
	ИначеЕсли Не Результат = Ложь Тогда
		Результат.ВладелецФормы = СбисВладелецФормы;
	КонецЕсли;
	
	Если		ЭтоГлавноеОкно Тогда
		ОбновитьПараметрГлобальногоМодуля("ГлавноеОкно", Результат);
	ИначеЕсли	КэшироватьПолученную Тогда
		ПолучитьФормуОбработки_ЗакэшироватьФорму(Результат, БезопасноеИмяФормы);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьМакетОбработки(ИмяМакета, ДопПараметры) Экспорт 
	
	Возврат МодульОбъектаСервер().ПолучитьМакетОбработкиНаСервере(ИмяМакета, ДопПараметры);
	
КонецФункции

// Определяет, какую форму необходимо использовать при вызове определенной функции.
//  Возможные параметры:
//
// Параметры:
// 	СбисИмяФункции		- Строка		- Имя функции/порцедуры для поиска.
//	СбисОсновныеФормы	- Массив/Строка	- Набор имен вероятных модулей, где может быть функция
//  ДоПараметры			 - Структура	- 
// 		ВспомогательныеФормы	- массив строк с именами форм для поиска функции в порядке их приоритета.
//		КэшироватьФункцию		- определяет необходимость кэширования найденной формы за определяемой функцией. Если не указано, то включено.
//		ПроверятьВФК			- определяет необходимость проверки наличия функции в внешних функциях. Если не указано, то включено.
//		ПроверятьВО				- определяет необходимость проверки наличия функции в основной обработке. Если не указано, то включено.
// 
// Возвращаемое значение:
//  Форма - модуль, где может быть вызвана функция по имени
//
&НаКлиенте
Функция НайтиФункциюСеансаОбработки(СбисИмяФункции, СбисОсновныеФормы, ДопПараметры = Неопределено) Экспорт
	
	Результат = Ложь;
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	//Проверим закэшированное значение
	Если ТипЗнч(СбисОсновныеФормы) = Тип("Массив") Тогда
		Для Каждого СбисИмяФормы Из СбисОсновныеФормы Цикл
			Если Не ЗначениеЗаполнено(СбисИмяФормы) Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				Результат = ПолучитьФормуДляФункцииОбработки(СбисИмяФункции, СбисИмяФормы, ДопПараметры);
			Исключение
				ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.НайтиФункциюСеансаОбработки");
			КонецПопытки;
			Если Не Результат = Ложь Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Попытка
			Результат = ПолучитьФормуДляФункцииОбработки(СбисИмяФункции, СбисОсновныеФормы, ДопПараметры);
		Исключение
			ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.НайтиФункциюСеансаОбработки");
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Функция - Возвращает дату в миллисекундах
// 
// Возвращаемое значение:
//  Число - миллисекунды
//
&НаКлиенте
Функция ПолучитьДатуВМиллисекундах() Экспорт 

	#Если ТолстыйКлиентОбычноеПриложение Тогда
		//Используется только на обычных формах. Для поддержки 8.2 ниже 17 версии
		Возврат (ТекущаяДата() - '0001.01.01') * 1000 - 10800000;
	#Иначе
		Возврат ТекущаяУниверсальнаяДатаВМиллисекундах();
	#КонецЕсли

КонецФункции

// Процедура записывает значение параметра по имени в кэш ГО и Глобальный кэш
//
// Параметры:
//  ИмяПараметраСбис		 - Строка					 - Ключ параметра
//  ЗначениеПараметраСбис	 - Произвольное значение	 - Значение параметра установить
//  ДопПараметры			 - Структура				 - 
//		Кэш			- экземпляр ЛокальныйКэш, куда установить параметр
//		Глобально	- Булево (Истина), определяет необходимость обновить параметр глобально, или изменение касается только класса ЛокальныйКэш
//		Параметры	- Стуркутра, доп. параметры для изменения
//		Адрес		- Строка, путь в кэше для установки параметра
//
&НаКлиенте
Процедура ИзменитьПараметрСбис(ИмяПараметраСбис, ЗначениеПараметраСбис, ДопПараметры = Неопределено) Экспорт
    Перем ЗначениеКэшПрописать, ЭтоГлобальныйПараметр, ДопПараметрыИзменения;
	Если	Не	ДопПараметры = Неопределено Тогда
		ДопПараметры.Свойство("Кэш",		ЗначениеКэшПрописать);
		ДопПараметры.Свойство("Глобально",	ЭтоГлобальныйПараметр);
		ДопПараметры.Свойство("Параметры",	ДопПараметрыИзменения);
	КонецЕсли;
	Если	ЗначениеКэшПрописать = Неопределено Тогда
		ЗначениеКэшПрописать = ГлавноеОкно.Кэш;
	КонецЕсли;
	Если	ЭтоГлобальныйПараметр = Неопределено Тогда
		ЭтоГлобальныйПараметр = Истина;
	КонецЕсли;
	
	Если		ИмяПараметраСбис = "АдресСервера" Тогда 
		
		ИзменитьПараметрСбис_АдресСервера(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметрыИзменения);

	ИначеЕсли	ИмяПараметраСбис = "ИспользоватьГенератор" Тогда
		
		ИзменитьПараметрСбис_ИспользоватьГенератор(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметрыИзменения);
		
	ИначеЕсли	ИмяПараметраСбис = "СпособХраненияНастроек" Тогда
		
		ИзменитьПараметрСбис_СпособХраненияНастроек(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметрыИзменения);

	ИначеЕсли	ИмяПараметраСбис = "СтатусыВГосСистеме" Тогда
		
		ИзменитьПараметрСбис_УстановитьВКэш(ЗначениеКэшПрописать, ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		
		Если		ДопПараметрыИзменения = Неопределено
			Или	Не	ДопПараметрыИзменения.Свойство("МодульОбновить")Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ДопПараметрыИзменения.МодульОбновить.НастроитьКолонки(ЗначениеКэшПрописать);
		
	ИначеЕсли	ИмяПараметраСбис = "СпособСопоставленияНоменклатуры" Тогда
		
		ИзменитьПараметрСбис_СпособСопоставленияНоменклатуры(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметрыИзменения);	
		
	ИначеЕсли Не	ДопПараметры = Неопределено
			И		ДопПараметры.Свойство("Адрес") Тогда
		
		//В прописанное место
		АдресПараметра = ДопПараметры.Адрес + "." + ИмяПараметраСбис;
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, АдресПараметра, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		
	ИначеЕсли	ИмяПараметраСбис = "Интеграция" Тогда
		
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, ИмяПараметраСбис,					ЗначениеПараметраСбис, Ложь);
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ТекущийСеанс.Модули.Интеграция",	ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		//Совместимость старой отправки.
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ФормаОтправки",					ЗначениеПараметраСбис, Ложь);
		
	ИначеЕсли	ИмяПараметраСбис = "ИнтеграцияИмя" Тогда
		
		ИзменитьПараметрСбис_ВКэш			(ЗначениеКэшПрописать, ИмяПараметраСбис,	ЗначениеПараметраСбис, Ложь);
		ИзменитьПараметрСбис_УстановитьВКэш	(ЗначениеКэшПрописать, ИмяПараметраСбис,	ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		
	ИначеЕсли	ИмяПараметраСбис = "ИмяМодуляРаботыСоСтатусами"
			Или	ИмяПараметраСбис = "ФормаРаботыСоСтатусами" Тогда
		
		ИзменитьПараметрСбис_ВКэш			(ЗначениеКэшПрописать, "ФормаРаботыСоСтатусами",		ЗначениеПараметраСбис, Ложь); // Костыль для старой совместимости
		ИзменитьПараметрСбис_УстановитьВКэш	(ЗначениеКэшПрописать, "ИмяМодуляРаботыСоСтатусами",	ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		
	ИначеЕсли	ИмяПараметраСбис = "ИмяМодуляРаботыСНоменклатурой"
			Или	ИмяПараметраСбис = "ФормаРаботыСНоменклатурой" Тогда
		
		ИзменитьПараметрСбис_ВКэш			(ЗначениеКэшПрописать, "ФормаРаботыСНоменклатурой",		ЗначениеПараметраСбис, Ложь); // Костыль для старой совместимости
		ИзменитьПараметрСбис_УстановитьВКэш	(ЗначениеКэшПрописать, "ИмяМодуляРаботыСНоменклатурой", ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);

	Иначе
		
		ИзменитьПараметрСбис_УстановитьВКэш(ЗначениеКэшПрописать, ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПараметрСбис_УстановитьВКэш(ЗначениеКэшПрописать, ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр)
	
	Если		ЗначениеКэшПрописать.Парам.Свойство(ИмяПараметраСбис) Тогда
		
		//В Кэш.Парам
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "Парам." + ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);

	ИначеЕсли   ЗначениеКэшПрописать.СБИС.Свойство(ИмяПараметраСбис) Тогда

		//В Кэш.СБИС
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "СБИС." + ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		
	ИначеЕсли   ЗначениеКэшПрописать.СБИС.ПараметрыИнтеграции.Свойство(ИмяПараметраСбис) Тогда

		//В Кэш.СБИС.ПараметрыИнтеграции
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "СБИС.ПараметрыИнтеграции." + ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);

	Иначе
		
		//В Кэш.ТекущийСеанс.Параметры
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ТекущийСеанс.Параметры." + ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Изменить параметр сбис СпособХраненияНастроек
//
// Параметры:
//  ЗначениеПараметраСбис	 - 	 - 
//  ДопПараметры			 - 	 - 
//
&НаКлиенте
Процедура ИзменитьПараметрСбис_СпособХраненияНастроек(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметры = Неопределено)

	Если ЗначениеПараметраСбис = 1 Тогда
		ИмяМодуляНастроек = "ФайлыНастроекСервер";
	Иначе
		ИмяМодуляНастроек = "ФайлыНастроекКаталог";
	КонецЕсли;
	
	ЗначениеКэшПрописать.ФормаНастроекОбщее.ОчиститьСобранныеНастройки(ЗначениеКэшПрописать);
	
	МодульНастроек = ПолучитьФормуОбработки(ИмяМодуляНастроек);

	ЗначениеКэшПрописать.Вставить("ФормаНастроек", МодульНастроек);

	МодульНастроек.ПараметрыРаботы = Новый Структура;
	МодульНастроек.ИнициализироватьКэшНастроек(ЗначениеКэшПрописать, ДопПараметры);
	
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "Парам.СпособХраненияНастроек", ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
	Если ЭтоГлобальныйПараметр Тогда

		ГлобальныйКэш.ТекущийСеанс.Модули.Настройки = МодульНастроек;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Изменить параметр сбис ИспользоватьГенератор
//
// Параметры:
//  ЗначениеПараметраСбис	 - 	 - 
//  ДопПараметры			 - 	 - 
//
&НаКлиенте
Процедура ИзменитьПараметрСбис_ИспользоватьГенератор(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметры = Неопределено)

	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "Парам.ИспользоватьГенератор", ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
	Если ЭтоГлобальныйПараметр Тогда
		ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.ИспользоватьГенераторПриИзменении(ГлавноеОкно.Кэш, ЗначениеПараметраСбис);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Изменить параметр сбис СпособСопоставленияНоменклатуры
//
// Параметры:
//  ЗначениеПараметраСбис	 - 	 - 
//  ДопПараметры			 - 	 - 
//
&НаКлиенте
Процедура ИзменитьПараметрСбис_СпособСопоставленияНоменклатуры(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметрыИзменения = Неопределено)

	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "Парам.СпособСопоставленияНоменклатуры", ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
	
	Если ЗначениеПараметраСбис = 0 Тогда
		ФормаРаботыСНоменклатурой = "СопоставлениеНоменклатуры_СБИС";
	Иначе
		ФормаРаботыСНоменклатурой = "СопоставлениеНоменклатуры_ДБФ";
	КонецЕсли;
	
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ФормаРаботыСНоменклатурой", ФормаРаботыСНоменклатурой, ЭтоГлобальныйПараметр);
	
	Отказ = Ложь;
	ФормаРаботыСоСопоставлением = ЗначениеКэшПрописать.ГлавноеОкно.СбисПолучитьФормуОбработки(ЗначениеКэшПрописать, ФормаРаботыСНоменклатурой, Новый Структура, Отказ);
	
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ТекущийСеанс.Модули.МодульСопоставлениеНоменклатуры", ФормаРаботыСоСопоставлением, ЭтоГлобальныйПараметр);
	Попытка
		ФормаРаботыСоСопоставлением.УстановитьПараметрыМодуля(,ЗначениеКэшПрописать);
	Исключение
		//Исключение не обрабатываем, отвалиться может только в случае, если форма вынесена в внешние функции
	КонецПопытки;

КонецПроцедуры

// Процедура - Изменить параметр сбис АдресСервера
//
// Параметры:
//  ЗначениеПараметраСбис	 - 	 - 
//  ДопПараметры			 - 	 - 
//
&НаКлиенте
Процедура ИзменитьПараметрСбис_АдресСервера(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметры = Неопределено)

	ИмяПараметраСбис = "АдресСервера";
	
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "СБИС."						+	ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "Парам."					+	ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "СБИС.ПараметрыИнтеграции."	+	ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);

	//Ещё требуется установить параметры, зависящие от УРЛ сервиса
	ВключенРезервныйДомен = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.сбисВключенРезервныйДомен(ГлавноеОкно.Кэш, ЗначениеПараметраСбис);
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "СБИС.ПараметрыИнтеграции.РезервныйДомен", ВключенРезервныйДомен);
	
	НовыеПараметрыСервиса = ПараметрыАдресаСервераСБИС(ЗначениеПараметраСбис);
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "СБИС.ПараметрыИнтеграции.КодСервиса",				НовыеПараметрыСервиса.КодСервиса);
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "СБИС.ПараметрыИнтеграции.ПредставлениеСервера",	НовыеПараметрыСервиса.ПредставлениеСервера);
	
КонецПроцедуры

//Процедура записывает значение параметра по имени в кэш ГО и Глобальный кэш
&НаКлиенте
Процедура ИзменитьПараметрСбис_ВКэш(КэшЗначение, АдресПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр = Истина)
	
	СтрАдрес			= СтрЗаменить(АдресПараметраСбис, ".", Символы.ПС);
	лАдресГлобальный	= ГлобальныйКэш;
	лАдресЛокальный		= КэшЗначение;
	Для СтрНомерСтрок = 1 По СтрЧислоСтрок(СтрАдрес) - 1 Цикл
		лАдресГлобальный	= лАдресГлобальный[СтрПолучитьСтроку(СтрАдрес, СтрНомерСтрок)];
		лАдресЛокальный		= лАдресЛокальный[СтрПолучитьСтроку(СтрАдрес, СтрНомерСтрок)];
	КонецЦикла;
	лАдресЛокальный.Вставить(СтрПолучитьСтроку(СтрАдрес, СтрНомерСтрок), 	ЗначениеПараметраСбис);
	Если ЭтоГлобальныйПараметр Тогда
		лАдресГлобальный.Вставить(СтрПолучитьСтроку(СтрАдрес, СтрНомерСтрок),	ЗначениеПараметраСбис);
	КонецЕсли;
	
КонецПроцедуры

//Процедура Получает значение параметра по имени в кэш ГО и Глобальный кэш
&НаКлиенте
Функция ПолучитьЗначениеПараметраСбис(ИмяПараметраСбис, ДопПараметры = Неопределено) Экспорт
	Перем ЗначениеПараметраСбис, ИсточникПроверкиПараметра;
	
	Если		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("ЛокальныйКэш", ИсточникПроверкиПараметра) Тогда
		
		ИсточникПроверкиПараметра = ГлобальныйКэш;
		
	КонецЕсли;
	
	Если		Не	ИсточникПроверкиПараметра.Парам.Свойство					(ИмяПараметраСбис, ЗначениеПараметраСбис)
			И	Не	ИсточникПроверкиПараметра.СБИС.Свойство						(ИмяПараметраСбис, ЗначениеПараметраСбис)
			И	Не	ИсточникПроверкиПараметра.СБИС.ПараметрыИнтеграции.Свойство	(ИмяПараметраСбис, ЗначениеПараметраСбис)
			И	Не	ИсточникПроверкиПараметра.ТекущийСеанс.Параметры.Свойство	(ИмяПараметраСбис, ЗначениеПараметраСбис)
			И	Не	ИсточникПроверкиПараметра.ТекущийСеанс.Модули.Свойство		(ИмяПараметраСбис, ЗначениеПараметраСбис) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ЗначениеПараметраСбис;
	
КонецФункции

//Функция - возвращает элемент формы по родителю и пути
&НаКлиенте
Функция ПолучитьЭлементФормыОбработки(ОтЭлемента, ПутьКЭлементу) Экспорт
	ИмяЭлементаРазбивка = СтрЗаменить(ПутьКЭлементу, ".", Символы.ПС);
	Результат = ОтЭлемента; 
	лИмяТаблицы = "";
	Для СчетчикРазбивки = 1 По СтрЧислоСтрок(ИмяЭлементаРазбивка) Цикл
		Если Результат = Неопределено Тогда
			Прервать;
		КонецЕсли;
		КлючПути = СтрПолучитьСтроку(ИмяЭлементаРазбивка, СчетчикРазбивки);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Если	ТипЗнч(Результат) = Тип("Форма")
				Или	ТипЗнч(Результат) = Тип("СтраницаПанели") Тогда
				Результат = Результат.ЭлементыФормы;
			ИначеЕсли	ТипЗнч(Результат) = Тип("ТаблицаЗначений")
				Или	ТипЗнч(Результат) = Тип("ТабличноеПоле") Тогда
				Результат = Результат["Колонки"];
			ИначеЕсли	ТипЗнч(Результат) = Тип("Панель") Тогда
				Результат = Результат["Страницы"];
			ИначеЕсли	ТипЗнч(Результат) = Тип("КоманднаяПанель")
					Или	ТипЗнч(Результат) = Тип("Кнопка") Тогда 
				Результат = Результат.Кнопки; 
			//1189641556
			ИначеЕсли	ТипЗнч(Результат) = Тип("ДеревоЗначений")
				Или ТипЗнч(Результат) = Тип("СтрокаДереваЗначений") Тогда
			    Результат = Результат[КлючПути];
			КонецЕсли;
		#Иначе
			Если ТипЗнч(Результат) = Тип("УправляемаяФорма") Тогда
				Результат = Результат.Элементы; 
			//1189641556
			ИначеЕсли ТипЗнч(Результат) = Тип("ДанныеФормыДерево")
			    Или ТипЗнч(Результат) = Тип("ДанныеФормыЭлементДерева") Тогда
				Результат = Результат.ПолучитьЭлементы();
				Продолжить;
			Иначе
				Результат = Результат["ПодчиненныеЭлементы"];
			КонецЕсли;
		#КонецЕсли
		Если КлючПути = "Страницы" Или КлючПути = "Строки" Тогда //1189641556
			Продолжить;
		КонецЕсли;
		ИмяРеквизитаПоиска = КлючПути;
        Если    Не    ПустаяСтрока(лИмяТаблицы) Тогда
            Если Не Лев(КлючПути, СтрДлина(лИмяТаблицы)) = лИмяТаблицы Тогда
                //Это колонка ТЧ.
                ИмяРеквизитаПоиска    = ОпределитьПолноеИмяКолонки(лИмяТаблицы, КлючПути);
                лИмяТаблицы            = "";
            КонецЕсли;
        ИначеЕсли    КлючПути = "Таблица_РеестрДокументов"
                Или    КлючПути = "Таблица_РеестрСобытий" Тогда
            //Для хардкодных таблиц на УФ требуется дописать имя ТЧ в колонку
            лИмяТаблицы            = КлючПути;
        Иначе
            //Ничего не переопределяется, элмент определяется как обычно
        КонецЕсли;
        Результат = Результат.Найти(ИмяРеквизитаПоиска);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

// Функция - формирует двоичные данные по имени файла в папке на клиенте
//
// Параметры:
//  ПутьКФайлуКлиент - Строка	 - полный путь к файлу, ДД которого требуется получить
// 
// Возвращаемое значение:
//  ДвоичныеДанные - полученные ДД файла по пути. Вызывает СБИС исключение при ошибке
//
&НаКлиенте
Функция ПолучитьBASE64ПоИмениФайлаКлиент(ПутьКФайлуКлиент) Экспорт
	
	# Если ТолстыйКлиентОбычноеПриложение Тогда
		
		ФайлыПреобразовать = Новый Массив;
		Попытка
			
			ФайлыПреобразовать.Добавить(Новый ДвоичныеДанные(ПутьКФайлуКлиент));
			Возврат ФайлыВBASE64Сервер(ФайлыПреобразовать)[0];
			
		Исключение
			
			ОшибкаПреобразования = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ПолучитьBASE64ПоИмениФайлаКлиент");
			ВызватьИсключение (СбисИсключение_Представление(ОшибкаПреобразования));
			
		КонецПопытки;
		
	# Иначе
		
		ПомещаемыеФайлы = Новый Массив;
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПутьКФайлуКлиент));
		ПомещенныеФайлы = Новый Массив;
		
		Попытка
			
			ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, ,Ложь);
			Возврат ДвоичныеДанныеВBASE64ВызовСервера(ПомещенныеФайлы)[0];
			
		Исключение
			
			ОшибкаПреобразования = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ПолучитьBASE64ПоИмениФайлаКлиент");
			ВызватьИсключение (СбисИсключение_Представление(ОшибкаПреобразования));
			
		КонецПопытки;
		
	# КонецЕсли
	
КонецФункции

&НаСервере
Функция ДвоичныеДанныеВBASE64ВызовСервера(ПомещенныеНаСерверФайлы)
	
	Возврат МодульОбъектаСервер().ФайлыВBASE64Сервер(ПомещенныеНаСерверФайлы);
	
КонецФункции

&НаКлиенте
Функция ОпределитьПолноеИмяКолонки(ТчИмя, КолонкаИмя)
    
    Перем ИмяКолонкиШаблон;
    Если Не ГлобальныйКэш.ТекущийСеанс.Интерфейс.Свойство("ИмяРеквзитаКолонок",    ИмяКолонкиШаблон) Тогда
        ИмяКолонкиШаблон = "{ИмяКолонки}";
        Если ГлобальныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
            ИмяКолонкиШаблон = "{ТЧ}" + ИмяКолонкиШаблон;
        КонецЕсли;
        ГлобальныйКэш.ТекущийСеанс.Интерфейс.Вставить("ИмяРеквзитаКолонок",    ИмяКолонкиШаблон);
    КонецЕсли;

    Возврат СтрЗаменить(СтрЗаменить(ИмяКолонкиШаблон, "{ИмяКолонки}", КолонкаИмя), "{ТЧ}", ТчИмя);
    
КонецФункции

&НаКлиенте
//
// Параметры:
//  СбисАдресСервера - online.sbis.ru
// 
// Возвращаемое значение:
//  Структура - параметры сервиса СБИС
//
Функция ПараметрыАдресаСервераСБИС(СбисАдресСервера) Экспорт
	
	СбисПредставлениеСервера = СтрЗаменить(СтрЗаменить(СокрЛП(сбисАдресСервера), "https:", ""), "/", "");
	
	Если Сред(СбисПредставлениеСервера, 1, 4) = "fix-" Тогда
		КодСервиса = "fix";
	ИначеЕсли Сред(СбисПредставлениеСервера, 1, 5) = "test-" Тогда
		КодСервиса = "test";
	ИначеЕсли Сред(СбисПредставлениеСервера, 1, 6) = "online" Тогда
		КодСервиса = "";
	Иначе
		КодСервиса = "undefine";
	КонецЕсли;
	Возврат Новый Структура("КодСервиса, ПредставлениеСервера", КодСервиса, СбисПредставлениеСервера)
	
КонецФункции

&НаКлиенте
Процедура СбисУстановитьБлокировкуФормы(Форма, ПараметрыБлокировкиУстановить) Экспорт
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТипМетаданных(ИниКонфигурации, ИмяУзла)
	
	Если ИниКонфигурации.Свойство(ИмяУзла) Тогда
		ЗначениеУзла = СтрЗаменить(ИниКонфигурации[ИмяУзла].Значение, """", "");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Если Лев(ЗначениеУзла, 1) = "[" Тогда
			Возврат ПолучитьТипМетаданных(ИниКонфигурации,	Сред(ЗначениеУзла, 2, Найти(ЗначениеУзла, "]") - 2));
				 
		ИначеЕсли	ТипЗнч(ЗначениеУзла) = Тип("Строка")
			И		Найти(ЗначениеУзла, ".") Тогда 
			      
			Если Найти(Лев(ЗначениеУзла, Найти(ЗначениеУзла, ".") - 1), "Справочник") Тогда
				Возврат ПредопределенноеЗначение("Справочник." + Сред(ЗначениеУзла, Найти(ЗначениеУзла, ".") + 1) + ".ПустаяСсылка");
			ИначеЕсли Найти(Лев(ЗначениеУзла, Найти(ЗначениеУзла, ".") - 1), "Документ") Тогда
				Возврат ПредопределенноеЗначение("Документ." + Сред(ЗначениеУзла, Найти(ЗначениеУзла, ".") + 1) + ".ПустаяСсылка");
			ИначеЕсли Найти(Лев(ЗначениеУзла, Найти(ЗначениеУзла, ".") - 1), "ПланыВидовХарактеристик") Тогда
				Возврат ПредопределенноеЗначение("ПланВидовХарактеристик." + Сред(ЗначениеУзла, Найти(ЗначениеУзла, ".") + 1) + ".ПустаяСсылка");
			КонецЕсли;
				 
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат Неопределено;        
	
КонецФункции

#Если Не ВебКлиент Тогда

&НаКлиенте
Функция СсылочныйТипСтрокойВызовКлиента(Ссылка, ДопПараметры = Неопределено) 

	Запись = Новый ЗаписьXML; 
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, ТипЗнч(Ссылка));
	XMLСТипом = Запись.Закрыть();
	ТипСтрокой = Сред(XMLСТипом, Найти(XMLСТипом, ">") + 1);
	ТипСтрокой = Лев(ТипСтрокой, Найти(ТипСтрокой, "<") - 1);
	
	ЧастиСтроки = СтрЗаменить(ТипСтрокой, ".", Символы.ПС);
	
	Если Найти(СтрПолучитьСтроку(ЧастиСтроки, 1), "CatalogRef") Тогда
		
		ЧастиСтроки = СтрЗаменить(ЧастиСтроки, СтрПолучитьСтроку(ЧастиСтроки, 1), "СправочникСсылка");
		
	ИначеЕсли Найти(СтрПолучитьСтроку(ЧастиСтроки, 1), "DocumentRef") Тогда
		
		ЧастиСтроки = СтрЗаменить(ЧастиСтроки, СтрПолучитьСтроку(ЧастиСтроки, 1), "ДокументСсылка");
		
	КонецЕсли;
	
	Возврат СтрЗаменить(ЧастиСтроки, Символы.ПС, ".");
	
	
КонецФункции // СсылочныйТипСтрокой()

#КонецЕсли

&НаКлиенте
Функция СсылочныйТипСтрокой(Ссылка, ДопПараметры = Неопределено) Экспорт 

	#Если ВебКлиент Тогда
		
		Возврат СсылочныйТипСтрокойВызовСервера(Ссылка, ДопПараметры);
		
	#Иначе
		
		Возврат СсылочныйТипСтрокойВызовКлиента(Ссылка, ДопПараметры);
		
	#КонецЕсли
	
КонецФункции // СсылочныйТипСтрокой()

&НаСервере
Функция СсылочныйТипСтрокойВызовСервера(Ссылка, ДопПараметры = Неопределено) Экспорт 

	Возврат МодульОбъектаСервер().СсылочныйТипСтрокойСервер(Ссылка, ДопПараметры);
	
КонецФункции

&НаКлиенте
Функция ПолучитьИдКоннекшена(Отказ = Ложь) Экспорт

	Кэш = ГлавноеОкно.Кэш;
	Если ГлобальныйКэш.КэшНастроек.Свойство("ВыбранныеНастройки")
		И ГлобальныйКэш.КэшНастроек.ВыбранныеНастройки.Свойство("Идентификатор") Тогда
		
		Возврат ГлобальныйКэш.КэшНастроек.ВыбранныеНастройки.Идентификатор;
	Иначе
		
		РезультатПодключения = ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.СбисПолучитьНастройкиСБИС(ГлавноеОкно.Кэш, Отказ);
		
		Если Отказ = Ложь Тогда
			Возврат ГлобальныйКэш.КэшНастроек.ВыбранныеНастройки.Идентификатор;
		Иначе
			Возврат РезультатПодключения;
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьИдКоннекшена()

// Функция - проверяет объект на принадлежность к типу СБИС
// 
// Возвращаемое значение:
//  Булево - истина если объект принадлежит типу СБИС
//
&НаКлиенте
Функция ЭтоТипСбис(ОбъектПроверка, ТипЗначенияСтрокой)
	
	ТипЗначенияФормат = НРег(ТипЗначенияСтрокой);
	
	ЭтоТипСБИС = Ложь;
	
	Если	ТипЗнч(ОбъектПроверка) = Тип("Структура") Тогда
		
		Если	ОбъектПроверка.Свойство("_класс") Тогда
		
			ЭтоТипСБИС	= ТипЗначенияФормат = НРег(ОбъектПроверка._класс)
		
		ИначеЕсли	ТипЗначенияФормат = "вложениесбис" Тогда
			                //Формалка
			ЭтоТипСБИС	=	(		ОбъектПроверка.Свойство("ВерсияФормата")
								И	ОбъектПроверка.Свойство("ПодТип")
								И	ОбъектПроверка.Свойство("Тип")
							)
							//Неформалка
							Или
							(		ОбъектПроверка.Свойство("ПолноеИмяФайла")
								И	ОбъектПроверка.Свойство("Название")
								И	ОбъектПроверка.Свойство("ИмяФайла")
							);

		ИначеЕсли	ТипЗначенияФормат = "сбисисключение" Тогда
			
			ЭтоТипСБИС =	ОбъектПроверка.Свойство("code")
						И	ОбъектПроверка.Свойство("message")
						И	ОбъектПроверка.Свойство("details");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоТипСБИС;
	
КонецФункции

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_ПолучитьФормуОбработки 

//Возвращает запрашиваемую форму при успехе, структуру ошибки при неудаче Ложь, если форма нет найдено.
&НаКлиенте
Функция ПолучитьФормуОбработки_ПолноеИмяФормы(ИмяФормы, СбисОбъект1С=Неопределено) Экспорт 

	ПолноеИмяФормы	= ИмяФормы;		
	Если СбисОбъект1С = Неопределено Тогда
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
			ПараметрыСистемы = ГлобальныйКэш_Получить("ПараметрыСистемы");
			ПолноеИмяФормы	= ПараметрыСистемы.Обработка.ПолноеИмя
							+ ПараметрыСистемы.Обработка.КлючФорм
							+ ПолноеИмяФормы;
		#КонецЕсли
	Иначе
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
			ПолноеИмяФормы	= СбисОбъект1С + ПолноеИмяФормы;
		#КонецЕсли
	КонецЕсли;
	Возврат ПолноеИмяФормы;
	
КонецФункции

//Возвращает запрашиваемую форму при успехе, структуру ошибки при неудаче Ложь, если форма нет найдено.
&НаКлиенте
Функция ПолучитьФормуОбработки_БезопасноеИмяФормы(ПолноеИмяФормы, СбисОбъект1С) Экспорт 

	Если СбисОбъект1С = Неопределено Тогда
		БезопасноеИмяФормы	= "ВО_"	+ СтрЗаменить(ПолноеИмяФормы, ".", "_");
	Иначе
		БезопасноеИмяФормы	= "ВФК_"+ СтрЗаменить(ПолноеИмяФормы, ".", "_");
	КонецЕсли;
	Возврат БезопасноеИмяФормы;
	
КонецФункции

//Возвращает запрашиваемую форму при успехе, структуру ошибки при неудаче Ложь, если форма нет найдено.
&НаКлиенте
Функция ПолучитьФормуОбработки_ЗакэшироватьФорму(ЗначениеФормы, КлючФормы) Экспорт

	ГлобальныйКэш.ТекущийСеанс.Формы.Получены.Вставить(КлючФормы, ЗначениеФормы);
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_НайтиФункциюСеансаОбработки 

//Делает проверку функции на указанной форме с учетом заплаток и возможностью получения либо только в ВФК, или только на в основном коде.	
&НаКлиенте
Функция ПолучитьФормуДляФункцииОбработки(СбисИмяФункции, СбисИмяФормы, ДопПараметры)
	
	Результат = Ложь;
	Если	(	Не	ДопПараметры.Свойство("ПроверятьВФК")
			Или		ДопПараметры.ПроверятьВФК)
		И	Не ГлавноеОкно.Кэш.Заплатки = Ложь Тогда
		Попытка
			Результат = ПолучитьФормуИПроверитьВызов(СбисИмяФункции, СбисИмяФормы, Новый Структура("Объект1С, Ключ", ГлавноеОкно.Кэш.Заплатки, "ВФК"));
		Исключение
			ВызватьСбисИсключение(ИнформацияОбОшибке(), "СбисНайтиФормуФункцииОбработки");
		КонецПопытки;
	КонецЕсли;
	Если	(	Не	ДопПараметры.Свойство("ПроверятьВО")
			Или		ДопПараметры.ПроверятьВО)
		И	Результат = Ложь Тогда
		Попытка
			Результат = ПолучитьФормуИПроверитьВызов(СбисИмяФункции, СбисИмяФормы, Новый Структура("Ключ", "ВО"));
		Исключение
			ВызватьСбисИсключение(ИнформацияОбОшибке(), "СбисНайтиФормуФункцииОбработки");
		КонецПопытки;
	КонецЕсли;	
	Возврат Результат;
	
КонецФункции

//Проверка наличия функции на форме с пробросом ошибок 
&НаКлиенте
Функция ПолучитьФормуИПроверитьВызов(СбисИмяФункции, СбисИмяФормы, ДопПараметры)
	Перем Результат, ДопПараметрыПолученияФормы;
	
	СбисКлючФункции = ДопПараметры.Ключ + "_" + СбисИмяФункции + "_" + СбисИмяФормы; 
	СбисКлючФункции = СтрЗаменить(СбисКлючФункции," ", "_");
	Если ГлобальныйКэш.ТекущийСеанс.Функции.Свойство(СбисКлючФункции, Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ДопПараметры.Ключ = "ВО" Тогда
		ДопПараметрыПолученияФормы = Новый Структура("ОбработкаОбъект", ГлавноеОкно.Кэш.Заплатки);
	КонецЕсли;
	Результат			= Ложь;
	ФормаОбработкиТест	= ПолучитьФормуОбработки(СбисИмяФормы, ДопПараметрыПолученияФормы);
	
	Если ПроверитьВызовНаФорме(ФормаОбработкиТест, СбисИмяФункции) Тогда
		Результат = ФормаОбработкиТест;
	КонецЕсли;
	
	Если	Не	ДопПараметры.Свойство("КэшироватьФункцию")
			Или	ДопПараметры.КэшироватьФункцию Тогда
		ГлобальныйКэш.ТекущийСеанс.Функции.Вставить(СбисКлючФункции, Результат);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции
	
//Проверяет наличие функции в форме	
&НаКлиенте
Функция ПроверитьВызовНаФорме(СбисФормаОбработки, СбисИмяФункции)

	Если СбисФормаОбработки = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СбисКодЯзыка = ГлобальныйКэш.ПараметрыСистемы.Конфигурация.ВстроенныйЯзык;
	Попытка
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Выполнить("СбисФормаОбработки." + СбисИмяФункции + "();");
		#Иначе
			сбисТест = Вычислить("СбисФормаОбработки." + СбисИмяФункции + "()");
		#КонецЕсли
	Исключение
		лОписаниеОшибки = ОписаниеОшибки();
		Если Найти(лОписаниеОшибки, НСтр("ru='Метод объекта не обнаружен'; en='Object method not found'", СбисКодЯзыка)+" ("+СбисИмяФункции+")") Тогда
			//функции нет, если ошибка об отсутствии метода
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;
	Возврат Истина;
	
КонецФункции

#КонецОбласти
 
#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_РаботаСФичами

// Проверить, подклюена ли фича
//
// Параметры:
//  ПараметрыФичи  - Структура - Обязательный ключ НазваниеФичи со строковым значением
//                 
//  ДопПараметры   - Структура, Неопределено - Доп параметры
//                 (Если вдруг однажды понадобятся)
//
// Возвращаемое значение:
//   Булево   - Истина - фича вклюена
//
&НаКлиенте
Функция ПолучитьЗначениеФичи(ПараметрыФичи, ДопПараметры = Неопределено) Экспорт 
    Перем КлючФичи;

	Если ТипЗнч(ПараметрыФичи) = Тип("Строка") Тогда
		КлючФичи = ПараметрыФичи;
	Иначе
		КлючФичи = ПараметрыФичи.НазваниеФичи;
	КонецЕсли;
	
	ЗначениеФичи = ПолучитьЗначениеПараметраСбис(КлючФичи);
	Если ЗначениеФичи = Неопределено Тогда
		
		СоответствиеФич = ПолучитьСписокФичИПредставлений();
		ПараметрыВызова = Новый Структура("НазваниеФичи", СоответствиеФич[КлючФичи]);
		Попытка
			ЗначениеФичи = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ExtSys_FeatureIsOn(ПараметрыВызова, Новый Структура("Кэш", ГлавноеОкно.Кэш));
		Исключение
			ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ПолучитьЗначениеФичи");
		КонецПопытки;
		
		//фича не получина, не кэшировать значение, т.к. значит что пока не ходили за ней
		Если ЗначениеФичи = Неопределено Тогда
			ЗначениеФичи = Ложь;
		Иначе
			ИзменитьПараметрСбис(КлючФичи, ЗначениеФичи, Новый Структура("Адрес", "СБИС.ПараметрыИнтеграции"));
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ЗначениеФичи;
	
КонецФункции // ПолуитьЗначениеФии()

// Возвращаетсписок доступных фич с их представлением во
// внешней обработке
//
//
// Возвращаемое значение:
//  Структура    - Ключ		- предстваление в 1С
//                 Значение	- имя в СБИС 
//
&НаКлиенте
Функция ПолучитьСписокФичИПредставлений()

	СписокФич = Новый Структура;
	
	СписокФич.Вставить("ПоддержкаМаркировки",													"1c_marking");  
	СписокФич.Вставить("ПоддержкаПрослеживаемости",												"external_trcb_state"); //1189759669
	СписокФич.Вставить("РасширенныйФункционалСопоставленияНоменклатуры",						"1c_nom_extension");
	СписокФич.Вставить("РасширенныйФункционалСопоставленияНоменклатуры_ОбратноеСопоставление",	"1c_nom_extension_rev");
	СписокФич.Вставить("НовыеКонтрагенты",														"1c_new_contractors"); 
	СписокФич.Вставить("ПоддержкаНовойМаркировки", 												"1c_marking_new"); //1191080705
	
	Возврат СписокФич;

КонецФункции // ПолучитьСписокФичИПредставлений()

// Сбрасывает значения фич
//
&НаКлиенте
Функция ОчиститьЗначенияФич() Экспорт 
	
	Кэш = ГлавноеОкно.Кэш;
	
	Для Каждого Фича Из ПолучитьСписокФичИПредставлений() Цикл
		
		Если Кэш.СБИС.ПараметрыИнтеграции.Свойство(Фича.Ключ) Тогда
			
			Кэш.СБИС.ПараметрыИнтеграции.Удалить(Фича.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;

КонецФункции // ОчиститьЗначенияФич()

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_Интерфейс

&НаКлиенте
Процедура ВызватьОбработчикКнопки(ПараметрыОбработчикаКнопки, ДопПараметры=Неопределено) Экспорт
	//Найдем действие, которое требуется выполнить при нажатии.
	Попытка
		РазделКнопки = ПолучитьМенюТекущегоРаздела(); 
	Исключение
		ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектКлиент.ВызватьОбработчикКнопки");
	КонецПопытки;
	
	Для Каждого СбисКнопка Из РазделКнопки Цикл
		Если Не СбисКнопка.ИмяКнопки = ПараметрыОбработчикаКнопки.Имя Тогда 
			Продолжить;
		КонецЕсли;
		фрм = ГлавноеОкно.СбисНайтиФормуФункции(СбисКнопка.МетодАктивации, "РаботаСДокументами1С", "ФормаГлавноеОкно");
		Если фрм = Ложь Тогда
			ВызватьСбисИсключение(, "МодульОбъектКлиент.ВызватьОбработчикКнопки",,"Не удалось найти обработчик метода " + ПараметрыОбработчикаКнопки.Имя);
		Иначе
			ВыполнитьСбисОписаниеОповещения(ГлавноеОкно.Кэш, НовыйСбисОписаниеОповещения(сбисКнопка.МетодАктивации, фрм));
		КонецЕсли;
		Возврат;
	КонецЦикла;
	ВызватьСбисИсключение(, "МодульОбъектКлиент.ВызватьОбработчикКнопки",,"Не удалось найти обработчик метода " + ПараметрыОбработчикаКнопки.Имя);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМенюТекущегоРаздела() Экспорт
	
    Перем ИмяТекущийРаздел, ЗначениеТекущийРаздел;
	
	Кэш = ГлавноеОкно.Кэш;
	Если		Не	Кэш.Свойство("Разделы") Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ПолучитьМенюТекущегоРаздела", 779, , "Не определена структура разделов.");
	ИначеЕсли	Кэш.Текущий = Неопределено Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ПолучитьМенюТекущегоРаздела", 779, , "Не определён текущий раздел.");
	ИначеЕсли	Не	Кэш.Разделы.Свойство("р" + Кэш.Текущий.Раздел, ИмяТекущийРаздел) Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ПолучитьМенюТекущегоРаздела", 779, , "Не удалось определить раздел.");
	ИначеЕсли	Не Кэш.МенюРазделов.Свойство(ИмяТекущийРаздел, ЗначениеТекущийРаздел) Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ПолучитьМенюТекущегоРаздела", 779, , "В меню разделов не найден основной раздел.");
	ИначеЕсли	Не ЗначениеТекущийРаздел.Свойство(Кэш.Текущий.Имя, ЗначениеТекущийРаздел) Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ПолучитьМенюТекущегоРаздела", 779, , "В меню разделов не найден текущий раздел.");
	КонецЕсли;
	Возврат ЗначениеТекущийРаздел;
	
КонецФункции

// Функция описывает структуру элементов формы настроек, видимость которых меняется в зависимости от СО и переопределяется на форме интеграции в функции ВидимостьНастроек()
// 
// Возвращаемое значение: Структура Ключ		- Имя элемента формы
//   -                              Значение	- Булево, значение видимости
//
&НаКлиенте
Функция ВидимостьНастроекПоУмолчанию() Экспорт
	
	ВидимостьНастроек = Новый Структура;
	ВидимостьНастроек.Вставить("ИспользоватьНовуюОтправку",		Истина);
	ВидимостьНастроек.Вставить("ИспользоватьГенератор",			Ложь);
	ВидимостьНастроек.Вставить("ВремяОжиданияОтвета",			Ложь);
	ВидимостьНастроек.Вставить("НастройкаЭП",					Ложь); 
	
	Возврат ВидимостьНастроек;
	
КонецФункции

// Функция описывает список доступных типов для метода СБИС.СписокДокументов https://sbis.ru/help/integration/catalog/guide#1
// 
// Возвращаемое значение: СписокЗначений
//
&НаКлиенте
Функция ФильтрТипыДокументовСписок() Экспорт

	ФильтрТипыДокументовСписок = Новый СписокЗначений;
	ФильтрТипыДокументовСписок.Добавить("ЭДОНакл",				"Накладные");
    ФильтрТипыДокументовСписок.Добавить("АктВР",				"Акты (услуги, работы, права)");
    ФильтрТипыДокументовСписок.Добавить("СчФктр,УпдСчфДоп",		"Счета-фактуры (вкл.в составе УПД)");
    ФильтрТипыДокументовСписок.Добавить("УпдДоп",				"Передаточные документы");
    ФильтрТипыДокументовСписок.Добавить("счФактКор,УкдКсчфДис",	"Счета-фактуры корректировочные (вкл. в составе УКД)");
	ФильтрТипыДокументовСписок.Добавить("УкдДис",				"УКД");
    ФильтрТипыДокументовСписок.Добавить("АктСвер",				"Акты сверки");
    ФильтрТипыДокументовСписок.Добавить("Договор",				"Договоры");
    ФильтрТипыДокументовСписок.Добавить("ЭДОСч",				"Счета");
	ФильтрТипыДокументовСписок.Добавить("АктПриемки",			"Акты о приемке");
	ФильтрТипыДокументовСписок.Добавить("Заказ",				"Заказы поставщикам");
 	ФильтрТипыДокументовСписок.СортироватьПоПредставлению();
	
	Возврат ФильтрТипыДокументовСписок;
	
КонецФункции

// Функция - формирует фильтр для реестровых методов Онлайна.
//
// Параметры:
//  ПараметрыФильтраВходящие - Структура, Форма - объект, содержащий поля фильтров, одноименные главному окну
//  ДопПараметры			 - Структура	 - 
//		ДопПоля		- Строка - расширение метода.
//		ДопФильтры	- Структура - результат функции ПараметраФильтраДляСобытий от реестра.
// 
// Возвращаемое значение:
//  Структура - фильтр для реестров онлайна https://sbis.ru/help/integration/api/all_methods/list_doc; https://sbis.ru/help/integration/api/all_methods/events_doc
//
&НаКлиенте
Функция	СформироватьФильтрДляРеестраОнлайна(ПараметрыФильтраВходящие, ДопПараметры) Экспорт
	
	ЗначениеФильтраСобытий = Новый Структура; 
	ЗначениеФильтраСобытий.Вставить("ДопПоля", "Этап,Лицо2");
	//Этап			- получить этапы в реестре
	//Лицо2			- получить Грузополучатель
	//Расширение	- получить объект расширения документа, где можно взять статусы гос. систем.
	
	Если ПолучитьЗначениеПараметраСбис("СтатусыВГосСистеме") Тогда
		ЗначениеФильтраСобытий.ДопПоля = ЗначениеФильтраСобытий.ДопПоля + ",Расширение";
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ДопПоля") Тогда
		ЗначениеФильтраСобытий.ДопПоля = ЗначениеФильтраСобытий.ДопПоля + ДопПараметры.ДопПоля;
	КонецЕсли;
	
	ДанныеПоФильтрам = Новый Структура(
	"ЗаписейНаСтранице, ФильтрСтраница
	|, ФильтрДатаНач, ФильтрДатаКнц, СписокСостояний, ФильтрСостояние, ФильтрТипыДокументов
	|, ФильтрОрганизация, ФильтрКонтрагент, ФильтрКонтрагентСФилиалами, ФильтрМаска",
	10, 1);
	ЗаполнитьЗначенияСвойств(ДанныеПоФильтрам, ПараметрыФильтраВходящие);
	
	//Дата с/по
	Если ЗначениеЗаполнено(ДанныеПоФильтрам.ФильтрДатаНач) Тогда
		ЗначениеФильтраСобытий.Вставить("ДатаС",	Формат(ДанныеПоФильтрам.ФильтрДатаНач, "ДФ=""дд.ММ.гггг""")); 
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеПоФильтрам.ФильтрДатаКнц) Тогда
		ЗначениеФильтраСобытий.Вставить("ДатаПо",	Формат(ДанныеПоФильтрам.ФильтрДатаКнц, "ДФ=""дд.ММ.гггг""")); 
	КонецЕсли;
	
	//Состояние
	Если		ЗначениеЗаполнено(ДанныеПоФильтрам.СписокСостояний)
		И		ЗначениеЗаполнено(ДанныеПоФильтрам.ФильтрСостояние)
		И		ТипЗнч(ДанныеПоФильтрам.СписокСостояний) = Тип("СписокЗначений")
		И	Не	ДанныеПоФильтрам.ФильтрСостояние = ДанныеПоФильтрам.СписокСостояний.НайтиПоИдентификатору(0).Значение Тогда
		ЗначениеФильтраСобытий.Вставить("Состояние", ДанныеПоФильтрам.ФильтрСостояние); 
	КонецЕсли;
	
	//ТипВложения
	Если ЗначениеЗаполнено(ДанныеПоФильтрам.ФильтрТипыДокументов) тогда
		
		СписокТипДок = "";//"ЭДОНакл,Договор,СчФктр"
		
		Для Каждого ТипДок Из ДанныеПоФильтрам.ФильтрТипыДокументов Цикл
			
			СписокТипДок = СписокТипДок + ТипДок.Значение + ",";
			
		КонецЦикла;
		
		ЗначениеФильтраСобытий.Вставить("ТипВложения", Лев(СписокТипДок, СтрДлина(СписокТипДок) - 1)); 
		
	КонецЕсли;
	
	//Организация
	Если ЗначениеЗаполнено(ДанныеПоФильтрам.ФильтрОрганизация) Тогда
		
		ПараметрыДляСтороны	= Новый Структура("Ключ", "НашаОрганизация");
		СторонаФильтра		= СформироватьФильтрДляРеестраОнлайна_Сторона(ДанныеПоФильтрам.ФильтрОрганизация, ПараметрыДляСтороны);
		Если Не СторонаФильтра = Неопределено Тогда
			
			ЗначениеФильтраСобытий.Вставить(ПараметрыДляСтороны.Ключ, СторонаФильтра);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Контрагент
	Если ЗначениеЗаполнено(ДанныеПоФильтрам.ФильтрКонтрагент) Тогда
		
		ПараметрыДляСтороны = Новый Структура("Ключ, Фильтры", "Контрагент", ДанныеПоФильтрам);
		СторонаФильтра		= СформироватьФильтрДляРеестраОнлайна_Сторона(ДанныеПоФильтрам.ФильтрКонтрагент, ПараметрыДляСтороны);
		Если Не СторонаФильтра = Неопределено Тогда
			
			ЗначениеФильтраСобытий.Вставить(ПараметрыДляСтороны.Ключ, СторонаФильтра);
			
		КонецЕсли;
		
	КонецЕсли;
		
	//Маска
	Если ЗначениеЗаполнено(ДанныеПоФильтрам.ФильтрМаска) Тогда
		
		ЗначениеФильтраСобытий.Вставить("Маска", ДанныеПоФильтрам.ФильтрМаска);
		
	КонецЕсли;
	
	//ДопПараметры
	Если	ДопПараметры.Свойство("ДопФильтры") 
		И	ЗначениеЗаполнено(ДопПараметры.ДопФильтры) Тогда
		Для Каждого Элемент Из ДопПараметры.ДопФильтры Цикл
			ЗначениеФильтраСобытий.Вставить(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;
	КонецЕсли;
	
	ОбъектНавигации = Новый Структура; 
	ОбъектНавигации.Вставить("РазмерСтраницы",	Строка(ДанныеПоФильтрам.ЗаписейНаСтранице)); 
	ОбъектНавигации.Вставить("Страница",		Строка(ДанныеПоФильтрам.ФильтрСтраница - 1)); 
	
	ЗначениеФильтраСобытий.Вставить("Навигация", ОбъектНавигации);
	
	Возврат ЗначениеФильтраСобытий;	
	
КонецФункции

&НаКлиенте
Функция	СформироватьФильтрДляРеестраОнлайна_Сторона(ФильтрСсылка, ДопПараметры)
	Перем ДанныеСторонаИни;
	
	СтруктураСтороныДляФильтра	= Новый Структура; 
	ИниКонфигурация				= ИниПоПараметрам("Конфигурация");
	МодульРаботыСДокументами	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;
	
	Если	Не	ИниКонфигурация.Свойство("мСторона",			ДанныеСторонаИни)
		Или	Не	ДанныеСторонаИни.Свойство(ДопПараметры.Ключ, 	ДанныеСторонаИни) Тогда
		ДанныеСторонаИни = Новый Структура;
	КонецЕсли;
	
	ИННСтороны	= СокрЛП(МодульРаботыСДокументами.ПолучитьРеквизитОбъекта(ФильтрСсылка, "ИНН"));
	Если Не ЗначениеЗаполнено(ИННСтороны) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СвФЛЮЛ		= Новый Структура("ИНН", ИННСтороны);
	
	Если СтрДлина(ИННСтороны) = 12 Тогда
		
		СтруктураСтороныДляФильтра.Вставить("СвФЛ", СвФЛЮЛ);	
		
	Иначе
		
		Попытка
			
			СвФЛЮЛ.Вставить( "КПП", МодульРаботыСДокументами.ПолучитьРеквизитОбъекта(ФильтрСсылка, "КПП"));
			
		Исключение
			
			// если КПП живет в другом реквизите или вообще не в реквизите, а в регистре сведений
			Если ЗначениеЗаполнено(ДанныеСторонаИни) Тогда 
				
				Контекст = Новый Структура("Документ, Ини, ТекущийРазделИни", ФильтрСсылка, ИниКонфигурация, ДанныеСторонаИни);
				СвФЛЮЛ.Вставить("КПП", СокрЛП(МодульРаботыСДокументами.РассчитатьЗначениеНаСервере("Сторона_КПП", Контекст))); 
				
			КонецЕсли;
		КонецПопытки;
		
		СтруктураСтороныДляФильтра.Вставить("СвЮЛ", СвФЛЮЛ);
		
	КонецЕсли;
	
	Если ДанныеСторонаИни.Свойство("Сторона_КодФилиала") Тогда
		
		Контекст = Новый Структура("Документ, Ини, ТекущийРазделИни", ФильтрСсылка, ИниКонфигурация, ДанныеСторонаИни);
		СвФЛЮЛ.Вставить("КодФилиала", СокрЛП(МодульРаботыСДокументами.РассчитатьЗначениеНаСервере("Сторона_КодФилиала", Контекст)));
		
	КонецЕсли;
	
	ЗначениеСФилиалами = Неопределено;
	Если	ДопПараметры.Свойство("Фильтры")
		И	ДопПараметры.Фильтры.Свойство("Фильтр" + ДопПараметры.Ключ + "СФилиалами", ЗначениеСФилиалами)
		И	ЗначениеЗаполнено(ЗначениеСФилиалами)
		И	ЗначениеСФилиалами Тогда
		СтруктураСтороныДляФильтра.Вставить("ДопПоля", "СФилиалами");
	КонецЕсли;
	
	Возврат СтруктураСтороныДляФильтра;
	
КонецФункции 

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_РаботаСИниИXSLT

// Функция - возвращает XSLT по параметрам
//
// Параметры:
//  ПараметрыИниВходящие - Параметры ини к чтению.
//		- Неопределено	- прочитать все XSLT	
//		- Строка		- получение XSLT напрямую по имени
//		- Структура		- может содержать ключи: 
//				Имя			- Строка, Массив	- для запроса нескольких XSLT. Если есть, то учитывается только ТипИни
//				Вложение	- ВложениеСБИС		- определение XSLT для вложения. Может быть вместе с Направление. Если Направление не указано, то ставится как Входящий
//  ДопПараметры		 - дополнительно, расширение 
//		- Неопределено	- не требуется
//
// Возвращаемое значение:
//  Струкутра 	- может быть несколько XSLT (поиск по типу 1С/СБИС)
//	Строка		- XSLT получаем по имени
//
&НаКлиенте
Функция XSLTПоПараметрам(ПараметрыВходящие=Неопределено, ДопПараметры=Неопределено) Экспорт 
	Перем РезультатЧтения;
	
	Если ПараметрыВходящие = Неопределено Тогда
		//Получить всё
		
		Если	Не	ГлавноеОкно.Кэш.Свойство("xslt", РезультатЧтения)
			Или		РезультатЧтения = Неопределено Тогда
			
			ОшибкаЧтения = Ложь;
			ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.СбисСформироватьСтруктуруXSLT(ГлавноеОкно.Кэш, ПолучитьЗначениеПараметраСбис("ИдентификаторНастроек"),, ОшибкаЧтения);
			
			Если ОшибкаЧтения Тогда
				
				ВызватьСбисИсключение(, "МодульОбъектаКлиент.XSLTПоПараметрам", 770, "Ошибка чтения XSLT", "Ошибка чтения XSLT");
				
			КонецЕсли;
		КонецЕсли;
		
		РезультатЧтения = ГлавноеОкно.Кэш.xslt;
		
	ИначеЕсли ТипЗнч(ПараметрыВходящие) = Тип("Строка") Тогда
		
		Если Не ГлавноеОкно.Кэш.Xslt.Свойство(ПараметрыВходящие, РезультатЧтения) Тогда
			
			//Сделать получение 1 XSLT.
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПараметрыВходящие) = Тип("Массив") Тогда
		
		РезультатЧтения = Новый Структура;
		Для Каждого ИмяXSLT Из ПараметрыВходящие Цикл
			
			XSLTЗначение = XSLTПоПараметрам(ИмяXSLT);
			Если XSLTЗначение = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			РезультатЧтения.Вставить(ИмяXSLT, XSLTЗначение);
			
		КонецЦикла;
		
	Иначе	
		
		РезультатЧтения = Новый Структура;
		
	КонецЕсли;
	
	Возврат РезультатЧтения;
	
КонецФункции
	
// Функция - возвращает настройки по параметрам
//
// Параметры:
//  ПараметрыИниВходящие - Параметры ини к чтению.
//		- Неопределено	- прочитать все настройки	
//		- Строка		- получение настройки напрямую по имени
//		- Структура		- может содержать ключи: 
//				Имя			- Строка, Массив	- для запроса нескольких настроек. Если есть, то учитывается только ТипИни
//				ТипИни		- Строка			- тип настройки для запроса из поддерживаемых обработкой (Выгрузка/Загрузка/ПроверкаРасхождения).
//				Тип1С		- Строка			- тип 1С для поиска подходящих настроек под объект 1С
//				ТипСБИС		- Строка			- тип формата документа для поиска подходящей настройки
//				Направление	- Строка			- Входящий/Исходящий - в какую сторону требуется настройка. Например, могут быть ини Загрузка_Исходящий 
//				Вложение	- ВложениеСБИС		- определение настройки для ТипИни "Загрузка" вложения. Может быть вместе с Направление. Если Направление не указано, то ставится как Входящий
//				ОбъектСсылка- Ссылка			- определение настройки для обработки конкретного объекта 1С (Документ)
//  ДопПараметры		 - дополнительно, расширение 
//		- Неопределено	- не требуется
//		- Структура		- ПринудительноеЧтение	- Булево признак для попытки чтения настройки, не смотря на отсутствие её в меню разделов.
//
// Возвращаемое значение:
//  Струкутра 	- если запрашивается/может быть несколько ини (поиск по типу 1С/СБИС)
//	Ини 		- если запрашивается конкретная ини по имени
//
&НаКлиенте
Функция ИниПоПараметрам(ПараметрыИниВходящие=Неопределено, ДопПараметры=Неопределено) Экспорт 
	Перем ТипИниПрочитать, ЗначениеИниДокумента;
	
	ОшибкаЧтенияНастройки = Ложь;
	Если ПараметрыИниВходящие = Неопределено Тогда
		//Получить всё
		РезультатЧтения = ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.СбисЗаполнитьНеполученныеНастройки(ГлавноеОкно.Кэш, ОшибкаЧтенияНастройки);
	ИначеЕсли ТипЗнч(ПараметрыИниВходящие) = Тип("Строка") Тогда
		//Читается 1 инишка напрямую по имени, ПараметрыИниВходящие это имя настройки к чтению
		РезультатЧтения = ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.Ини(ГлавноеОкно.Кэш, ПараметрыИниВходящие, Новый Структура, ОшибкаЧтенияНастройки);
		Если	ОшибкаЧтенияНастройки
			И	РезультатЧтения.code = 779 Тогда
			//Ини отсутствует в установленных
			РезультатЧтения			= Неопределено;
			ОшибкаЧтенияНастройки	= Ложь;
		КонецЕсли;
	ИначеЕсли ПараметрыИниВходящие.Свойство("Имя") Тогда
		//Читается 1 инишка напрямую по имени, ПараметрыИниВходящие содержит имя настройки к чтению и может дополнительно - Тип Загрузка, Выгрузка, Система
		//и признак принудиительного чтения - читать, несмотря на отсутствие в меню.
		ДопПараметрыЧтенияИни = Новый Структура;
		Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
			Если ДопПараметры.Свойство("ПринудительноеЧтение") Тогда
				ДопПараметрыЧтенияИни.Вставить("ПринудительноеЧтение", Истина);
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыИниВходящие.Свойство("ТипИни", ТипИниПрочитать) Тогда
			Если		ТипИниПрочитать = "ПроверкаРасхождения"
				И	Не	ДопПараметрыЧтенияИни.Свойство("ПринудительноеЧтение")Тогда
				ДопПараметрыЧтенияИни.Вставить("ПринудительноеЧтение", Истина);
			КонецЕсли;
			ДопПараметрыЧтенияИни.Вставить("Тип", ТипИниПрочитать);
		КонецЕсли;
		Если ТипЗнч(ПараметрыИниВходящие.Имя) = Тип("Строка") Тогда
			РезультатЧтения = ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.Ини(ГлавноеОкно.Кэш, ПараметрыИниВходящие.Имя, ДопПараметрыЧтенияИни, ОшибкаЧтенияНастройки);
		Иначе
			РезультатНабора = Новый Структура;
			Для Каждого ИмяИни Из ПараметрыИниВходящие.Имя Цикл
				РезультатЧтения = ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.Ини(ГлавноеОкно.Кэш, ИмяИни, ДопПараметрыЧтенияИни, ОшибкаЧтенияНастройки);
				Если ОшибкаЧтенияНастройки Тогда
					Прервать;
				КонецЕсли;
				РезультатНабора.Вставить(ИмяИни, РезультатЧтения);
			КонецЦикла;
			Если Не ОшибкаЧтенияНастройки Тогда
				РезультатЧтения = РезультатНабора;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПараметрыИниВходящие.Свойство("Тип1С") Тогда
		РезультатЧтения = Новый Структура;
		//Читаются настройки, которые подходят под тип 1С
		СбисСтруктураРазделов	= ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.ПолучитьСтруктуруРазделов(ГлавноеОкно.Кэш,,ОшибкаЧтенияНастройки);
		Если ОшибкаЧтенияНастройки Тогда
			ВызватьСбисИсключение(СбисСтруктураРазделов, "МодульОбъектаКлиент.ИниПоПараметрам");
		КонецЕсли;
			
		СписокИниПолучить = Новый Массив;
		Для Каждого СбисРаздел Из сбисСтруктураРазделов Цикл
			Если ПараметрыИниВходящие.Свойство("ТипИни") Тогда
			Если	(	СбисРаздел.Ключ = "БезРаздела"
				И		ПараметрыИниВходящие.ТипИни = "Выгрузка")
				Или	(Не	СбисРаздел.Ключ = "БезРаздела"
					И	ПараметрыИниВходящие.ТипИни = "Загрузка") Тогда
				//Ини на выгрузку могут быть только с разделом. Ини на загрузку без раздела.
				Продолжить;
			КонецЕсли;
			КонецЕсли;
			Для Каждого СбисПодРаздел Из СбисРаздел.Значение.Список Цикл
				Если Не	ЗначениеЗаполнено(СбисПодРаздел.Значение.Реестр1С_Тип) Тогда
					Продолжить;
				КонецЕсли;
				РеестрПодходит = Ложь;
				Реестр1С_Тип = СтрЗаменить(сбисПодРаздел.Значение.Реестр1С_Тип, ",", Символы.ПС);
				Для НомерСтроки = 1 По СтрЧислоСтрок(Реестр1С_Тип) Цикл
					Если Не СтрПолучитьСтроку(Реестр1С_Тип, НомерСтроки) = ПараметрыИниВходящие.Тип1С Тогда
						Продолжить;
					КонецЕсли;
					РеестрПодходит = Истина;
					Прервать;
				КонецЦикла;
				Если Не РеестрПодходит Тогда
					Продолжить;
				КонецЕсли;
				СписокИниПолучить.Добавить(сбисПодРаздел.Ключ);
			КонецЦикла;
			
		КонецЦикла;
		
		Попытка
			РезультатЧтения = ИниПоПараметрам(Новый Структура("Имя", СписокИниПолучить));
		Исключение
			ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ПолучитьИниПоПараметрам");
		КонецПопытки;
		
	ИначеЕсли ПараметрыИниВходящие.Свойство("ТипСБИС") Тогда
		//Читаются настройки, которые подходят под тип 1С
		РезультатЧтения			= Новый Структура;
		СбисСтруктураРазделов	= ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.ПолучитьСтруктуруРазделов(ГлавноеОкно.Кэш,,ОшибкаЧтенияНастройки);
		Если ОшибкаЧтенияНастройки Тогда
			ВызватьСбисИсключение(СбисСтруктураРазделов, "МодульОбъектаКлиент.ИниПоПараметрам");
		КонецЕсли;
		
		Для Каждого СбисРаздел Из сбисСтруктураРазделов Цикл
			Если		СбисРаздел.Ключ = "БезРаздела"
					И	ПараметрыИниВходящие.ТипИни = "Загрузка" Тогда
			ИначеЕсли	ПараметрыИниВходящие.ТипИни = "Загрузка" Тогда 
				Продолжить;
			КонецЕсли;
			Для Каждого СбисПодРаздел Из СбисРаздел.Значение.Список Цикл
				Если Не	ЗначениеЗаполнено(СбисПодРаздел.Значение.РеестрСБИС_Тип) Тогда
					Продолжить;
				КонецЕсли;
				РеестрПодходит	= Ложь;
				РеестрСБИС_Тип	= СтрЗаменить(сбисПодРаздел.Значение.РеестрСБИС_Тип, ",", Символы.ПС);
				Для НомерСтроки = 1 По СтрЧислоСтрок(РеестрСБИС_Тип) Цикл
					Если Не СтрПолучитьСтроку(РеестрСБИС_Тип, НомерСтроки) = ПараметрыИниВходящие.ТипСБИС Тогда
						Продолжить;
					КонецЕсли;
					РеестрПодходит = Истина;
					Прервать;
				КонецЦикла;
				Если Не РеестрПодходит Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					
					ИмяИниДокумента		= сбисПодРаздел.Ключ;
					ЗначениеИниДокумента= ИниПоПараметрам(Новый Структура("Имя", ИмяИнидокумента));
					
				Исключение
					
					ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ПолучитьИниПоПараметрам");
					
				КонецПопытки;
				
				Если ЗначениеИниДокумента = Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				РезультатЧтения.Вставить(ИмяИнидокумента, ЗначениеИниДокумента);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли	ПараметрыИниВходящие.Свойство("Вложение") Тогда
		//Подбор настройки для вложения
		ПараметрыВложения = ВложениеСБИС_Получить(ПараметрыИниВходящие.Вложение, "ПараметрыИни");
		
		ИмяИни = ПараметрыВложения.Тип + "_" + ПараметрыВложения.Версия;
		ИмяИни = СтрЗаменить(ИмяИни, ".", "_");
		Если ПараметрыВложения.Направление = "Входящий" Тогда
			ЗначениеИниДокумента = ИниПоПараметрам(ИмяИни);
		КонецЕсли;
		Если ЗначениеИниДокумента = Неопределено Тогда
			ИмяИни = "Загрузка_" + ПараметрыВложения.Направление + "_" + ИмяИни;
			ЗначениеИниДокумента = ИниПоПараметрам(ИмяИни);
		КонецЕсли;
		РезультатЧтения = ЗначениеИниДокумента;

	ИначеЕсли	ПараметрыИниВходящие.Свойство("ОбъектСсылка") Тогда 
		//Подбор настройки под объект
		
		ИмяДок = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.ПолучитьРеквизитМетаданныхОбъекта(ПараметрыИниВходящие.ОбъектСсылка, "Имя");
		ПараметрыИниВходящие.Вставить("Тип1С", ИмяДок);
		Возврат ИниПоПараметрам(ПараметрыИниВходящие, ДопПараметры);
		
	КонецЕсли;
	Если ОшибкаЧтенияНастройки Тогда
		ВызватьСбисИсключение(РезультатЧтения, "МодульОбъектаКлиент.ПолучитьИниПоПараметрам");
	КонецЕсли;
	Возврат РезультатЧтения;
	
КонецФункции

// Функция возвращает название реквизита для значений из файлов настроек.
//	Пример: <Документ_Номер Данные="Файл.Документ.Номер">[Документ].Номер</Документ_Номер> вернёт [Документ].Номер, или Номер
//
// Параметры:
//  ЗначениеРеквизита	 - Структура	 - узел ини
//  ДопПараметры		 - Структура	 - расширение
//		ИмяРеквизита - Булево, если нужно только имя реквизита, без родителя
// 
// Возвращаемое значение:
//  Строка - значение узла ини
//
&НаКлиенте
Функция СтроковоеЗначениеУзлаИни(ЗначениеРеквизита, ДопПараметры) Экспорт
	Перем ЗначениеРеквизитаДляОпределния;

	Если		ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
		ЗначениеРеквизитаДляОпределния = ЗначениеРеквизита;
	ИначеЕсли	Не ЗначениеРеквизита.Свойство("Значение", ЗначениеРеквизитаДляОпределния) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеРеквизитаДляОпределния = СтрЗаменить(ЗначениеРеквизитаДляОпределния, "'", "");
	
	Если	ДопПараметры.Свойство("ИмяРеквизита")
		И   ДопПараметры.ИмяРеквизита Тогда
		ЗначениеРеквизитаДляОпределния = Сред(	ЗначениеРеквизитаДляОпределния,
												Найти(ЗначениеРеквизитаДляОпределния,".") + 1, 
												СтрДлина(ЗначениеРеквизитаДляОпределния) - Найти(ЗначениеРеквизитаДляОпределния,"."));
	КонецЕсли;
	
	Возврат ЗначениеРеквизитаДляОпределния;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщегоНазначения  

// Разбивает строку на несколько строк по указанному разделителю. Разделитель может иметь любую длину.
// Читай доп. описание "СбисРазложитьСтрокуВМассивПодстрок" в модуле объекта
&НаСервереБезКонтекста
Функция СбисРазложитьСтрокуВМассивПодстрокНаСервереБезКонтекста(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено,
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Возврат МодульОбъектаСерверБезКонтекста().СбисРазложитьСтрокуВМассивПодстрок(Значение, Разделитель, ПропускатьПустыеСтроки, СокращатьНепечатаемыеСимволы);
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы_АсинхроннаяКоманда

//Класс команды для вызова СБИС3 плагина
&НаКлиенте
Функция НовыйАсинхроннаяСбисКоманда(ОбработчикВызова=Неопределено, ДопПараметры=Неопределено) Экспорт
	Перем СбисАккаунт, ВремяОжиданияОтвета, МодульВызоваКоманды;

	Результат = Новый Структура(
	"_класс,					ОбработчикВызова, ПараметрыКоманды, АргументВызова, Идентификатор, События, Ответ, ВремяОжиданияОтвета, ВремяВызова, ВремяПолучения, ПараметрыСобытий",
	"АсинхроннаяСбисКоманда",	ОбработчикВызова, Новый Структура); 
	Если Не ДопПараметры = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ДопПараметры);
		Если ДопПараметры.Свойство("ПодпискиНаСобытия") Тогда
			Если Результат.События = Неопределено Тогда
				Результат.События = Новый Структура;
			КонецЕсли;
			Для Каждого КлючИЗначениеПОдписки Из ДопПараметры.ПодпискиНаСобытия Цикл
				НовоеСобытие = Новый Структура("Функция, Параметры, Модуль");
				ЗаполнитьЗначенияСвойств(НовоеСобытие, КлючИЗначениеПОдписки.Значение);
				Результат.События.Вставить(КлючИЗначениеПОдписки.Ключ, НовоеСобытие);
			КонецЦикла;
		КонецЕсли;
		
		Если ДопПараметры.Свойство("ОчиститьПараметры") Тогда
			Результат.ПараметрыКоманды.Вставить("ОчиститьПараметры", ДопПараметры.ОчиститьПараметры);
		КонецЕсли;
 
	КонецЕсли;
	Если Не Результат.ПараметрыКоманды.Свойство("ОчиститьПараметры") Тогда
		Результат.ПараметрыКоманды.Вставить("ОчиститьПараметры",	Ложь);
	КонецЕсли;
	
	Если Не Результат.ПараметрыКоманды.Свойство("МногопоточныйРежим") Тогда
		Результат.ПараметрыКоманды.Вставить("МногопоточныйРежим",	ПолучитьЗначениеПараметраСбис("МногопоточныйРежим"));
	КонецЕсли;
	
	Если Результат.События = Неопределено Тогда
		Результат.События = Новый Структура;
	КонецЕсли;
	
	Если Результат.Идентификатор = Неопределено Тогда
		Попытка
			Результат.Идентификатор = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СБИС_ИдЗапросаВызова(ГлавноеОкно.Кэш);
		Исключение
			ВызватьСбисИсключение(ИнформацияОбОшибке(), ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".СБИСПлагин_Команда", 400);
		КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.ВремяОжиданияОтвета) Тогда
		Результат.ВремяОжиданияОтвета = ПолучитьЗначениеПараметраСбис("ВремяОжиданияОтвета");
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

//Вызываем метод плагина и подключаем обработчик на результат.
&НаКлиенте
Процедура АсинхроннаяСбисКоманда_Установить(АсинхроннаяСбисКоманда, КлючУстановить, ЗначениеУстановить) Экспорт

	Если			КлючУстановить = "События" Тогда
		Для Каждого КлючИЗначениеПодписка Из ЗначениеУстановить Цикл
			АсинхроннаяСбисКоманда.События.Вставить(КлючИЗначениеПодписка.Ключ, КлючИЗначениеПодписка.Значение);
		КонецЦикла;
	ИначеЕсли       КлючУстановить = "ПараметрыСобытий" Тогда
		АсинхроннаяСбисКоманда.ПараметрыСобытий = ЗначениеУстановить;
	КонецЕсли;
	
КонецПроцедуры

// Функция - Вызывает событие от подписки асинх.команды
//
// Параметры:
//  АсинхроннаяСбисКоманда	 - АсинхроннаяСбисКоманда	- от которой вызывается событие
//  КлючСобытия				 - Строка					- Ключ для поиска в Событиях команды	
//  РезультатСобытия		 - Произв					- результат, куда будет помещен итог обработки
// 
// Возвращаемое значение:
//  Булево  - было ли вызвано событие, или нет.
//
&НаКлиенте
Функция АсинхроннаяСбисКоманда_ВызватьСобытие(АсинхроннаяСбисКоманда, АсинхронноеСбисСобытие) Экспорт
	Перем СобытиеВыполнить, лМодульСобытияВыполнить;
	
	Если Не АсинхроннаяСбисКоманда.События.Свойство(АсинхронноеСбисСобытие.Тип, СобытиеВыполнить) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СобытиеВыполнить.Свойство("Модуль", лМодульСобытияВыполнить) Тогда
		лМодульСобытияВыполнить = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция;
	КонецЕсли;
	
	Попытка
		ОбработчикСобытия = НовыйСбисОписаниеОповещения(СобытиеВыполнить.Функция, лМодульСобытияВыполнить, АсинхроннаяСбисКоманда.ПараметрыСобытий);
		ВыполнитьСбисОписаниеОповещения(АсинхронноеСбисСобытие, ОбработчикСобытия);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина

КонецФункции

//Вызывает команду и дожидается ответа.
&НаКлиенте
Функция АсинхроннаяСбисКоманда_ОтправитьИДождатьсяОтвета(АсинхроннаяСбисКоманда) Экспорт
	
	Попытка
		АсинхроннаяСбисКоманда_Выполнить(АсинхроннаяСбисКоманда);
		КомандаОбработана = АсинхроннаяСбисКоманда_ПолучитьОтветСинхронно(АсинхроннаяСбисКоманда);
	Исключение
		РезультатВызова	= НовыйСбисИсключение(ИнформацияОбОшибке(), ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".СбисОтправитьИОбработатьКоманду");
		НовоеСобытие	= НовыйАсинхронноеСбисСобытие(АсинхроннаяСбисКоманда.Идентификатор, РезультатВызова, "Error");
		АсинхронноеСбисСобытие_ОсвободитьПоток(НовоеСобытие, АсинхроннаяСбисКоманда);
	КонецПопытки;
		
	Возврат АсинхроннаяСбисКоманда.Ответ;

КонецФункции
	
//Вызываем метод плагина и подключаем обработчик на результат.
&НаКлиенте
Процедура АсинхроннаяСбисКоманда_Выполнить(АсинхроннаяСбисКоманда) Экспорт
	
	АсинхроннаяСбисКоманда_ВызватьСобытие(АсинхроннаяСбисКоманда, НовыйАсинхронноеСбисСобытие(,,"BeforeCall"));

	Попытка
		АсинхроннаяСБИСКоманда.ВремяВызова = ТекущаяДата();
		ВыполнитьСбисОписаниеОповещения(АсинхроннаяСбисКоманда, АсинхроннаяСбисКоманда.ОбработчикВызова);
		
		Если АсинхроннаяСбисКоманда.ПараметрыКоманды.ОчиститьПараметры Тогда
			АсинхроннаяСбисКоманда.АргументВызова.ПараметрыМетода = Неопределено;
		КонецЕсли;
		
		Если АсинхроннаяСбисКоманда.ПараметрыКоманды.МногопоточныйРежим Тогда 
			АсинхроннаяСбисКоманда_ЗанятьПоток(АсинхроннаяСБИСКоманда);
		КонецЕсли;
		
		СобытиеПослеОтправки = НовыйАсинхронноеСбисСобытие(АсинхроннаяСбисКоманда.Идентификатор, , "AfterCall");
	Исключение
		//Генерируем событие об ошибке
		РезультатОтправка		= НовыйСбисИсключение(ИнформацияОбОшибке(), ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".АсинхроннаяСбисКоманда_Выполнить");
		СобытиеПослеОтправки	= НовыйАсинхронноеСбисСобытие(АсинхроннаяСбисКоманда.Идентификатор, РезультатОтправка, "Error");
	КонецПопытки;
	
	СобытиеОбработано = АсинхроннаяСбисКоманда_ВызватьСобытие(АсинхроннаяСбисКоманда, СобытиеПослеОтправки);
	
	Если Не СобытиеОбработано Тогда
		//Нет подписки на ошибку, прокинуть в команду.
		Если СобытиеПослеОтправки.Тип = "Error" Тогда
			ВызватьСбисИсключение(РезультатОтправка, "МодульОбъектаКлиент.АсинхроннаяСбисКоманда_Выполнить");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Ожидает получения ответа на вызов команды.
&НаКлиенте
Функция АсинхроннаяСбисКоманда_ПолучитьОтветСинхронно(АсинхроннаяСбисКоманда, ДопПараметры = Неопределено) Экспорт
	Перем Результат;
	ОжидаемыеКоманды = Новый Соответствие;
	ОжидаемыеКоманды.Вставить(АсинхроннаяСбисКоманда.Идентификатор, АсинхроннаяСбисКоманда);
	Результат = Неопределено;
	Пока Истина Цикл
		РезультатПолучения	= ГлобальныйКэш_ЧтениеОтветовИВызовСобытий(ОжидаемыеКоманды);
		Результат			= РезультатПолучения.Получить(АсинхроннаяСбисКоманда.Идентификатор);
		Если	Не Результат = Неопределено 				
			Или	Не АсинхроннаяСбисКоманда.ВремяОжиданияОтвета Тогда 
			//Получен ответ на запрос, или делаем один проход на чтение	
			Прервать;
		ИначеЕсли ТекущаяДата() - АсинхроннаяСбисКоманда.ВремяВызова > АсинхроннаяСбисКоманда.ВремяОжиданияОтвета Тогда
			//Установленный на команде таймаут
			ИмяПроцедурыВызова = АсинхроннаяСбисКоманда.ОбработчикВызова.ИмяПроцедуры;
			ВызватьСбисИсключение(, ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".СБИСПлагин_ПолучитьОтвет_Синхронно",
				775,, ИмяПроцедурыВызова + "() не вернул ответ за разумное время",,
				"https://sbis.ru/help/integration/1C_set/modul/typical_errors/plugin_answer");
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура АсинхроннаяСбисКоманда_ЗанятьПоток(АсинхроннаяСбисКоманда) Экспорт
	
	ГлобальныйКэш.СБИС.ДанныеИнтеграции.Потоки.Вставить(АсинхроннаяСбисКоманда.Идентификатор, АсинхроннаяСбисКоманда);
	Если ПолучитьЗначениеПараметраСбис("РежимОтладки") Тогда
		лОтладочныеДанные = Новый Структура("Тип, Модуль, Вызов, Время, Идентификатор, Сообщение", "CALL");
		лОтладочныеДанные.Модуль		= ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя");
		лОтладочныеДанные.Вызов			= АсинхроннаяСбисКоманда_ИмяВызова(АсинхроннаяСбисКоманда);
		лОтладочныеДанные.Сообщение		= АсинхроннаяСбисКоманда.АргументВызова;
		лОтладочныеДанные.Идентификатор	= АсинхроннаяСбисКоманда.Идентификатор;
		лОтладочныеДанные.Время			= АсинхроннаяСбисКоманда.ВремяВызова;
		ДанныеВЛог = Новый Массив;
		ДанныеВЛог.Добавить(АсинхроннаяСбисКоманда);
		СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
	КонецЕсли;

	//Сообщить(Кэш.СБИС.ПараметрыИнтеграции.Потоки_КоличествоСвободных);
КонецПроцедуры

&НаКлиенте
Функция АсинхроннаяСбисКоманда_ИмяВызова(АсинхроннаяСбисКоманда) Экспорт
	
	ИмяКомандыВызова = АсинхроннаяСбисКоманда.ОбработчикВызова.ИмяПроцедуры;
		
	Если ИмяКомандыВызова = "СбисОтправитьКоманду_Асинхронно" Тогда
		
		ИмяКомандыВызова = АсинхроннаяСбисКоманда.АргументВызова.Метод;
		
	КонецЕсли;
	
	Возврат ИмяКомандыВызова;	
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы_АсинхронноеСбисСобытие

&НаКлиенте
Функция НовыйАсинхронноеСбисСобытие(СбисИдСобытия = "", СбисДанныеСобытия = Неопределено, СбисТипСобытия = "") Экспорт
	
	Результат = Новый Структура("_класс, Идентификатор, Данные, Тип, Получено", "АсинхронноеСбисСобытие", СбисИдСобытия);
	
	АсинхронноеСбисСобытие_Установить(Результат, "Тип",		СбисТипСобытия);
	АсинхронноеСбисСобытие_Установить(Результат, "Данные",	СбисДанныеСобытия);
	АсинхронноеСбисСобытие_Установить(Результат, "Получено");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура АсинхронноеСбисСобытие_Установить(АсинхронноеСбисСобытие, КлючУстановить, ЗначениеУстановить=Неопределено)
	
	Если			КлючУстановить = "Тип" Тогда
		ТипСобытияУстановить = НРег(ЗначениеУстановить);
		Если		ТипСобытияУстановить = "event"			Тогда
			АсинхронноеСбисСобытие.Тип = "Event";
		ИначеЕсли 	ТипСобытияУстановить = "message"		Тогда
			АсинхронноеСбисСобытие.Тип = "Message";
		ИначеЕсли	ТипСобытияУстановить = "error"			Тогда
			АсинхронноеСбисСобытие.Тип = "Error";
		ИначеЕсли	ТипСобытияУстановить = "error"			Тогда
			АсинхронноеСбисСобытие.Тип = "CriticalError";
		ИначеЕсли	ТипСобытияУстановить = "criticalerror"	Тогда
			АсинхронноеСбисСобытие.Тип = "TimeoutError";
		ИначеЕсли	ТипСобытияУстановить = "async"			Тогда
			АсинхронноеСбисСобытие.Тип = "Async";
		ИначеЕсли	ТипСобытияУстановить = "asyncerror"		Тогда
			АсинхронноеСбисСобытие.Тип = "AsyncError";
		ИначеЕсли	ТипСобытияУстановить = "beforecall"		Тогда
			АсинхронноеСбисСобытие.Тип = "BeforeCall";
		ИначеЕсли	ТипСобытияУстановить = "aftercall"		Тогда
			АсинхронноеСбисСобытие.Тип = "AfterCall";
		Иначе
			АсинхронноеСбисСобытие.Тип = "Unknown";
		КонецЕсли;
	ИначеЕсли	КлючУстановить = "Данные" Тогда
		Если	ТипЗнч(ЗначениеУстановить) = Тип("Структура")
			И	ЗначениеУстановить.Свойство("_класс")
			И	ЗначениеУстановить._класс = "АсинхронноеСбисСобытие" Тогда
			АсинхронноеСбисСобытие.Данные	= ЗначениеУстановить.Данные;
			Если АсинхронноеСбисСобытие.Тип = "" Тогда
				АсинхронноеСбисСобытие.Тип = ЗначениеУстановить.Тип;
			КонецЕсли;
			Если АсинхронноеСбисСобытие.Идентификатор = "" Тогда
				АсинхронноеСбисСобытие.Идентификатор = ЗначениеУстановить.Идентификатор;
			КонецЕсли;
			АсинхронноеСбисСобытие_Установить(АсинхронноеСбисСобытие, "Получено", ЗначениеУстановить.ПОлучено);
		Иначе
			АсинхронноеСбисСобытие.Данные	= ЗначениеУстановить;
		КонецЕсли;
	ИначеЕсли	КлючУстановить = "Получено" Тогда
		Если	АсинхронноеСбисСобытие.Получено = Неопределено
			И	ЗначениеУстановить = Неопределено Тогда
			ЗначениеУстановить = ТекущаяДата();
		КонецЕсли;
		АсинхронноеСбисСобытие.Получено = ЗначениеУстановить;
	Иначе
		АсинхронноеСбисСобытие[КлючУстановить] = ЗначениеУстановить;
	КонецЕсли;
	
КонецПроцедуры

//Вызывает метод подписки на событие Event
//Параметры: 
//Сбис3СобытиеОтвет - описание полученного события
//ДопПараметры - дополнительные параметры вызова, которые передаются в обработчик события.
//РезультатСобытия - в переменную помещается результат вызова события по подписке, если функция что-то возвращает
&НаКлиенте
Функция АсинхронноеСбисСобытие_ВызватьСобытиеПоПодписке(АсинхронноеСбисСобытие, ДопПараметры=Неопределено)
	
	СбисПараметрыПодписки = ГлобальныйКэш.СБИС.ДанныеИнтеграции.Подписки.Получить(АсинхронноеСбисСобытие.Идентификатор);
	Результат	= Ложь;
	Отказ		= Ложь;
	Если Не СбисПараметрыПодписки = Неопределено Тогда
		ИмяФункцииПодписки		= Неопределено;
		МодульФункцииПодписки	= Неопределено;
		
		Если Не СбисПараметрыПодписки.Свойство("Функция", ИмяФункцииПодписки) Тогда
			//Для события QueryID = его тип, если не указана функция вызова
			ИмяФункцииПодписки = АсинхронноеСбисСобытие.Идентификатор;
		КонецЕсли;
		Если Не СбисПараметрыПодписки.Свойство("Модуль", МодульФункцииПодписки) Тогда
			МодульФункцииПодписки = МодульОбъектаКлиент();
		КонецЕсли;
		
		ПараметрыСобытия = Новый Структура("Основные, Дополнительные", СбисПараметрыПодписки.Параметры, ДопПараметры);
		Попытка
			ОбработчикСобытия = НовыйСбисОписаниеОповещения(ИмяФункцииПодписки, МодульФункцииПодписки, ПараметрыСобытия);
			ВыполнитьСбисОписаниеОповещения(АсинхронноеСбисСобытие, ОбработчикСобытия);
		Исключение
			РезультатСобытия = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент." + ИмяФункцииПодписки,,,,Новый Структура("data", АсинхронноеСбисСобытие));
			Отказ = Истина;
		КонецПопытки;
		Результат = Истина;
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСбис("РежимОтладки") Тогда
		ДанныеВЛог = Новый Массив;
		
		лОтладочныеДанные = Новый Структура("Тип, Модуль, Время, Идентификатор, Сообщение, Вызов", АсинхронноеСбисСобытие.Тип, "МодульОбъектаКлиент", АсинхронноеСбисСобытие.Получено, АсинхронноеСбисСобытие.Идентификатор, АсинхронноеСбисСобытие.Данные, "Unknown");
		Если Результат Тогда
			лОтладочныеДанные.Вызов = ИмяФункцииПодписки;
		КонецЕсли;
		ДанныеВЛог.Добавить(лОтладочныеДанные);

		Если Отказ Тогда
			НовоеАсинхронноеСобытие = НовыйАсинхронноеСбисСобытие(, РезультатСобытия, "AsyncError");
			//Если пришёл результат от подписки на событие, то его тоже выгрузим в лог
			лОтладочныеДанные = Новый Структура("Тип, Модуль, Время, Идентификатор, Сообщение, Вызов", НовоеАсинхронноеСобытие.Тип, "МодульОбъектаКлиент", НовоеАсинхронноеСобытие.Получено, АсинхронноеСбисСобытие.Идентификатор, АсинхронноеСбисСобытие.Данные, ИмяФункцииПодписки);
			ДанныеВЛог.Добавить(лОтладочныеДанные);
		КонецЕсли;
		СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
	КонецЕсли;
	Если Отказ Тогда
		ВызватьСбисИсключение(РезультатСобытия, "МодульОбъектаКлиент.АсинхронныеВызовы_ВызватьСобытиеПоПодписке");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Добавляет не ожидаемый ответ от плагина в список на обработку/очистку. Подключает очищалку. 
&НаКлиенте
Процедура АсинхронноеСбисСобытие_ДобавитьНеобработанныйОтвет(АсинхронноеСбисСобытие) Экспорт
	
	ИдентификаторОтвета		= АсинхронноеСбисСобытие.Идентификатор;
	НеобработанныеОтветы	= ГлобальныйКэш.СБИС.ДанныеИнтеграции.НеизвестныеОтветы.Получить(ИдентификаторОтвета);
	Если НеобработанныеОтветы = Неопределено Тогда
		НеобработанныеОтветы = Новый Массив;
	КонецЕсли;
	НеобработанныеОтветы.Добавить(АсинхронноеСбисСобытие);
	ГлобальныйКэш.СБИС.ДанныеИнтеграции.НеизвестныеОтветы.Вставить(ИдентификаторОтвета, НеобработанныеОтветы);
	
	ГлобальныйКэш_ОчиститьНевостребованныеОтветы();
	
КонецПроцедуры

// Процедура освобождает команду от выполнения с вызовом события.
// Если команда не указана, то получает по событию. Если событие ещё не обрабатывалось, то запускает вызов обработчика из команды события по типу
//
// Параметры:
//  АсинхроннаяСбисКоманда	 - 	 - 
//  АсинхронноеСбисСобытие	 - 	 - 
//  СобытиеОбработано		 - 	 - 
//
//	Возвращает команду из потока
&НаКлиенте
Процедура АсинхронноеСбисСобытие_ОсвободитьПоток(АсинхронноеСбисСобытие, АсинхроннаяСбисКоманда = Неопределено, СобытиеОбработано = Ложь) Экспорт
	
	Если АсинхроннаяСбисКоманда = Неопределено Тогда
		АсинхроннаяСбисКоманда = АсинхронноеСбисСобытие_ПолучитьПоток(АсинхронноеСбисСобытие);
		Если АсинхроннаяСбисКоманда = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	АсинхроннаяСбисКоманда.ВремяПолучения	= АсинхронноеСбисСобытие.Получено;
	АсинхроннаяСбисКоманда.Ответ			= АсинхронноеСбисСобытие;
	
	Если ПолучитьЗначениеПараметраСбис("РежимОтладки") Тогда
		
		ИмяМетодаВыполнено =  АсинхроннаяСбисКоманда_ИмяВызова(АсинхроннаяСбисКоманда);
		
		лОтладочныеДанные = Новый Структура("Тип, Вызов, Время, Сообщение, Идентификатор, Модуль", АсинхронноеСбисСобытие.Тип, ИмяМетодаВыполнено, ТекущаяДата(), АсинхронноеСбисСобытие.Данные);
		лОтладочныеДанные.Модуль		= ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя");
		лОтладочныеДанные.Идентификатор = АсинхроннаяСбисКоманда.Идентификатор;
		лОтладочныеДанные.Сообщение		= АсинхронноеСбисСобытие.Данные;
		
		ДанныеВЛог = Новый Массив;
		ДанныеВЛог.Добавить(АсинхроннаяСбисКоманда);
		СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
		
	КонецЕсли;
	
	Если Не СобытиеОбработано Тогда
		СобытиеОбработано = АсинхроннаяСбисКоманда_ВызватьСобытие(АсинхроннаяСбисКоманда, АсинхронноеСбисСобытие);
	КонецЕсли;
	
	ГлобальныйКэш.СБИС.ДанныеИнтеграции.Потоки.Удалить(АсинхроннаяСбисКоманда.Идентификатор);
	
КонецПроцедуры

// Функция возвращает команду от полученного события.
//
// Параметры:
//  АсинхроннаяСбисКоманда	 - 	 - 
//
//	Возвращает команду из потока
&НаКлиенте
Функция АсинхронноеСбисСобытие_ПолучитьПоток(АсинхронноеСбисСобытие) Экспорт
	
	Возврат ГлобальныйКэш.СБИС.ДанныеИнтеграции.Потоки.Получить(АсинхронноеСбисСобытие.Идентификатор);
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы_РезультатДействия

// Функция - Класс результат действия
//
// Параметры:
//  ПараметрыДействия	 - Структура	- 
//		Тип - тип действия ОбновлениеСтатусов/Отправка/Загрузка/Обновление
//  ДопПараметры		 - Структура	- для расширения.
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция НовыйРезультатДействия(ПараметрыДействия, ДопПараметры) Экспорт
	
	РезультатДействия = Новый Структура;
	РезультатДействия.Вставить("Операция",	ПараметрыДействия.Тип);
	РезультатДействия.Вставить("Время",		Новый Структура("Начало, Конец, Запись, ОжиданиеОтвета, Выполнение, ПолучениеДанных, Подготовка",0,0,0,0,0,0,0));
	РезультатДействия.Вставить("Всего",		Новый Структура("Выполнено, НеВыполнено, ОшибокВыполнения, ОшибокПодготовки", 0,0,0,0));
	РезультатДействия.Вставить("Действие",	Новый Структура("ДетализацияВыполнено, ДетализацияНеВыполнено", Новый Соответствие,Новый Соответствие));
	РезультатДействия.Вставить("Ошибки",	Новый Структура("ДетализацияОшибок, СоответствиеКодов", Новый Соответствие,Новый Соответствие));
	Если		РезультатДействия.Операция = "ОбновлениеСтатусов" Тогда
		РезультатДействия.Вставить("Параметры", Новый Структура("ПредставлениеОперации, СчетчикПачек, СчетчикСобытий, ЕстьИзменения, ПродолжатьЗапрос, Метки", "Обновление статусов", 0, 0, Ложь, Истина));
		РезультатДействия.Параметры.Вставить("СтрокаСостояния", "Обновление статусов отправленных документов {счетчик}");
	ИначеЕсли   РезультатДействия.Операция = "ОбновлениеОбработки" Тогда
		РезультатДействия.Вставить("Параметры",	Новый Структура("ВерсияБыло, ВерсияНовая, ПредставлениеОперации", ГлобальныйКэш.Парам.ПредВерсия, ПараметрыДействия.НоваяВерсия , "Обновление"));		
	Иначе
		РезультатДействия.Вставить("Параметры",	Новый Структура("КоличествоСвободныхПотоков, КоличествоОтветов, ПорНомер, ПредставлениеОперации, ФормаВызова, СформированныеДанные, ДанныеПоСтатусам", 30));
	КонецЕсли;
	РезультатДействия.Время.Начало = ПолучитьДатуВМиллисекундах();
	Если	ДопПараметры.Свойство("СтатусыДляОбработки")
		И	ДопПараметры.СтатусыДляОбработки Тогда
		РезультатДействия.Вставить("НаЗаписьСтатусов", Новый Структура("Ошибки, Ответы", Новый Соответствие, Новый Соответствие));
	КонецЕсли;
	Возврат РезультатДействия;

КонецФункции

//Обновляет счетчики времени в результате
&НаКлиенте
Процедура РезультатДействия_ОбновитьВремя(РезультатДействия, Тип="Выполнение") Экспорт
	
	Если Не РезультатДействия.Время.Свойство(Тип) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатДействия.Время.Конец = ПолучитьДатуВМиллисекундах();
	сбисВремя = РезультатДействия.Время.Конец - РезультатДействия.Время.Начало;
	Для Каждого КлючИЗначение Из РезультатДействия.Время Цикл
		Если	КлючИЗначение.Ключ = "Начало"
			Или	КлючИЗначение.Ключ = "Конец" Тогда
			Продолжить;
		КонецЕсли;
		сбисВремя = сбисВремя - КлючИЗначение.Значение;
	КонецЦикла;

	РезультатДействия.Время[Тип] = РезультатДействия.Время[Тип] + сбисВремя;
	
КонецПроцедуры

&НаКлиенте
Функция РезультатДействия_НовыйСтрокаДетализации(РезультатДействия, ДопПараметры=Неопределено) Экспорт
	
	СтрокаРезультат = Новый Структура("Состояние, Сообщение, Название, Данные", "", "");
	Если		РезультатДействия.Операция = "Загрузка" Тогда
		СтрокаРезультат.Вставить("ОбработаныОбъекты1С", Новый Массив);
		СтрокаРезультат.Вставить("ИдентификаторПакета");
		СтрокаРезультат.Вставить("ИдентификаторВложения");
	ИначеЕсли	РезультатДействия.Операция = "Отправка" Тогда
		СтрокаРезультат.Вставить("ОбработаныОбъекты1С", Новый Массив);
	КонецЕсли;
	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("Название") Тогда
			СтрокаРезультат.Название = ДопПараметры.Название
		КонецЕсли;
	КонецЕсли;
	Возврат СтрокаРезультат;
	
КонецФункции

&НаКлиенте
Процедура РезультатДействия_ДобавитьСбисИсключение(РезультатДействия, СбисИсключение, ДопПараметры=Неопределено) Экспорт
    Перем ЭлементДетализации, ТипОшибки, СбисПараметрыСчетчика, КлючДетализации, КлючДетализацииУдалить;
	
	Если Не ДопПараметры = Неопределено Тогда
		ДопПараметры.Свойство("СтрокаДетализации",		ЭлементДетализации);
		ДопПараметры.Свойство("ТипОшибки",				ТипОшибки);	
		ДопПараметры.Свойство("ПараметрыСчетчика",		СбисПараметрыСчетчика);	
		ДопПараметры.Свойство("КлючДетализацииУдалить",	КлючДетализацииУдалить);	
		ДопПараметры.Свойство("КлючГруппировки",		КлючДетализации);	
	КонецЕсли;
	Если ТипОшибки = Неопределено Тогда
		ТипОшибки = "Выполнение";
	КонецЕсли;
	Если СбисПараметрыСчетчика = Неопределено Тогда
		СбисПараметрыСчетчика = Новый Структура;
	КонецЕсли;
	Если ЭлементДетализации = Неопределено Тогда
		ЭлементДетализации = РезультатДействия_НовыйСтрокаДетализации(РезультатДействия, Новый Структура("Название", ТипОшибки));
	КонецЕсли;
	Если КлючДетализации = Неопределено Тогда
		КлючДетализации = СбисИсключение.message;
	КонецЕсли;
	
	РезультатДействия.Ошибки.СоответствиеКодов.Вставить(СбисИсключение.message, СбисИсключение.code);
	
	Если Не КлючДетализацииУдалить = Неопределено Тогда
		//Очищаем из детализации результата ключ детализации, если необходимо
		ЭлементДетализацииУдалить = РезультатДействия.Действие.ДетализацияДействия.Свойство(КлючДетализацииУдалить);
		Если Не ЭлементДетализацииУдалить = Неопределено Тогда
			РезультатДействия.Действие.ДетализацияДействия.Удалить(КлючДетализацииУдалить);
		КонецЕсли;
	КонецЕсли;
	Если	СбисПараметрыСчетчика.Свойство("ОбработанКакУспех")
		И	СбисПараметрыСчетчика.ОбработанКакУспех Тогда
		РезультатДействия.Всего.Выполнено = РезультатДействия.Всего.Выполнено - 1;
		СбисПараметрыСчетчика.ОбработанКакУспех = Ложь;
	КонецЕсли;
	Если	Не СбисПараметрыСчетчика.Свойство("ОбработанКакОшибка")
		Или	Не СбисПараметрыСчетчика.ОбработанКакОшибка Тогда
		Если ТипОшибки = "Выполнение" Тогда
			РезультатДействия.Всего.ОшибокВыполнения = РезультатДействия.Всего.ОшибокВыполнения + 1;
		Иначе
			РезультатДействия.Всего.ОшибокПодготовки = РезультатДействия.Всего.ОшибокПодготовки + 1;
		КонецЕсли;
		СбисПараметрыСчетчика.Вставить("ОбработанКакОшибка", Истина);
	КонецЕсли;
	ЭлементСоответствия = РезультатДействия.Ошибки.ДетализацияОшибок.Получить(КлючДетализации);
	Если ЭлементСоответствия = Неопределено Тогда
		ЭлементСоответствия = Новый Массив;
		РезультатДействия.Ошибки.ДетализацияОшибок.Вставить(КлючДетализации, ЭлементСоответствия);
	КонецЕсли;
	ЭлементДетализации.Сообщение	= СбисИсключение.details;
	ЭлементДетализации.Данные		= СбисИсключение;
	ЭлементСоответствия.Добавить(ЭлементДетализации);
	РезультатДействия_ОбновитьВремя(РезультатДействия, ТипОшибки);
	
КонецПроцедуры	

&НаКлиенте
Процедура РезультатДействия_ОбработатьРезультат(РезультатДействия, РезультатОперации, ДопПараметры) Экспорт
	Перем КлючГруппировки, КлючДобавления, СбисТип, СбисПараметрыСчетчика, СбисСчитать, ЭлементДетализации, ОбъектДетализации;
	
	КлючДобавления			= "Выполнено";
	КлючВремени				= "Выполнение";
	СбисДобавитьОшибку		= Ложь;
	сбисПараметрыСчетчика	= Новый Структура;
	
	Если Не ДопПараметры.Свойство("Тип",				СбисТип) Тогда
		сбисТип = КлючДобавления;
	Иначе
		КлючДобавления = СбисТип;
	КонецЕсли;
	Если Не	ДопПараметры.Свойство("ПараметрыСчетчика",	сбисПараметрыСчетчика) Тогда
		сбисПараметрыСчетчика = Новый Структура;
	КонецЕсли;
	Если Не	ДопПараметры.Свойство("Считать",			СбисСчитать) Тогда
		СбисСчитать = Истина;
	КонецЕсли;
	Если Не	ДопПараметры.Свойство("КлючГруппировки",	КлючГруппировки) Тогда
		КлючГруппировки = "-";
	КонецЕсли;
	
	Если		сбисТип = "Выполнено" Тогда
		ОбъектДетализации	= РезультатДействия.Действие["Детализация" + сбисТип];
	ИначеЕсли	сбисТип = "НеВыполнено" Тогда
		КлючДобавления		= "НеВыполнено";
		ОбъектДетализации	= РезультатДействия.Действие["Детализация" + сбисТип];
	ИначеЕсли	сбисТип = "Ошибка" Тогда
		РезультатДействия_ДобавитьСбисИсключение(РезультатДействия, РезультатОперации, ДопПараметры);
		Возврат;		
	//ИначеЕсли	сбисТип = "ОшибкаВыполнения" Тогда
	//	КлючДобавления		= "ОшибокВыполнения";
	//	КлючВремени			= "Выполнение";
	//	ОбъектДетализации	= РезультатДействия.Ошибки;
	//ИначеЕсли	сбисТип = "ОшибкаПодготовки" Тогда
	//	КлючВремени			= "Подготовка";
	//	КлючДобавления		= "ОшибокПодготовки";
	//	ОбъектДетализации	= РезультатДействия.Ошибки;
	Иначе
		Возврат;
	КонецЕсли;
	Если Не	ДопПараметры.Свойство("ЭлементДетализации",	ЭлементДетализации) Тогда
		ЭлементДляВставки = ОбъектДетализации.Получить(КлючГруппировки);
		Если ЭлементДетализации = Неопределено Тогда
			ПараметрыДетализации = Новый Структура("Название", СбисТип);
			ЭлементДетализации = РезультатДействия_НовыйСтрокаДетализации(РезультатДействия, ПараметрыДетализации);
		КонецЕсли;
	КонецЕсли;
	ЭлементДетализации.Данные = РезультатОперации;
	ОбъектДетализации.Вставить(КлючГруппировки, ЭлементДетализации);
	
	Если СбисСчитать Тогда
		//Делаем итерацию по счетчику. Если уже обработан как ошибка, или успех то не считаем.
		Если	(	Не сбисПараметрыСчетчика.Свойство("ОбработанКакУспех")
			Или	Не сбисПараметрыСчетчика.ОбработанКакУспех)
			И	(	Не сбисПараметрыСчетчика.Свойство("ОбработанКакОшибка")
			Или	Не сбисПараметрыСчетчика.ОбработанКакОшибка) Тогда
			РезультатДействия.Всего[КлючДобавления] = РезультатДействия.Всего[КлючДобавления] + 1;
			сбисПараметрыСчетчика.Вставить("ОбработанКакУспех", Истина);
		КонецЕсли;
	КонецЕсли;
	РезультатДействия_ОбновитьВремя(РезультатДействия, КлючВремени);
		
КонецПроцедуры
	
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы_СбисОписаниеОповещения

// Функция - Конструктор класс описание оповещения с учетом старых ОФ
//
// Параметры: аналогично ОписаниеОповещения
// 
// Возвращаемое значение:
// СбисОписаниеОповещения  - экземпляр класса
//
&НаКлиенте
Функция НовыйСбисОписаниеОповещения(СбисПроцедура, СбисМодуль, СбисДопПараметры = Неопределено, СбисПроцедураИсключения = Неопределено, СбисМодульИсключения = Неопределено) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ГлавноеОкно.Кэш.СовместимостьМетодов.Объекты1С.ОписаниеОповещения Тогда
			СтрокаВычислить = "Новый ОписаниеОповещения(СбисПроцедура, СбисМодуль, СбисДопПараметры)";
			Если Не СбисПроцедураИсключения = Неопределено Тогда
				СбисМодульИсключенияУстановить = СбисМодульИсключения;
				Если СбисМодульИсключенияУстановить = Неопределено Тогда 
					СбисМодульИсключенияУстановить = СбисМодуль;
					СтрокаВычислить = СтрЗаменить(СтрокаВычислить, ")", ", СбисПроцедураИсключения, СбисМодульИсключенияУстановить)");
				КонецЕсли;
			КонецЕсли;
			//Вычислить для маскировки от синтаксиса
			ОписаниеОповещенияРезультат = Вычислить(СтрокаВычислить);
		Иначе
			ОписаниеОповещенияРезультат = Новый Структура("ИмяПроцедуры, Модуль, ДополнительныеПараметры, ИмяПроцедурыОбработкиОшибки, МодульОбработкиОшибки", СбисПроцедура, СбисМодуль, СбисДопПараметры, СбисПроцедураИсключения, СбисМодульИсключения);
		КонецЕсли;
	#Иначе
		Если СбисПроцедураИсключения = Неопределено Тогда
			ОписаниеОповещенияРезультат = Новый ОписаниеОповещения(СбисПроцедура, СбисМодуль, СбисДопПараметры);
		Иначе
			СбисМодульИсключенияУстановить = СбисМодульИсключения;
			Если СбисМодульИсключенияУстановить = Неопределено Тогда 
				СбисМодульИсключенияУстановить = СбисМодуль;
			КонецЕсли;
			ОписаниеОповещенияРезультат = Новый ОписаниеОповещения(СбисПроцедура, СбисМодуль, СбисДопПараметры, СбисПроцедураИсключения, СбисМодульИсключенияУстановить);
		КонецЕсли;
	#КонецЕсли
	Возврат ОписаниеОповещенияРезультат;
КонецФункции

// Процедура - Выполняет описание оповещения.
//	Обработка результата функций через Возврат не поддерживается. 
//	Для получения результата требуется проброска в ДополнительныеПараметры ОписанияОповещения тега Результат с заполнением в обработчике
//
// Параметры:
//  РезультатВызова			 - Произвольный				- первый аргумент в вызове
//  СбисОписаниеОповещения	 - СбисОписаниеОповещения	- вызываемый экземпляр описания оповещения для обработки
//
&НаКлиенте
Процедура ВыполнитьСбисОписаниеОповещения(РезультатВызова=Неопределено, СбисОписаниеОповещения) Экспорт
	
	Если СбисОписаниеОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ГлавноеОкно.Кэш.СовместимостьМетодов.Объекты1С.ОписаниеОповещения Тогда
			Выполнить("ВыполнитьОбработкуОповещения(СбисОписаниеОповещения, РезультатВызова)");//Через Выполнить для старых платформ. Маскировка от синтаксиса. 
		Иначе
				Попытка
					Выполнить("СбисОписаниеОповещения.Модуль." + СбисОписаниеОповещения.ИмяПроцедуры + "(РезультатВызова, СбисОписаниеОповещения.ДополнительныеПараметры)");
			Исключение
				СтандартнаяОбработка = Истина;
				Если ЗначениеЗаполнено(СбисОписаниеОповещения.ИмяПроцедурыОбработкиОшибки) Тогда
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					Выполнить("СбисОписаниеОповещения.МодульОбработкиОшибки." + СбисОписаниеОповещения.ИмяПроцедурыОбработкиОшибки + "(ИнформацияОбОшибке, СтандартнаяОбработка, СбисОписаниеОповещения.ДополнительныеПараметры)");
				КонецЕсли;
				Если СтандартнаяОбработка Тогда
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
	#Иначе
		ВыполнитьОбработкуОповещения(СбисОписаниеОповещения, РезультатВызова);
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы_СбисИсключение
	
// Процедура - Сообщает сбис исключение
//
// Параметры:
//  ИсключениеВходящее	 - Структура, ИнформацияОбОшибке	- экземпляр ExtSysException(СбисИсключение) в разобранном виде, либо в виде сериализованной строки
//  ДопПараметры		 - Структура, Строка	- дополнительные параметры. Если строка, то имя команды для стека при вызове как ИнформацияОбОшибке
//		СтатусСообщения		- Строка	- статус сообщения: "warning" - показать форму предупреждения со ссылкой на решение проблемы. "attention" - показать форму ошибки, "message" - вывод в обычном режиме
//		Отправлять			- Булево, признак отключения отправки ошибки в статистику
//		ИмяКоманды			- Строка для генерации исключения, если как исключение пришла ИнформацияОбОшибке
//
&НаКлиенте
Процедура СообщитьСбисИсключение(ИсключениеВходящее, ДопПараметры=Неопределено) Экспорт
	Перем СтатусОшибки, лРешениеПроблемы, лФормаВладелец, лОтправлятьОшибку;
	
	Если		ТипЗнч(ИсключениеВходящее) = Тип("ИнформацияОбОшибке") Тогда
		Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
			ИмяКомандыВСтэк = ДопПараметры.ИмяКоманды;
		Иначе
			ИмяКомандыВСтэк = Строка(ДопПараметры);
			ДопПараметры	= Новый Структура;
		КонецЕсли;
		СбисИсключение = НовыйСбисИсключение(ИсключениеВходящее, ИмяКомандыВСтэк);
	ИначеЕсли 	Не	ТипЗнч(ИсключениеВходящее) = Тип("Структура")
			Или Не	ИсключениеВходящее.Свойство("message")
			Или	Не	ИсключениеВходящее.Свойство("details") Тогда
		Возврат;
	Иначе
		СбисИсключение = ИсключениеВходящее;
	КонецЕсли;
	
	Если Не ДопПараметры = Неопределено Тогда
			
		Если 	ДопПараметры.Свойство("Отложенно")
			И	ДопПараметры.Отложенно Тогда
			//Показать ошибку отложенно.
			ДопПараметры.Удалить("Отложенно");
			СбисПараметрыДействия = Новый Структура("ИмяПроцедуры, Модуль, ДополнительныеПараметры, Аргумент");
			СбисПараметрыДействия.ИмяПроцедуры				= "СообщитьСбисИсключение";
			СбисПараметрыДействия.Модуль					= МодульОбъектаКлиент();
			СбисПараметрыДействия.ДополнительныеПараметры	= ДопПараметры;
			СбисПараметрыДействия.Аргумент					= ИсключениеВходящее;
			
			Попытка
				
				ПодключитьОтложенноеДействие(НовыйОтложенноеДействие(СбисПараметрыДействия));
				
			Исключение
				
				СообщитьСбисИсключение(НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ПодключитьОтложенноеДействие"), Новый Структура("СтатусСообщения", "message"));
				
			КонецПопытки;
			Возврат;
			
		КонецЕсли;
		
		ДопПараметры.Свойство("СтатусСообщения",	СтатусОшибки);
		ДопПараметры.Свойство("ФормаВладелец",		лФормаВладелец);
		ДопПараметры.Свойство("Отправлять",			лОтправлятьОшибку);
		
	КонецЕсли;
	
	ТекстОшибки = СбисИсключение_Представление(СбисИсключение, "сообщение");
	
	//Статус сообщения, если не указан
	Если СтатусОшибки = Неопределено Тогда
		
		Если	СбисИсключение.Свойство("help", лРешениеПроблемы)
			И	ЗначениеЗаполнено(лРешениеПроблемы) Тогда
			СтатусОшибки = "warning";
		Иначе
			СтатусОшибки = "attention";
		КонецЕсли;
		
	КонецЕсли;
	
	//Отправлять ошибку в статистику, если не указано
	Если лОтправлятьОшибку = Неопределено Тогда
		лОтправлятьОшибку = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГлобальныйКэш) Тогда
		Если ПолучитьЗначениеПараметраСбис("РежимОтладки") = Истина Тогда
			
			ДанныеВЛог			= Новый Массив;
			лОтладочныеДанные	= Новый Структура("Исключение", СбисИсключение);
			ДанныеВЛог.Добавить(лОтладочныеДанные);
			СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
			
		КонецЕсли;
		
		Если ГлобальныйКэш.ТихийРежим Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если НЕ (	ДопПараметры.Свойство("НеВызыватьРекурсивно")
				И	ДопПараметры.НеВызыватьРекурсивно) Тогда
			ИсключениеДоп = НовыйСбисИсключение(,"МодульОбъектКлиент.СообщитьСбисИсключение",,"Не определен ГлобальныйКэш");
			СообщитьСбисИсключение(ИсключениеДоп, Новый Структура("СтатусоСообщения, Отправлять, НеВызыватьРекурсивно", "platform_warning", Ложь, Истина));
			СтатусОшибки = "platform_warning";
			лОтправлятьОшибку = Ложь;	
		КонецЕсли;
	КонецЕсли;

	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Текст",			ТекстОшибки);
	Если ЗначениеЗаполнено(лРешениеПроблемы) Тогда
		ПараметрыСообщения.Вставить("ТекстСсылка",	"Решение проблемы");
		ПараметрыСообщения.Вставить("АдресСсылка",	лРешениеПроблемы);
	КонецЕсли;
	ПараметрыСообщения.Вставить("ФормаВладелец",	лФормаВладелец);
	лОтправлятьОшибку = лОтправлятьОшибку И Не СбисИсключение.code = 775;

	Если		СтатусОшибки = "warning" Тогда
		
		//Важная ошибка, которую обязательно прочитать, либо которая имеет заготовленное решение.
		ФормаПредупреждение = ПолучитьФормуОбработки("ФормаПредупреждения", Новый Структура("Владелец", лФормаВладелец));
		ФормаПредупреждение.Показать(ГлобальныйКэш, ПараметрыСообщения);
		
	ИначеЕсли	СтатусОшибки = "attention" Тогда

		//Обычные исключения показываем в информационной панели. В форме показываем только критические ошибки, либо ошибки, имеющие подготовленное решение.
		ПараметрыСообщения.Вставить("СтатусСообщения", СтатусСообщения.Внимание);
		СбисСообщить(ПараметрыСообщения); 
		
	ИначеЕсли СтатусОшибки = "platform_warning" Тогда
		
		//Только на случай, если либо ещё не проинитился кэш, либо нет возможности получить форму предупреждения.
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Предупреждение(ТекстОшибки);
		#Иначе
			ПоказатьПредупреждение(,ТекстОшибки);
		#КонецЕсли
		
	Иначе
		
		//Сообщить ошибку с обычным статусом.
		ПараметрыСообщения.Вставить("СтатусСообщения", СтатусСообщения.Обычное);
		СбисСообщить(ПараметрыСообщения);
		
	КонецЕсли;
	//Если не отключено, то отправим информацию о возникшей ошибке
	Если лОтправлятьОшибку Тогда	
		сбисПараметрыСтатистики = Новый Структура("Действие, Ошибка", "Ошибка", СбисИсключение);
		Попытка
			СбисСтатистика_СформироватьИЗаписать(сбисПараметрыСтатистики, Новый Структура);	
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			СообщитьСбисИсключение(НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектКлиент.СформироватьИЗаписатьСтатистикуНаСервис"), Новый Структура("Отправлять", Ложь));
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры

// Функция - Конструктор ExtSysException с проброской через ВызватьИсключение
//
// Параметры:
//  БазоваяОшибка	- (необяз) ExtSysException(СбисИсключение)/ИнформацияОбОшибке/Структура("code, message, detail, dump, help")/Строка (в json/произвольная)/Число(код ошибки)
//  СбисИмяКоманды	- Имя команды в стек
//  СбисКод			- (необяз)код для новой ошибки. 		По-умолч 100.				если в БазовойОшибке неопределен код
//  СбисСообщение	- (необяз)сообщение для новой ошибки.	По-умолч сообщение по коду.	если в БазовойОшибке неопределено сообщение 
//  СбисДетализация	- (необяз)детализация для новой ошибки.	По-умолч сообщение по коду.	если в БазовойОшибке неопределена детализация
//  СбисДамп		- (необяз)дамп ошибки
//  СбисХелп		- (необяз)ссылка на решение проблемы
//
&НаСервере
Процедура ВызватьСбисИсключение(БазоваяОшибка=Неопределено,	СбисИмяКоманды,
								СбисКод=Неопределено,		СбисСообщение=Неопределено, СбисДетализация=Неопределено,
								СбисДамп=Неопределено,		СбисХелп=Неопределено) Экспорт
								
	МодульОбъектаСервер().ВызватьСбисИсключениеСервер(БазоваяОшибка, СбисИмяКоманды, СбисКод, СбисСообщение, СбисДетализация, СбисДамп, СбисХелп);
	
КонецПроцедуры

// Функция - Конструктор ExtSysException
//
// Параметры:
//  БазоваяОшибка	- (необяз) ExtSysException(СбисИсключение)/ИнформацияОбОшибке/Структура("code, message, detail, dump, help")/Строка (в json/произвольная)/Число(код ошибки)
//  СбисИмяКоманды	- Имя команды в стек
//  СбисКод			- (необяз)код для новой ошибки. 		По-умолч 100.				если в БазовойОшибке неопределен код
//  СбисСообщение	- (необяз)сообщение для новой ошибки.	По-умолч сообщение по коду.	если в БазовойОшибке неопределено сообщение 
//  СбисДетализация	- (необяз)детализация для новой ошибки.	По-умолч сообщение по коду.	если в БазовойОшибке неопределена детализация
//  СбисДамп		- (необяз)дамп ошибки
//  СбисХелп		- (необяз)ссылка на решение проблемы
// 
// Возвращаемое значение:
//  Структура - ExtSysException - code, message, detail, dump, help, stack
//
&НаСервере
Функция НовыйСбисИсключение(БазоваяОшибка=Неопределено,	СбисИмяКоманды,
							СбисКод=Неопределено,		СбисСообщение=Неопределено, СбисДетализация=Неопределено, 
							СбисДамп=Неопределено,		СбисХелп=Неопределено) Экспорт
							
	//TODO надо бы всё-таки разбить на клиентскую и серверную часть и сделать сериализатор/десериализатор исключения на клиенте, без вызова сервера						
	Возврат МодульОбъектаСервер().НовыйСбисИсключениеСервер(БазоваяОшибка, СбисИмяКоманды, СбисКод, СбисСообщение, СбисДетализация, СбисДамп, СбисХелп);
	
КонецФункции

&НаКлиенте
Функция СбисИсключение_Представление(СбисИсключение, КлючПредставления="исключение") Экспорт
	
	Если КлючПредставления = "сообщение" Тогда
		
		Результат = СбисИсключение.message;
		
		Если Результат = Неопределено Тогда
			Результат = "";
		КонецЕсли;
		
		Если	СбисИсключение.Свойство("details")
			И	СбисИсключение.message <> СбисИсключение.details Тогда 
			Результат = Результат + " (" + СбисИсключение.details + ")";
		КонецЕсли;
		Возврат Результат;
		
	Иначе
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			Возврат СбисИсключение_ВСтрокуСервер(СбисИсключение);
			
		#Иначе
			
			Возврат СбисИсключение_Представление_Сервер(СбисИсключение);
			
		#КонецЕсли
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СбисИсключение_Представление_Сервер(Знач СбисИсключение)
	
	Возврат МодульОбъектаСервер().СбисИсключение_ВСтрокуСервер(СбисИсключение);
	
КонецФункции

&НаКлиенте
Функция СообщениеПоКодуОшибкиКлиент(СбисКодОшибки) Экспорт
	
	Возврат СообщениеПоКодуОшибкиВызовСервера(СбисКодОшибки);
	
КонецФункции

&НаСервере
Функция СообщениеПоКодуОшибкиВызовСервера(СбисКодОшибки)
	
	Возврат МодульОбъектаСервер().СбисИсключение_СообщениеПоКоду(СбисКодОшибки);
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы_ДанныеОтправки

&НаКлиенте
Функция НовыйОтправкаДокументаСБИС(СоставПакета, СтатусПакета="Подготовка")
	
	СтатусЭДО = Новый Структура("Статус, Этап, ИдПакета");
	
	ОтправкаДокументаСБИС = Новый Структура("_класс, СоставПакета, ДокументОтправить, СтатусПакета, ИдентификаторОтправки, СтатусЭДО", "ОтправкаДокументаСБИС", СоставПакета, , , , СтатусЭДО);
	ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "СтатусПакета", СтатусПакета);
	Возврат ОтправкаДокументаСБИС
	
КонецФункции

&НаКлиенте
Процедура ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, КлючУстановить, ЗначениеУстановить=Неопределено) Экспорт  
	
	Если КлючУстановить = "СтатусПакета" Тогда
		Если	ЗначениеУстановить = "Готов"			//Документ прошёл подготовку, сгенерирован Документ СБИС к отправке, все файлы готовы
			Или ЗначениеУстановить = "Ошибка"			//Документ обработан с ошибкой (получено событие с ошибкой)
			Или	ЗначениеУстановить = "Отправлен" 		//Получено сообщение о успешной отправке
			Или	ЗначениеУстановить = "ОтправленВПоток" 	//Выполнена отправка в поток, но ответа пока не получили
			Или	ЗначениеУстановить = "Обработан" 		//
			Или	ЗначениеУстановить = "ОжидаетАктивации"	//Пока не активирован сертификат с ИНН отправителя. 
			Или	ЗначениеУстановить = "Переотправка" 	//Упала ошибка авторизации, но удалось переавторизоваться и пакет выставлен на повторную отправку
			Или	ЗначениеУстановить = "Подготовка" 
			Или	ЗначениеУстановить = "Черновик" Тогда
			ОтправкаДокументаСБИС[КлючУстановить] = ЗначениеУстановить;
		КонецЕсли;
	ИначеЕсли КлючУстановить = "ИдПакетаЭДО" Тогда
		СтруктураЗаписей = ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СтатусЭДО"); 
		СтруктураЗаписей.ИдПакета = ЗначениеУстановить;
	ИначеЕсли КлючУстановить = "ЗначениеСтатусаЭДО" Тогда
		СтруктураЗаписей = ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СтатусЭДО"); 
		СтруктураЗаписей.Статус = ЗначениеУстановить;
	ИначеЕсли КлючУстановить = "ТекущийЭтапЭДО" Тогда
		СтруктураЗаписей = ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СтатусЭДО"); 
		СтруктураЗаписей.Этап = ЗначениеУстановить;
	Иначе
		ОтправкаДокументаСБИС[КлючУстановить] = ЗначениеУстановить;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Функция ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, КлючПолучить) Экспорт
		
	Если		КлючПолучить = "ИННОтправителя" Тогда
		ОрганизацияОтправитель = ОтправкаДокументаСБИС.СоставПакета.НашаОрганизация;
		Возврат ?(ОрганизацияОтправитель.Свойство("СвФЛ"), ОрганизацияОтправитель.СвФЛ.ИНН, ОрганизацияОтправитель.СвЮЛ.ИНН);
	ИначеЕсли	КлючПолучить = "ИдентификаторОтправки" Тогда
		Если ОтправкаДокументаСБИС.ИдентификаторОтправки = Неопределено Тогда
			ДопПараметры = Новый Структура;	
			ДопПараметры.Вставить("Статус",ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ЗначениеСтатусаЭДО"));
			ОтправкаДокументаСБИС.ИдентификаторОтправки = СоставПакета_Идентификатор(ОтправкаДокументаСБИС.СоставПакета, ДопПараметры);
		КонецЕсли;
		Возврат ОтправкаДокументаСБИС.ИдентификаторОтправки; 
	ИначеЕсли КлючПолучить = "ИдПакетаЭДО" Тогда
		 Возврат ОтправкаДокументаСБИС.СтатусЭДО.ИдПакета;  
	ИначеЕсли КлючПолучить = "ЗначениеСтатусаЭДО" Тогда
		 Возврат ОтправкаДокументаСБИС.СтатусЭДО.Статус;  
	ИначеЕсли КлючПолучить = "ТекущийЭтапЭДО" Тогда
		 Возврат ОтправкаДокументаСБИС.СтатусЭДО.Этап;

	//ИначеЕсли	КлючПолучить = "ПараметрыОшибки" Тогда
	//	
	//	ПараметрыОшибкиРезультат = Новый Структура("Фатальная, Авторизация, Подготовка");
	//	Если ЗначениеЗаполнено(ОтправкаДокументаСБИС.Ошибка) Тогда
	//		Возврат 
	//	КонецЕсли;
	//	
	КонецЕсли;
	
	Возврат ОтправкаДокументаСБИС[КлючПолучить];
	
КонецФункции

&НаКлиенте
Процедура ОтправкаДокументаСБИС_Подготовить(ОтправкаДокументаСБИС)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Статус",		ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ЗначениеСтатусаЭДО"));  
	ДопПараметры.Вставить("Этап",		ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ТекущийЭтапЭДО"));
	ДопПараметры.Вставить("Шифрование",	ПолучитьЗначениеПараметраСбис("Шифрование"));
	
	АргументОтправки = СоставПакета_ПодготовитьКОтправке(ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СоставПакета"), ДопПараметры);
	ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "ДокументОтправить",	АргументОтправки.ДокументОтправить);
	ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "СтатусПакета",			АргументОтправки.СтатусПакета);
	
КонецПроцедуры	

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы_ОтложенныеФункции

// Класс - отложенное действие
//
// Параметры:
//  ПараметрыКонструктора	 - Структура	 - описанине для создания отложенной операции
//		ОписаниеОповещения			- Условно-Обязательный, СбисОписаниеОповещения - обработчик вызова.
//		ИмяПроцедуры				- Условно-Обязательный, Строка, - Имя - имя процедуры/функции для описания оповещения.		Если не указан параметр "ОписаниеОповещения"
//		Модуль						- Условно-Обязательный, Форма/МодульОбъекта, - модуль для описания оповещения.				Если не указан параметр "ОписаниеОповещения"
//		ДополнительныеПараметры 	- Необязательный, Структура(Неопределено) - Второй параметр для описания оповещения.		Если не указан параметр "ОписаниеОповещения"
//		ИмяПроцедурыОбработкиОшибки	- Необязательный Строка, - Имя - имя процедуры/функции для описания оповещения при ошибке.	Если не указан параметр "ОписаниеОповещения"
//		МодульОбработкиОшибки		- Необязательный Форма/МодульОбъекта, - модуль для описания оповещения при ошибке.			Если не указан параметр "ОписаниеОповещения"
//		ИдентификаторДействия		- Необязательный, Строка(ИмяПроцедуры) - ключ для поиска действия. Если не указан, то берётся имя процедуры из описания оповещения.
//		Периодичность				- Необязательный, Число, секунды (0.1) - как часто производится вызов. Если не указано, то сразу после завершения последнего вызова. 
//		Аргумент 					- Необязательный, Произвольный(Неопределено),  - Аргумент для вызова описания оповещения
//		ЧислоВызовов				- Необязательнвц, Число(1) - сколько раз делать вызов. Если Неопределено, то бесконечно.
//		ВызватьСразу				- Необязательный, Булево(Истина) - Выполнить сразу при завершении текущих вызовов. Смысл указывать есть только при большой периодичности между вызовами, когда нет необходимости вызова сразу при подключении операции.
// 
// Возвращаемое значение:
//  Экземпляр(Структура) - класс отложенное действие
//
&НаКлиенте
Функция НовыйОтложенноеДействие(ПараметрыКонструктора) Экспорт
	Перем СбисОписаниеОповещения, ДопПараметры, ИмяПроцедурыОбработкиОшибки, МодульОбработкиОшибки;
	Попытка
		Если Не ПараметрыКонструктора.Свойство("ОписаниеОповещения", СбисОписаниеОповещения) Тогда
			ПараметрыКонструктора.Свойство("ДополнительныеПараметры",		ДопПараметры);
			ПараметрыКонструктора.Свойство("ИмяПроцедурыОбработкиОшибки",	ИмяПроцедурыОбработкиОшибки);
	 		ПараметрыКонструктора.Свойство("МодульОбработкиОшибки",			МодульОбработкиОшибки);
			СбисОписаниеОповещения = НовыйСбисОписаниеОповещения(ПараметрыКонструктора.ИмяПроцедуры, ПараметрыКонструктора.Модуль, ДопПараметры, ИмяПроцедурыОбработкиОшибки, МодульОбработкиОшибки);
		КонецЕсли;
		ОбъектОтложенногоДействия = Новый Структура(
		"_класс,				ОписаниеОповещения,	СледующийВызовМС,									ЧислоВызовов, ПоследнийВызовМС, ПериодичностьМС, Аргумент, ИдДействия", 
		"ОтложенноеДействие",	СбисОписаниеОповещения,	ПолучитьДатуВМиллисекундах());
		Если ПараметрыКонструктора.Свойство("ИдентификаторДействия", ОбъектОтложенногоДействия.ИдДействия) Тогда
			
			ОбъектОтложенногоДействия.ИдДействия = "_" + СтрЗаменить(ОбъектОтложенногоДействия.ИдДействия, "-", "_");
			
		Иначе
			
			ОбъектОтложенногоДействия.ИдДействия = СбисОписаниеОповещения.ИмяПроцедуры;
			
		КонецЕсли;
		Если ПараметрыКонструктора.Свойство("Периодичность", ОбъектОтложенногоДействия.ПериодичностьМС) Тогда
			ОбъектОтложенногоДействия.ПериодичностьМС = ОбъектОтложенногоДействия.ПериодичностьМС * 1000;
			Если ПараметрыКонструктора.Свойство("ВызватьСразу") И Не ПараметрыКонструктора.ВызватьСразу Тогда
				//ПО умолчанию, вызывается при попадании в обработчик, но можно отключить, тогда вызов будет через указанную периодичность по таймеру от момента подключения
				ОбъектОтложенногоДействия.СледующийВызовМС = ОбъектОтложенногоДействия.СледующийВызовМС + ОбъектОтложенногоДействия.ПериодичностьМС;
			КонецЕсли;
		Иначе
			ОбъектОтложенногоДействия.ПериодичностьМС = 100;//по-дефолту, сразу при срабатывании
		КонецЕсли;
		Если Не ПараметрыКонструктора.Свойство("ЧислоВызовов", ОбъектОтложенногоДействия.ЧислоВызовов) Тогда
			ОбъектОтложенногоДействия.ЧислоВызовов = 1;//Однократно, для бесконечного вызова - Неопределено
		КонецЕсли;
		ПараметрыКонструктора.Свойство("Аргумент", ОбъектОтложенногоДействия.Аргумент);
		
		Возврат ОбъектОтложенногоДействия;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.НовыйОтложенноеДействие");
	КонецПопытки;
КонецФункции

// Функция - создает копию отложенного действия
//
// Параметры:
//  ОтложенноеДействие	 - Объект отложенное действие, которое надо запустить на выполнение 
//
&НаКлиенте
Функция ОтложенноеДействие_Скопировать(ОтложенноеДействие) Экспорт
	
	ОбъектОтложенногоДействия = Новый Структура(
	"_класс, ОписаниеОповещения, СледующийВызовМС, ЧислоВызовов, ПоследнийВызовМС, ПериодичностьМС, Аргумент, ИдДействия");
	ЗаполнитьЗначенияСвойств(ОбъектОтложенногоДействия, ОтложенноеДействие);
	ОбъектОтложенногоДействия.ИдДействия = "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
	Возврат ОбъектОтложенногоДействия;
	
КонецФункции
	
// Процедура - запускает отложенное действие на выполнение
//
// Параметры:
//  ОтложенноеДействие	 - Объект отложенное действие, которое надо запустить на выполнение 
//
&НаКлиенте
Процедура ПодключитьОтложенноеДействие(ОтложенноеДействие) Экспорт
	сбисОтложенныеОперации	= ГлобальныйКэш.ТекущийСеанс.сбисОтложенныеОперации;
	ОтложенныеПроцедуры		= сбисОтложенныеОперации.Процедуры;
	Если ОтложенныеПроцедуры.Свойство(ОтложенноеДействие.ИдДействия) Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ПодключитьОтложенноеДействие", 735,, "Действие с идентификатором " + ОтложенноеДействие.ИдДействия + "уже запущено"); 
	Иначе
		ОтложенныеПроцедуры.Вставить(ОтложенноеДействие.ИдДействия, ОтложенноеДействие); 
	КонецЕсли;
	Если сбисОтложенныеОперации.Запущено Тогда
		ГлавноеОкно.ОтключитьОбработчикОжидания("ВыполнениеОтложенныхПроцедур");
		//Переключаем чтобы вызов произошёл сразу.
	КонецЕсли;	
	ГлавноеОкно.ПодключитьОбработчикОжидания("ВыполнениеОтложенныхПроцедур", 0.1, Истина);
	сбисОтложенныеОперации.Запущено = Истина;
КонецПроцедуры

// Процедура - убирает отложенное действие из списка выполняемых
//
// Параметры:
//  ПараметрыОтключения - Структура
//		ОтложенноеДействие	 - Условно-Обязательный, Объект отложенное действие, которое надо отключить. Либо передан ИдентификаторДействия 
//		ИдентификаторДействия- Условно-Обязательный, Строка, ид действия, которое надо отключить. Либо передано ОтложенноеДействие 
//
&НаКлиенте
Процедура ОтключитьОтложенноеДействие(ОтложенноеДействие) Экспорт
	Перем КлючОперации;
	
	КлючОперации		= ОтложенноеДействие.ИдДействия;
	ОтложенныеПроцедуры	= ГлобальныйКэш.ТекущийСеанс.сбисОтложенныеОперации.Процедуры;
	Если ОтложенныеПроцедуры.Свойство(КлючОперации) Тогда
		ОтложенныеПроцедуры.Удалить(КлючОперации);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы_ЛокальныйКэш

// Класс - Кэш
//
// Параметры:
//  ПараметрыКонструктора	 - Структура	 - описанине для создания отложенной операции
//		АдресСервера		- Необязательный, Строка, адрес сервера настройки. Если не указано, то берётся первый доступный
//		МодульОбъектаКлиент	- Необязательный, Форма/МодульОбъекта. Если не указан, берётся текущий.
// 
// Возвращаемое значение:
//  Экземпляр(Структура) - пустой класс Кэш
//
&НаКлиенте
Функция НовыйЛокальныйКэш(ПараметрыКонструктора) Экспорт
	
	Кэш = Новый Структура("СБИС, ТекущийСеанс, Парам, ТихийРежим, РаботаСJSON", НовыйКэшСБИС(ПараметрыКонструктора), НовыйТекущийСеанс(ПараметрыКонструктора), Новый Структура, Ложь);
	Кэш.Вставить("ГлавноеОкно",			ПараметрыКонструктора.Владелец);
	Кэш.Вставить("ПараметрыСистемы",	ПараметрыКонструктора.ПараметрыСистемы);
	Если ПараметрыКонструктора.Свойство("ТихийРежим") Тогда
		Кэш.ТихийРежим = ПараметрыКонструктора.ТихийРежим;
	КонецЕсли;
	Возврат Кэш;
	
КонецФункции

//Устанавливает кэш обмена
&НаКлиенте
Функция	НовыйКэшСБИС(ПараметрыКонструктора) Экспорт
	Перем МодульОбъектаКлиент, СбисАдресСервера;
	Если Не ПараметрыКонструктора.Свойство("АдресСервера",			СбисАдресСервера) Тогда
		СбисАдресСервера = СписокДоступныхСерверовСБИС()[0].Значение;
	КонецЕсли;
	Если Не ПараметрыКонструктора.Свойство("МодульОбъектаКлиент",	МодульОбъектаКлиент) Тогда
		МодульОбъектаКлиент = МодульОбъектаКлиент();
	КонецЕсли;
	СбисПредставлениеСервера = СтрЗаменить(СтрЗаменить(СокрЛП(сбисАдресСервера), "https:", ""), "/", "");
	
	Если Сред(СбисПредставлениеСервера, 1, 4) = "fix-" Тогда
		КодСервиса = "fix";
	ИначеЕсли Сред(СбисПредставлениеСервера, 1, 5) = "test-" Тогда
		КодСервиса = "test";
	ИначеЕсли Сред(СбисПредставлениеСервера, 1, 6) = "online" Тогда
		КодСервиса = "";
	Иначе
		КодСервиса = "undefine";
	КонецЕсли;
	ПараметрыИнтеграцииСБИС = Новый Структура("ИдАккаунта, ИдПользователя, ИнтеграцияИмя, Пользователь, Демо");
	ПараметрыИнтеграцииСБИС.Вставить("Версия",							"");
	ПараметрыИнтеграцииСБИС.Вставить("РезервныйДомен",					Ложь);
	ПараметрыИнтеграцииСБИС.Вставить("ПредставлениеСервера",			СбисПредставлениеСервера);
	ПараметрыИнтеграцииСБИС.Вставить("КодСервиса",						КодСервиса);
	//Если параметр отключен, то для формирования вложений не будет использоваться ФЭД.Сгенерировать, а только XSLT-преобразования
	ПараметрыИнтеграцииСБИС.Вставить("ГенераторФЭД",					Ложь);
	//Crypto-мод
	ПараметрыИнтеграцииСБИС.Вставить("Шифрование",						Ложь);
	//Наличие хранения настроек в СБИС
	ПараметрыИнтеграцииСБИС.Вставить("СерверныеНастройки",				Ложь);
	ПараметрыИнтеграцииСБИС.Вставить("СтатусыВРазрезеРегламента",		Ложь);
	//Если параметр отключен, то потоки в глобальном кэше не будут заниматься и отслеживаться время их выполнения
	ПараметрыИнтеграцииСБИС.Вставить("МногопоточныйРежим",				Истина);
	ПараметрыИнтеграцииСБИС.Вставить("Потоки_КоличествоСвободных",		10);
	ПараметрыИнтеграцииСБИС.Вставить("Потоки_МаксимальноеКоличество",	10);
	ПараметрыИнтеграцииСБИС.Вставить("Отправка_РазмерПачки",			10);
	ПараметрыИнтеграцииСБИС.Вставить("ВремяОжиданияОтвета",				60);
	ПараметрыИнтеграцииСБИС.Вставить("ВремяОжиданияОтвета_Отправка",	120);
	
	ДанныеВозврата = Новый	Структура;
	ДанныеВозврата.Вставить("Ини",					Новый Структура);
	ДанныеВозврата.Вставить("ДанныеИнтеграции",		Новый Структура("Подписки, Потоки, НеизвестныеОтветы", Новый Соответствие, Новый Соответствие, Новый Соответствие));
	ДанныеВозврата.Вставить("ПараметрыИнтеграции",	ПараметрыИнтеграцииСБИС);
	ДанныеВозврата.Вставить("ОбменВключен",			Ложь);
	ДанныеВозврата.Вставить("Авторизован",			Ложь);
	ДанныеВозврата.Вставить("АдресСервера",			сбисАдресСервера);
	ДанныеВозврата.Вставить("МодульОбъектаКлиент",	МодульОбъектаКлиент);
	Возврат	ДанныеВозврата;
	
КонецФункции

&НаКлиенте
Функция НовыйТекущийСеанс(ПараметрыКонструктора)
	
	КэшТекущегоСеанса = Новый Структура("Формы, Модули, Функции, РасчитанныеЗначения, Интерфейс, сбисОтложенныеОперации", Новый Структура("Получены, Стандартные", Новый Структура), Новый Структура("Интеграция, ФункцииДокументов, Настройки"), Новый Структура, Новый Структура, Новый Структура, Новый Структура("Запущено, Процедуры, МаксимальныйПериод, СообщатьПриОшибке, ПоследнийВызовМС, СообщатьОбОшибках", Ложь, Новый Структура, 600, Истина));
	КэшТекущегоСеанса.Вставить("Параметры", Новый Структура("Идентификатор", Строка(Новый УникальныйИдентификатор)));
	КэшТекущегоСеанса.Формы.Вставить("Клиентские",	Новый СписокЗначений);
	Если Не	(	ПараметрыКонструктора.Свойство("Формы")
			И	ПараметрыКонструктора.Формы.Свойство("Стандартные", КэшТекущегоСеанса.Формы.Стандартные)) Тогда
		КэшТекущегоСеанса.Формы.Вставить("Стандартные",	ТекущийСеанс_СтандартныеФормы());
	КонецЕсли;
	КэшТекущегоСеанса.Интерфейс.Вставить("Блокировки",	Новый Соответствие);
	Возврат КэшТекущегоСеанса;
	
КонецФункции

&НаКлиенте
Функция СписокДоступныхСерверовСБИС() Экспорт
	СписокДоступныхСерверов = Новый СписокЗначений;
	СписокДоступныхСерверов.Добавить("https://online.sbis.ru/", "online.sbis.ru");
	СписокДоступныхСерверов.Добавить("https://fix-online.sbis.ru/", "fix-online.sbis.ru");
	
	ГлКэшПарам = ГлобальныйКэш_Получить("ПараметрыПользователя");
	Если Не ГлКэшПарам = Неопределено Тогда
		Если ГлКэшПарам.РежимОтладки Тогда
			СписокДоступныхСерверов.Добавить("https://test-online.sbis.ru/", "test-online.sbis.ru");
		КонецЕсли;
		Если ГлобальныйКэш.СБИС.ПараметрыИнтеграции.РезервныйДомен Тогда//Допоним список резервными доменами
			СписокДоступныхСерверов.Вставить(1, "https://online.saby.ru/", "online.saby.ru");
			СписокДоступныхСерверов.Добавить("https://fix-online.saby.ru/", "fix-online.saby.ru");
		КонецЕсли;
	КонецЕсли;
	Возврат СписокДоступныхСерверов;
КонецФункции

&НаСервере
Функция ТекущийСеанс_СтандартныеФормы()
	
	СписокФорм = Новый СписокЗначений;
	МетаданныеФорм = МодульОбъектаСервер().Метаданные().Формы;
	Для Каждого Фрм Из МетаданныеФорм Цикл
		СписокФорм.Добавить(Фрм.Имя);	
	КонецЦикла;
	Возврат СписокФорм;
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы_СтруктураРаздела

//Функция заполняет структуру с данными о текущем разделе
&НаКлиенте
Функция НовыйСтруктураРазделаГО(ИмяКнопкиРаздела = Неопределено, ДопПараметры = Неопределено) Экспорт

	Если		ИмяКнопкиРаздела = Неопределено
		И	Не	ДопПараметры = Неопределено
		И		ДопПараметры.Свойство("ИмяИни") Тогда
		//Если кнопка не передана, то может быть передана имя ини файла раздела. Попробуем найти по реестрам.
		ИмяРеестра = ДопПараметры.ИмяИни;
		Для Каждого КлючИЗначение Из ГлавноеОкно.Кэш.Разделы Цикл
			Если	Не	(	КлючИЗначение.Ключ = "Покупка"
						Или	КлючИЗначение.Ключ = "Продажа") Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого КлючИЗначениеПодРаздел Из КлючИЗначение.Значение Цикл
				Если ИмяРеестра = КлючИЗначениеПодРаздел.Значение Тогда
					
					ИмяКнопкиРаздела = КлючИЗначениеПодРаздел.Значение;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			Если Не ИмяКнопкиРаздела = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ИмяКнопкиРаздела = Неопределено Тогда
			ИмяКнопкиРаздела = "";
		КонецЕсли;
	КонецЕсли;
	
	идРаздел		= Прав(ИмяКнопкиРаздела, 2);
	ТекущийРаздел	= Лев(идРаздел, 1);
	Раздел			= Прав(идРаздел, 1);
	ТипДок			= Сред(ИмяКнопкиРаздела, 10, СтрДлина(ИмяКнопкиРаздела)-11);
	
	СтруктураРазделаГО = Новый Структура("ПредыдущийРаздел");//Для отслеживания вложенности разделов. При не удачном переходе, возвращаемся по пути обратно
	СтруктураРазделаГО.Вставить("Имя",					ИмяКнопкиРаздела);
	СтруктураРазделаГО.Вставить("ТекущийРаздел",		ТекущийРаздел);
	СтруктураРазделаГО.Вставить("Раздел",				Раздел);
	СтруктураРазделаГО.Вставить("ТипДок",				ТипДок);
	СтруктураРазделаГО.Вставить("ФормыРаздела",			Новый Массив);
	СтруктураРазделаГО.Вставить("ПараметрыРаздела",		Новый Структура);
	
	НазваниеРаздела = НазваниеРазделаПоНомеру(Раздел);
	СтруктураРазделаГО.ФормыРаздела.Добавить("Раздел_" + НазваниеРаздела + "_" + ТипДок);
	СтруктураРазделаГО.ФормыРаздела.Добавить("Раздел_" + НазваниеРаздела + "_Шаблон");
	
	Попытка
		фрм = НайтиФункциюСеансаОбработки("ОбновитьКонтент", СтруктураРазделаГО.ФормыРаздела);
	Исключение
		СообщитьСбисИсключение(ИнформацияОбОшибке(), Новый Структура("ИмяКоманды", "ГлавноеОкно.сбисСтруктураВыбранногоРаздела"));	
	КонецПопытки;
	
	СтруктураРазделаГО.Вставить("Форма", фрм);
	
	Возврат СтруктураРазделаГО;
	
КонецФункции

&НаКлиенте
Функция СтруктураРазделаГО_Получить(СтруктураРазделаГО, КлючЗначенияПолучить) Экспорт 
	
	Возврат СтруктураРазделаГО[КлючЗначенияПолучить];
	
КонецФункции

&НаКлиенте
Процедура СтруктураРазделаГО_Вставить(СтруктураРазделаГО, КлючЗначенияВставить, ЗначениеВставить) Экспорт 
	
	СтруктураРазделаГО[КлючЗначенияВставить] = ЗначениеВставить;
	
КонецПроцедуры

// Функция - возвращает Соответствие разделов главного окна
// 
// Возвращаемое значение:
//  Соответствие - номер раздела - его название
//
&НаКлиенте
Функция СоответствиеРазделовГО()
	Перем РазделыГОСБИС;
	
	Если Не ГлобальныйКэш.ТекущийСеанс.Интерфейс.Свойство("РазделыАккордеона", РазделыГОСБИС) Тогда
		РазделыГОСБИС = Новый Соответствие;
		РазделыГОСБИС.Вставить("1",	"Полученные");
		РазделыГОСБИС.Вставить("2",	"Отправленные");
		РазделыГОСБИС.Вставить("3",	"Продажа");
		РазделыГОСБИС.Вставить("4",	"Покупка");
		РазделыГОСБИС.Вставить("5",	"Настройки");
		РазделыГОСБИС.Вставить("6",	"Справочники");
		РазделыГОСБИС.Вставить("7",	"Учет");
		РазделыГОСБИС.Вставить("8",	"Задачи");
		РазделыГОСБИС.Вставить("9",	"Отчетность");
		ГлобальныйКэш.ТекущийСеанс.Интерфейс.Вставить("РазделыАккордеона", РазделыГОСБИС);
	КонецЕсли;
	
	Возврат РазделыГОСБИС;
	
КонецФункции

&НаКлиенте
Функция НазваниеРазделаПоНомеру(НомерВыбранногоРаздела)

	Возврат СоответствиеРазделовГО().Получить(Строка(НомерВыбранногоРаздела));
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы_ВложениеСБИС

&НаКлиенте
Функция НовыйВложениеСБИС(ВходящиеПараметры = Неопределено, ДопПараметры = Неопределено) Экспорт 
	Перем Документы1СВложения;
	
	СтруктураВложения = ВложениеСБИС_Пустой();
	
	Если ДопПараметры = Неопределено Тогда
		
		ДопПараметры = Новый Структура;
		
	КонецЕсли;
	
	Если	Не	ВходящиеПараметры = Неопределено Тогда
		
		Если		ЭтоТипСбис(ВходящиеПараметры, СтруктураВложения._класс) Тогда
		
			ВложениеСБИС_Заполнить(СтруктураВложения, ВходящиеПараметры, СтруктураВложения._класс);
			
		ИначеЕсли	ДопПараметры.Свойство("КлючЗаполнить") Тогда
			
			ВложениеСБИС_Заполнить(СтруктураВложения, ВходящиеПараметры, ДопПараметры.КлючЗаполнить);
					
		КонецЕсли;
		
	КонецЕсли;
	
	//Заполнить основание пакета, если прокинуто в доп. параметрах
	Если		ДопПараметры.Свойство("ОснованиеПакета")
		И   Не	СтруктураВложения.Документы1С.Количество() Тогда
		
		СтруктураВложения.Документы1С.Добавить(ДопПараметры.ОснованиеПакета);
		
	КонецЕсли;
	
	Возврат СтруктураВложения;
	
КонецФункции

// Функция - формирует пустой экземпляр вложения СБИС
// 
// Возвращаемое значение:
//  Структура - объект с пустыми полями
//
&НаКлиенте
Функция ВложениеСБИС_Пустой()
	
	ВложениеСБИС = Новый Структура(
	"_класс, Название, Тип, ПодТип, ВерсияФормата, ПодВерсияФормата, Дата, Номер, Сумма, Примечание,
	|Отправитель, Получатель, Ответственный, Подразделение, Регламент, ДокументОснование, Сертификат, Документы1С",
	"ВложениеСБИС", "", "", "", "", "", "", "", "", "", "");
	ВложениеСБИС.Отправитель	= "Отправитель";
	ВложениеСБИС.Получатель		= "Получатель";
	ВложениеСБИС.Ответственный	= Новый Структура;
	ВложениеСБИС.Подразделение	= Новый Структура;
	ВложениеСБИС.Регламент		= Новый Структура;
	ВложениеСБИС.Сертификат		= Новый Структура;
	
	ВложениеСБИС.ДокументОснование	= Новый Массив;
	ВложениеСБИС.Документы1С		= Новый СписокЗначений;
	
	Возврат ВложениеСБИС;
	
КонецФункции
	
// Процедура - заполняет текущий экземпляр класса от входных данных
//
// Параметры:
//  ВложениеСБИС	 - Структура	- (О) экземпляр класса
//  ДанныеЗаполнить	 - Структура	- (О) входные данные заполнить
//  КлючЗаполнить	 - Строка	 	- (Н) ключ входных данных, если это не класс (невозможно определить что за класс)
//
&НаКлиенте
Процедура ВложениеСБИС_Заполнить(ВложениеСБИС, ДанныеЗаполнить, КлючЗаполнить="ВложениеСБИС") 
	Перем Документы1СВложения;
	
	Если КлючЗаполнить = "ВложениеСБИС" Тогда
		
		ЗаполнитьЗначенияСвойств(ВложениеСБИС, ДанныеЗаполнить);
		
		Если		ВложениеСБИС.Документы1С.Количество() Тогда
			
			//Создать копию списка оснований, чтобы разорвать связь со старым классом
			Документы1СВложенияКопия = Новый СписокЗначений;
			Документы1СВложенияКопия.ЗагрузитьЗначения(ВложениеСБИС.Документы1С.ВыгрузитьЗначения());
			ВложениеСБИС.Документы1С = Документы1СВложенияКопия;
			
		ИначеЕсли	ДанныеЗаполнить.Свойство("Документ1С") Тогда
			
			ВложениеСБИС.Документы1С.Добавить(ДанныеЗаполнить.Документ1С);
			
		КонецЕсли;
			
		//Необязательные поля
		Если	ДанныеЗаполнить.Свойство("ИспользоватьГенератор") Тогда
			
			ВложениеСБИС.Вставить("ИспользоватьГенератор", ДанныеЗаполнить.ИспользоватьГенератор);
			
		КонецЕсли;
		
		Если	ДанныеЗаполнить.Свойство("НоменклатураКодКонтрагента") Тогда
			
			ВложениеСБИС.Вставить("НоменклатураКодКонтрагента", ДанныеЗаполнить.НоменклатураКодКонтрагента);
			
		КонецЕсли;
		
		Если	ДанныеЗаполнить.Свойство("ДопПоля") Тогда
			
			ВложениеСБИС.Вставить("ДопПоля", ДанныеЗаполнить.ДопПоля);
			
		КонецЕсли;
		
		Если	ДанныеЗаполнить.Свойство("Провести") Тогда
			
			ВложениеСБИС.Вставить("Провести", ДанныеЗаполнить.Провести);
			
		КонецЕсли;
	ИначеЕсли КлючЗаполнить = "Структура" Тогда
		
		СтруктураФайлаКонтрагента	= ПолучитьФормуОбработки("Файл_Шаблон").НовыйСтруктураФайла(ВложениеСБИС);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВложениеСБИС_Получить(ВложениеСбис, КлючПараметраПолучить) Экспорт
	Перем Результат;
	
	Если		КлючПараметраПолучить = "ПараметрыИни" Тогда
		Результат = Новый Структура("Версия, Направление, Тип", "3.01");
		
		Если	НЕ ВложениеСбис.Свойство("Тип", Результат.Тип)	Тогда
			Если		СтрЧислоВхождений(НРег(ВложениеСбис.Название), "накладная") Тогда
				Результат.Тип = "ЭДОНакл";
			ИначеЕсли	СтрЧислоВхождений(НРег(ВложениеСбис.Название), "фактура")
					И	СтрЧислоВхождений(НРег(ВложениеСбис.Название), "счет")	Тогда
				Результат.Тип = "СчФктр";
			ИначеЕсли	СтрЧислоВхождений(НРег(ВложениеСбис.Название), "акт №") Тогда
				Результат.Тип = "АктВр";
			ИначеЕсли	СтрЧислоВхождений(НРег(ВложениеСбис.Название), "счет на")
					Или	СтрЧислоВхождений(НРег(ВложениеСбис.Название), "заказ")	Тогда
				Результат.Тип = "Заказ";
			КонецЕсли;
		КонецЕсли;
		Если	НЕ ВложениеСбис.Свойство("Направление", Результат.Направление)	Тогда
			Результат.Направление = "Входящий";
		КонецЕсли;
	ИначеЕсли	КлючПараметраПолучить = "ТипВерсияВложения" Тогда

		ПараметрыИни	= ВложениеСБИС_Получить(ВложениеСбис, "ПараметрыИни");
		Результат		= ПараметрыИни.Тип + "_" + ПараметрыИни.Версия;
		Результат		= СтрЗаменить(Результат, ".", "_");
 
	ИначеЕсли	КлючПараметраПолучить = "ФайлИни" Тогда
		
		ИмяУстановленнойИни = ВложениеСБИС_Получить(ВложениеСБИС, "ИмяИни");
		
		Если ИмяУстановленнойИни = Неопределено Тогда
			
			Возврат ИниПоПараметрам(Новый Структура("Вложение", ВложениеСБИС));
			
		КонецЕсли;
		
		Возврат ИниПоПараметрам(ИмяУстановленнойИни);

	Иначе
		ВложениеСбис.Свойство(КлючПараметраПолучить, Результат)
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция - определяет сторону по роли, с учетом дополнительной: Получатель/Грузополучатель, Отправитель/Грузоотрправитель.
//	вспомогательная сторона может стать основной, если выполнены условия:
//	1. совпадает ИНН
//	2. заполнен КПП (ГП/ГО) и отличается от основной роли и код филиала(не пустой) либо
//	(считаем, что является филиалом)
//	3. не стоит явного запрета на смену (доп.свойство на карточке в 1С "ИспользоватьКакПолучателя(Отправителя)")
//
// Параметры:
//  ВложениеСБИС - класс вложение СБИС	- структура с данными сторон
//  РольДО		 - строка				- роль Отправитель/Получатель
// 
// Возвращаемое значение:
//  класс сторона - структура для роли документооборота
//
&НаКлиенте
Функция ВложениеСБИС_СторонаПоРоли(ВложениеСБИС, РольДО) Экспорт
	Перем ДанныеСтруктураФайла, ДанныеСтороныПоРоли, ДанныеСтороныПоВспомогательнойРоли, ЗапретРедакций;

	ИмяВспомогательнойРоли	= "Грузо" + РольДО;
	
	//Проверка основной стороны
	Если		Не ВложениеСБИС.Свойство(РольДО, ДанныеСтороныПоРоли) Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли	Не	ВложениеСБИС.Свойство("СтруктураФайла", ДанныеСтруктураФайла) Тогда
		
		//Нет данных файла на вложении, неоткуда брать вспомогательную роль.
		
	ИначеЕсли	Не ТипЗнч(ДанныеСтороныПоРоли) = Тип("Структура") Тогда
		
		ДанныеСтороныПоРоли = ДанныеСтруктураФайла.Файл.Документ[РольДО];
		
	Иначе
		
		//Данные определены
		
	КонецЕсли;
	
	//Если определение сторон с учетом филиала отключено для пользователя, то вернуть найденные данные по роли
	Если Не ПолучитьЗначениеПараметраСбис("Филиалы_" + РольДО) Тогда
		
		Возврат ДанныеСтороныПоРоли;
		
	КонецЕсли;
	
	//Поиск вспомогательной стороны
	Если 			ДанныеСтруктураФайла = Неопределено Тогда
		
		//Нет данных файла на вложении, неоткуда брать основную роль.
		Если Не ТипЗнч(ДанныеСтороныПоРоли) = Тип("Структура") Тогда
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли	Не	ДанныеСтруктураФайла.Файл.Документ.Свойство(ИмяВспомогательнойРоли, ДанныеСтороныПоВспомогательнойРоли) Тогда
		
		//Вспомогательных ролей нет
		
	ИначеЕсли	Не ТипЗнч(ДанныеСтороныПоВспомогательнойРоли) = Тип("Структура") Тогда
		
		ДанныеСтороныПоВспомогательнойРоли = ДанныеСтруктураФайла.Файл.Документ[ИмяВспомогательнойРоли];
		
	Иначе
		
		//Данные определены
		
	КонецЕсли;	
	
	ИспользоватьКакРольОсн		= ПрочитатьДополнительныйПараметрСтороны(ДанныеСтороныПоРоли, "ИспользоватьКак" + РольДО);
	ВспомогательнаяРольФилиал	= Ложь;

	Если	ДанныеСтороныПоВспомогательнойРоли = Неопределено Тогда
		
		ИспользоватьКакРольОсн	= Истина;
		
	Иначе
		
		ИспользоватьКакРольДоп	= ПрочитатьДополнительныйПараметрСтороны(ДанныеСтороныПоВспомогательнойРоли, "ИспользоватьКак" + РольДО);
		ПлоскиеДанныеРоли		= Сторона_Выгрузить(ДанныеСтороныПоРоли);
		ПлоскиеДанныеВспомРоли	= Сторона_Выгрузить(ДанныеСтороныПоВспомогательнойРоли);
		ЗапретРедакций			= ДанныеСтороныПоРоли.Свойство("ЗапретРедакций") И ДанныеСтороныПоРоли.ЗапретРедакций;
		
		//Стоит явный признак на доп стороне использовать как %роль%, либо это филиал: 
		//Заполнен и отличается КПП, либо КПП заполнен и совпадает, но отличается КодФилиала
		Если 	ПлоскиеДанныеРоли.ИНН = ПлоскиеДанныеВспомРоли.ИНН
			И	ЗначениеЗаполнено(ПлоскиеДанныеРоли.КПП)
			И	ЗначениеЗаполнено(ПлоскиеДанныеВспомРоли.КПП) Тогда
			//Проверить, что филиал - заполнен и отличается КФ, либо заполнен, но отличается КПП.
			ВспомогательнаяРольФилиал =	Не	ПлоскиеДанныеРоли.КПП = ПлоскиеДанныеВспомРоли.КПП
									Или	(		ЗначениеЗаполнено(ПлоскиеДанныеВспомРоли.КодФилиала)
										И	Не	ПлоскиеДанныеРоли.КодФилиала = ПлоскиеДанныеВспомРоли.КодФилиала);
		
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьКакРольДоп =	ИспользоватьКакРольДоп = Истина
							Или	ВспомогательнаяРольФилиал;
	
	Если		ИспользоватьКакРольОсн = Истина
		Или	Не	ИспользоватьКакРольДоп Тогда 

		//Явный признак на основной стороне использовать как %роль%, либо нет доп. стороны, либо не филиал
		ДанныеРезультат = ДанныеСтороныПоРоли;

	Иначе

		//Стоит явный признак на доп стороне использовать как %роль%, либо это филиал
		ДанныеРезультат = ДанныеСтороныПоВспомогательнойРоли;
		
	КонецЕсли;
	
	ДанныеРезультат = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисСкопироватьОбъектНаКлиенте(ДанныеРезультат);

	//Прокинуть признак запрета редакций, если был
	Если	Не	ЗапретРедакций = Неопределено
		И		ЗапретРедакций Тогда
	
		ДанныеРезультат.Вставить("ЗапретРедакций", Истина);
		
	КонецЕсли;
	
	//Установить код страны, если явно отсутсвует
	Если		ДанныеРезультат.Свойство("СвЮЛ")
		И	Не	ДанныеРезультат.СвЮл.Свойство("КодСтраны") Тогда
		
		ДанныеРезультат.СвЮЛ.Вставить("КодСтраны", "643");
		
	КонецЕсли;
	
	Возврат ДанныеРезультат	
	
КонецФункции

// Функция - определяет сторону по роли, с учетом дополнительной: Получатель/Грузополучатель, Отправитель/Грузоотрправитель.
//	вспомогательная сторона может стать основной, если выполнены условия:
//	1. совпадает ИНН
//	2. заполнен КПП (ГП/ГО) и отличается от основной роли и код филиала(не пустой) либо
//	(считаем, что является филиалом)
//	3. не стоит явного запрета на смену (доп.свойство на карточке в 1С "ИспользоватьКакПолучателя(Отправителя)")
//
// Параметры:
//  ВложениеСБИС - Структура	- класс вложение СБИС
//  ДопПараметры - Структура	- перекрывает ключи из Вложения:
//		СоставПакета		- Структура, состав пакета. Обязателен если нет явно определенных сторон Организация 1С и Контрагент 1С
//		ТипДокумента		- Строка, описание документа, который ищется
//		СтруктураИниФайла	- Раздел ини мДокумент для определения реквизитов и организации запроса
//		Контрагент1С		- Ссылка на сторону контрагента (партнёра) 1С в явном виде
//		Организация1С		- Ссылка на сторону организации 1С в явном виде
//		КонтрагентСБИС		- Класс Сторона с описанием первичный и вспомогательных ключей стороны
//		ОрганизацияСБИС		- Класс Сторона с описанием первичный и вспомогательных ключей стороны
// 
// Возвращаемое значение:
//  класс сторона - структура для роли документооборота
//
&НаКлиенте
Функция ВложениеСБИС_НайтиПодходящиеДокументы(ВложениеСБИС, ДопПараметры) Экспорт
	Перем	лРасчитанныйПараметр, УзелИниПоиска, ТипОбъектаПоиск, СоставПакета, ИмяРеквизитаРасчет, ИмяРеквизитаРасчетВспом,
			ЗначениеДата, ЗначениеДатаВх, ЗначениеНомер, ЗначениеНомерВх;
	
	//ПараметрыПоискаДокумента.Вставить("Тип",			Вложение.ТипДокумента);
	//ПараметрыПоискаДокумента.Вставить("Номер",		Вложение.Номер);
	//ПараметрыПоискаДокумента.Вставить("Дата",			Вложение.Дата1С);
	//		
	ОписаниеЗапроса = Новый Структура("Текст, Параметры, Формат", "", Новый Структура, Новый Структура("ТипОбъект, УсловияЗапроса", "", ""));
	ОписаниеЗапроса.Текст = 
	
	"ВЫБРАТЬ Разрешенные
	|Объект.Ссылка КАК ОбъектСсылка
	|ИЗ
	| {ТипОбъект} КАК Объект
	|ГДЕ
	|	НЕ Объект.ПометкаУдаления{УсловияЗапроса}";

	МодульФункцийДокуметов	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;
	
	ЕстьТипОбъекта	=	ДопПараметры.Свойство("ТипДокумента",	ТипОбъектаПоиск)
					Или	ВложениеСБИС.Свойство("ТипДокумента",	ТипОбъектаПоиск);

	//Найти ини для определения реквизитов поиска		
	Если	Не	ДопПараметры.Свойство("СтруктураИниФайла",	УзелИниПоиска)
		И	Не	ВложениеСБИС.Свойство("СтруктураИниФайла",	УзелИниПоиска) Тогда
		
		ФайлИни = ИниПоПараметрам(ВложениеСБИС.ИмяИни);

		Если	Не	ФайлИни = Неопределено
			И 		ФайлИни.Свойство("мДокумент") Тогда
			
			Для Каждого мДокументИни Из ФайлИни.мДокумент Цикл
				
				ДокументТип = МодульФункцийДокуметов.РасчитатьЗначение("Документ", мДокументИни.Значение);
				ДокументТип = СтрПолучитьСтроку(СтрЗаменить(ДокументТип, ".", Символы.ПС), 2);
				Если Не ДокументТип = ТипОбъектаПоиск Тогда
					Продолжить;
				КонецЕсли;
				УзелИниПоиска = мДокументИни.Значение;
				
			КонецЦикла;
				
		КонецЕсли;
		
	КонецЕсли;

	Если УзелИниПоиска = Неопределено Тогда
		
		ВызватьСбисИсключение(760, "МодульОбъектаКлиент.НайтиПодходящиеДокументы1СПоПараметрам",,, "Отсутствует узел файла настроек для поиска.");
		
	КонецЕсли;
	
	Если ТипОбъектаПоиск = Неопределено Тогда
		
		ДокументТип		= МодульФункцийДокуметов.РассчитатьЗначение("Документ", УзелИниПоиска);
		ТипОбъектаПоиск = СтрПолучитьСтроку(СтрЗаменить(ДокументТип, ".", Символы.ПС), 2);
		
	КонецЕсли;

	//Тип объекта
	Если ЗначениеЗаполнено(ТипОбъектаПоиск) Тогда

		ОписаниеЗапроса.Формат.ТипОбъект = "Документ." + ТипОбъектаПоиск;

	Иначе
		
		ВызватьСбисИсключение(760, "МодульОбъектаКлиент.НайтиПодходящиеДокументы1СПоПараметрам",,, "Отсутствует описание типа объекта.");
		
	КонецЕсли;

	ПараметрыФильтра  = Новый Структура("УзелИни, ОписаниеЗапроса", УзелИниПоиска, ОписаниеЗапроса);
	
	//Обработка даты и номера
	Если ДопПараметры.Свойство("Дата1С") Тогда
		ПараметрыФильтра.Вставить("Дата1С",				ДопПараметры.Дата1С);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("Номер1С") Тогда
		ПараметрыФильтра.Вставить("Номер1С",			ДопПараметры.Номер1С);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("НомерСБИС") Тогда
		ПараметрыФильтра.Вставить("НомерСБИС",			ДопПараметры.НомерСБИС);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ДатаСБИС") Тогда
		ПараметрыФильтра.Вставить("ДатаСБИС",			ДопПараметры.ДатаСБИС);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("Документ_Номер") Тогда
		ПараметрыФильтра.Вставить("Документ_Номер",		ДопПараметры.Документ_Номер);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("Документ_НомерВх") Тогда
		ПараметрыФильтра.Вставить("Документ_НомерВх",	ДопПараметры.Документ_НомерВх);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("Документ_ДатаВх") Тогда
		ПараметрыФильтра.Вставить("Документ_ДатаВх",	ДопПараметры.Документ_ДатаВх);
	КонецЕсли;
	
	ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоДатеНомеру(ВложениеСБИС, ПараметрыФильтра);
	
	//Обработка контрагента
	Если Не ПолучитьЗначениеПараметраСбис("СопоставлениеПоКонтрагенту") = "Не использовать" Тогда
		
		ПараметрыФильтра.Вставить("Ключ", "Контрагент");
		
		Если		ДопПараметры.Свойство("Контрагент1С") Тогда
			ПараметрыФильтра.Вставить("Контрагент1С",	ДопПараметры.Контрагент1С);
		ИначеЕсли	ДопПараметры.Свойство("КонтрагентСБИС") Тогда
			ПараметрыФильтра.Вставить("КонтрагентСБИС",	ДопПараметры.КонтрагентСБИС);
		ИначеЕсли	ДопПараметры.Свойство("СоставПакета", СоставПакета) Тогда
			ПараметрыФильтра.Вставить("КонтрагентСБИС",	СоставПакета.Контрагент);
		Иначе
			ВызватьСбисИсключение(760, "МодульОбъектаКлиент.НайтиПодходящиеДокументы1СПоПараметрам",,, "Отсутствуют данные пакета для определения стороны Контрагент.");
		КонецЕсли;
		
		Попытка
			ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоСтороне(ВложениеСБИС, ПараметрыФильтра);
		Исключение
			ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВложениеСБИС_НайтиПодходящиеДокументы");
		КонецПопытки;
		
	КонецЕсли;

	//Обработка организации
	Если Не ПолучитьЗначениеПараметраСбис("СопоставлениеПоОрганизации") = "Не использовать" Тогда

		ПараметрыФильтра.Вставить("Ключ", "Организация");
	
		Если		ДопПараметры.Свойство("Организация1С") Тогда
			ПараметрыФильтра.Вставить("Организация1С",		ДопПараметры.Организация1С);
		ИначеЕсли	ДопПараметры.Свойство("ОрганизацияСБИС") Тогда
			ПараметрыФильтра.Вставить("ОрганизацияСБИС",	ДопПараметры.ОрганизацияСБИС);
		ИначеЕсли	ДопПараметры.Свойство("СоставПакета", СоставПакета) Тогда
			ПараметрыФильтра.Вставить("ОрганизацияСБИС",	СоставПакета.НашаОрганизация);
		Иначе
			ВызватьСбисИсключение(760, "МодульОбъектаКлиент.НайтиПодходящиеДокументы1СПоПараметрам",,, "Отсутствуют данные пакета для определения стороны Организация.");
		КонецЕсли;
		
		Попытка
			ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоСтороне(ВложениеСБИС, ПараметрыФильтра);
		Исключение
			ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВложениеСБИС_НайтиПодходящиеДокументы");
		КонецПопытки;
		
	КонецЕсли;
	
	Попытка
		РезультатПоиска = ОписаниеЗапроса_ВыполнитьЗапросСервер(ПараметрыФильтра.ОписаниеЗапроса);
	Исключение
		ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВложениеСБИС_НайтиПодходящиеДокументы");
	КонецПопытки;

	Результат = Новый Массив;
	Для Каждого ЭлементНайден Из РезультатПоиска Цикл
		Если		ЭлементНайден.Свойство("ОбъектСсылка") Тогда
			Результат.Добавить(ЭлементНайден.ОбъектСсылка);
		ИначеЕсли   ЭлементНайден.Свойство("Ссылка") Тогда
			Результат.Добавить(ЭлементНайден.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция  ОписаниеЗапроса_ВыполнитьЗапросСервер(ОписаниеЗапроса)
	
	ТекстЗапроса = ОписаниеЗапроса.Текст;
	Для Каждого ЭлементФормат Из ОписаниеЗапроса.Формат Цикл
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{" + ЭлементФормат.Ключ + "}", ЭлементФормат.Значение);
		
	КонецЦикла;
	Попытка
		
		Возврат МодульОбъектаСервер().ВыполнитьЗапросСПараметрами(ТекстЗапроса, ОписаниеЗапроса.Параметры, Новый Структура("Размер"));
		
	Исключение
		
		ВызватьИсключение(МодульОбъектаСервер().СбисИсключение_ВСтрокуСервер(ИнформацияОбОшибке(), "МодульОбъектаСервер.ВыполнитьЗапросСПараметрами")); 
		
	КонецПопытки;
	
КонецФункции

// Процедура - Вложение СБИС найти подходящие документы установить фильтр по стороне
//
// Параметры:
//  ВложениеСБИС		 - Структура	 - экземпляр класса вложение СБИС
//  ПараметрыВходящие	 - Структура	 - параметры установки
//
&НаКлиенте
Процедура ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоСтороне(ВложениеСБИС, ДопПараметры)
    Перем УзелИниСтороны, лРасчитанныйПараметр;
	
	УзелИниПоиска			= ДопПараметры.УзелИни;
	КлючПоиска				= ДопПараметры.Ключ;
	КлючСтороны				= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.РассчитатьЗначение(КлючПоиска + "_Роль", УзелИниПоиска);
	
	Если		КлючСтороны = Неопределено
		Или Не	УзелИниПоиска.мСторона.Свойство(КлючСтороны, УзелИниСтороны) Тогда
		Возврат;
	КонецЕсли;

	Если    Не ДопПараметры.Свойство(КлючПоиска + "1С",	лРасчитанныйПараметр) 
		И	Не ВложениеСБИС.Свойство(КлючПоиска + "1С",	лРасчитанныйПараметр) Тогда
		//Контрагент явно не указан, значит попробуем определить его по имеющимся данным
		
		Если	Не	ДопПараметры.Свойство(КлючПоиска + "СБИС", лРасчитанныйПараметр) Тогда
			
			ВызватьСбисИсключение(760, "МодульОбъектаКлиент.ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоСтороне",,, "Отсутствуют данные стороны " + КлючПоиска + " для определения стороны 1С.");
			
		КонецЕсли;
			
		ПараметрыПоискаКарточки	= Новый Структура("УзелИниПоиска, ТипСтороны", УзелИниПоиска, КлючПоиска);
		лРасчитанныйПараметр	= Сторона_НайтиКарточки1С(лРасчитанныйПараметр, ПараметрыПоискаКарточки);

		Если Не ЗначениеЗаполнено(лРасчитанныйПараметр) Тогда
			
			ВызватьСбисИсключение(760, "МодульОбъектаКлиент.ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоСтороне",,, "Не найдены данные стороны " + КлючПоиска + " в 1С.", Новый Структура("Сторона", лРасчитанныйПараметр));
			
		КонецЕсли;
		
		МассивСторон = лРасчитанныйПараметр;
		
	Иначе
		
		МассивСторон = Новый Массив;
		МассивСторон.Добавить(лРасчитанныйПараметр);
			
	КонецЕсли;
	
	//Проверить наличие в ини узла для определения поиска по контрагенту
	ИмяРеквизитаКонтрагента	= СтроковоеЗначениеУзлаИни(УзелИниСтороны.Сторона, Новый Структура("ИмяРеквизита", Истина));

	ДопПараметры.ОписаниеЗапроса.Формат.УсловияЗапроса = ДопПараметры.ОписаниеЗапроса.Формат.УсловияЗапроса + Символы.ПС + " И Объект." + ИмяРеквизитаКонтрагента+" В (&" + КлючПоиска + ")";
	ДопПараметры.ОписаниеЗапроса.Параметры.Вставить(КлючПоиска, МассивСторон);
	
КонецПроцедуры

// Процедура - Вложение СБИС найти подходящие документы установить фильтр по стороне
//
// Параметры:
//  ВложениеСБИС		 - Структура	 - экземпляр класса вложение СБИС
//  ПараметрыВходящие	 - Структура	 - параметры установки
//
&НаКлиенте
Процедура ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоДатеНомеру(ВложениеСБИС, ДопПараметры)
	Перем	ИмяРеквизитаРасчет, ИмяРеквизитаРасчетВспом,
		ЗначениеДата, ЗначениеДатаВх, ЗначениеНомер, ЗначениеНомерВх;
		
	ОписаниеЗапроса	= ДопПараметры.ОписаниеЗапроса;
	УзелИниПоиска	= ДопПараметры.УзелИни;
	
	//Обработка Дата
	Если	(	ДопПараметры.Свойство("Дата1С",	ЗначениеДата)
			Или	ВложениеСБИС.Свойство("Дата1С", ЗначениеДата)
			Или	ВложениеСБИС.Свойство("Дата",	ЗначениеДата))
		И	ЗначениеЗаполнено(ЗначениеДата) Тогда
		
		//определить как искать дату
		Если	УзелИниПоиска.Свойство("Документ_Дата",		ИмяРеквизитаРасчет) Тогда
			
			ИмяРеквизитаРасчет = СтроковоеЗначениеУзлаИни(ИмяРеквизитаРасчет, Новый Структура("ИмяРеквизита", Истина))
			
		Иначе
			
			ИмяРеквизитаРасчет = "Дата";
			
		КонецЕсли;
		
		Если		ПолучитьЗначениеПараметраСбис("СопоставлениеПериод") = "Дата документа" Тогда

			УсловиеДобавить = " И НАЧАЛОПЕРИОДА(Объект.{ИмяРеквизитДата}, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатНач, ДЕНЬ)";
			ОписаниеЗапроса.Параметры.Вставить("ДатНач",	ЗначениеДата);
			
		ИначеЕсли	ПолучитьЗначениеПараметраСбис("СопоставлениеПериод") = "Месяц с даты документа" Тогда
			
			УсловиеДобавить = " И Объект.{ИмяРеквизитДата} МЕЖДУ &ДатНач И ДОБАВИТЬКДАТЕ(&ДатНач, МЕСЯЦ, 1)";
			ОписаниеЗапроса.Параметры.Вставить("ДатНач",	ЗначениеДата);
			
		ИначеЕсли	ПолучитьЗначениеПараметраСбис("СопоставлениеПериод") = "Календарный месяц документа" Тогда

			УсловиеДобавить = " И Объект.{ИмяРеквизитДата} МЕЖДУ &ДатНач И &ДатКнц";
			ОписаниеЗапроса.Параметры.Вставить("ДатНач",	НачалоМесяца(ЗначениеДата));
			ОписаниеЗапроса.Параметры.Вставить("ДатКнц",	КонецМесяца(ЗначениеДата));
			
		Иначе
			
			УсловиеДобавить = " И Объект.{ИмяРеквизитаДата} = (&Дата)";
			ОписаниеЗапроса.Параметры.Вставить("Дата",		ЗначениеДата);
			
		КонецЕсли;
		
		ОписаниеЗапроса.Формат.УсловияЗапроса = ОписаниеЗапроса.Формат.УсловияЗапроса + Символы.ПС + СтрЗаменить(УсловиеДобавить, "{ИмяРеквизитДата}", ИмяРеквизитаРасчет);
			
	КонецЕсли;
	
	//Обработка ДатаВходящая
	Если	(	ДопПараметры.Свойство("ДатаСБИС",	ЗначениеДатаВх)
			Или	ВложениеСБИС.Свойство("Дата",		ЗначениеДатаВх))
		И	ЗначениеЗаполнено(ЗначениеДатаВх)
		И	(	ДопПараметры.Свойство("Документ_ДатаВх",	ИмяРеквизитаРасчет)
			Или	УзелИниПоиска.Свойство("Документ_ДатаВх",	ИмяРеквизитаРасчет)) Тогда
		
		ИмяРеквизитаРасчет = СтроковоеЗначениеУзлаИни(ИмяРеквизитаРасчет, Новый Структура("ИмяРеквизита", Истина));
		
		Если		ПолучитьЗначениеПараметраСбис("СопоставлениеПоДате") = "Точное совпадение" Тогда
			
			УсловиеДобавить = " И Объект.{ИмяРеквизитаДатаВх} = &ДатаВхНач";
			
		ИначеЕсли	ПолучитьЗначениеПараметраСбис("СопоставлениеПоДате") = "Отклонение 1 день" Тогда
			
			УсловиеДобавить = 
			" И РАЗНОСТЬДАТ(Объект.{ИмяРеквизитаДатаВх}, &ДатаВхНач, ДЕНЬ) < 2
			|И РАЗНОСТЬДАТ(Объект.{ИмяРеквизитаДатаВх}, &ДатаВхНач, ДЕНЬ) > -2";
			
		ИначеЕсли	Не ЗначениеЗаполнено(ЗначениеДата) Тогда
			
			УсловиеДобавить = " И Объект.{ИмяРеквизитаДатаВх} = &ДатаВхНач";
			
		Иначе
			
			УсловиеДобавить = "";
			
		КонецЕсли;
		
		ОписаниеЗапроса.Параметры.Вставить("ДатаВхНач", ЗначениеДатаВх);
		ОписаниеЗапроса.Формат.УсловияЗапроса = ОписаниеЗапроса.Формат.УсловияЗапроса + Символы.ПС + СтрЗаменить(УсловиеДобавить, "{ИмяРеквизитаДатаВх}", ИмяРеквизитаРасчет);
		
	КонецЕсли;
	
	//Обработка Номер
	ЕстьУзелНомераВходящего =	ДопПараметры.Свойство("Документ_НомерВх",	ИмяРеквизитаРасчетВспом)
							Или	УзелИниПоиска.Свойство("Документ_НомерВх",	ИмяРеквизитаРасчетВспом);
	ЕстьУзелНомера			=	ДопПараметры.Свойство("Документ_Номер",		ИмяРеквизитаРасчет)
							Или	УзелИниПоиска.Свойство("Документ_Номер",	ИмяРеквизитаРасчет);
	ЕстьНомерВх				=	(	ДопПараметры.Свойство("НомерСБИС",	ЗначениеНомерВх)
								Или	ВложениеСБИС.Свойство("Номер",		ЗначениеНомерВх))
							И ЗначениеЗаполнено(ЗначениеНомерВх);
	ЕстьНомер1С				=	(	ДопПараметры.Свойство("Номер1С",	ЗначениеНомер)
								Или	ВложениеСБИС.Свойство("Номер1С", 	ЗначениеНомер))
							И ЗначениеЗаполнено(ЗначениеНомер);
	Если		ПолучитьЗначениеПараметраСбис("СопоставлениеПоНомеру") = "Точное совпадение" Тогда

		УсловиеДобавить = " И Объект.{ИмяРеквизитНомер} = &Номер";
		
	ИначеЕсли	ПолучитьЗначениеПараметраСбис("СопоставлениеПоНомеру") = "Вхождение" Тогда
		
		УсловиеДобавить = " И Объект.{ИмяРеквизитНомер} ПОДОБНО &Номер";
		
	Иначе
		
		УсловиеДобавить = "";
		
	КонецЕсли;
	
	Если		ЕстьНомер1С Тогда
		
		//Поиск по указанному номеру 1С
		ИмяРеквизитНомер = СтроковоеЗначениеУзлаИни(ИмяРеквизитаРасчет, Новый Структура("ИмяРеквизита", Истина));
		ОписаниеЗапроса.Параметры.Вставить("Номер",	ЗначениеНомер);
		ОписаниеЗапроса.Формат.УсловияЗапроса = ОписаниеЗапроса.Формат.УсловияЗапроса + Символы.ПС + СтрЗаменить(УсловиеДобавить, "{ИмяРеквизитНомер}", ИмяРеквизитНомер);
		
	ИначеЕсли 	ЕстьНомерВх  Тогда
		
		Если		ЕстьУзелНомераВходящего Тогда
			
			ИмяРеквизитНомер = СтроковоеЗначениеУзлаИни(ИмяРеквизитаРасчетВспом,	Новый Структура("ИмяРеквизита", Истина))
			
		ИначеЕсли	ЕстьУзелНомера Тогда
			
			ИмяРеквизитНомер = СтроковоеЗначениеУзлаИни(ИмяРеквизитаРасчет,			Новый Структура("ИмяРеквизита", Истина))
			
		Иначе
			
			УсловиеДобавить = "";
			
		КонецЕсли;
		ОписаниеЗапроса.Параметры.Вставить("Номер",	ЗначениеНомерВх);
		ОписаниеЗапроса.Формат.УсловияЗапроса = ОписаниеЗапроса.Формат.УсловияЗапроса + Символы.ПС + СтрЗаменить(УсловиеДобавить, "{ИмяРеквизитНомер}", ИмяРеквизитНомер);
		
	КонецЕсли;
				
	Если	НЕ	(ЗначениеЗаполнено(ЗначениеДата) Или ЗначениеЗаполнено(ЗначениеДатаВх))
		И	НЕ	(ЗначениеЗаполнено(ЗначениеНомер) Или ЗначениеЗаполнено(ЗначениеНомерВх)) Тогда   

		//  Если в СБИС не заполнены дата и номер, то нет смысла проводить поиск
		ВызватьСбисИсключение(760, "МодульОбъектаКлиент.НайтиПодходящиеДокументы1СПоПараметрам",,, "Не указаны дата и номер для поиска документа.");
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы_СбисСтек

&НаКлиенте
Функция СбисСтек_Новый() Экспорт 
	Возврат Новый Структура("ДанныеСтека, РазмерСтека", Новый Массив, 0);
КонецФункции

// Push
&НаКлиенте
Процедура СбисСтек_Положить(СбисСтек, Значение) Экспорт 
	СбисСтек.ДанныеСтека.Добавить(Значение);
	СбисСтек.РазмерСтека = СбисСтек.РазмерСтека + 1;
КонецПроцедуры

// Top
&НаКлиенте
Функция СбисСтек_ВзятьБезУдаления(СбисСтек) Экспорт 
	Возврат СбисСтек.ДанныеСтека[СбисСтек.РазмерСтека - 1];
КонецФункции

// Pop
&НаКлиенте
Функция СбисСтек_Взять(СбисСтек) Экспорт
	СбисСтек.РазмерСтека = СбисСтек.РазмерСтека - 1;
	Значение = СбисСтек.ДанныеСтека[СбисСтек.РазмерСтека];
	СбисСтек.ДанныеСтека.Удалить(СбисСтек.РазмерСтека);
	Возврат Значение;
КонецФункции

// isEmpty
&НаКлиенте
Функция СбисСтек_Пустой(СбисСтек) Экспорт 
	Возврат СбисСтек.РазмерСтека = 0;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы_СопоставлениеНоменклатуры

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы_СопоставлениеНоменклатуры_СтруктураСтрок

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы_СопоставлениеНоменклатуры_СтруктураСтрок_СтрокаСопоставленияСБИС

// Функция - создаёт описание сопоставления номенклатуры СБИС
//
// Параметры:
//  ДанныеЗаполнитьВходящие	 - Структура -  Строка входящего документа
//											ИЛИ Строка с формы входящего документа
//											ИЛИ Какая то еще структура
//  ИмяСБИС	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
// Коммент МАИ:
// Все штуки с окончанием "СБИС" - это касательно номенклатуры контрагента, 1С - нашей
//
//
&НаКлиенте
Функция НовыйСтрокаСопоставленияСБИСКлиент(ДанныеЗаполнитьВходящие = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("_класс", "СтрокаСопоставленияСБИС");
	Результат.Вставить("Номенклатура1С", Новый Соответствие);
	Результат.Вставить("НоменклатураСБИС", Новый Структура);
	Результат.Вставить("БазоваяЕдиницаОКЕИ", "796");  // 796 - ОКЕИ единицы "штуки", наиболее часто использующаяся единица
	
	Если НЕ ДанныеЗаполнитьВходящие = Неопределено
		И ДанныеЗаполнитьВходящие.Свойство("ИдентификаторДокумента")
		И ЗначениеЗаполнено(ДанныеЗаполнитьВходящие.ИдентификаторДокумента) Тогда
		
		Результат.Вставить("ИдентификаторДокумента", ДанныеЗаполнитьВходящие.ИдентификаторДокумента); // Нужно для сопоставления в СБИС
	Иначе
		Результат.Вставить("ИдентификаторДокумента", "");
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ДопПараметры) Тогда
		Для Каждого Параметр Из ДопПараметры Цикл
			// Заполняем доп. параметры, например:
			// - "ИдентификаторДокумента" (напр. Заказ) для записи и чтения сопоставлений с него
			// - "ИдСтроки" - ключ для связи
			Результат.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	Иначе
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	// Определяем приоритет для реквизита, который будет использоваться в качестве кода для сопоставления("Код") с типом "ТипКода": 
	// при заполнении класса берется первое по приоритету доступное и заполненное значение из "ДанныеЗаполнитьВходящие"
	Если ДопПараметры.Свойство("ПорядокАвтоматическогоСопоставления") Тогда
		// Удаляем GTIN из списка, т.к. он заполняется в отельном поле
		ИндексGTIN = ДопПараметры.ПорядокАвтоматическогоСопоставления.Найти("GTIN");
		Если ИндексGTIN <> Неопределено Тогда
			ДопПараметры.ПорядокАвтоматическогоСопоставления.Удалить(ИндексGTIN);
		КонецЕсли;
	Иначе
		ДопПараметры.Вставить("ПорядокАвтоматическогоСопоставления", ПорядокАвтоматическогоСопоставленияПоУмолчаниюКлиент());
	КонецЕсли;
	
	Результат.НоменклатураСБИС.Вставить("Наименование");
	Результат.НоменклатураСБИС.Вставить("Код");
	Результат.НоменклатураСБИС.Вставить("ТипКода");
	Результат.НоменклатураСБИС.Вставить("GTIN");
	Результат.НоменклатураСБИС.Вставить("Единицы", Новый Соответствие);
	
	Результат.НоменклатураСБИС.Вставить("Цена");
	Результат.НоменклатураСБИС.Вставить("Кол_во");
	Результат.НоменклатураСБИС.Вставить("Сумма");
	Результат.НоменклатураСБИС.Вставить("СуммаБезНал");
	Результат.НоменклатураСБИС.Вставить("СуммаНДС");
	Результат.НоменклатураСБИС.Вставить("СтавкаНДС");
	
	Результат.НоменклатураСБИС.Вставить("Характеристика", Новый Структура);
	Результат.НоменклатураСБИС.Характеристика.Вставить("Наименование");
	Результат.НоменклатураСБИС.Характеристика.Вставить("Идентификатор");
	
	Если Не ДанныеЗаполнитьВходящие = Неопределено Тогда
		СтрокаСопоставленияСБИСКлиент_Заполнить(Результат, ДанныеЗаполнитьВходящие, ДопПараметры);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
&НаКлиенте
Функция СтрокаСопоставленияСБИСКлиент_КлючЗаписи(СтрокаСопоставленияСБИС) Экспорт
	
	Если		ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.КодПокупателя) Тогда
		Результат = СтрокаСопоставленияСБИС.Номенклатура.КодПокупателя;	
	ИначеЕсли	ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Идентификатор) Тогда
		Результат = СтрокаСопоставленияСБИС.Номенклатура.Идентификатор;
	Иначе
		Результат = СтрокаСопоставленияСБИС.Номенклатура.Наименование;
	КонецЕсли;
	
	Если		ЗначениеЗаполнено(СтрокаСопоставленияСБИС.Характеристика.Идентификатор) Тогда
		Результат = Результат + "_" + СтрокаСопоставленияСБИС.Характеристика.Идентификатор;
	ИначеЕсли	ЗначениеЗаполнено(СтрокаСопоставленияСБИС.Характеристика.Наименование) Тогда 
		Результат = Результат + "_" + СтрокаСопоставленияСБИС.Характеристика.Наименование;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СтрокаСопоставленияСБИСКлиент_Заполнить(СтрокаСопоставленияСБИС, СопоставлениеЗаполнить, ДопПараметры = Неопределено) Экспорт
	
	Перем СЛокальнаяПеременная, ТипКода;
	
	// ОСНОВНЫЕ ПОЛЯ
	
	// Океи базовой единицы измерения
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.БазоваяЕдиницаОКЕИ) Тогда
		Если	Не (СопоставлениеЗаполнить.Свойство("БазоваяЕдиницаОКЕИ", СЛокальнаяПеременная) И ЗначениеЗаполнено(СЛокальнаяПеременная))Тогда
			СЛокальнаяПеременная = "796";
		КонецЕсли;
		СтрокаСопоставленияСБИС.БазоваяЕдиницаОКЕИ = СокрЛП(СЛокальнаяПеременная);	// по умолчанию "796" = шт	
	КонецЕсли;
	
	// НОМЕНКЛАТУРА СБИС 
	
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Наименование) Тогда
		Если		СопоставлениеЗаполнить.Свойство("Название", СЛокальнаяПеременная) Тогда
			// Название в старом формате
		ИначеЕсли	СопоставлениеЗаполнить.Свойство("НазваниеСБИС", СЛокальнаяПеременная) Тогда
			// Название в новом формате	
		Иначе
			СЛокальнаяПеременная = "";
		КонецЕсли;
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Наименование = Лев(СокрЛП(СЛокальнаяПеременная), 240);
	КонецЕсли;
	
	Если СопоставлениеЗаполнить.Свойство("Цена")
		И ЗначениеЗаполнено(СопоставлениеЗаполнить.Цена) Тогда
		
		СписокСвойствЗаполнения = "Цена, Кол_во, Сумма, СуммаБезНал"; 
		ЗаполнитьЗначенияСвойств(СтрокаСопоставленияСБИС.НоменклатураСБИС, СопоставлениеЗаполнить, СписокСвойствЗаполнения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Код) Тогда
		// Код устанавливается в зависимости от приоритетного типа кода
		// Так же возможно указание типа кода напрямую
		Если	СопоставлениеЗаполнить.Свойство("ТипКода", ТипКода)
			И	ЗначениеЗаполнено(ТипКода)
			И	ТипКода <> "GTIN"
			И	ТипКода <> "GTIN_СБИС" Тогда
			
			Если		СопоставлениеЗаполнить.Свойство(ТипКода, СЛокальнаяПеременная) Тогда
				// В старом формате
			ИначеЕсли	СопоставлениеЗаполнить.Свойство(ТипКода + "СБИС", СЛокальнаяПеременная) Тогда
				// В новом формате
			Иначе
				СЛокальнаяПеременная = "";
			КонецЕсли;
			
		ИначеЕсли	ЗначениеЗаполнено(ДопПараметры)
				И	ДопПараметры.Свойство("ПорядокАвтоматическогоСопоставления") Тогда
			
			Для Каждого ТипКода Из ДопПараметры.ПорядокАвтоматическогоСопоставления Цикл
				Если		СопоставлениеЗаполнить.Свойство(ТипКода, СЛокальнаяПеременная)
						И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
					Прервать;
				ИначеЕсли	СопоставлениеЗаполнить.Свойство(ТипКода + "СБИС", СЛокальнаяПеременная)
						И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
					Прервать;
				Иначе
					СЛокальнаяПеременная = "";
				КонецЕсли;		
			КонецЦикла;
			
		Иначе
			СЛокальнаяПеременная = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
			ТипКода = "";
			СЛокальнаяПеременная = "";
		КонецЕсли;
		СтрокаСопоставленияСБИС.НоменклатураСБИС.ТипКода = СокрЛП(ТипКода);
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Код = Лев(СокрЛП(СЛокальнаяПеременная), 240);
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.GTIN) Тогда
		Если		СопоставлениеЗаполнить.Свойство("GTIN", СЛокальнаяПеременная)
			И	Не	СЛокальнаяПеременная = "-" Тогда
			// GTIN в старом формате
		ИначеЕсли	СопоставлениеЗаполнить.Свойство("GTIN_СБИС", СЛокальнаяПеременная)
			И	Не	СЛокальнаяПеременная = "-" Тогда
			// GTIN в новом формате
		Иначе
			СЛокальнаяПеременная = "";
		КонецЕсли;
		СтрокаСопоставленияСБИС.НоменклатураСБИС.GTIN = Лев(СокрЛП(СЛокальнаяПеременная), 240);
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Наименование) Тогда
		Если	СопоставлениеЗаполнить.Свойство("ХарактеристикаПоставщика",		СЛокальнаяПеременная) Тогда
			// Характеристика поставщика (в старов формате)
		ИначеЕсли	СопоставлениеЗаполнить.Свойство("Характеристика", СЛокальнаяПеременная)
				И	ТипЗнч(СЛокальнаяПеременная) = Тип("Структура")
				И	СЛокальнаяПеременная.Свойство("Значение", СЛокальнаяПеременная)
				И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
			// Характеристика поставщика (в старом формате, но в виде структуры(хз, КАК, строка жеж))
		ИначеЕсли	СопоставлениеЗаполнить.Свойство("ИмяХарактеристикиСБИС", СЛокальнаяПеременная)
				И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
			// Характеристика поставщика (в новом формате)
		Иначе
			СЛокальнаяПеременная = "";
		КонецЕсли;
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Наименование = Лев(СокрЛП(СЛокальнаяПеременная), 240);
	КонецЕсли;	
	
	// Единицы измерения СБИС
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Единицы) Тогда
		Если	СопоставлениеЗаполнить.Свойство("ЕдИзмСБИС", СЛокальнаяПеременная)
			И	ТипЗнч(СЛокальнаяПеременная) = Тип("Массив")
			И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
			
			Для каждого СтрЕдиница Из СЛокальнаяПеременная Цикл
				СопоставлениеДляЕдиницыКлиент_ЗаполнитьСБИС(СтрокаСопоставленияСБИС, СтрЕдиница);	
			КонецЦикла;	
		Иначе
			СопоставлениеДляЕдиницыКлиент_ЗаполнитьСБИС(СтрокаСопоставленияСБИС, СопоставлениеЗаполнить);
		КонецЕсли;
	КонецЕсли;
	
	// НОМЕНКЛАТУРА 1С
	
	Если ДопПараметры.Свойство("ЗаполнениеНоменклатуры1С")
		И СопоставлениеЗаполнить.Свойство("Номенклатура", СЛокальнаяПеременная)
		И ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		
		Если ТипЗнч(СЛокальнаяПеременная) = Тип("Массив") Тогда
			
			Для каждого Строка1С Из СЛокальнаяПеременная Цикл 
				
				СтрНоменклатура1С = СтрокаСопоставленияСБИС.Номенклатура1С.Получить(Строка1С.Номенклатура);
				Если СтрНоменклатура1С = Неопределено Тогда
					СтрНоменклатура1С = НовыйОписаниеНоменклатуры1СКлиент();
				КонецЕсли;
				
				ОписаниеНоменклатуры1СКлиент_Заполнить(СтрНоменклатура1С, Строка1С);
				СтрокаСопоставленияСБИС.Номенклатура1С.Вставить(Строка1С.Номенклатура, СтрНоменклатура1С);
				
			КонецЦикла;	
			
		Иначе
			
			СтрНоменклатура1С = СтрокаСопоставленияСБИС.Номенклатура1С.Получить(Строка1С.Номенклатура);
			Если СтрНоменклатура1С = Неопределено Тогда
				СтрНоменклатура1С = НовыйОписаниеНоменклатуры1СКлиент();
			КонецЕсли;
			
			ОписаниеНоменклатуры1СКлиент_Заполнить(СтрНоменклатура1С, СопоставлениеЗаполнить);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция  СтрокаСопоставленияСБИСКлиент_Получить(СтрокаСопоставленияСБИС, КлючЗначения) Экспорт
	
	Перем Результат;
	
	Если	Не	ТипЗнч(КлючЗначения) = Тип("Строка") Тогда
		Возврат СтрокаСопоставленияСБИС.Номенклатура1С.Получить(КлючЗначения);
	ИначеЕсли	КлючЗначения = "Номенклатура1С" Тогда
		Возврат СтрокаСопоставленияСБИС.Номенклатура1С;
	ИначеЕсли	КлючЗначения = "Код" Тогда
		Возврат СтрокаСопоставленияСБИС.НоменклатураСБИС.Код;
	ИначеЕсли	КлючЗначения = "ИмяНоменклатурыСБИС" Тогда
		Возврат СтрокаСопоставленияСБИС.НоменклатураСБИС.Наименование;
	ИначеЕсли	КлючЗначения = "ИдХарактеристикиСБИС" Тогда
		Если ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Идентификатор) Тогда
			Возврат СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Идентификатор;
		Иначе
			Возврат СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Наименование;
		КонецЕсли;	
	ИначеЕсли СтрокаСопоставленияСБИС.НоменклатураСБИС.Свойство(КлючЗначения, Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат СтрокаСопоставленияСБИС.НоменклатураСБИС.Единицы.Получить(КлючЗначения);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СтрокаСопоставленияСБИСКлиент_Вставить(СтрокаСопоставленияСБИС, КлючЗначения, ЗначениеУстановить, ДопПараметры = Неопределено) Экспорт
	
	Если		Не	ТипЗнч(КлючЗначения) = Тип("Строка") Тогда
		СтрокаСопоставленияСБИС.Номенклатура1С.Вставить(КлючЗначения, ЗначениеУстановить);
	ИначеЕсли		КлючЗначения = "ИдНоменклатуры" Тогда
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Идентификатор	= ЗначениеУстановить;
	ИначеЕсли		КлючЗначения = "ИмяНоменклатуры" Тогда
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Наименование	= ЗначениеУстановить;
	ИначеЕсли		КлючЗначения = "ИдХарактеристики" Тогда
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Идентификатор= ЗначениеУстановить;
	ИначеЕсли		КлючЗначения = "ИмяХарактеристики" Тогда
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Наименование	= ЗначениеУстановить;
		Если Не ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Идентификатор) Тогда
			СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Идентификатор	= ЗначениеУстановить;
		КонецЕсли;
	ИначеЕсли		КлючЗначения = "Единица" Тогда
		Если ЗначениеУстановить._Класс = "СопоставлениеДляЕдиницы" Тогда
			Единица1С			= СопоставлениеДляЕдиницыКлиент_Получить(ЗначениеУстановить, "Ссылка");
			ВладелецЕдиницы1С	= СопоставлениеДляЕдиницыКлиент_Получить(ЗначениеУстановить, "Владелец");
			Если ВладелецЕдиницы1С = "-" Тогда
				ИдЗаписиСбис = СопоставлениеДляЕдиницыКлиент_Ключ(ЗначениеУстановить);
				ЗаписьНоменклатуры1С = СтрокаСопоставленияСБИС.Номенклатура1С.Получить(ДопПараметры.Номенклатура);
				ЗаписьНоменклатуры1С.Единицы.Вставить(ИдЗаписиСбис, ЗначениеУстановить);
			ИначеЕсли ВладелецЕдиницы1С = "" Тогда
				ИдЗаписиСбис = СопоставлениеДляЕдиницыКлиент_Ключ(ЗначениеУстановить);
				СтрокаСопоставленияСБИС.НоменклатураСБИС.Единицы.Вставить(ИдЗаписиСбис, ЗначениеУстановить);
			Иначе
				ЗаписьНоменклатуры1С = СтрокаСопоставленияСБИС.Номенклатура1С.Получить(ВладелецЕдиницы1С);
				Если ЗаписьНоменклатуры1С = Неопределено Тогда
					ЗаписьНоменклатуры1С = НовыйОписаниеНоменклатуры1СКлиент();
					СтрокаСопоставленияСБИСКлиент_Вставить(СтрокаСопоставленияСБИС, ВладелецЕдиницы1С, ЗаписьНоменклатуры1С);
				КонецЕсли;
				ОписаниеНоменклатуры1СКлиент_Вставить(ЗаписьНоменклатуры1С, "Единица", ЗначениеУстановить);
			КонецЕсли;
		КонецЕсли;
	Иначе
		//Пока ничего
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаСопоставленияСБИСКлиент_СформироватьТаблДок(СтрокаСопоставленияСБИС, ДопПараметры = Неопределено) Экспорт
	
	// Алярм, это лишь заготовка (с)Сыч
	Если ДопПараметры.Свойство("ТаблДок") Тогда
		ТаблДок = ДопПараметры.ТаблДок;
	КонецЕсли;
	
	Возврат ТаблДок;		
	
КонецФункции
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы_СопоставлениеНоменклатуры_СтруктураСтрок_ОписаниеНоменклатуры1С

// Функция - создаёт строку сопоставления номенклатуры
//
// Параметры:
//  ИдСБИС	 - 	 - 
//  ИмяСБИС	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция НовыйОписаниеНоменклатуры1СКлиент() Экспорт
	
	Описание = Новый Структура;
	Описание.Вставить("_класс", "ОписаниеНоменклатуры1С"); 
	Описание.Вставить("Характеристики", Новый Массив);
	Описание.Вставить("Идентификатор", "");
	Описание.Вставить("GTIN", "");
	Описание.Вставить("Единицы", Новый Соответствие);
	Описание.Вставить("Основное", Истина);
	Описание.Вставить("Цена", 0);
	Описание.Вставить("Кол_во", 0);
	Описание.Вставить("Сумма", 0);
	Описание.Вставить("СуммаБезнал", 0);
	Описание.Вставить("СтавкаНДС", "");
	Описание.Вставить("СуммаНДС", 0);
	Описание.Вставить("БазоваяЕдиницаОКЕИ", "796");
	Описание.Вставить("Ссылка", Неопределено); // Для работы с ДБФ, по просьбе Андрея (с)Сычев
	
	Возврат Описание;

КонецФункции

&НаКлиенте
Процедура ОписаниеНоменклатуры1СКлиент_Заполнить(СтрокаНоменклатуры1С, СопоставлениеЗаполнить) Экспорт
	
	Перем СЛокальнаяПеременная;
	
	НоменклатураСсылка	= СопоставлениеЗаполнить.Номенклатура;
		
	// Признак основной номенклатуры для сопоставления
	Если НЕ СтрокаНоменклатуры1С.Основное Тогда
		Если Не СопоставлениеЗаполнить.Свойство("Основное", СЛокальнаяПеременная) Тогда
			СЛокальнаяПеременная = Ложь;
		КонецЕсли;
		СтрокаНоменклатуры1С.Основное = СЛокальнаяПеременная;
	КонецЕсли;
	
	
	// GTIN
	Если НЕ ЗначениеЗаполнено(СтрокаНоменклатуры1С.GTIN) Тогда
		Если Не СопоставлениеЗаполнить.Свойство("GTIN_1С", СЛокальнаяПеременная) Тогда
			СЛокальнаяПеременная = "";
		КонецЕсли;
		СтрокаНоменклатуры1С.GTIN = СокрЛП(СЛокальнаяПеременная);
	КонецЕсли;
	
	
	// Идентификатор номенклатуры 1С
	Если НЕ ЗначениеЗаполнено(СтрокаНоменклатуры1С.Идентификатор) Тогда
		Если Не СопоставлениеЗаполнить.Свойство("Идентификатор1С", СЛокальнаяПеременная) Тогда
			СЛокальнаяПеременная = Строка(НоменклатураСсылка.УникальныйИдентификатор());
		КонецЕсли;
		СтрокаНоменклатуры1С.Идентификатор = СокрЛП(СЛокальнаяПеременная);
	КонецЕсли;
	
	
	// Характеристика
	Если		СопоставлениеЗаполнить.Свойство("Характеристика", СЛокальнаяПеременная) Тогда
		// При записи в старых методах приходит Ссылка на характеристику, а при групповом чтении ссылка на характеристику СБИС.
	ИначеЕсли	СопоставлениеЗаполнить.Свойство("Характеристика1С", СЛокальнаяПеременная) Тогда
		// Характеристика 1С по-новому (ссылка)
	КонецЕсли;
	Если 		ЗначениеЗаполнено(СЛокальнаяПеременная)
		И	Не	ТипЗнч(СЛокальнаяПеременная) = Тип("Структура")
		И	Не	ТипЗнч(СЛокальнаяПеременная) = Тип("Строка")
		И	СтрокаНоменклатуры1С.Характеристики.Найти(СЛокальнаяПеременная) = Неопределено Тогда
		СтрокаНоменклатуры1С.Характеристики.Добавить(СЛокальнаяПеременная);
	КонецЕсли;
		
	// Единицы
	Если	СопоставлениеЗаполнить.Свойство("ЕдИзм1С", СЛокальнаяПеременная)
		И	ТипЗнч(СЛокальнаяПеременная) = Тип("Массив")
		И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		
		Для каждого СтрЕдиница Из СЛокальнаяПеременная Цикл
			СопоставлениеДляЕдиницыКлиент_Заполнить1С(СтрокаНоменклатуры1С, СтрЕдиница);	
		КонецЦикла;	
	Иначе
		СопоставлениеДляЕдиницыКлиент_Заполнить1С(СтрокаНоменклатуры1С, СопоставлениеЗаполнить);
	КонецЕсли;
	
	// Данные для загрузки в документ 1С
	Если СопоставлениеЗаполнить.Свойство("Цена")
		И ЗначениеЗаполнено(СопоставлениеЗаполнить.Цена) Тогда
		
		СписокСвойств = "Цена, Сумма, СуммаНДС, СтавкаНДС, БазоваяЕдиницаОКЕИ";
		ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры1С, СопоставлениеЗаполнить, СписокСвойств);
		
		СтрокаНоменклатуры1С.Кол_Во = СопоставлениеЗаполнить.Количество;
		СтрокаНоменклатуры1С.СуммаБезнал = СопоставлениеЗаполнить.СуммаБезНДС;
		
	КонецЕсли;
	
	// Ссылка на номенклатуру 1С для использования в ДБФ по просьбе Андрея (с)Сычев
	СтрокаНоменклатуры1С.Ссылка = НоменклатураСсылка;

КонецПроцедуры

&НаКлиенте
Функция ОписаниеНоменклатуры1СКлиент_Получить(ОписаниеНоменклатуры1С, КлючПоиска) Экспорт
	
	Перем Значение, КлючДобавления;
	
	Если		КлючПоиска = "Характеристика" Тогда
		Возврат ОписаниеНоменклатуры1С.Характеристика;
	ИначеЕсли	КлючПоиска = "GTIN" Тогда 
		Возврат ОписаниеНоменклатуры1С.GTIN;
	ИначеЕсли	КлючПоиска = "Единицы" Тогда
		Возврат ОписаниеНоменклатуры1С.Единицы;
	Иначе
		Возврат ОписаниеНоменклатуры1С.Единицы.Получить(КлючПоиска);
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ОписаниеНоменклатуры1СКлиент_Вставить(ОписаниеНоменклатуры1С, КлючВставить, ЗначениеВставить) Экспорт
	
	Перем Значение, КлючДобавления;
	
	Если		КлючВставить = "Характеристика" Тогда
		//ОписаниеНоменклатуры1С.Характеристики.Добавить(ЗначениеВставить);
		ОписаниеНоменклатуры1С.Характеристика = ЗначениеВставить;
	ИначеЕсли	КлючВставить = "GTIN" Тогда 
		ОписаниеНоменклатуры1С.GTIN = ЗначениеВставить;
	ИначеЕсли	КлючВставить = "Единица" Тогда
		ИдЗаписиСбис = СопоставлениеДляЕдиницыКлиент_Ключ(ЗначениеВставить);
		ОписаниеНоменклатуры1С.Единицы.Вставить(ИдЗаписиСбис, ЗначениеВставить);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Классы_СопоставлениеНоменклатуры_СтруктураСтрок_СопоставлениеДляЕдиницы

// Функция - создаёт строку сопоставления единицы
//
// Параметры:
//  ИдСБИС	 - 	 - 
//  ИмяСБИС	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция НовыйСопоставлениеДляЕдиницыКлиент() Экспорт
	
	Возврат Новый Структура("_класс, Коэффициент, ОКЕИ, Название, Ссылка, Владелец", "СопоставлениеДляЕдиницы", "1", "", "", "", "", "");

КонецФункции

&НаКлиенте
Функция СопоставлениеДляЕдиницыКлиент_Ключ(СопоставлениеДляЕдиницы) Экспорт
	
	Если ЗначениеЗаполнено(СопоставлениеДляЕдиницы.Ссылка) Тогда
		Возврат СопоставлениеДляЕдиницы.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(СопоставлениеДляЕдиницы.ОКЕИ) Тогда
		Возврат СопоставлениеДляЕдиницы.ОКЕИ + "_" + СопоставлениеДляЕдиницы.Название;
	Иначе
		Возврат СопоставлениеДляЕдиницы.Название;
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Функция СопоставлениеДляЕдиницыКлиент_Получить(СопоставлениеДляЕдиницы, КлючПоиска) Экспорт
	
	Если КлючПоиска = "Владелец" Тогда
		Если ЗначениеЗаполнено(СопоставлениеДляЕдиницы.Ссылка) Тогда
			// Если ссылка есть, то владелец не должен быть пустым. Прочерк, если в принципе нет.
			Попытка
				// Пока через Try, переделать на параметр от ини конфигурации
				СопоставлениеДляЕдиницы.Владелец = СопоставлениеДляЕдиницы.Ссылка.Владелец;
			Исключение
			КонецПопытки;
			ВидыСправочниковНоменклатуры = ПолучитьЗначениеПараметраСбис("ВидыСправочниковНоменклатуры");
			Если Не ЗначениеЗаполнено(СопоставлениеДляЕдиницы.Владелец)
					Или Не ЭтоСсылкаНаСправочникНоменклатурыНаСервереБезКонтекста(СопоставлениеДляЕдиницы.Владелец, ВидыСправочниковНоменклатуры) Тогда
				// Не удалось установить владельца. Вроде не должно быть ошибкой
				СопоставлениеДляЕдиницы.Владелец = "-";
			КонецЕсли;
		Иначе
			СопоставлениеДляЕдиницы.Владелец = "";
		КонецЕсли;
		Возврат СопоставлениеДляЕдиницы.Владелец;
	ИначеЕсли КлючПоиска = "Единица" Тогда
		Попытка
			КлючПараметра = "ЕдиницаИзмерения";
			СопоставлениеДляЕдиницы.Единица = СопоставлениеДляЕдиницыКлиент_ПолучитьПараметрНаСервере(СопоставлениеДляЕдиницы.Владелец, КлючПараметра);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		
		// Словили неожиданный ключ? Хреново, но ситуация исключительная, пока не обрабатываем
		Попытка
			Возврат СопоставлениеДляЕдиницы[КлючПоиска]; 
		Исключение 
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат СопоставлениеДляЕдиницы[КлючПоиска];
	
КонецФункции

&НаКлиенте
Процедура СопоставлениеДляЕдиницыКлиент_Вставить(СопоставлениеДляЕдиницы, КлючВставить, ЗначениеВставить) Экспорт
	
	Перем КлючДобавитьВДанные, ЗначениеЗаполнить;
	
	Если		КлючВставить = "Ссылка" Тогда
		Если ЗначениеЗаполнено(ЗначениеВставить) Тогда
			
			СопоставлениеДляЕдиницы.Ссылка = ЗначениеВставить;
			
			// Если ссылка есть, то владелец не должен быть пустым. Прочерк, если в принципе нет.
			Попытка
				СопоставлениеДляЕдиницы.Владелец = ЗначениеВставить.Владелец;
			Исключение
			КонецПопытки;
			ВидыСправочниковНоменклатуры = ПолучитьЗначениеПараметраСбис("ВидыСправочниковНоменклатуры");
			Если НЕ ЗначениеЗаполнено(СопоставлениеДляЕдиницы.Владелец)
					Или Не ЭтоСсылкаНаСправочникНоменклатурыНаСервереБезКонтекста(СопоставлениеДляЕдиницы.Владелец, ВидыСправочниковНоменклатуры) Тогда
				// Не удалось установить владельца. Вроде не должно быть ошибкой
				СопоставлениеДляЕдиницы.Владелец = "-";
			КонецЕсли;
			
		Иначе
			
			СопоставлениеДляЕдиницы.Владелец = "";
			
		КонецЕсли;
	ИначеЕсли КлючВставить = "Владелец" Тогда
		 СопоставлениеДляЕдиницы.Владелец = ЗначениеВставить;
	ИначеЕсли	КлючВставить = "Название" Тогда
		
		Если ЗначениеЗаполнено(ЗначениеВставить) Тогда
			СопоставлениеДляЕдиницы.Название = ЗначениеВставить;
		Иначе
			СопоставлениеДляЕдиницы.Название = Строка(СопоставлениеДляЕдиницы.Ссылка);
		КонецЕсли;
		
	ИначеЕсли	КлючВставить = "Коэффициент" Тогда
		
		Если ЗначениеЗаполнено(ЗначениеВставить) Тогда
			СопоставлениеДляЕдиницы[КлючВставить] = ЗначениеВставить;
		Иначе
			СопоставлениеДляЕдиницы[КлючВставить] = "1";
		КонецЕсли;
		
	ИначеЕсли	СопоставлениеДляЕдиницы.Свойство(КлючВставить) Тогда
		
		СопоставлениеДляЕдиницы[КлючВставить] = ЗначениеВставить;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеДляЕдиницыКлиент_Заполнить(СопоставлениеДляЕдиницы, Источник, КлючПоиска, ДопПараметры) Экспорт
	
	Перем КлючДобавитьВДанные, ЗначениеЗаполнить;
	
	Если Не ДопПараметры.Свойство("Ключ", КлючДобавитьВДанные) Тогда 
		КлючДобавитьВДанные = КлючПоиска;
	КонецЕсли;
	Если	Не	Источник.Свойство(КлючПоиска, ЗначениеЗаполнить)
		Или Не	ЗначениеЗаполнено(ЗначениеЗаполнить) Тогда
		Возврат;
	КонецЕсли;
	
	СопоставлениеДляЕдиницы.Вставить(КлючДобавитьВДанные, ЗначениеЗаполнить);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеДляЕдиницыКлиент_Заполнить1С(СтрокаНоменклатуры1С, СопоставлениеЗаполнить) Экспорт
	
	Перем СЛокальнаяПеременная;
	
	Если		СопоставлениеЗаполнить.Свойство("ЕдИзмОрг", СЛокальнаяПеременная) Тогда
		// Наименование единицы измерения в старом формате
	ИначеЕсли	СопоставлениеЗаполнить.Свойство("ЕдИзм1С", СЛокальнаяПеременная) Тогда
		// Наименование единицы измерения в новом формате
	КонецЕсли;
	Если	ЗначениеЗаполнено(СЛокальнаяПеременная)
		И	СтрокаНоменклатуры1С.Единицы.Получить(СЛокальнаяПеременная) = Неопределено Тогда
		ЕдиницаСопоставление = НовыйСопоставлениеДляЕдиницыКлиент();
		СопоставлениеДляЕдиницыКлиент_Вставить(ЕдиницаСопоставление, "Ссылка", СЛокальнаяПеременная);
		СопоставлениеДляЕдиницыКлиент_Вставить(ЕдиницаСопоставление, "Владелец", СопоставлениеЗаполнить.Номенклатура); // Владелец у единицы должен быть заполнен всегда
	Иначе
		Возврат;
	КонецЕсли;
	
	Если	СопоставлениеЗаполнить.Свойство("ОКЕИ_1С", СЛокальнаяПеременная)
		И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		СопоставлениеДляЕдиницыКлиент_Вставить(ЕдиницаСопоставление, "ОКЕИ", СЛокальнаяПеременная);
	КонецЕсли;
	
	Если		СопоставлениеЗаполнить.Свойство("Коэффициент",	СЛокальнаяПеременная) Тогда
		// Коэффициент в старом формате
	ИначеЕсли	СопоставлениеЗаполнить.Свойство("Коэффициент1С",	СЛокальнаяПеременная) Тогда
		// Коэффициент в новом формате
	КонецЕсли;
	Если ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		СопоставлениеДляЕдиницыКлиент_Вставить(ЕдиницаСопоставление, "Коэффициент", СЛокальнаяПеременная);
	КонецЕсли;
	
	Если	СопоставлениеЗаполнить.Свойство("ЕдИзмНаименование1С",	СЛокальнаяПеременная)
		И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		СопоставлениеДляЕдиницыКлиент_Вставить(ЕдиницаСопоставление, "Название", СЛокальнаяПеременная);
	КонецЕсли;	
	
	ОписаниеНоменклатуры1СКлиент_Вставить(СтрокаНоменклатуры1С, "Единица", ЕдиницаСопоставление);

КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеДляЕдиницыКлиент_ЗаполнитьСБИС(СтрокаСопоставленияСБИС, СопоставлениеЗаполнить) Экспорт
	
	Перем СЛокальнаяПеременная;
	
	ЕдиницаСопоставление = НовыйСопоставлениеДляЕдиницыКлиент();
	
	Если		СопоставлениеЗаполнить.Свойство("ЕдИзмОКЕИ", СЛокальнаяПеременная) Тогда 
		// ОКЕИ в старом формате вариант 1	
	ИначеЕсли	СопоставлениеЗаполнить.Свойство("ОКЕИ", СЛокальнаяПеременная) Тогда
		// ОКЕИ в старом формате вариант 2
	ИначеЕсли	СопоставлениеЗаполнить.Свойство("ЕдИзмОКЕИ_СБИС", СЛокальнаяПеременная) Тогда
		// ОКЕИ в новом формате вариант 1
	ИначеЕсли	СопоставлениеЗаполнить.Свойство("ОКЕИ_СБИС", СЛокальнаяПеременная) Тогда
		// ОКЕИ в новом формате вариант 2
	КонецЕсли;
	Если ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		СопоставлениеДляЕдиницыКлиент_Вставить(ЕдиницаСопоставление, "ОКЕИ", СЛокальнаяПеременная);
	КонецЕсли;
	
	Если СопоставлениеЗаполнить.Свойство("КоэффициентСБИС",	СЛокальнаяПеременная) Тогда
		// Коэффициент в новом формате
	КонецЕсли;
	Если ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		СопоставлениеДляЕдиницыКлиент_Вставить(ЕдиницаСопоставление, "Коэффициент", СЛокальнаяПеременная);
	КонецЕсли;
	
	Если		СопоставлениеЗаполнить.Свойство("ЕдИзмНаименование",	СЛокальнаяПеременная) Тогда
		// Наименование единицы измерения в старом формате вариант 1
	ИначеЕсли 	СопоставлениеЗаполнить.Свойство("ЕдИзм",				СЛокальнаяПеременная) Тогда
		// Наименование единицы измерения в старом формате вариант 2
	ИначеЕсли	СопоставлениеЗаполнить.Свойство("ЕдИзмНаименованиеСБИС",СЛокальнаяПеременная) Тогда
		// Наименование единицы измерения в новом формате
	КонецЕсли;	
	Если ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		СопоставлениеДляЕдиницыКлиент_Вставить(ЕдиницаСопоставление, "Название", СЛокальнаяПеременная);
	КонецЕсли;	
	
	СтрокаСопоставленияСБИСКлиент_Вставить(СтрокаСопоставленияСБИС, "Единица", ЕдиницаСопоставление);
	
КонецПроцедуры

&НаСервере
Функция СопоставлениеДляЕдиницыКлиент_ПолучитьПараметрНаСервере(Ссылка, КлючПараметра)
	
	ОбъектПоиска = Ссылка.ПолучитьОбъект();
	Возврат ОбъектПоиска[КлючПараметра];
	
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ПорядокАвтоматическогоСопоставленияПоУмолчаниюКлиент() Экспорт
	
	ПорядокАвтоматическогоСопоставления = Новый Массив;
	
	//ПорядокАвтоматическогоСопоставления.Добавить("GTIN"); // Убрали, т.к. GTIN в отдельном поле
	ПорядокАвтоматическогоСопоставления.Добавить("КодПокупателя");
	ПорядокАвтоматическогоСопоставления.Добавить("Идентификатор");
	ПорядокАвтоматическогоСопоставления.Добавить("Артикул");
	ПорядокАвтоматическогоСопоставления.Добавить("Код");
	ПорядокАвтоматическогоСопоставления.Добавить("Наименование");
	ПорядокАвтоматическогоСопоставления.Добавить("КодПоставщика");
	
	Возврат ПорядокАвтоматическогоСопоставления;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСсылкаНаСправочникНоменклатурыНаСервереБезКонтекста(Ссылка, ВидыСправочниковНоменклатуры = Неопределено)
	
	Возврат МодульОбъектаСерверБезКонтекста().ЭтоСсылкаНаСправочникНоменклатуры(Ссылка, ВидыСправочниковНоменклатуры);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_мОбработчикиНаКлиенте

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_DBF

&НаКлиенте
Функция СформироватьПараметрыУстановкиДБФ(ПараметрыУстановкиВходящие) Экспорт
	Перем КаталогНастроекНаСервере;
	
	Если Не ПараметрыУстановкиВходящие.Свойство("Каталог", КаталогНастроекНаСервере) Тогда
		ВызватьСбисИсключение(784, "МодульОбъектаКлиент.СформироватьПараметрыУстановкиДБФ",,,"Не определен каталог для работы с DBF");
	КонецЕсли;  
	ПараметрыDBF_Исходящие = Новый Структура("Путь, Тип", КаталогНастроекНаСервере, ПараметрыУстановкиВходящие.Тип);
	
	СтрокаПодключения = ПолучитьЗначениеПараметраСбис("СтрокаПодключенияDBF");
	
	Если Не СтрокаПодключения = Неопределено Тогда
		Если Не Найти(СтрокаПодключения, "{СБИСКаталогDBF}") Тогда
			СтрокаПодключения = СтрокаПодключения + "{СБИСКаталогDBF}";
		КонецЕсли;
		ПараметрыDBF_Исходящие.Вставить("СтрокаСтатусы", СтрокаПодключения);
	КонецЕсли;
	Возврат ПараметрыDBF_Исходящие;
	
КонецФункции

&НаКлиенте
Процедура СообщитьИсключениеДБФ(ПараметрыИсключения) Экспорт
	СбисИсключение = ОбработатьИсключениеДБФ(ПараметрыИсключения);
	Если СбисИсключение.code = 717 Тогда
		СбисСообщить(Новый Структура("Текст", СбисИсключение.details));
	Иначе
		СообщитьСбисИсключение(СбисИсключение);
	КонецЕсли;
КонецПроцедуры

//Обработка ошибки при работе с DBF
&НаКлиенте
Функция  ОбработатьИсключениеДБФ(ПараметрыИсключения) Экспорт
	Перем СбисХелп, СбисСообщение;
	ИнформацияОбОшибке	= ПараметрыИсключения.ИнформацияОбОшибке;
	СбисИсключение		= НовыйСбисИсключение(ИнформацияОбОшибке, "МодульОбъектаКлиент.ОбработатьИсключениеДБФ");
	СбисДитейл			= СбисИсключение.details;
	Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
		ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
	КонецЦикла;
    
	Если Найти(ИнформацияОбОшибке.Описание, "ODBC") Тогда
		СбисКод			= 776; 
		СбисХелп		= "https://sbis.ru/help/integration/catalog/driver_not_found";
		СбисСообщение	= СбисДитейл;
		СбисДитейл		= ИнформацияОбОшибке.Описание;
	ИначеЕсли ИнформацияОбОшибке.Описание = "Не подключен файл статусов DBF." Тогда
		СбисКод			= 717;
		СбисДитейл		= ИнформацияОбОшибке.Описание + " " + СбисДитейл;
	Иначе
		Возврат НовыйСбисИсключение(ИнформацияОбОшибке, "Статусы_ДБФ.ОбработатьИсключениеДБФ", 773);
		//СбисКод			= 773;
		//СбисСообщение	= СбисДитейл;
		//СбисДитейл		= ИнформацияОбОшибке.Описание
	КонецЕсли; 
	Возврат НовыйСбисИсключение(,"Статусы_ДБФ.ОбработатьИсключениеДБФ", 
								СбисКод, СбисСообщение, СбисДитейл,, СбисХелп);	
КонецФункции

//Обработка ошибки при работе с DBF
&НаКлиенте
Функция  НовыйСбисИсключениеДБФ(ПараметрыИсключения) Экспорт
	Перем СбисХелп, СбисСообщение;
	ИнформацияОбОшибке	= ПараметрыИсключения.ИнформацияОбОшибке;
	СбисДитейл			= ПараметрыИсключения.Сообщение;
	Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
		ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
	КонецЦикла;
    
	Если Найти(ИнформацияОбОшибке.Описание, "ODBC") Тогда
		СбисКод			= 776; 
		СбисХелп		= "https://sbis.ru/help/integration/catalog/driver_not_found";
		СбисСообщение	= СбисДитейл;
		СбисДитейл		= ИнформацияОбОшибке.Описание;
	ИначеЕсли ИнформацияОбОшибке.Описание = "Не подключен файл статусов DBF." Тогда
		СбисКод			= 717;
		СбисДитейл		= ИнформацияОбОшибке.Описание + " " + СбисДитейл;
	Иначе
		Возврат НовыйСбисИсключение(ИнформацияОбОшибке, "Статусы_ДБФ.ОбработатьИсключениеДБФ", 773);
		//СбисКод			= 773;
		//СбисСообщение	= СбисДитейл;
		//СбисДитейл		= ИнформацияОбОшибке.Описание
	КонецЕсли; 
	Возврат НовыйСбисИсключение(,"Статусы_ДБФ.ОбработатьИсключениеДБФ", 
								СбисКод, СбисСообщение, СбисДитейл,, СбисХелп);	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ПараметрыСистемы

////////////////////////////////////////////////////
//////////////////Параметры системы/////////////////
////////////////////////////////////////////////////

//Структура с описанием текущей системы. Параметры получаются для текущей конфы.
//Вынесено в общее для сбора сразу всех данных на сервере
&НаКлиенте
Функция ПолучитьПараметрыСистемы() Экспорт
	
	СистемнаяИнформацияКлиент = Новый СистемнаяИнформация;
	ПараметрыСистемы = Новый Структура("Сервер,Клиент,Конфигурация,Обработка",Новый Структура, Новый Структура, Новый Структура, Новый Структура);
	ЭтотМодульОбъект = МодульОбъектаКлиент();
	Попытка
		//Данные о клиенте
		ПараметрыСистемы.Клиент.Вставить("УправляемоеПриложение",	ТипЗнч(ЭтотМодульОбъект) = Тип("УправляемаяФорма"));
		ПараметрыСистемы.Клиент.Вставить("ВерсияПриложения",		СистемнаяИнформацияКлиент.ВерсияПриложения);
		ПараметрыСистемы.Клиент.Вставить("ТипОС", 					ТипПлатфтормыКлиент(СистемнаяИнформацияКлиент));
		ПараметрыСистемы.Клиент.Вставить("ЭтоLinux",				НРег(Лев(ПараметрыСистемы.Клиент.ТипОС, 5)) = "linux");
		ПараметрыСистемы.Клиент.Вставить("РежимЗапускаПриложения",	РежимЗапускаПриложения());
		//Данные о конфигурации
		ПараметрыСистемы.Конфигурация.Вставить("URL",		СтрокаСоединенияИнформационнойБазы());
		ПараметрыСистемы.Конфигурация.Вставить("Файловая",	Булево(Найти(ПараметрыСистемы.Конфигурация.URL, "File=")));
		//Данные об обработке
		
#Область include_sys_version
		СбисВерсия = "24.2118.1";
#КонецОбласти
		
		ВерсияОбработкиКратко = СтрЗаменить(СбисВерсия, ".", Символы.ПС);
		ВерсияОбработкиКратко = СтрПолучитьСтроку(ВерсияОбработкиКратко, 1) + "." + СтрПолучитьСтроку(ВерсияОбработкиКратко, 2);
		ВерсияПлатформыКратко = СтрЗаменить(ПараметрыСистемы.Клиент.ВерсияПриложения, ".", Символы.ПС);
		ВерсияПлатформыКратко = СтрПолучитьСтроку(ВерсияПлатформыКратко, 1) + СтрПолучитьСтроку(ВерсияПлатформыКратко, 2);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ПараметрыСистемы.Клиент.Вставить("УправляемоеПриложение",	Ложь);
			ИмяПродуктаСБИС	= "vo2_1c_82_of";
			СбисИмяОбработки = Строка(ЭтотМодульОбъект);
			СбисПутьКФормам = "";
		#Иначе
			ПараметрыСистемы.Клиент.Вставить("УправляемоеПриложение",	Истина);
			ИмяПродуктаСБИС	= "vo2_1c_83_uf";
			СбисИмяФормы = СтрЗаменить(ЭтотМодульОбъект.ИмяФормы, ".", Символы.ПС);
			СбисИмяОбработки = СтрПолучитьСтроку(СбисИмяФормы, 1) + ".";
			Шаг = 2;
			Пока Шаг < СтрЧислоСтрок(СбисИмяФормы) - 1 Цикл
				СбисИмяОбработки = СбисИмяОбработки + СтрПолучитьСтроку(СбисИмяФормы, Шаг) + ".";
				Шаг = Шаг + 1;
			КонецЦикла;
			СбисПутьКФормам = СтрПолучитьСтроку(СбисИмяФормы, Шаг) + ".";
		#КонецЕсли
		ПараметрыСистемы.Обработка.Вставить("Версия",		СбисВерсия);
		Если ГлавноеОкно = Неопределено Тогда
			//При вызове через Печать УФ, когда на модуле ещё нет ГО
			ПараметрыСистемы.Обработка.Вставить("ПервыйЗапуск", Ложь);
			ПараметрыСистемы.Обработка.Вставить("НоваяВерсия",	Ложь);			
		Иначе
			ПараметрыСистемы.Обработка.Вставить("ПервыйЗапуск", Не ЗначениеЗаполнено(ГлавноеОкно.ПредВерсия));
			ПараметрыСистемы.Обработка.Вставить("НоваяВерсия",	СбисНоваяВерсия(ПараметрыСистемы.Обработка.Версия, ГлавноеОкно.ПредВерсия));
		КонецЕсли;
		ПараметрыСистемы.Обработка.Вставить("ПолноеИмя",	СбисИмяОбработки);
		ПараметрыСистемы.Обработка.Вставить("ИмяПродукта",	ИмяПродуктаСБИС);
		ПараметрыСистемы.Обработка.Вставить("КлючФорм",		СбисПутьКФормам);
		ПараметрыСистемы.Обработка.Вставить("КраткаяВерсия","VO" + ВерсияПлатформыКратко + ?(ПараметрыСистемы.Клиент.УправляемоеПриложение, "UF", "OF") + ВерсияОбработкиКратко);

		//Данные о сервере
		ЗаполнитьПараметрыСистемыНаСервере(ПараметрыСистемы);
		ПараметрыСистемы.Обработка.Вставить("ПолнаяВерсия",	"1C" + ПараметрыСистемы.Сервер.ВерсияПриложения + "_VO" + ВерсияОбработкиКратко);  
		
		//Данные по UserAgent для API методов
		ПараметрыСистемы.Обработка.Вставить("UserAgent",	"Saby1C" + "VO2" + ?(ПараметрыСистемы.Клиент.УправляемоеПриложение, "83UF", "82OF") + "/" + ВерсияОбработкиКратко);
	Исключение
		ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ПолучитьПараметрыСистемы");
	КонецПопытки;
	Попытка
		//Для определения ангийского языка, сделаем заведомо ошибочный вызов и проверим исключение
		СбисТестИсключение = Новый Структура("1");
	Исключение
		СбисОшибка = ОписаниеОшибки();
		Если Найти(СбисОшибка, "calling constructor") Тогда
			ПараметрыСистемы.Конфигурация.ВстроенныйЯзык = "en";
		КонецЕсли;
	Конецпопытки;
		
	Возврат	ПараметрыСистемы;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыСистемыНаСервере(ПараметрыСистемы)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	//На толстом клиенте пока берем системную информацию клиента.
	ПараметрыСистемы.Сервер.Вставить("ТипОС", 			ТипПлатфтормыСервер(СистемнаяИнформация));
	ПараметрыСистемы.Сервер.Вставить("ВерсияПриложения",СистемнаяИнформация.ВерсияПриложения);
	ПараметрыСистемы.Сервер.Вставить("ЭтоLinux",		НРег(Лев(ПараметрыСистемы.Сервер.ТипОС, 5)) = "linux");
	//Получаем системные параметры файла обработки	
	ПараметрыСистемы.Обработка.Вставить("ПолноеИмяОбработки",		сбисПолноеИмяФайла(ПараметрыСистемы));
	ПараметрыСистемы.Обработка.Вставить("РежимИспользования",		ПолучитьРежимИспользованияОбработки(ПараметрыСистемы.Обработка.ПолноеИмяОбработки));
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ЗаписатьПараметрыИнтеграции = Ложь;
		ПараметрыИнтеграции = ХранилищеОбщихНастроек.Загрузить("Integration", "Integration", "Integration", "СБИС");
		Если ПараметрыИнтеграции = Неопределено Тогда
			ПараметрыИнтеграции = Новый Соответствие;
		КонецЕсли;
		УидСистемы = ПараметрыИнтеграции.Получить("integration_uuid");
		Если УидСистемы = Неопределено Тогда
			ЗаписатьПараметрыИнтеграции = Истина;
			УидСистемы = Строка(Новый УникальныйИдентификатор);
			ПараметрыИнтеграции.Вставить("integration_uuid", УидСистемы);
		КонецЕсли;
		Если ЗаписатьПараметрыИнтеграции Тогда
			ХранилищеОбщихНастроек.Сохранить("Integration", "Integration", ПараметрыИнтеграции, "Integration", "СБИС")
		КонецЕсли;
	    УстановитьПривилегированныйРежим(Ложь);
	Исключение
		УидСистемы = "";
	КонецПопытки;
	ПараметрыСистемы.Конфигурация.Вставить("Имя",					Метаданные.Имя);
	ПараметрыСистемы.Конфигурация.Вставить("КраткаяИнформация",		Метаданные.КраткаяИнформация);
	ПараметрыСистемы.Конфигурация.Вставить("ПодробнаяИнформация",	Метаданные.ПодробнаяИнформация);
	ПараметрыСистемы.Конфигурация.Вставить("Версия",				Метаданные.Версия);
	ПараметрыСистемы.Конфигурация.Вставить("ВстроенныйЯзык",		"ru");
	ПараметрыСистемы.Конфигурация.Вставить("УИДИнтеграции",			УидСистемы);
	//Для анлгоязычных систем переопределим язык для проверки функций
	Если Найти(Строка(Метаданные), "Metadata") Тогда
		ПараметрыСистемы.Конфигурация.ВстроенныйЯзык = "en";
	КонецЕсли;	
	//Для возможности записи в ИдПользователя для способов интеграции SDK2 и Каталог
	ПараметрыСистемы.Клиент.Вставить("ИдПользователяИБ", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);

КонецПроцедуры

//Возвращает режим использования обработки: Во внешнем файле или в справочнике
&НаСервере
Функция ПолучитьРежимИспользованияОбработки(ПолноеИмяОбработки) Экспорт
		
	Если Прав(ПолноеИмяОбработки, 3) = "epf" Тогда
		РежимИспользования = "Файл внешней обработки";
	Иначе
		РежимИспользования = "Обработка в справочнике внешних обработок";
	КонецЕсли;
	Возврат РежимИспользования;
	
КонецФункции

//Возвращает полное имя файла обработки.
&НаСервере
Функция сбисПолноеИмяФайла(сбисПараметрыСистемы) Экспорт

	ОбработкаОбъектМодуль = МодульОбъектаСервер();
	Попытка
		Возврат ОбработкаОбъектМодуль.ИспользуемоеИмяФайла;	//Для файла
	Исключение
		Возврат Строка(ТипЗнч(ОбработкаОбъектМодуль));		//Для встройки в конфу
	КонецПопытки;

КонецФункции

//Возвращает строковое представление типа платформы сервера.
&НаСервере
Функция ТипПлатфтормыСервер(Знач СистемнаяИнформация)
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux_x86";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux_x86_64";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows_x86";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "Windows_x86_64";
	Иначе//Смотрим версию. Если ниже 8.3.7.1845, то маков нет
		Если сбисНоваяВерсия(СистемнаяИнформация.ВерсияПриложения, "8.3.7.1844") Тогда
			Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86 Тогда
				Возврат "MacOS_x86";
			ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
				Возврат "MacOS_x86_64";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
КонецФункции

&НаКлиенте
Функция РежимЗапускаПриложения()
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат "ТолстыйКлиентОбычноеПриложение";
	#ИначеЕсли ВебКлиент Тогда
		Возврат "ВебКлиент";
	#ИначеЕсли ТонкийКлиент Тогда
		Возврат "ТонкийКлиент";
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
		Возврат "ТолстыйКлиентУправляемоеПриложение";
	#ИначеЕсли Сервер Тогда
		Возврат "Сервер";	
	#ИначеЕсли ВнешнееСоединение Тогда
		Возврат "ВнешнееСоединение";
	#КонецЕсли
КонецФункции

&НаСервере
Функция СбисНоваяВерсия(Знач ВерсияНовая, Знач ВерсияТекущая, Знач ДопПараметры = Неопределено) Экспорт 
	
	Возврат СравнитьВерсииБольшеМеньше(ВерсияТекущая, ВерсияНовая);

КонецФункции	

//Возвращает строковое представление типа платформы клиента.
&НаКлиенте
Функция ТипПлатфтормыКлиент(СистемнаяИнформация)
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux_x86";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux_x86_64";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows_x86";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "Windows_x86_64";
	Иначе//Смотрим версию. Если ниже 8.3.7.1845, то маков нет
		Если сбисНоваяВерсия(СистемнаяИнформация.ВерсияПриложения, "8.3.7.1844") Тогда
			Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86 Тогда
				Возврат "MacOS_x86";
			ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
				Возврат "MacOS_x86_64";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Маппинг

&НаКлиенте
Функция ПрименятьФункционалНовыеКонтрагенты(Данные, ДопПараметры = Неопределено) Экспорт
	
	ФорматыДокументов = ПолучитьЗначениеПараметраСбис("ДокументыДляНовыхКонтрагентов");
	
	Если Данные.Свойство("Вложения")
		И ТипЗнч(Данные.Вложения) = Тип("Структура") Тогда
		
		МассивВложений = Новый Массив;
		МассивВложений.Добавить(Данные.Вложения);
	ИначеЕсли Данные.Свойство("Вложения")
		И ТипЗнч(Данные.Вложения) = Тип("Массив") Тогда
		
		МассивВложений = Данные.Вложения;
	ИначеЕсли Данные.Свойство("СоставПакета")
		И Данные.СоставПакета.Свойство("Вложение") Тогда
		
		МассивВложений = Данные.СоставПакета.Вложение;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	Для Каждого Вложение Из МассивВложений Цикл
		
		Для Каждого ДостуныйФормат Из ФорматыДокументов Цикл 
			
			ПредставлениеТипа = ?(Вложение.Тип = Неопределено, "", Вложение.Тип)
				+ "_" + ?(Вложение.ВерсияФормата = Неопределено, "", Вложение.ВерсияФормата);
			ФорматВложения = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисЗаменитьНедопустимыеСимволы(ПредставлениеТипа);
			Если ДостуныйФормат = ФорматВложения Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Результат Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ПрименятьФункционалНовыеКонтрагенты()

// Вызывает поиск массива сторон по их данным
//
// Параметры:
//  ДанныеДляПоиска  - Массив - Тип элементов - Структура, содержащие 
//                 ИНН, КПП, Тип, ВидИД (0 - 1С, 1 - СБИС), КодФилиала, GLN
//  ДопПараметры  - Неопределено - Прозапас
//
// Возвращаемое значение:
//   Массив   - Объекты маппинга
//
&НаКлиенте
Функция НайтиСтороныНаМаппинге(ДанныеДляПоиска, ДопПараметры = Неопределено) Экспорт
	
	Кэш = ГлавноеОкно.Кэш;
	
	Отказ = Ложь;
	ConnectionId = ПолучитьИдКоннекшена(Отказ);
	Если Отказ Тогда  
		СбисИсключение = НовыйСбисИсключение(ConnectionId, "МодульОбъектаКлиента.НайтиСтороныНаМаппинге");
		СбисСтатистика_СформироватьИЗаписать(Новый Структура("Действие, Ошибка", "Ошибка", СбисИсключение));
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПолучения = Новый Структура;
	
	ПараметрыПолучения.Вставить("ConnectionId", ConnectionId);
	ПараметрыПолучения.Вставить("IdType", ДопПараметры.ВидИД);
	ПараметрыПолучения.Вставить("Filter", Новый Массив);
	
	Для каждого Сторона Из ДанныеДляПоиска Цикл
		ДанныеСтороны = Новый Структура;
		
		ДанныеСтороны.Вставить("Type", Сторона.Тип);
		
		СведенияОСтороне = ?(ТипЗнч(Сторона) = Тип("КлючИЗначение"), Сторона.Значение, Сторона);
		Если ТипЗнч(СведенияОСтороне) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СведенияОСтороне.Свойство("ИНН") Тогда
			ДанныеСтороны.Вставить("Key1_1", СведенияОСтороне.ИНН);
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если СведенияОСтороне.Свойство("КПП") Тогда
			ДанныеСтороны.Вставить("Key1_2", СведенияОСтороне.КПП);
		КонецЕсли;
		
		Если СведенияОСтороне.Свойство("КодФилиала") Тогда
			ДанныеСтороны.Вставить("Key1_3", СведенияОСтороне.КодФилиала);
		КонецЕсли;
		
		Если СведенияОСтороне.Свойство("GLN") Тогда
			ДанныеСтороны.Вставить("Key2", СведенияОСтороне.GLN);
		КонецЕсли;
		
		Если СведенияОСтороне.Свойство("Тип1С") Тогда
			ДанныеСтороны.Вставить("ClientType", СведенияОСтороне.Тип1С);
		КонецЕсли;
		
		ПараметрыПолучения.Filter.Добавить(ДанныеСтороны);
	КонецЦикла;
	
	Отказ = Ложь;
	СопоставленныеДанныеСторон = Кэш.Интеграция.СБИС_ПолучитьСопоставлениеСторон(Кэш, ПараметрыПолучения, , Отказ);
	
	Если Отказ Тогда   
		ВызватьСбисИсключение(СопоставленныеДанныеСторон, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПолучитьСопоставлениеСторон");
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат СопоставленныеДанныеСторон;

КонецФункции // НайтиМаппингОбъекты()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция НайтиОбновитьСторонуМаппинга(Данные, ДопПараметры) Экспорт 
    
	Кэш = ГлавноеОкно.Кэш;
	ИниКонфигурации = Кэш.ини.Конфигурация;
	Сторона = Данные.СведенияСтороны;
	ОбъектМаппинга = Данные.ОбъектМаппинга;
	
	Отказ = Ложь;
	ConnectionId = ПолучитьИдКоннекшена(Отказ);
	Если Отказ Тогда                                                                                              
		СбисИсключение = НовыйСбисИсключение(ConnectionId, "МодульОбъектаКлиент.НайтиОбновитьСторонуМаппинга");
		СбисСтатистика_СформироватьИЗаписать(Новый Структура("Действие, Ошибка", "Ошибка", СбисИсключение));
		Возврат Ложь;
	КонецЕсли;
	
	Фильтр = Новый Структура;
	
	Фильтр.Вставить("ConnectionId", ConnectionId);
	Фильтр.Вставить("IdType", ?(ДопПараметры.ВидОбъекта = "Client", 0, 1));
	Фильтр.Вставить("Id", ОбъектМаппинга[?(ДопПараметры.ВидОбъекта = "Client", "Client", "Sbis") + "Id"]);
	
	ДанныеСтороны = Новый Структура;
	
	Если Сторона.Свойство("Тип") Тогда
		ТипОбъекта = Сторона.Тип;
	ИначеЕсли ТипЗнч(Сторона.Ссылка) = Тип(СтрЗаменить(ИниКонфигурации.Организации.Значение, ".", "Ссылка."))  Тогда
		ТипОбъекта = "НашаОрганизация";                	
	Иначе
		ТипОбъекта = "Контрагент";
	КонецЕсли;              
	
	Если  ТипЗнч(Сторона.Ссылка) = Тип(СтрЗаменить(ИниКонфигурации.Организации.Значение, ".", "Ссылка.")) Тогда 
		Тип1С = СтрЗаменить(ИниКонфигурации.Организации.Значение, ".", "и.");
	ИначеЕсли ТипЗнч(Сторона.Ссылка) = Тип(СтрЗаменить(ИниКонфигурации.Контрагенты.Значение, ".", "Ссылка.")) Тогда 
		Тип1С = СтрЗаменить(ИниКонфигурации.Контрагенты.Значение, ".", "и.");
	ИначеЕсли ТипЗнч(Сторона.Ссылка) = Тип(СтрЗаменить(ИниКонфигурации.Партнеры.Значение, ".", "Ссылка.")) Тогда
		Тип1С = СтрЗаменить(ИниКонфигурации.Партнеры.Значение, ".", "и.");
	КонецЕсли;	
		
	Фильтр.Вставить("Type", ТипОбъекта);
	
	Если ТипЗнч(Сторона) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Сторона.Свойство("ИНН") Тогда
		ДанныеСтороны.Вставить(ДопПараметры.ВидОбъекта + "Param_1_1", Сторона.ИНН);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если Сторона.Свойство("КПП") Тогда
		ДанныеСтороны.Вставить(ДопПараметры.ВидОбъекта + "Param_1_2", Сторона.КПП);
	КонецЕсли;
	
	Если Сторона.Свойство("КодФилиала") Тогда
		ДанныеСтороны.Вставить(ДопПараметры.ВидОбъекта + "Param_1_3", Сторона.КодФилиала);
	КонецЕсли;
	
	Если Сторона.Свойство("GLN") Тогда
		ДанныеСтороны.Вставить(ДопПараметры.ВидОбъекта + "Param_2", Сторона.GLN);
	КонецЕсли;
		
	Если Сторона.Свойство("Тип1С") Тогда
		ДанныеСтороны.Вставить("ClientType", Сторона.Тип1С);
	КонецЕсли;
	
	Если ДопПараметры.ВидОбъекта = "Client" Тогда 
		ДанныеСтороны.Вставить("ClientId", Строка(Сторона.Ссылка.УникальныйИдентификатор()));
		ДанныеСтороны.Вставить("ClientName", Строка(Сторона.Ссылка));
		ДанныеСтороны.Вставить("ClientType", Тип1С); 
	Иначе
		ДанныеСтороны.Вставить("SbisId", Сторона.Id);
		ДанныеСтороны.Вставить("SbisName", Сторона.Name);
	КонецЕсли;
	
	ДанныеСтороны.Вставить("Status", 1);
	ДанныеСтороны.Вставить("Status_msg", "Сопоставлено");
	
	Отказ = Ложь;
	СопоставленныеДанныеСторон = Кэш.Интеграция.ОбновитьЗаписьСопоставления(Кэш, Фильтр, ДанныеСтороны, Отказ);
	
	Если Отказ Тогда   
		Кэш.СБИС.МодульОбъектаКлиент.ВызватьСбисИсключение(СопоставленныеДанныеСторон, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПолучитьСопоставлениеСторон");
		Возврат Ложь;
	КонецЕсли;

КонецФункции // НайтиОбновитьСторонуМаппинга()


&НаСервереБезКонтекста
Функция ПолучитьУчастникаПоИд(Идентификатор, Тип)
	Возврат Справочники[Сред(Тип, Найти(Тип, ".") + 1)].ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
КонецФункции

// Сохраняет сопоставление сторона в маппинге
//
// Параметры:
//  ПараметрыФункции  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  ДопПараметры  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Функция Маппинг_ОбновитьСторону1С(СведенияМаппинга, ДопПараметры = Неопределено) Экспорт 

	Кэш = ГлавноеОкно.Кэш; 
	Отказ = Ложь;
    
	ПараметрыПолучения = Новый Массив;  
	ТипыДанныхСторон = ТипыСторонДляМаппинга();
		
	ПараметрыПолучения.Добавить(Новый Структура);   
	Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(ПараметрыПолучения[0], СведенияМаппинга);
	ПараметрыПолучения[0].Вставить("Тип", СведенияМаппинга.Тип);
	ПараметрыПолучения[0].Вставить("Тип1С", ТипыДанныхСторон[СведенияМаппинга.ТипДанныхСтороны]);	
	
	СопоставленныеДанныеСторон = НайтиСтороныНаМаппинге(ПараметрыПолучения, Новый Структура("ВидИД", 1));
	
	Если Не СопоставленныеДанныеСторон = Ложь
		И СопоставленныеДанныеСторон.Количество() Тогда 
		
		Для Каждого СопоставленнаяСторона Из СопоставленныеДанныеСторон Цикл
			Если Не ЗначениеЗаполнено(СопоставленнаяСторона.ClientType) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СведенияМаппинга.Ссылка) = Тип(СтрЗаменить(СопоставленнаяСторона.ClientType, "и.", "Ссылка.")) Тогда
				СтрокаМаппинга = СопоставленнаяСторона;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураОбъекта1С = Кэш.ОбщиеФункции.СбисПолучитьСтруктуруОбъекта1С(СведенияМаппинга.Ссылка, Новый Структура("ИмяСБИС", СведенияМаппинга.Тип), Ложь);
	       
	
	СведенияОбъектаСБИС = Новый Структура;
	Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(СведенияОбъектаСБИС, СведенияМаппинга);  
	
	СБИС_UUID = "";
	
	Если ТипЗнч(СтрокаМаппинга) = Тип("Структура")
		И СтрокаМаппинга.Свойство("UUID") Тогда
		
		СБИС_UUID = СтрокаМаппинга.UUID;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаМаппинга) = Тип("Структура")
		И СтрокаМаппинга.Свойство("SbisId")
		И ЗначениеЗаполнено(СтрокаМаппинга.SbisId) Тогда
		
		СведенияОбъектаСБИС.Вставить("ИдСБИС", СтрокаМаппинга.SbisId);
		
	Иначе  
		
		ОбъектAPI = ПолучитьAPIОбъектСтороны(СведенияМаппинга.Тип, СведенияМаппинга);
		
		Если Не (ТипЗнч(ОбъектAPI) = Тип("Массив")
			И ОбъектAPI.Количество()) Тогда 
			
			Возврат Ложь;
		КонецЕсли;
		СведенияОбъектаСБИС.Вставить("ИдСБИС", ОбъектAPI[0].ИдСБИС);
	
	КонецЕсли;         
	
	СведенияОбъектаСБИС.Вставить("Название", ГлавноеОкно.Кэш.ОбщиеФункции.сбисНазваниеСтороны(ДопПараметры.СторонаСБИС));
	
	РезультатОбновления = Маппинг_ОбновитьИзДанныхСтороны(СведенияМаппинга.Тип, Новый Структура("СБИС, ИС, УИД, Статус", СведенияОбъектаСБИС, СтруктураОбъекта1С, СБИС_UUID, Новый Структура("Ид, Сообщение", 1, "Сопоставлено")));
	
	Если ТипЗнч(РезультатОбновления) = Тип("Число") И СведенияОбъектаСБИС.Тип = "Контрагент" Тогда 
		
		Если СведенияМаппинга.ТипДанныхСтороны = "ДанныеКонтрагента"
			Или ТипыДанныхСторон.ДанныеГрузополучателя = ТипыДанныхСторон.ДанныеКонтрагента Тогда 
			
			Действие = "Контрагент сопоставлен";
			
		ИначеЕсли СведенияМаппинга.ТипДанныхСтороны = "ДанныеГрузополучателя" Тогда 
			
			Действие = "Партнер сопоставлен";
			
		Иначе 
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		СоставСтатистики = Новый Структура;
		СоставСтатистики.Вставить("Контекст", "Загрузка заказа");
		СоставСтатистики.Вставить("Действие", Действие);
		
		ПараметрыСтатистики = Новый Структура("Действие, Сообщения", "ПрикладнаяСтатистика", Новый Массив);
		ПараметрыСтатистики.Сообщения.Добавить(СоставСтатистики);
		
		Попытка
			
			СбисСтатистика_СформироватьИЗаписать(ПараметрыСтатистики);
			
		
		Исключение
			
			СообщитьСбисИсключение(ИнформацияОбОшибке(), "ПолучитьПротоколПроверкиВложения");     
			
		КонецПопытки;
	
	КонецЕсли;

КонецФункции // Маппинг_ОбновитьСторону1С()

// Возвращает результат метода MappingObject.List
//
// Параметры:
//  ПараметрыСписка  - Структура - Параметры маппинга:
//					Тип - Тип MappingObject
//					ФильтрГлавноеОкно - Параметры фильра с главного окна
//  ДопПараметры  - Структура, Неопределено - Дополнительные параметры
//                 (ДопПоля - получение дополнительынх полей)
//
// Возвращаемое значение:
//   Массив   - Список маппинг объектов
//
&НаКлиенте
Функция ПолучитьСписокМаппинга(ПараметрыСписка, ДопПараметры = Неопределено) Экспорт 

	Перем ДопПоля;
	
	Кэш = ГлавноеОкно.Кэш;        
	Отказ = Ложь;
	ConnectionId = ПолучитьИдКоннекшена(Отказ);
	Если Отказ Тогда                                                                                              
		СбисИсключение = НовыйСбисИсключение(ConnectionId, "МодульОбъектаКлиент.ПолучитьСписокМаппинга");
		СбисСтатистика_СформироватьИЗаписать(Новый Структура("Действие, Ошибка", "Ошибка", СбисИсключение));
        СписокМаппинга = Новый Структура("Данные, Навигация", Новый Массив, Новый Структура);
        СписокМаппинга.Навигация.Вставить("ЕстьЕще", Ложь);
		Возврат СписокМаппинга;
	КонецЕсли;
	
	Фильтр = Новый Структура;       
	Фильтр.Вставить("ConnectionId",	ConnectionId);
	Фильтр.Вставить("SettingId",	ПараметрыСписка.Тип);  
	Если ЗначениеЗаполнено(ПараметрыСписка.ФильтрГлавноеОкно.ФильтрРодитель) Тогда
		Фильтр.Вставить("ClientParentUid", ПараметрыСписка.ФильтрГлавноеОкно.ФильтрРодитель);
	КонецЕсли; 
	
	Навигация = Новый Структура;
	Навигация.Вставить("PageSize",		ПараметрыСписка.ФильтрГлавноеОкно.ЗаписейНаСтранице);
	Навигация.Вставить("Page",	ПараметрыСписка.ФильтрГлавноеОкно.ФильтрСтраница); 
	
	Если	ТипЗнч(ДопПараметры) = Тип("Структура")
		И	ДопПараметры.Свойство("ДопПоля") Тогда
		
		ДопПоля = ДопПараметры.ДопПоля;
	КонецЕсли;
	
	Отказ = Ложь;
	СписокМаппинга = Кэш.Интеграция.MappingObject_List(Кэш, ДопПоля, Фильтр, Навигация, Отказ);
	
	Если Отказ Тогда
        СписокМаппинга = Новый Структура("Данные, Навигация", Новый Массив, Новый Структура);
        СписокМаппинга.Навигация.Вставить("ЕстьЕще", Ложь);
	КонецЕсли;
	
	Возврат СписокМаппинга;

КонецФункции // ПолучитьСписокМаппинга()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ОбогатитьОбъектМаппинга(СтруктураОбъекта, СторонаСБИС)
	
	СведенияОСтороне = Неопределено;
	Если Не СторонаСБИС.Свойство("СвЮЛ", СведенияОСтороне) Тогда 
		СведенияОСтороне = СторонаСБИС.СвФЛ;
	КонецЕсли;
	
	СтруктураОбъекта.ИНН = СведенияОСтороне.ИНН;
	СтруктураОбъекта.Название = ГлавноеОкно.Кэш.ОбщиеФункции.сбисНазваниеСтороны(СторонаСБИС);
	
	Если СведенияОСтороне.Свойство("КПП") Тогда  
		СтруктураОбъекта.Вставить("КПП", СведенияОСтороне.КПП);
	Иначе
		СтруктураОбъекта.Вставить("КПП", "");
	КонецЕсли; 
	
	Если СторонаСБИС.Свойство("КодФилиала") Тогда  
		СтруктураОбъекта.Вставить("КодФилиала", СторонаСБИС.КодФилиала);
	Иначе
		СтруктураОбъекта.Вставить("КодФилиала", "");
	КонецЕсли;

КонецПроцедуры // ОбогатитьОбъектМаппинга()

&НаКлиенте 
Функция ПолучитьТип1СДляМаппинга(ИниКонфигурации, ИмяУзла)
	
	Если ИниКонфигурации.Свойство(ИмяУзла) Тогда
		ЗначениеУзла = СтрЗаменить(ИниКонфигурации[ИмяУзла].Значение, """", "");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Если Лев(ЗначениеУзла, 1) = "[" Тогда
			Возврат ПолучитьТипМетаданных(ИниКонфигурации,	Сред(ЗначениеУзла, 2, Найти(ЗначениеУзла, "]") - 2));
				 
		ИначеЕсли	ТипЗнч(ЗначениеУзла) = Тип("Строка")
			И		Найти(ЗначениеУзла, ".") Тогда 
			      
			Если Лев(ЗначениеУзла, 10) = "Справочник" Тогда                      
				Возврат "Справочники." + Сред(ЗначениеУзла, Найти(ЗначениеУзла, ".") + 1);
			ИначеЕсли Лев(ЗначениеУзла, 8) = "Документ" Тогда
				Возврат "Документы." + Сред(ЗначениеУзла, Найти(ЗначениеУзла, ".") + 1);
			ИначеЕсли Лев(ЗначениеУзла, 23) = "ПланыВидовХарактеристик" Тогда
				Возврат "ПланыВидовХарактеристик." + Сред(ЗначениеУзла, Найти(ЗначениеУзла, ".") + 1);
			КонецЕсли;
				 
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат Неопределено;        
	
КонецФункции

&НаКлиенте
Функция ТипыСторонИзИниДляМаппинга(ИниКонфигурации)
	
	ОписаниеТипов = Новый Структура;
	ОписаниеТипов.Вставить("Организации",	ПолучитьТип1СДляМаппинга(ИниКонфигурации, "Организации"));
	ОписаниеТипов.Вставить("Контрагенты",	ПолучитьТип1СДляМаппинга(ИниКонфигурации, "Контрагенты"));
	ОписаниеТипов.Вставить("Партнеры",		ПолучитьТип1СДляМаппинга(ИниКонфигурации, "Партнеры"));
	
	Возврат ОписаниеТипов;
	
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ТипыСторонДляМаппинга()

	ОписаниеКонфигурации = ГлавноеОкно.Кэш.Ини.Конфигурация;
	
	ОписаниеТипов = ТипыСторонИзИниДляМаппинга(ОписаниеКонфигурации);
	
	ТипыСторон = Новый Структура;
	ТипыСторон.Вставить("ДанныеОрганизации", ОписаниеТипов.Организации);
	ТипыСторон.Вставить("ДанныеКонтрагента", ОписаниеТипов.Контрагенты);
	
	ТипГрузополучателя = ПолучитьЗначениеПараметраСбис("ТипГрузополучателя");
	
	Если ТипГрузополучателя = "ГрузополучательКонтрагент" Тогда
		
		ТипыСторон.Вставить("ДанныеГрузополучателя", ОписаниеТипов.Контрагенты);
		
	ИначеЕсли ТипГрузополучателя = "ГрузополучательПартнер" Тогда
		
		ТипыСторон.Вставить("ДанныеГрузополучателя", ОписаниеТипов.Партнеры);
		
	Иначе 
		
		ТипыСторон.Вставить("ДанныеГрузополучателя", Неопределено);
		
	КонецЕсли;
	
	Возврат ТипыСторон;

КонецФункции // ТипыСторонДляМаппинга()

&НаКлиенте
Функция ПолучитьAPIОбъектСтороны(ТипAPIОбъекта, ДанныеСтороны) Экспорт 
	
	Filter = Новый Структура;
	
	Filter.Вставить("Ключ1_1", ?(ДанныеСтороны.Свойство("ИНН") И ЗначениеЗаполнено(ДанныеСтороны.ИНН), ДанныеСтороны.ИНН, Неопределено));
	Filter.Вставить("Ключ1_2", ?(ДанныеСтороны.Свойство("КПП") И ЗначениеЗаполнено(ДанныеСтороны.КПП), ДанныеСтороны.КПП, Неопределено));
	Filter.Вставить("Ключ1_3", ?(ДанныеСтороны.Свойство("КодФилиала") И ЗначениеЗаполнено(ДанныеСтороны.КодФилиала), ДанныеСтороны.КодФилиала, Неопределено));
	
	ПараметрыМетода = Новый Структура("Type, Filter", ТипAPIОбъекта, Filter);
	Возврат ГлавноеОкно.Кэш.Интеграция.API3_FindSbisObject(ГлавноеОкно.Кэш, ПараметрыМетода, Новый Структура);
	
КонецФункции

&НаКлиенте
Функция Маппинг_ОбновитьИзДанныхСтороны(ТипAPIОбъекта, ДанныеСтороны) Экспорт 
	
	Отказ = Ложь;
	ConnectionId = ПолучитьИдКоннекшена(Отказ);                     
	Если Отказ Тогда
		СбисИсключение = НовыйСбисИсключение(ConnectionId, "МодульОбъектаКлиента.Маппинг_ОбновитьИзДанныхСтороны");
		СбисСтатистика_СформироватьИЗаписать(Новый Структура("Действие, Ошибка", "Ошибка", СбисИсключение));
		Возврат Неопределено;
	КонецЕсли;
	
	param = Новый Структура("ConnectionId, Type", ConnectionId, ТипAPIОбъекта);
	
	Если ДанныеСтороны.Свойство("ИС") Тогда
		
		Если ДанныеСтороны.ИС.Свойство("ИдИС") Тогда
		
			param.Вставить("ClientId", ДанныеСтороны.ИС.ИдИС);
			
		КонецЕсли;
		
		Если ДанныеСтороны.ИС.Свойство("ИмяИС") Тогда
		
			param.Вставить("ClientType", ДанныеСтороны.ИС.ИмяИС);
			
		КонецЕсли;
		
		Если ДанныеСтороны.ИС.Свойство("Название") Тогда
		
			param.Вставить("ClientName", ДанныеСтороны.ИС.Название);
			
		КонецЕсли;
		
		Если ДанныеСтороны.ИС.Свойство("ИНН") Тогда
		
			param.Вставить("ClientParam_1_1", ДанныеСтороны.ИС.ИНН);
			
		КонецЕсли;
		
		Если ДанныеСтороны.ИС.Свойство("КПП") Тогда
		
			param.Вставить("ClientParam_1_2", ДанныеСтороны.ИС.КПП);
			
		КонецЕсли;
		
		Если ДанныеСтороны.ИС.Свойство("КодФилиала") Тогда
		
			param.Вставить("ClientParam_1_3", ДанныеСтороны.ИС.КодФилиала);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеСтороны.Свойство("СБИС") Тогда
		
		Если ДанныеСтороны.СБИС.Свойство("ИдСБИС") Тогда
		
			param.Вставить("SbisId", ДанныеСтороны.СБИС.ИдСБИС);
			
		КонецЕсли;
		
		Если ДанныеСтороны.СБИС.Свойство("Название") Тогда
		
			param.Вставить("SbisName", ДанныеСтороны.СБИС.Название);
			
		КонецЕсли;
		
		Если ДанныеСтороны.СБИС.Свойство("ИНН") Тогда
		
			param.Вставить("SbisParam_1_1", ДанныеСтороны.СБИС.ИНН);
			
		КонецЕсли;
		
		Если ДанныеСтороны.СБИС.Свойство("КПП") Тогда
		
			param.Вставить("SbisParam_1_2", ДанныеСтороны.СБИС.КПП);
			
		КонецЕсли;
		
		Если ДанныеСтороны.СБИС.Свойство("КодФилиала") Тогда
		
			param.Вставить("SbisParam_1_3", ДанныеСтороны.СБИС.КодФилиала);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ДанныеСтороны.Свойство("УИД") 
		И ЗначениеЗаполнено(ДанныеСтороны.УИД) Тогда
		
		param.Вставить("Uuid", ДанныеСтороны.УИД);

	КонецЕсли; 
	
	Если ДанныеСтороны.Свойство("Статус") Тогда
		
		param.Вставить("Status", ДанныеСтороны.Статус.Ид);
		param.Вставить("Status_msg", ДанныеСтороны.Статус.Сообщение);

	КонецЕсли;
	
	ПараметрыМетода = Новый Структура("param", param);
	
	Возврат ГлавноеОкно.Кэш.Интеграция.MappingObject_UpdateFromData(ГлавноеОкно.Кэш, ПараметрыМетода, Новый Структура);
	
КонецФункции

#КонецОбласти 

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Госсистемы   

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Госсистемы_Маркировка

// Функция - заполняет список доступных параметров выбытия кодов маркировки
// 
// Возвращаемое значение:
//  Массив - список параметров причин выбытия кодов маркировки
//  
&НаКлиенте 
Функция ПричиныВыводаИзОборота(ПараметрыДокумента = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Кэш = ГлавноеОкно.Кэш; 
	ТекущийРаздел = Кэш.Текущий.Раздел;
	
	Если ТекущийРаздел = "1" Тогда
		ПричиныВывода = ПричиныВыводаВходящихДокументов(ПараметрыДокумента, ДопПараметры);	
	Иначе
		ПричиныВывода = ПричиныВыводаИсходящихДокументов(ПараметрыДокумента, ДопПараметры);	
	КонецЕсли;
		
	Возврат ПричиныВывода;  
	
КонецФункции

&НаКлиенте
Функция ПричиныВыводаВходящихДокументов(ПараметрыДокумента, ДопПараметры)    
	
	ПричиныВывода = Новый Массив();
	ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Без вывода из оборота",Истина,"0"));
	ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Приобретение гос предприятием",Ложь,"1")); 
	ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Использование для собственных нужд",Ложь,"2"));  
	ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Безвозмездная передача",Ложь,"3"));   
	ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Передача комиссионеру/агенту",Ложь,"9"));
	ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Возврат комитенту/принципалу",Ложь,"10"));	
	
	Возврат ПричиныВывода;
	
КонецФункции

&НаКлиенте
Функция ПричиныВыводаИсходящихДокументов(ПараметрыДокумента, ДопПараметры)     
	
	Перем КодУчастника;
	
	ПричиныВывода = Новый Массив();
	
	Если НЕ ПараметрыДокумента = Неопределено
		И ПараметрыДокумента.Свойство("to_not_participant",КодУчастника) 
		И НЕ КодУчастника = Неопределено
		И НРЕГ(КодУчастника) = "true" Тогда	
		ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Приобретение гос предприятием",Ложь,"1")); 
		ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Использование для собственных нужд",Истина,"2"));  
		ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Безвозмездная передача",Ложь,"3"));  
		ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Дистанционный способ продажи",Ложь,"4")); 
		ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Продажа по образцам",Ложь,"11")); 
		ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Производственные нужды покупателя",Ложь,"12"));  
	Иначе
		ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Без вывода из оборота",Истина,"0"));
		ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Приобретение гос предприятием",Ложь,"1")); 
		ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Использование для собственных нужд",Ложь,"2"));  
		ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Безвозмездная передача",Ложь,"3"));
		ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Дистанционный способ продажи",Ложь,"4"));
		ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Передача комиссионеру/агенту",Ложь,"9"));
		ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Возврат комитенту/принципалу",Ложь,"10")); 
		ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Продажа по образцам",Ложь,"11")); 
		ПричиныВывода.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Производственные нужды покупателя",Ложь,"12")); 
	КонецЕсли;
	
	Возврат ПричиныВывода; 
	
КонецФункции

// Функция - заполняет список доступных параметров участников оборота маркируемой продукции
// 
// Возвращаемое значение:
//  Массив - список параметров участников оборота маркируемой продукции
// 
&НаКлиенте
Функция ПараметрыУчастиковОборота() Экспорт
	ПараметрыУчастиков = Новый Массив(); 
	ПараметрыУчастиков.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Покупатель зарегистрирован в ГИС МТ",Истина,"false"));
	ПараметрыУчастиков.Добавить(Новый Структура("Причина,ПоУмолчанию,КодПричины","Покупатель не зарегистрирован в ГИС МТ",Ложь,"true")); 
	Возврат ПараметрыУчастиков; 
КонецФункции  

// Функция - возвращает список для получения складских параметров документа СБИС Онлайн
// 
// Возвращаемое значение:
//  Массив - список складских параметров
//
&НаКлиенте
Функция СписокСкладскихПараметров()  
	СписокПараметров = Новый Массив;
	СписокПараметров.Добавить("marking_shipment_reason");    
	СписокПараметров.Добавить("to_not_participant");
	СписокПараметров.Добавить("markingContractNumber");
	Возврат СписокПараметров;
КонецФункции 

//Функция возвращает складские параметры документа СБИС Онлайн, для вкладки Маркировка формы просмотра документа
//
// Параметры:
//  СоставПакета
//
//	ЗапрашиваемыеПараметры   - Структура, с массивом запрашиваемых параметров метода
//               
//  ДопПараметры   - Структура, Неопределено - Доп параметры
//
// Возвращаемое значение:
//   Структура
//
&НаКлиенте
Функция ПолучитьСкладскиеПараметрыДокумента(СоставПакета, ДопПараметры = Неопределено) Экспорт  
		
	ПараметрыДокументаСбис = ПрочитатьСкладскиеПараметрыДокумента(СоставПакета, ДопПараметры); 
	
	ИдентификаторГосконтракта =  ПолучитьИдентификаторГосконтракта(ПараметрыДокументаСбис);  
	УчастникиОборота =  ЗаполнитьУчастникОборота(ПараметрыДокументаСбис);  
	ПричиныВывода = ЗаполнитьСписокПричинВывода(ПараметрыДокументаСбис);
	
	СкладскиеПараметрыДокумента = Новый Структура;
		
	
	СкладскиеПараметрыДокумента.Вставить("ПричиныВыводаИзОборота",ПричиныВывода.СписокПричинВывода); 
	СкладскиеПараметрыДокумента.Вставить("ПараметрыУчастниковОборота",УчастникиОборота.СписокУчастников);
	СкладскиеПараметрыДокумента.Вставить("ОтправитьКодыМаркировки",УчастникиОборота.ОтправитьКодыМаркировки);
	СкладскиеПараметрыДокумента.Вставить("ИдентификаторГосконтракта",ИдентификаторГосконтракта);  
	СкладскиеПараметрыДокумента.Вставить("ПричинаВывода",ПричиныВывода.ПричинаВыводаПоУмолчанию); 
	СкладскиеПараметрыДокумента.Вставить("КодПричиныВывода",ПричиныВывода.КодПричиныВывода);
	СкладскиеПараметрыДокумента.Вставить("УчастникОборота",УчастникиОборота.УчастникОборотаПоУмолчанию); 
	СкладскиеПараметрыДокумента.Вставить("ПоказатьГосконтракт",ПричиныВывода.ПоказатьГосконтракт); 
	
	Возврат СкладскиеПараметрыДокумента;

КонецФункции  

// Функция возвращает результат работы метода ExtSysMarking.GetParams
//
// Параметры:
//  СоставПакета  - Структура - обрабатываемый пакет (документ)
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//   Структура   - Результат вызова. Код результата или ошибка
//
&НаКлиенте
Функция ПрочитатьСкладскиеПараметрыДокумента(СоставПакета, ДопПараметры = Неопределено) 
	
	Кэш = ГлавноеОкно.Кэш;  
	
	ЗапрашиваемыеПараметры = СписокСкладскихПараметров();

	ПараметрыВызова = Новый Структура;  
	ПараметрыВызова.Вставить("ИдДок",СоставПакета.Идентификатор);
	ПараметрыВызова.Вставить("paramsList",ЗапрашиваемыеПараметры);
	 
	ФлагОшибки = Ложь;
	РезультатВызова = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ExtSysMarking_GetParams(ПараметрыВызова, Новый Структура("Кэш", Кэш), ФлагОшибки);
	Если ФлагОшибки Тогда
		ВызватьСбисИсключение(РезультатВызова, "МодульОбъектаКлиент.ПрочитатьСкладскиеПараметрыДокумента");
	КонецЕсли;   
	
	Возврат РезультатВызова;
	
КонецФункции

// Функция, из полученных параметров документа СБИС, возвращает номер госконтракта
//
// Параметры:
//  СкладскиеПараметрыДокумента	 - Структура - Складские параметры документа СБИС
//
&НаКлиенте
 Функция ПолучитьИдентификаторГосконтракта(ПараметрыДокумента) 
	 
	Перем НомерГосконтракта; 
	 
	Если ПараметрыДокумента.Свойство("markingContractNumber",НомерГосконтракта) 
		И НЕ НомерГосконтракта = Неопределено Тогда 
		ИдентификаторГосконтракта = НомерГосконтракта;   
	Иначе
		ИдентификаторГосконтракта = "";
	КонецЕсли;
	
	Возврат ИдентификаторГосконтракта;
		
КонецФункции

// Функция возвращает список параметров участников оборота маркируемой продукции, для вкладки Маркировка, формы просмотра документа
//
// Параметры:
//  СкладскиеПараметрыДокумента	 - Массив - данные документа, полученные при вычитывании складских параметров документа СБИС Онлайн 
// 
&НаКлиенте
Функция ЗаполнитьУчастникОборота(ПараметрыДокумента) 
	
	Перем КодУчастника; 
	
	УчастникиОборота = Новый Структура;
	СписокУчастников = Новый Массив;
	
	МассивПараметровУчастиковОборота = ПараметрыУчастиковОборота();
	
	ОбновлятьПричину = Истина;
	Для Каждого ЭлМасс ИЗ МассивПараметровУчастиковОборота Цикл
		СписокУчастников.Добавить(ЭлМасс.Причина);  
		Если ПараметрыДокумента.Свойство("to_not_participant",КодУчастника) 
			И НЕ КодУчастника = Неопределено
			И ЭлМасс.КодПричины = НРЕГ(КодУчастника) Тогда
			УчастникОборота = ЭлМасс.Причина; 
			ОбновлятьПричину = Ложь;
		ИначеЕсли ЭлМасс.ПоУмолчанию И ОбновлятьПричину Тогда
			УчастникОборота = ЭлМасс.Причина;  
		Иначе
			//
		КонецЕсли; 
	КонецЦикла;	 
	
	Если НРЕГ(КодУчастника) = "true" Тогда
		ОтправитьКодыМаркировки = Истина; 
	Иначе
		ОтправитьКодыМаркировки = Ложь;
	КонецЕсли; 
	
	УчастникиОборота.Вставить("СписокУчастников",СписокУчастников);
	УчастникиОборота.Вставить("УчастникОборотаПоУмолчанию",УчастникОборота); 
	УчастникиОборота.Вставить("ОтправитьКодыМаркировки",ОтправитьКодыМаркировки);
	
	Возврат УчастникиОборота;	
		
КонецФункции 

// Функция возвращает список причин выдода из оборота, для вкладки Маркировка, формы просмотра документа
//
// Параметры:
//  СкладскиеПараметрыДокумента	 - Массив - данные документа, полученные при вычитывании складских параметров документа СБИС Онлайн 
// 
&НаКлиенте
Функция ЗаполнитьСписокПричинВывода(ПараметрыДокумента,ДопПараметры = Неопределено) 
	
	Перем КодПричиныВывода; 
	
	Кэш = ГлавноеОкно.Кэш;
	
	ПричиныВывода = Новый Структура;
	СписокПричинВывода = Новый Массив; 
	
	Если НЕ ПараметрыДокумента = Неопределено
		И ПараметрыДокумента.Свойство("marking_shipment_reason",КодПричиныВывода) 
		И КодПричиныВывода = "1" Тогда
		ПоказатьГосконтракт = Истина;
	Иначе
		ПоказатьГосконтракт = Ложь;
	КонецЕсли;

	МассивПричинВыводаИзОборота = ПричиныВыводаИзОборота(ПараметрыДокумента);
	
	Индекс = Кэш.ОбщиеФункции.ВыбратьДанныеСертификата(МассивПричинВыводаИзОборота,КодПричиныВывода,"КодПричины");  
	
	Если Индекс = Неопределено Тогда
		Индекс = Кэш.ОбщиеФункции.ВыбратьДанныеСертификата(МассивПричинВыводаИзОборота,Истина,"ПоУмолчанию"); 
		//Тут подумать над установкой причины, т.к. она не совпадает с типом участника оборота, завязавшись на КодПричиныВывода, раз она там есть
	КонецЕсли;
	
	ПричинаВывода = МассивПричинВыводаИзОборота[Индекс].Причина;
	КодВывода = МассивПричинВыводаИзОборота[Индекс].КодПричины;

	Для Каждого ЭлМасс ИЗ МассивПричинВыводаИзОборота Цикл    
		СписокПричинВывода.Добавить(ЭлМасс.Причина);  
	КонецЦикла;	 
					
   	ПричиныВывода.Вставить("СписокПричинВывода",СписокПричинВывода);
	ПричиныВывода.Вставить("ПричинаВыводаПоУмолчанию",ПричинаВывода);
	ПричиныВывода.Вставить("ПоказатьГосконтракт",ПоказатьГосконтракт);
	ПричиныВывода.Вставить("КодПричиныВывода",КодВывода);
	
	Возврат ПричиныВывода;
	
КонецФункции

// Получение состояния проверки из ДокументРасширение.Параметры.CrptState
//
// Параметры:
//  СоставПакета  - Структура
//               
//  ДопПараметры   - Структура, Неопределено - Доп параметры
//
// Возвращаемое значение:
//   Строка
//
&НаКлиенте
Функция ЗапроситьСостояниеПроверки(СоставПакета, ДопПараметры = Неопределено) Экспорт 

	Кэш = ГлавноеОкно.Кэш;   

	ПараметрыВызова = Новый Структура;  
	ПараметрыВызова.Вставить("ИдДок",СоставПакета.Идентификатор);
	
	Возврат Кэш.Интеграция.ExtSysMarking_CheckState(ПараметрыВызова, Новый Структура("Кэш", Кэш));

КонецФункции     

// Функция возвращает список номенклатуры документа СБИС
//
// Параметры:
//  СоставПакета  - Структура
//               
//  ДопПараметры   - Структура, Неопределено - Доп параметры
//
// Возвращаемое значение:
//   Структура
//
&НаКлиенте
Функция СоставМаркируемыхПозиций(СоставПакета, ДопПараметры = Неопределено) Экспорт 

	Кэш = ГлавноеОкно.Кэш;   
	
	ПараметрыФильтра = Новый Структура; 
	ПараметрыФильтра.Вставить("docflowId",СоставПакета.Идентификатор);

    ПараметрыВызова = Новый Структура; 	
	ПараметрыВызова.Вставить("Фильтр",ПараметрыФильтра);
	
	Возврат Кэш.Интеграция.ExtSysMarking_NumList(ПараметрыВызова, Новый Структура("Кэш", Кэш));

КонецФункции     

// Получение параметров из SerialNumber.CustomList
//
// Параметры:
//  СоставПакета  - Структура
//               
//  ДопПараметры   - Структура, Неопределено - Доп параметры
//
// Возвращаемое значение:
//   Структура
//
&НаКлиенте
Функция ВернутьПараметрыНоменклатуры(СоставПакета, ДопПараметры = Неопределено) Экспорт 

	Кэш = ГлавноеОкно.Кэш;   

	ПараметрыВызова = Новый Структура;  
	ПараметрыВызова.Вставить("ИдДок",СоставПакета.Идентификатор); 
	ПараметрыВызова.Вставить("КодНоменклатуры",ДопПараметры.НоменклатураСбис); 
	
	Отказ = Ложь;
	РезультатВызова = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ExtSysMarking_NomCheckStateByNomDoc(ПараметрыВызова, Новый Структура("Кэш", Кэш), Отказ);
	Если Отказ Тогда
		ВызватьСбисИсключение(РезультатВызова, "МодульОбъектаКлиент.ВернутьПараметрыНоменклатуры");
	КонецЕсли;
	
	Возврат РезультатВызова;

КонецФункции        

//Установка складских параметров документа ExtSysMarking.SetParam
//
// Параметры:
//  СоставПакета  - Структура
//  УстанавливаемыеПараметры   - Структура
//		КодПричины
//		КодУчастикаОборота
//
// Возвращаемое значение:
//   Структура
//
&НаКлиенте
Функция ИзменитьСкладскойПараметрДокумента(СоставПакета, УстанавливаемыеПараметры) Экспорт 
	Перем ЛНовоеЗначениеУстановить; 
	
	ПараметрыВызова = Новый Структура("ИдДок, name, value",СоставПакета.Идентификатор);  
	Если		УстанавливаемыеПараметры.Свойство("КодПричины",			ЛНовоеЗначениеУстановить) Тогда
		ПараметрыВызова.Вставить("name",	"marking_shipment_reason");
		ПараметрыВызова.Вставить("value",	ЛНовоеЗначениеУстановить);
	ИначеЕсли   УстанавливаемыеПараметры.Свойство("КодУчастикаОборота", ЛНовоеЗначениеУстановить) Тогда
		ПараметрыВызова.Вставить("name",	"to_not_participant");
		ПараметрыВызова.Вставить("value",	ЛНовоеЗначениеУстановить);
	ИначеЕсли   УстанавливаемыеПараметры.Свойство("ИдентификаторГосконтракта", ЛНовоеЗначениеУстановить) Тогда
		ПараметрыВызова.Вставить("name",	"markingContractNumber");
		ПараметрыВызова.Вставить("value",	ЛНовоеЗначениеУстановить);
	Иначе
		ВызватьСбисИсключение(700, "МодульОбъектаКлиент.ИзменитьСкладскойПараметрДокумента",,,"Неизвестный параметр складского документа", УстанавливаемыеПараметры);
	КонецЕсли;	
	
	ФлагОшибки = Ложь;
	РезультатВызова = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ExtSysMarking_SetParam(ПараметрыВызова, Новый Структура("Кэш", ГлавноеОкно.Кэш), ФлагОшибки);
	Если ФлагОшибки Тогда
		ВызватьСбисИсключение(РезультатВызова, "МодульОбъектаКлиент.ИзменитьСкладскойПараметрДокумента");
	КонецЕсли;

КонецФункции   

// Получение состояния и наличия токена в ГИС МТ
//
// Параметры:
//  СоставПакета  - Структура
//               
//  ДопПараметры   - Структура, Неопределено - Доп параметры
//
// Возвращаемое значение:
//   Строка
//
&НаКлиенте
Функция ПроверитьНаличиеТокена(СоставПакета, ДопПараметры = Неопределено) Экспорт 

	Кэш = ГлавноеОкно.Кэш;   

	ПараметрыВызова = Новый Структура;  
	ПараметрыВызова.Вставить("ИдДок",СоставПакета.Идентификатор);
	
	Возврат Кэш.Интеграция.ExtSysMarking_CheckGisSetting(ПараметрыВызова, Новый Структура("Кэш", Кэш));

КонецФункции 

// Запуск проверки кодов маркировки в ГИС МТ
//
// Параметры:
//  СоставПакета  - Структура
//               
//  ДопПараметры   - Структура, Неопределено - Доп параметры
//
// Возвращаемое значение:
//   Строка
//
&НаКлиенте
Функция ИнициироватьПроверкуКодовМаркировки(СоставПакета, ДопПараметры = Неопределено) Экспорт 

	Кэш = ГлавноеОкно.Кэш;   

	ПараметрыВызова = Новый Структура;  
	ПараметрыВызова.Вставить("ИдДок",СоставПакета.Идентификатор);
	
	Возврат Кэш.Интеграция.ExtSysMarking_CheckSnCRPT(ПараметрыВызова, Новый Структура("Кэш", Кэш));

КонецФункции   

// Получение информации по отпечатку сертификата
//
// Параметры:
//  СоставПакета  - Структура
//               
//  ДопПараметры   - Структура, Неопределено - Доп параметры
//
// Возвращаемое значение:
//   Массив
//
&НаКлиенте
Функция ПолучитьДанныеСертификатаСбис(Отпечаток, ДопПараметры = Неопределено) Экспорт 

	Кэш = ГлавноеОкно.Кэш;   

	ПараметрыВызова = Новый Структура;  
	ПараметрыВызова.Вставить("Отпечаток",Отпечаток);
	
	Возврат Кэш.Интеграция.Сертификат_ПрочитатьПоОтпечатку(ПараметрыВызова, Новый Структура("Кэш", Кэш));

КонецФункции     

// Получение информации по созданию токена ГИС МТ
//
// Параметры:
//  СоставПакета  - Структура
//               
//  ДопПараметры   - Структура, Неопределено - Доп параметры
//
// Возвращаемое значение:
//   Массив
//
&НаКлиенте
Функция ПолучитьРезультатСозданияТокена(СоставПакета, ДопПараметры = Неопределено) Экспорт 

	Кэш = ГлавноеОкно.Кэш;   

	ПараметрыВызова = Новый Структура;  
	ПараметрыВызова.Вставить("ИдДок",СоставПакета.Идентификатор);
	
	Возврат Кэш.Интеграция.ExtSysMarking_CheckGisTask(ПараметрыВызова, Новый Структура("Кэш", Кэш));

КонецФункции      

// Получение статуса проверки документа ГИС МТ
//
// Параметры:
//  СоставПакета  - Структура
//               
//  ДопПараметры   - Структура, Неопределено - Доп параметры
//
// Возвращаемое значение:
//   Массив
//
&НаКлиенте
Функция ПроверитьСтатусПроверкиГИСМТ(СоставПакета, ДопПараметры = Неопределено) Экспорт 

	Кэш = ГлавноеОкно.Кэш;   

	ПараметрыВызова = Новый Структура;  
	ПараметрыВызова.Вставить("ИдДок",СоставПакета.Идентификатор);
	
	Возврат Кэш.Интеграция.ExtSysMarking_GetResendingConfigForGIS(ПараметрыВызова, Новый Структура("Кэш", Кэш));

КонецФункции    

// Отправка кодов маркировки в ГИС МТ
//
// Параметры:
//  СоставПакета  - Структура
//               
//  ДопПараметры   - Структура, Неопределено - Доп параметры
//
// Возвращаемое значение:
//   Массив
//
&НаКлиенте
Функция ОтправитьКодыМаркировкиВГИС(СоставПакета, ДопПараметры = Неопределено) Экспорт 

	Кэш = ГлавноеОкно.Кэш;   

	ПараметрыВызова = Новый Структура;  
	ПараметрыВызова.Вставить("ИдДок",СоставПакета.Идентификатор); 
	
	ФлагОшибки = Ложь;
    РезультатВызова = Кэш.Интеграция.ExtSysMarking_SendToGIS(ПараметрыВызова, Новый Структура("Кэш", Кэш),ФлагОшибки);
    Если ФлагОшибки Тогда
        ВызватьСбисИсключение(РезультатВызова, "МодульОбъектаКлиент.ОтправитьКодыМаркировкиВГИС");
    КонецЕсли;
    
    Возврат РезультатВызова;


КонецФункции

// Функция вызывает создание токена в СБИС, для взаимодействия с ГИС МТ
//
// Параметры:
//  СоставПакета  - Структура
//  ПараметрыСоздания - Структура, данные сертификата, для создания токена             
//  ДопПараметры   - Структура, Неопределено - Доп параметры
//
// Возвращаемое значение:
//   Строка - Результат вызова. Дата/время вызова или ошибка
//
&НаКлиенте
Функция СоздатьТокенСбис(СоставПакета, ПараметрыСоздания, ДопПараметры = Неопределено) Экспорт 

	Кэш = ГлавноеОкно.Кэш;   

	ПараметрыВызова = Новый Структура;  
	ПараметрыВызова.Вставить("docflowId",СоставПакета.Идентификатор); 
	ПараметрыВызова.Вставить("thumbprint",ПараметрыСоздания.thumbprint);
	ПараметрыВызова.Вставить("hashOID",ПараметрыСоздания.hashOID); 
	ПараметрыВызова.Вставить("pin",ПараметрыСоздания.pin);
	ПараметрыВызова.Вставить("validFrom",ПараметрыСоздания.validFrom);
	ПараметрыВызова.Вставить("validTo",ПараметрыСоздания.validTo);
	ПараметрыВызова.Вставить("certData",ПараметрыСоздания.certData); 
	
	ФлагОшибки = Ложь;
	РезультатВызова = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ExtSysMarking_CreateGisSetting(ПараметрыВызова, Новый Структура("Кэш", Кэш), ФлагОшибки);
	Если ФлагОшибки Тогда
		ВызватьСбисИсключение(РезультатВызова, "МодульОбъектаКлиент.СоздатьТокенСбис");
	КонецЕсли;

КонецФункции  

// Функция - возвращает представление ставки НДС по её значению
//
// Параметры:
//  Значение - Число - значение атрибута структуры номенклатуры документа СБИС Онлайн 
// 
// Возвращаемое значение:
//  Строка - представление ставки НДС по её значению
//
&НаКлиенте
Функция СтавкаНДСПоПараметруМаркировки(Значение) Экспорт
		
	Если Значение = 0 Тогда
		СтавкаНДС = "0%"; 
	ИначеЕсли Значение = 1 Тогда
		СтавкаНДС = "10%"; 
	ИначеЕсли Значение = 2 Тогда
		СтавкаНДС = "18%";
    ИначеЕсли Значение = 3 Тогда
		СтавкаНДС = "20%";
    ИначеЕсли Значение = 4 Тогда
		СтавкаНДС = "10/110";
    ИначеЕсли Значение = 5 Тогда
		СтавкаНДС = "18/118";
    ИначеЕсли Значение = 6 Тогда
		СтавкаНДС = "без НДС";
    ИначеЕсли Значение = 7 Тогда
		СтавкаНДС = "ЕНВД";
    ИначеЕсли Значение = 8 Тогда
		СтавкаНДС = "Патент";
    ИначеЕсли Значение = 9 Тогда
		СтавкаНДС = "20/120";
	Иначе
		СтавкаНДС = "";
	КонецЕсли;

	Возврат СтавкаНДС;

КонецФункции   

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Госсистемы_Прослеживаемость

// Функция возвращает результат работы метода ExtSysMarking.SendDocumentRNPT
//
// Параметры:
//  СоставПакета  - Структура - обрабатываемый пакет (документ)
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//   Структура   - Результат вызова. Код результата или ошибка
//
&НаКлиенте
Функция ПроверитьПрослеживаемыеПозиции(СоставПакета, ДопПараметры = Неопределено) Экспорт 

	Кэш = ГлавноеОкно.Кэш;   

	ПараметрыВызова = Новый Структура;  
	ПараметрыВызова.Вставить("ИдДок",СоставПакета.Идентификатор);  
	
	ФлагОшибки = Ложь;
	РезультатВызова = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ExtSysMarking_SendDocumentRNPT(ПараметрыВызова, Новый Структура("Кэш", Кэш), ФлагОшибки);
	Если ФлагОшибки Тогда
		ВызватьСбисИсключение(РезультатВызова, "МодульОбъектаКлиент.ПроверитьПрослеживаемыеПозиции");
	КонецЕсли;   
	
	Возврат РезультатВызова;

КонецФункции   

// Функция возвращает результат работы метода ExtSysMarking.ExtSysMarking_NumList
//
// Параметры:
//  СоставПакета - Структура - обрабатываемый пакет (документ) 
//  ДопПараметры - Структура - Набор полей, работа с которыми может расширить результат работы функции. 
// 
// Возвращаемое значение:
//   Структура   - Результат вызова. Код результата или ошибка 
//
&НаКлиенте
Функция СоставПрослеживаемыхПозиций(СоставПакета, ДопПараметры = Неопределено) Экспорт 

	Кэш = ГлавноеОкно.Кэш;  
		
	ПараметрыФильтра = Новый Структура;  
	 
	Если НЕ ДопПараметры = Неопределено 
		И ДопПараметры.Свойство("Фильтр") Тогда
		ПараметрыФильтра = ДопПараметры.Фильтр;
	КонецЕсли;
	
	ПараметрыФильтра.Вставить("docflowId",СоставПакета.Идентификатор);

    ПараметрыВызова = Новый Структура; 	
	ПараметрыВызова.Вставить("ДопПоля",Новый Массив());
	ПараметрыВызова.Вставить("Фильтр",ПараметрыФильтра); 
	ПараметрыВызова.Вставить("Сортировка",Новый Массив());
	ПараметрыВызова.Вставить("Навигация",Новый Массив());
		
	ФлагОшибки = Ложь;
	РезультатВызова = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ExtSysMarking_NumList(ПараметрыВызова, Новый Структура("Кэш", ГлавноеОкно.Кэш), ФлагОшибки);
	Если ФлагОшибки Тогда
		ВызватьСбисИсключение(РезультатВызова, "МодульОбъектаКлиент.СоставПрослеживаемыхПозиций");
	КонецЕсли; 
	
	Возврат РезультатВызова;

КонецФункции 

#КонецОбласти  

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ПротоколПроверкиФЛК

// Функция возвращает результат работы метода ExtSysMarking_ExportAsHTML
//
// Параметры:
//  СоставПакета  - Структура - обрабатываемый пакет (документ)
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//   Структура   - Результат вызова. Код результата или ошибка
//
&НаКлиенте
Функция ПолучитьПротоколПроверкиВложения(ПараметрыВложения, ДопПараметры = Неопределено) Экспорт
	
	Кэш = ГлавноеОкно.Кэш;   
	
	ПараметрыВызова = Новый Структура; 
    ПараметрыВызова.Вставить("ИдДок",ПараметрыВложения.ИДПакета);
    ПараметрыВызова.Вставить("ИдВложения",ПараметрыВложения.ИдРодителя);
   
    ФлагОшибки = Ложь;
    РезультатВызова = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ExtSysMarking_ExportAsHTML(ПараметрыВызова, Новый Структура("Кэш", Кэш), ФлагОшибки);
	
	Если ФлагОшибки Тогда
        ВызватьСбисИсключение(РезультатВызова, "МодульОбъектаКлиент.ПолучитьПротоколПроверкиВложения");
    КонецЕсли;
   
   Если РезультатВызова = Неопределено
		Или НЕ (ТипЗнч(РезультатВызова) = Тип("Структура") И РезультатВызова.Свойство("Данные")) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	СоставСтатистики = Новый Структура;
	СоставСтатистики.Вставить("Контекст", "Отправка документов");
	СоставСтатистики.Вставить("Действие", "Получение отчета ФЛК"); 
	
	ПараметрыСтатистики = Новый Структура("Действие, Сообщения", "ПрикладнаяСтатистика", СоставСтатистики);
	
	Попытка
		
		СбисСтатистика_СформироватьИЗаписать(ПараметрыСтатистики);
		
	Исключение
		
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ПолучитьПротоколПроверкиВложения");     
		
	КонецПопытки;
	
	ТекстHTML = Кэш.ОбщиеФункции.сбисТекстИзBase64(РезультатВызова.Данные);
	ТекстHTML = "<HTML><meta charset=""windows-1251""><BODY>" + ТекстHTML + "</BODY></HTML>";
	
	Возврат ТекстHTML;

КонецФункции
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_СинхронизацияОбъектов

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Функция ПодготовитьОбъектМаппинга(УИД, ДопПараметры = Неопределено) Экспорт 

	Кэш = ГлавноеОкно.Кэш;   
	Отказ = Ложь;
	
	requiredActionsCount	= 1;
	countProcessed			= 0;
	allObjects				= 1;
	countError				= 0;
	Для Сч = 0 По 4500 Цикл                           
		ПараметрыВызова = Новый Структура("SyncDocId, Direction", УИД, 1);
		Результат = Кэш.Интеграция.ExtSyncDoc_Prepare(Кэш, ПараметрыВызова, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.ПодготовитьПосылкуПорционно");
		КонецЕсли;    
		
		СинхДокумент = ПолучитьДокументСинхронизации(УИД);
		Для Каждого СинхОбъект Из СинхДокумент.ExtSyncObjects Цикл
			СтруктураДляОбновления = Новый Структура("СтруктураОбъекта,			ИмяИни,						Статус",
													  СинхОбъект.Data.data_is,	СинхОбъект.Data.ini_name,	СинхОбъект.StatusId);
			ОбновитьОбъектСБИСИзОбъекта1С(СтруктураДляОбновления, Новый Структура("Uuid, Отказ", УИД, Отказ));
		КонецЦикла;
		
		Если Результат.Свойство("all_objects") Тогда
			allObjects		= Результат.all_objects;
			countProcessed	= Результат.count_processed;
			countError		= Результат.count_error;
		КонецЕсли;
		requiredActionsCount = Результат.requiredActions.Количество();
		Если requiredActionsCount = 0 И countProcessed + countError >= allObjects Тогда 
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;

КонецФункции // ПодготовитьОбъектМаппинга()


&НаКлиенте
Функция ОбновитьОбъектСБИСИзОбъекта1С(СтруктураДляОбновления, ДопПараметры) Экспорт
	Кэш = ГлавноеОкно.Кэш;     
	СтруктураОбъекта = СтруктураДляОбновления.СтруктураОбъекта;
	Отказ = ДопПараметры.Отказ;
	
	СтруктураЗаписиДокумента = Новый Структура;
	СтруктураЗаписиДокумента.Вставить("Uuid", ?(ДопПараметры.Свойство("Uuid"), ДопПараметры.Uuid, Строка(Новый УникальныйИдентификатор)));
	СтруктураЗаписиДокумента.Вставить("Data", Новый Структура("ini_name", СтруктураДляОбновления.ИмяИни));
	
	МассивОбъектов = Новый Массив;
	СтруктураЗаписиОбъекта = Новый Структура;
	СтруктураЗаписиОбъекта.Вставить("Type", СтруктураОбъекта.ИмяИС);
	СтруктураЗаписиОбъекта.Вставить("Id", СтруктураОбъекта.ИдИС);
	Если СтруктураДляОбновления.Свойство("Статус") Тогда
		СтруктураЗаписиОбъекта.Вставить("StatusId", СтруктураДляОбновления.Статус);
	КонецЕсли;
	СтруктураЗаписиОбъекта.Вставить("Data", Новый Структура("data_is", СтруктураОбъекта));
	МассивОбъектов.Добавить(СтруктураЗаписиОбъекта);
	
	СтруктураПакета = Новый Структура("ConnectionId,ExtSyncDoc,ExtSyncObj", ПолучитьЗначениеПараметраСбис("ИдентификаторНастроек"), СтруктураЗаписиДокумента, МассивОбъектов); 
	
	ПараметрыЧтения = Новый Структура("param", СтруктураПакета);
	
	Возврат Кэш.Интеграция.ExtSyncDoc_Write(Кэш, ПараметрыЧтения, Отказ);
	
КонецФункции

//Запись объекта 1С на сервис
&НаКлиенте
Функция ЗавершитьОбновитьОбъектСБИСИзОбъекта1С(ИдентификаторЗаписиДокумента, Отказ) Экспорт
	
	Кэш = ГлавноеОкно.Кэш;
	ПараметрыЧтения = Новый Структура("param", Новый Структура("SyncDocId", ИдентификаторЗаписиДокумента));
	
	Возврат Кэш.Интеграция.ExtSyncDoc_Execute(Кэш, ПараметрыЧтения, Отказ) 
	
КонецФункции

//Получение структуры API3 объекта с сервиса
&НаКлиенте
Функция ПрочитатьАПИОбъектСБИС(ПараметрыЧтения, Отказ) Экспорт
	Кэш = ГлавноеОкно.Кэш;                                
	
	МассивИдентификаторов = Новый Массив;
	МассивИдентификаторов.Добавить(ПараметрыЧтения.ИдСБИС);
	
	ПараметрыЧтения = Новый Структура("Type,IdList", ПараметрыЧтения.ИмяСБИС, МассивИдентификаторов);
	ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	СтруктураОбъекта = Кэш.Интеграция.API3_GetSbisObject(Кэш, ПараметрыЧтения, ДопПараметры, Отказ);
	
	Для Индекс = 0 По СтруктураОбъекта.Количество() - 1 Цикл
	        ЛокальныйОбъект = СтруктураОбъекта[Индекс];
		Если ЛокальныйОбъект.Свойство("error") Тогда
			Отказ = Истина;
			Возврат Кэш.ОбщиеФункции.СбисИсключение(ЛокальныйОбъект.error, "API.ПрочитатьАПИОбъектСБИС");
		Иначе
			Возврат ЛокальныйОбъект;
		КонецЕсли;
    КонецЦикла;
	Возврат Неопределено;
КонецФункции

//Ожидание подготовки данных к загрузке объектов 1С на сервисе IntegrationConfig
&НаКлиенте
Функция ПодготовитьПосылкуПорционно(ИдентификаторПосылки, Отказ) Экспорт
	Кэш = ГлавноеОкно.Кэш;
	
	requiredActionsCount	= 1;
	countProcessed			= 0;
	allObjects				= 1;
	countError				= 0;
	Для Сч = 0 По 4500 Цикл                           
		ПараметрыВызова = Новый Структура("ConnectorName,SyncDocId,ReturnIterationResults", "Saby", ИдентификаторПосылки, Истина);
		Результат = Кэш.Интеграция.Connector_Prepare(Кэш, ПараметрыВызова, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.ПодготовитьПосылкуПорционно");
		КонецЕсли;
		Если Результат.Свойство("all_objects") Тогда
			allObjects		= Результат.all_objects;
			countProcessed	= Результат.count_processed;
			countError		= Результат.count_error;
		КонецЕсли;
		requiredActionsCount = Результат.requiredActions.Количество();
		Если requiredActionsCount = 0 И countProcessed + countError >= allObjects Тогда 
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Отказ = Истина;
	Возврат Кэш.ОбщиеФункции.сбисИсключение("Не удалось обработать запрос, повторите попытку позже или уменьшите количество строк в документе.", "API.ПодготовитьПосылкуПорционно");
КонецФункции

&НаКлиенте
Функция ЗаписатьПосылкуСОбъектами(СтруктураПослыки, Отказ) Экспорт
	Кэш = ГлавноеОкно.Кэш;
	Param = Новый Структура("param", СтруктураПослыки);
	Возврат Кэш.Интеграция.ExtSyncDoc_Write(Кэш, Param, Отказ);
КонецФункции

//Загружает посылку в 1С по идентификатору. В случае успешной/частично успешной загрузки структура с полями Ошибки,Успешно.
&НаКлиенте
Функция ЗагрузитьПосылку(ИдентификаторПосылки, Отказ) Экспорт
	Перем СтруктураАпи3Объекта; 
	Кэш = ГлавноеОкно.Кэш;
	Результат = Новый Структура("Ошибки,Успешно",Новый Массив, Новый Массив);
	Для СбисСчетчик = 0 По 100 Цикл
        ОбъектНаЗагрузку = Кэш.Интеграция.ExtSyncDoc_GetObjectForExecute(Кэш, ИдентификаторПосылки, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(ОбъектНаЗагрузку, "МодульОбъектаКлиент.ЗагрузитьПосылку");
		ИначеЕсли Не ЗначениеЗаполнено(ОбъектНаЗагрузку) Тогда
			//Кончились объекты, прервать
			Прервать;
		КонецЕсли;
	
		ОшибкаЗагрузкиОбъекта = Ложь;
		Если		Не ОбъектНаЗагрузку.Свойство("Data", СтруктураАпи3Объекта) Тогда
			ОшибкаЗагрузкиОбъекта = Истина;
			ОбъектНаЗагрузку.Вставить("Data", Новый Структура);
			СбисСтруктураОшибки = Кэш.ОбщиеФункции.СбисИсключение(, "ФормаHTML.ЗагрузитьПосылку", 779,,"Не удалось получить даные объекта");
		ИначеЕсли	Не СтруктураАпи3Объекта.Свойство("data", СтруктураАпи3Объекта) Тогда
			ОшибкаЗагрузкиОбъекта = Истина;
			СбисСтруктураОшибки = Кэш.ОбщиеФункции.СбисИсключение(, "ФормаHTML.ЗагрузитьПосылку", 779,,"Не удалось получить даные объекта");
		Иначе                                                                                                  
			ПараметрыЗагрузки = Новый Структура("СтруктураАпи3Объекта, ИдентификаторПосылки", СтруктураАпи3Объекта, ИдентификаторПосылки);
			РезультатЗагрузки = ЗагрузитьАПИ3Объект(ПараметрыЗагрузки, ОшибкаЗагрузкиОбъекта);
			Если ОшибкаЗагрузкиОбъекта Тогда
				СбисСтруктураОшибки = Кэш.ОбщиеФункции.СбисИсключение(РезультатЗагрузки, "МодульОбъектаКлиент.ЗагрузитьПосылку");
			КонецЕсли;
		КонецЕсли;
		
		Если ОшибкаЗагрузкиОбъекта Тогда
			ОбъектНаЗагрузку.Вставить("StatusId", "Ошибка");
			ОбъектНаЗагрузку.Вставить("StatusMsg", Новый Массив);
			ТекстОшибки = "Ошибка загрузки объекта";
			ИндексНачалаСообщения = Найти(СбисСтруктураОшибки.details, "Объект");
			ИндексКонцаСообщения  = Найти(СбисСтруктураОшибки.details, "не сопоставлен");
			Если ИндексНачалаСообщения > 0 И ИндексКонцаСообщения > 0 Тогда
				ТекстОшибки = Сред(СбисСтруктураОшибки.details, ИндексНачалаСообщения, ИндексКонцаСообщения - ИндексНачалаСообщения +14);
			ИначеЕсли Найти(СбисСтруктураОшибки.details, "не уникально") > 0 Тогда
				ТекстОшибки = СбисСтруктураОшибки.details;
			КонецЕсли;
			ОбъектНаЗагрузку.StatusMsg.Добавить("Ошибка загрузки объекта. " + СбисСтруктураОшибки.details);
			ОбъектНаЗагрузку.Data.Вставить("error", СбисСтруктураОшибки);
			Результат.Ошибки.Добавить(ОбъектНаЗагрузку);
		Иначе
			ОбъектНаЗагрузку.Вставить("StatusId", "Синхронизирован");
			Результат.Успешно.Добавить(ОбъектНаЗагрузку);
		КонецЕсли;			
	
		МассивОбъектовСинхронизации = Новый Массив;
		МассивОбъектовСинхронизации.Добавить(ОбъектНаЗагрузку);
		ИдентификаторПодключения = ПолучитьЗначениеПараметраСбис("ИдентификаторНастроек");
		СтруктураСинхДокумента = Новый Структура("ConnectionId,ExtSyncDoc,ExtSyncObj", ИдентификаторПодключения, Новый Структура("Uuid", ИдентификаторПосылки), МассивОбъектовСинхронизации);
		param = Новый Структура("param", СтруктураСинхДокумента);
		ИдентификаторПосылки = Кэш.Интеграция.ExtSyncDoc_Write(Кэш, param, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(ИдентификаторПосылки, "ФормаHTML.ЗагрузитьПосылку");
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

//Получение объектов для загрузку в 1С, загрузка в 1С.
&НаКлиенте
Функция ЗагрузитьАПИ3Объект(ПараметрыЗагрузки, Отказ) Экспорт 
	Перем ИмяИни, СбисИдАккаунта;                   
	Кэш = ГлавноеОкно.Кэш;
	СтруктураОбъекта	 = ПараметрыЗагрузки.СтруктураАпи3Объекта;
	ИдентификаторПосылки = ПараметрыЗагрузки.ИдентификаторПосылки;
	ИдентификаторПодключения = ПолучитьЗначениеПараметраСбис("ИдентификаторНастроек");

	ИмяОбъекта = СтруктураОбъекта.ИмяСБИС;
	СоответствиеИменСих = Новый Соответствие;
	СоответствиеИменСих.Вставить("ВидКонтактнойИнформации", "ВидыКонтактнойИнформации");
	ИмяИни = СоответствиеИменСих.Получить(ИмяОбъекта);
	Если ИмяИни = Неопределено Тогда
		ИмяИни = ИмяОбъекта;
	КонецЕсли;
	ИмяИни = "СинхЗагрузка_" + ИмяИни;
	Если ИмяИни = Неопределено Тогда
		Отказ = Истина;
	    Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФормаHTML.ЗагрузитьАПИ3Объект", 610, "Отсутствует файл настроек для данного типа данных", "Не найден ини файл для загрузки объекта " + ИмяОбъекта);	
	КонецЕсли;
	
	ОбъектыНаЗапись = Кэш.Интеграция.ExtSyncDoc_CalcObjectForExecute(Кэш, СтруктураОбъекта, ИдентификаторПосылки, ИмяИни, Отказ);
	Если Отказ Тогда
	    Возврат Кэш.ОбщиеФункции.СбисИсключение(ОбъектыНаЗапись, "МодульОбъектаКлиент.ЗагрузитьАПИ3Объект");	
	КонецЕсли;
	Кэш.СБИС.ПараметрыИнтеграции.Свойство("ИдАккаунта", СбисИдАккаунта);

	СписокРезультат = Новый Массив;
	Для Каждого ОбъектНаЗапись Из ОбъектыНаЗапись Цикл
		Результат = ЗаписатьАПИ3ОбъектВ1С(Кэш, ОбъектНаЗапись.Значение, СтруктураОбъекта, ИмяИни, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(Результат, "МодульОбъектаКлиент.ЗагрузитьАПИ3Объект");	
		КонецЕсли;
		СписокРезультат.Добавить(Результат);
		Если ИмяОбъекта = СтруктураОбъекта.ИмяСБИС Тогда
			СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СтруктураОбъекта.ИдентификаторВИ, СтруктураОбъекта.ИдентификаторВИ, "");
	        фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	        фрм.ЗаписатьПараметрыДокументаСБИС(СтруктураСвойств, Результат.Ссылка, Кэш.Ини.Конфигурация, Кэш.ГлавноеОкно.КаталогНастроек, Новый Структура("ИдАккаунта", СбисИдАккаунта));
		КонецЕсли;
	КонецЦикла;
	Возврат СписокРезультат;
КонецФункции

//Создание объектов в учетной системе на основании структуры объекта (с идентификаторами)
// СтруктураОбъекта - Структура, соответствующая загружаемому объекту, с определением типов данных.
// АПИ3Объект - Полученные данные объекта
// ТипИмяОбъекта - имя типа объекта
// ИмяИни - Имя ИНИ по которой рассчитывается объект
&НаКлиенте
Функция ЗаписатьАПИ3ОбъектВ1С(Кэш, СтруктураОбъекта, АПИ3Объект, ИмяИни, Отказ)
	Перем ТипИмяОбъекта;
	ИдентификаторПодключения = ПолучитьЗначениеПараметраСбис("ИдентификаторНастроек");
	Если Не	(	(	СтруктураОбъекта.Свойство("Идентификатор")
				И	СтруктураОбъекта.Идентификатор.Свойство("Объект", ТипИмяОбъекта)) 
			Или	(	СтруктураОбъекта.Свойство("Ref")
				И	СтруктураОбъекта.Ref.Свойство("Объект", ТипИмяОбъекта))) Тогда
		Отказ = Истина;                 
		СбисДамп = Новый Структура("ИмяИни, АПИ3Объект", ИмяИни, АПИ3Объект);
	    Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФормаHTML.ЗаписатьАПИ3ОбъектВ1С", 780, , "В структуре АПИ3 объекта отсутствуют данные для идентификации", СбисДамп);	
	КонецЕсли;
	
	ТипыСинхИни = Новый Массив;
	ТипыСинхИни.Добавить("СинхВыгрузка");
	ТипыСинхИни.Добавить("СинхЗагрузка");
	ЗначениеИниФайла = Кэш.ФормаНастроек.Ини(Кэш, ИмяИни, Новый Структура("ДоступныеТипыИни, ПринудительноеЧтение", ТипыСинхИни, Истина),Отказ);
	Если Отказ Тогда
	    Возврат Кэш.ОбщиеФункции.СбисИсключение(ЗначениеИниФайла, "ФормаHTML.ЗаписатьАПИ3ОбъектВ1С");	
	КонецЕсли;
	
	ПараметрыОбработкиАпи3Объекта = Новый Структура("Тип, СтруктураОбъекта", ТипИмяОбъекта, СтруктураОбъекта);
	Если АПИ3Объект.Свойство("ИдИС") Тогда
		ПараметрыОбработкиАпи3Объекта.Вставить("Идентификатор", АПИ3Объект.ИдИС);
	КонецЕсли;
	Если ЗначениеИниФайла.Свойство("Ключи") Тогда
		//Чтобы не отдавать всю ини на сервер, забираем только узел с ключами если есть такое
		ПараметрыОбработкиАпи3Объекта.Вставить("Ключи", ЗначениеИниФайла.Ключи);
	КонецЕсли;
	ДанныеОбъекта1С = Кэш.ОбщиеФункции.ВыполнитьОбработкуАпи3Объекта(Кэш, ПараметрыОбработкиАпи3Объекта, Отказ);
	Если Отказ Тогда
	    Возврат Кэш.ОбщиеФункции.СбисИсключение(ДанныеОбъекта1С, "ФормаHTML.ЗаписатьАПИ3ОбъектВ1С");	
	КонецЕсли;
		
	Если ДанныеОбъекта1С.Свойство("ДанныеМаппинга") Тогда
		Фильтр = Новый Структура("Type,Id,IdType,ConnectionId", АПИ3Объект.ИмяСБИС, АПИ3Объект.ИдСБИС, 1, ИдентификаторПодключения);
		РезультатОбновленияСопоставления = Кэш.Интеграция.ОбновитьЗаписьСопоставления(Кэш, Фильтр, ДанныеОбъекта1С.ДанныеМаппинга, Отказ);
		Если Отказ Тогда
	   		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбновленияСопоставления, "ФормаHTML.ЗаписатьАПИ3ОбъектВ1С");	
		КонецЕсли;
	КонецЕсли;
	Возврат ДанныеОбъекта1С;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ПолучитьДокументСинхронизации(УИД, ДопПараметры = Неопределено) Экспорт 
	
	Кэш = ГлавноеОкно.Кэш;
	ПараметрыВызова = Новый Структура("param", Новый Структура("SyncDocId, ExtSyncObject", УИД, Истина));
	Возврат Кэш.Интеграция.API3_ExtSyncDocRead(Кэш, ПараметрыВызова, ДопПараметры);

КонецФункции // ПолучитьОбъектыСинхронизацииИзЖурнала()

#КонецОбласти                                                              

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_СопоставлениеНоменклатуры

&НаСервереБезКонтекста
Функция РеквизитСопоставленияНоменклатурыПоУмолчанию() Экспорт
	
	Если	Метаданные.Константы.Найти("ИспользоватьХарактеристикиНоменклатуры")<>Неопределено
		И	Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() = Истина Тогда 
		Возврат "Идентификатор";
	Иначе
		Возврат "Код"
	КонецЕсли;

КонецФункции

#КонецОбласти 

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ВнешняяОбработка

// Функция - Получает макет из внешней обработки. Опционально помещает во ВременноеХранилище или извлекает текст из макета. 
//
// Параметры:
//  ПараметрыОбработки	 -	Структура(ВнешняяОбработка*, ИмяОбработки*)
//							ВнешняяОбработка	- ссылка на справочник ДопОбработок или путь к файлу
//                          ИмяОбработки		- Имя обработки для поиска обработки, если ВнешняяОбработка не заполнено  	
//  ДопПараметры*		 -	Структура*(Текст*, ПоместитьВХранилище*) 
//                       	Текст(Булево) - Вернуть текст из макета
//							ПоместитьВХранилище - Поместить макет во временное хранилище и вернуть ссылку	
// *Необязательные
// Возвращаемое значение:   Двоичные данные, Строка(Адрес в ВХ или текст макета), Неопределено, если не удалось найти обработку 
//   - 
//
&НаСервере
Функция ВнешняяОбработка_ПолучитьМакет(ПараметрыОбработки, ДопПараметры = Неопределено) Экспорт	
	Возврат МодульОбъектаСервер().ВнешняяОбработка_ПолучитьМакетНаСервере(ПараметрыОбработки, ДопПараметры);	
КонецФункции

// Функция - Выполняет поиск обработки. Возможные места поиска: файл, справочник, конфигурация. Возвращает путь или ссылку на ВО
//
// Параметры:
//  ПараметрыПоиска	 - 	 Структура(ИмяОбработки, МестаПоиска*) 
//	*Необязательные  
//
// Возвращаемое значение:
//   Строка - путь к файловой обработке
//   СправочникСсылка - на элемент справочника Доп.Обработки
//	 Неопределено - обработка не найдена
&НаСервере
Функция ВнешняяОбработка_НайтиПоИмени(ПараметрыПоиска) Экспорт	
	Возврат МодульОбъектаСервер().ВнешняяОбработка_НайтиПоИмениНаСервере(ПараметрыПоиска);	
КонецФункции

// Функция - Возвращает возможные места поиска ВО. Для сервера это справочники. На клиенте добавляется каталог настроек 
// 
// Возвращаемое значение:
//   - Массив структур
//
&НаКлиенте
Функция ВнешняяОбработка_МестаПоискаПоУмолчанию()
	
	МестаПоиска = Новый Массив();
	МестаПоиска.Добавить(Новый Структура("Путь, Алгоритм", "Справочники.ДополнительныеОтчетыИОбработки",	"Запрос"));
	МестаПоиска.Добавить(Новый Структура("Путь, Алгоритм", "Справочники.ВнешниеОбработки",					"Запрос"));
	МестаПоиска.Добавить(Новый Структура("Путь, Алгоритм", ГлавноеОкно.Кэш.Парам.КаталогНастроек,		"Каталог"));

	Возврат МестаПоиска;
	
КонецФункции

#КонецОбласти 

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Интеграция

// Функция - возвращает модуль интеграции СБИС по его ИД
//
// Параметры:
//  ИДМодуляИнтеграции	 - Строка, Число	 - идентификатор способа обмена в виде его номера, либо значение свойства ИнтеграцияИмя
// 
// Возвращаемое значение:
//  Форма/Управляемая форма - модуль, в котором описана интеграция. ВЫЗОВЫ МОГУТ БЫТЬ В ДРУГОЙ ФОРМЕ
//
&НаКлиенте
Функция МодульИнтеграцииСБИС(ИДМодуляИнтеграции) Экспорт
	Перем ИмяМодуляИнтеграции;
	
	СписокДоступныхСпособовОбмена = СписокИнтеграцийСБИС();
	
	Если ТипЗнч(ИДМодуляИнтеграции) = Тип("Число") Тогда
		
		ИмяМодуляИнтеграции = СписокДоступныхСпособовОбмена.НайтиПоЗначению(ИДМодуляИнтеграции);
		
		Если Не ИмяМодуляИнтеграции = Неопределено Тогда
			
			ИмяМодуляИнтеграции = ИмяМодуляИнтеграции.Представление;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого ЭлементСписка Из СписокДоступныхСпособовОбмена Цикл
			Если НРег(ЭлементСписка.Представление) = НРег(ИДМодуляИнтеграции) Тогда
				
				ИмяМодуляИнтеграции = ЭлементСписка.Представление;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяМодуляИнтеграции = Неопределено Тогда
		
		Возврат ИмяМодуляИнтеграции;
		
	КонецЕсли;
	
	Возврат ПолучитьФормуОбработки(ИмяМодуляИнтеграции);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокИнтеграцийСБИС() Экспорт
	
	СписокИтог = Новый СписокЗначений;
	СписокИтог.Добавить(0, "SDK2");
	СписокИтог.Добавить(1, "ИнтеграцияКаталог");
	СписокИтог.Добавить(2, "SDK2Шифрование");
	СписокИтог.Добавить(3, "API");
	СписокИтог.Добавить(4, "ExtSDK");
	СписокИтог.Добавить(5, "ExtSDKCrypto");
	СписокИтог.Добавить(6, "ExtSDK2");
	СписокИтог.Добавить(7, "ExtSDK2Crypto");
	СписокИтог.Добавить(8, "SabyPluginConnector");
	СписокИтог.Добавить(9, "SabyHttpsClient");
	
	Возврат СписокИтог;
	
КонецФункции
	
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ВнешняяКомпонента

// Функция - Конструктор
//
// Параметры:
//  ПараметрыПодключения - Структура(ИмяКомпоненты, ИмяОбработки, ИмяМакета) - для подключения ВО с компонентой из справочника 
// 
// Возвращаемое значение:
//   Структура 
//
&НаКлиенте
Функция ВнешняяКомпонента_Новый(ПараметрыПодключения) Экспорт
	
	Компонента = Новый Структура;
	Компонента.Вставить("ОбъектКомпоненты"						, Неопределено);
	Компонента.Вставить("ОбработчикЗавершенияПодключения"		, Неопределено);
	Компонента.Вставить("ИмяКомпоненты"							, Неопределено);
	Компонента.Вставить("ВыполненаУстановка"					, Ложь);
	Компонента.Вставить("АдресХранилища"						, Неопределено);
	Компонента.Вставить("ВерсияВХранилище"						, Неопределено);
	Компонента.Вставить("ПринудительнаяУстановка"				, Ложь);
	
	ЗаполнитьЗначенияСвойств			(Компонента, ПараметрыПодключения);
	ВнешняяКомпонента_ИзвлечьВХранилище	(Компонента, ПараметрыПодключения);
	
	Возврат Компонента;
		
КонецФункции

// Процедура - Извлекает архив с компоненой из макета ВО, и помещает во временное хранилище для дальнейшего использования на клиенте
//
// Параметры:
//  Компонента			 - 	Структура ВнешняяКомпонента_Новый 
//  ПараметрыПодключения - Структура(ИмяКомпоненты, ИмяОбработки, ИмяМакета) - для подключения ВО с компонентой из справочника
//
&НаСервере
Процедура ВнешняяКомпонента_ИзвлечьВХранилище(Компонента, ПараметрыПодключения)
	
	СведенияОбработки			= МодульОбъектаСервер().ВнешняяОбработка_ПолучитьСведенияНаСервере(ПараметрыПодключения);
	МестоположениеКомпоненты	= МодульОбъектаСервер().ВнешняяОбработка_ПолучитьМакетНаСервере(
									Новый Структура("ВнешняяОбработка, ИмяМакета", СведенияОбработки.Ссылка, ПараметрыПодключения.ИмяМакета),
									Новый Структура("ПоместитьВХранилище", Истина));
								 
	Компонента.АдресХранилища	= МестоположениеКомпоненты;
	Компонента.ВерсияВХранилище	= СведенияОбработки.Версия;
	
КонецПроцедуры

// Функция - Точка входа для получения экземпляра компоненты. Выполняет установку, подключение ВК
//
// Параметры:
//  Компонента	 - 	 Структура ВнешняяКомпонента_Новый 
// 
// Возвращаемое значение: Структура  ВнешняяКомпонента_Новый Обогащенная ОбъектКомпоненты  если компонента была установлена
//   -                    Неопределено - будет запущена асинхронная установка с последующим вызовом ОписаниеОповещения
//
&НаКлиенте
Функция ВнешняяКомпонента_Получить(Компонента) Экспорт
	
	Если ВнешняяКомпонента_Подключить(Компонента) Тогда
		
		Попытка	
			ОбъектКомпоненты						= Новый("AddIn.Saby." + Компонента.ИмяКомпоненты);
		Исключение
			ВызватьСбисИсключение("Не удалось создать экземпляр компоненты", "МодульОбъектаКлиент.ВнешняяКомпонента_ПодключитьПослеУстановки"); 
		КонецПопытки;
					
		Компонента.ОбъектКомпоненты	= ОбъектКомпоненты; 
	
		
		Если НЕ Компонента.ОбработчикЗавершенияПодключения = Неопределено И ПолучитьЗначениеПараметраСбис("ОтложенныйЗапуск") Тогда		
			ВыполнитьСбисОписаниеОповещения(Компонента, Компонента.ОбработчикЗавершенияПодключения);						
		Иначе
			Возврат Компонента;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция - Обертка над платформенным методом ПодключитьВнешнююКомпоненту. Вызывает установку компоненты при необходимости
//
// Параметры:
//  Компонента	 - Структура ВнешняяКомпонента_Новый
// 
// Возвращаемое значение: Истина - компонента подключена, Ложь обработное
//   - 
//
&НаКлиенте
Функция ВнешняяКомпонента_Подключить(Компонента)
	
	Если Компонента.ПринудительнаяУстановка ИЛИ НЕ ПодключитьВнешнююКомпоненту(Компонента.АдресХранилища, "Saby", ТипВнешнейКомпоненты.Native) Тогда
		
		Если Компонента.ВыполненаУстановка Тогда
			ВызватьСбисИсключение("Не удалось подключить компоненту после установки, попробуйте перезапустить 1С:Предприятие или изменить способ обмена.",
								"МодульОбъектаКлиент.ВнешняяКомпонента_Подключить"); 	
		КонецЕсли;
		
		#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
			ВызватьСбисИсключение("Не удалось подключить компоненту", "МодульОбъектаКлиент.ВнешняяКомпонента_Подключить"); 	
		#Иначе
			ВнешняяКомпонента_Установить(Компонента); 		
		#КонецЕсли
		
		Возврат Ложь;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
		   	
КонецФункции
	
// Процедура - Обертка над методами платформы для установки компоненты. 
//
// Параметры:
//  Компонента	 - Структура ВнешняяКомпонента_Новый 
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте	
Процедура ВнешняяКомпонента_Установить(Компонента) 
	
	Если ГлавноеОкно.Кэш.СовместимостьМетодов.НативныеКомпоненты.НачатьУстановкуВнешнейКомпоненты Тогда
		
		ОбработчикЗавершения = НовыйСбисОписаниеОповещения("ВнешняяКомпонента_ПослеУстановки", ЭтотОбъект, Компонента,
															"ВнешняяКомпонента_ОшибкаУстановки", ЭтотОбъект);
		
		Выполнить("НачатьУстановкуВнешнейКомпоненты(ОбработчикЗавершения, Компонента.АдресХранилища)");
		
	Иначе 

		УстановитьВнешнююКомпоненту(Компонента.АдресХранилища);
		ВнешняяКомпонента_ПослеУстановки(Компонента);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - для ОписанияОповещения после успешной установки.  
//
// Параметры:
//  Компонента	 - 	 - 
//
&НаКлиенте
Процедура ВнешняяКомпонента_ПослеУстановки(Компонента) Экспорт
	
	Компонента.ВыполненаУстановка		= Истина;
	Компонента.ПринудительнаяУстановка	= Ложь;
	
	Попытка
		ВнешняяКомпонента_Получить(Компонента);
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

// Процедура - для ОписанияОповещения при ошибке установки.  
//
// Параметры:
//  Компонента	 - 	 - 
//
&НаКлиенте
Процедура ВнешняяКомпонента_ОшибкаУстановки(Компонента) Экспорт
	ВызватьСбисИсключение("При установке компоненты возникла ошибка", "МодульОбъектаКлиент.ВнешняяКомпонента_ОшибкаУстановки");
КонецПроцедуры

#КонецОбласти

#КонецОбласти