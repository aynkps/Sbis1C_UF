&НаКлиенте
Перем МестныйКэш, ДокументДанные, Контрагент, ОбогащённыеДанныеНоменклатурыДляСопоставления;

#Область include_local_ПолучитьМодульОбъекта

&НаСервере
Функция МодульОбъектаСервер()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция МодульОбъектаСерверБезКонтекста()
	Возврат Новый (Тип("ВнешняяОбработкаОбъект.СБИС"));
КонецФункции

&НаКлиенте
Функция МодульОбъектаКлиент() Экспорт
	Возврат ВладелецФормы.Кэш.СБИС.МодульОбъектаКлиент;
КонецФункции

#КонецОбласти // local_ПолучитьМодульОбъекта

#Область include_core2_vo2_Формы_ФормаОбратногоСопоставления_Интерфейс_Вызов
&НаКлиенте 
Процедура Показать(ПараметрыОткрытия) Экспорт

	СбисУстановитьФорму(ПараметрыОткрытия);
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОткрытьМодально();
	#Иначе
		Открыть();
    #КонецЕсли
КонецПроцедуры 

&НаКлиенте
Процедура СбисУстановитьФорму(ПараметрыОткрытия)
	
	ЭтаФорма.Заголовок		= ПараметрыОткрытия.ЗаголовокФормы;
	МестныйКэш				= ПараметрыОткрытия.МестныйКэш;
	ДокументДанные			= ПараметрыОткрытия.ДокументДанные;
	Контрагент				= ПараметрыОткрытия.Контрагент;
	ИдентификаторДокумента	= ПараметрыОткрытия.ИдентификаторДокумента;
	
	КнопкаЗаписатьНажата = Ложь;
	
	ПорядокАвтоматическогоСопоставления = МодульОбъектаКлиент().ПолучитьЗначениеПараметраСБИС("ПорядокАвтоматическогоСопоставления");
	Если Не ЗначениеЗаполнено(ПорядокАвтоматическогоСопоставления) Тогда
		ПорядокАвтоматическогоСопоставления = МодульОбъектаКлиент().ПорядокАвтоматическогоСопоставленияПоУмолчаниюКлиент();
	Иначе
		ПорядокАвтоматическогоСопоставления = ПорядокАвтоматическогоСопоставления.Порядок;
	КонецЕсли;
	ЭлементТипКода = МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "ТаблицаСопоставленийТипКодаСБИС");
	ЭлементТипКода.СписокВыбора.ЗагрузитьЗначения(ПорядокАвтоматическогоСопоставления);
	
	ПараметрыФормы = Новый Структура("Результат", Новый Структура);
	
	ЗаполнитьТаблицуСопоставленийПоУмолчанию();
	
	Если ХарактеристикиИспользуютсяВДокументе Тогда
		МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "ТаблицаСопоставленийХарактеристика1С").Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуСопоставленийПоУмолчанию(Команда = Неопределено)
	
	ТаблицаСопоставлений.Очистить();
	
	Если Не ЗначениеЗаполнено(ДокументДанные)
			Или Не ДокументДанные.Свойство("мФайл") Тогда
		Закрыть(Неопределено);
		Возврат;
	КонецЕсли;
	
	ФормаРаботыСНоменклатурой = МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("МодульСопоставлениеНоменклатуры");
	
	СписокНоменклатурДляОбогащения = Новый Массив;
	Для Каждого мФайл Из ДокументДанные.мФайл Цикл
		Для Каждого мТаблДок Из мФайл.Значение.мТаблДок Цикл
			ИмямФайл		= мФайл.Ключ;
			ИмяТабЧасти		= мТаблДок.Ключ;
			ИндексВТабЧасти	= 0;
			Для Каждого СтрокаДокумента1С Из мТаблДок.Значение Цикл
				
				// Формируем идентификатор строки, как путь в исходных данных документа
				ИдСтроки = ИмямФайл + "." + "мТаблДок" + "." + ИмяТабЧасти + "." + ИндексВТабЧасти;
				СтрокаДокумента1С.Вставить("ИдСтроки", ИдСтроки);
				
				ДанныеНоменклатуры1С = Новый Структура();
				ДанныеНоменклатуры1С.Вставить("ИдентификаторДокумента",	ИдентификаторДокумента);
				ДанныеНоменклатуры1С.Вставить("Номенклатура",			СтрокаДокумента1С.Номенклатура);
				Если СтрокаДокумента1С.Свойство("Характеристика") Тогда
					ДанныеНоменклатуры1С.Вставить("Характеристика1С",	СтрокаДокумента1С.Характеристика);
					ХарактеристикиИспользуютсяВДокументе = Истина;
				Иначе
					ДанныеНоменклатуры1С.Вставить("Характеристика1С",	"");
				КонецЕсли;
				
				//ДанныеНоменклатуры1С.Вставить("Идентификатор1С", СтрокаДокумента1С.Номенклатура.УникальныйИдентификатор());
				КонтекстИдентификатора = Новый Структура("Номенклатура, Характеристика", ДанныеНоменклатуры1С.Номенклатура, ДанныеНоменклатуры1С.Характеристика1С);
				ДанныеНоменклатуры1С.Вставить("Идентификатор1С",		МестныйКэш.ОбщиеФункции.ОпределитьИдентификаторНоменклатурыНаКлиенте(КонтекстИдентификатора));
				ДанныеНоменклатуры1С.Вставить("ЕдИзм1С",				СтрокаДокумента1С.ЕдИзм);
				ДанныеНоменклатуры1С.Вставить("ОКЕИ_1С",				СтрокаДокумента1С.ТаблДок_ОКЕИ);
				
				ДопПараметры = Новый Структура("ИдСтроки", ИдСтроки);
				ГолыйКлассНоменклатурыДляСопоставления = МодульОбъектаКлиент().НовыйСтрокаСопоставленияСБИСКлиент(ДанныеНоменклатуры1С, ДопПараметры);
				
				СписокНоменклатурДляОбогащения.Добавить(ГолыйКлассНоменклатурыДляСопоставления);
				
				ИндексВТабЧасти = ИндексВТабЧасти + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыДляОбогащения = Новый Структура("Контрагент, Номенклатура, ПоискПо1С", Контрагент, СписокНоменклатурДляОбогащения, Истина);
	
	Попытка
		ДопПараметры = Новый Структура("Кэш", МестныйКэш);
		ОбогащённыеДанныеНоменклатурыДляСопоставления =	ФормаРаботыСНоменклатурой.НоменклатураПоставщика_МассовыйПоиск(ПараметрыДляОбогащения, ДопПараметры); 
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ФормаРаботыСНоменклатурой.НоменклатураПоставщика_МассовыйПоиск");
		Возврат;
	КонецПопытки;
	
	Для Каждого СтокаСопоставления Из ОбогащённыеДанныеНоменклатурыДляСопоставления Цикл
		НСтрокаТаблицы = ТаблицаСопоставлений.Добавить();
		
		МассивИдСтроки = МестныйКэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(СтокаСопоставления.ИдСтроки);
		СтрокаДокумента1С = ДокументДанные.мФайл[МассивИдСтроки[0]][МассивИдСтроки[1]][МассивИдСтроки[2]][Число(МассивИдСтроки[3])];
		
		НСтрокаТаблицы.КоличествоВДокументе1С		= Число(СтрокаДокумента1С.ТаблДок_Кол_во);
		НСтрокаТаблицы.ЦенаВДокументе1С				= СтрокаДокумента1С.Цена;
		НСтрокаТаблицы.НоменклатураСБИС				= СтокаСопоставления.НоменклатураСБИС.Наименование;
		НСтрокаТаблицы.ИдСтроки						= СтокаСопоставления.ИдСтроки;
		НСтрокаТаблицы.GTIN_СБИС					= СтокаСопоставления.НоменклатураСБИС.GTIN;
		НСтрокаТаблицы.КодСБИС						= СтокаСопоставления.НоменклатураСБИС.Код;
		НСтрокаТаблицы.ТипКодаСБИС					= СтокаСопоставления.НоменклатураСБИС.ТипКода;

		Для Каждого Номенклатура1С Из СтокаСопоставления.Номенклатура1С Цикл
			НСтрокаТаблицы.Номенклатура1С			= Номенклатура1С.Ключ;
			Для Каждого Характеристика1С Из Номенклатура1С.Значение.Характеристики Цикл
				НСтрокаТаблицы.Характеристика1С		= Характеристика1С;
				Прервать;
			КонецЦикла;
			Для Каждого Единица1С Из Номенклатура1С.Значение.Единицы Цикл
				НСтрокаТаблицы.Единица1С			= Единица1С.Ключ;
				Коэффициент1С = Число(Единица1С.Значение.Коэффициент);
				НСтрокаТаблицы.Коэффициент1С		= ?(Коэффициент1С = 0, 1, Коэффициент1С);
				Прервать;
			КонецЦикла;
			Прервать;
		КонецЦикла;
		
		Для Каждого ЕдиницаСБИС Из СтокаСопоставления.НоменклатураСБИС.Единицы Цикл
			КоэффициентСБИС = Число(ЕдиницаСБИС.Значение.Коэффициент);
			НСтрокаТаблицы.КоэффициентСБИС			= ?(КоэффициентСБИС = 0, 1, КоэффициентСБИС);
			НСтрокаТаблицы.НаименованиеЕдиницыСБИС	= ЕдиницаСБИС.Значение.Название;
			НСтрокаТаблицы.ОКЕИ_ЕдиницыСБИС			= ЕдиницаСБИС.Значение.ОКЕИ;
			Прервать;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НСтрокаТаблицы.Коэффициент1С)
				И ЗначениеЗаполнено(НСтрокаТаблицы.КоэффициентСБИС) Тогда
			НСтрокаТаблицы.КоэффициентСБИСк1С		= НСтрокаТаблицы.Коэффициент1С / НСтрокаТаблицы.КоэффициентСБИС;
		Иначе
			НСтрокаТаблицы.КоэффициентСБИСк1С		= 1;
		КонецЕсли;
		
		НСтрокаТаблицы.КоличествоПересчитанное		= НСтрокаТаблицы.КоличествоВДокументе1С * НСтрокаТаблицы.КоэффициентСБИСк1С;
		НСтрокаТаблицы.ЦенаПересчитанная			= НСтрокаТаблицы.ЦенаВДокументе1С * НСтрокаТаблицы.КоэффициентСБИСк1С;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // core2_vo2_Формы_ФормаОбратногоСопоставления_Интерфейс_Вызов

#Область include_core2_vo2_Формы_ФормаОбратногоСопоставления_Интерфейс_ОбработчикиСобытий

&НаКлиенте
Процедура ЗаписатьИзменения(Команда)
	
	КнопкаЗаписатьНажата = Истина;
	
	ОшибкиЗаполнения = ОшибкиЗаполненияДанныхСопоставления();
	Если ОшибкиЗаполнения.Количество() Тогда
		МодульОбъектаКлиент().СбисСообщить("Имеются ошибки, которые необходимо исправить перед сохранением результата:");
		Для Каждого Ошибка Из ОшибкиЗаполнения Цикл
			МодульОбъектаКлиент().СбисСообщить(Ошибка + Символы.ПС);
		КонецЦикла;
		КнопкаЗаписатьНажата = Ложь;
		Возврат;
	КонецЕсли;
	
	ЗаписатьСопоставленияИПоложитьВДокументДанные();
	
	ПараметрыФормы.Результат.Вставить("ДокументДанные", ДокументДанные);
	
	Закрыть(ПараметрыФормы.Результат);
	
КонецПроцедуры

// Функция - Проверить наличие критических ошибок
// Проверяет наличие ошибок, при которых запрещено сохранять внесённые вручную изменения сопоставлений 
//
// Возвращаемое значение:
// СписокОшибок  - строковый массив ошибок, при которых будем запрещать запись данных по сопоставлению
//
&НаКлиенте
Функция ОшибкиЗаполненияДанныхСопоставления()
	
	ОчиститьСообщения();
	СписокОшибок = Новый Массив; 
	СчетчикСтрок = 1;
	
	Для Каждого Строка Из ТаблицаСопоставлений Цикл
		
		Если Не ЗначениеЗаполнено(Строка.НоменклатураСБИС) Тогда
			// Не проверяем, если не заполнено основное поле, т.к. в таком случае мы берем данные из документа 1С
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ОКЕИ_ЕдиницыСБИС) Тогда
			Если Не ЗначениеЗаполнено(Строка.НаименованиеЕдиницыСБИС) Тогда
				СписокОшибок.Добавить("При заполненном поле ""ОКЕИ"", поле ""Единица""(наим.) также должно быть заполнено в строке № " + СчетчикСтрок);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.КоэффициентСБИСк1С) Тогда
				СписокОшибок.Добавить("При заполненном поле ""ОКЕИ"", поле ""Коэфф."" также должно быть заполнено в строке № " + СчетчикСтрок);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Строка.НаименованиеЕдиницыСБИС)
				И Не ЗначениеЗаполнено(Строка.КоэффициентСБИСк1С) Тогда
			СписокОшибок.Добавить("При заполненном поле ""Единица""(наим.), поле ""Коэфф."" также должно быть заполнено в строке № " + СчетчикСтрок);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.КодСБИС)
				И Не ЗначениеЗаполнено(Строка.ТипКодаСБИС) Тогда
			СписокОшибок.Добавить("При заполненном поле ""Код"", поле ""Тип кода"" также должно быть заполнено в строке № " + СчетчикСтрок);
		КонецЕсли;

		Если Не ЗначениеЗаполнено(Строка.КодСБИС) И Не ЗначениеЗаполнено(Строка.GTIN_СБИС) Тогда
			СписокОшибок.Добавить("Одно из полей: ""Код"" или ""Штрихкод"" - должно быть заполнено в строке № " + СчетчикСтрок);
		КонецЕсли;
		
		СчетчикСтрок = СчетчикСтрок + 1;
		
	КонецЦикла;
	
	Возврат СписокОшибок;
	
КонецФункции

#КонецОбласти // core2_vo2_Формы_ФормаОбратногоСопоставления_Интерфейс_ОбработчикиСобытий

#Область include_core2_vo2_Формы_ФормаОбратногоСопоставления_СлужебныеПроцедурыИФункци

Функция ПолучитьБезопасноеНаименование(ИсходнаяСтрока) Экспорт
	
	Результат = "";
	
	Латиница = "QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm";
	Кириллица = "абвгдеёзжийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
	Цифры = "0123456789";                                                            
	ДопустимыеСимволы = Латиница + Кириллица + Цифры;
	
	Для ПозицияСимвола = 1 по СтрДлина(ИсходнаяСтрока) Цикл
		ТекСимв = Сред(ИсходнаяСтрока, ПозицияСимвола, 1);
		Если Найти(ДопустимыеСимволы, ТекСимв) > 0 Тогда
			Результат = Результат + ТекСимв;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВРЕГ(Результат);
	
КонецФункции

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОбработчикЗавершения = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("ПослеЗакрытия", ЭтаФорма);
	НовыйОтложенноеДействие = МодульОбъектаКлиент().НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения", ОбработчикЗавершения));
	МодульОбъектаКлиент().ПодключитьОтложенноеДействие(НовыйОтложенноеДействие);
	
КонецПроцедуры

// Процедура - после закрытия почистить форму
//
// Параметры:
//  Аргумент	 - 	 - 
//  ДопПараметры - 	 - 
//
&НаКлиенте
Процедура ПослеЗакрытия(Аргумент=Неопределено, ДопПараметры=Неопределено) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		//Вызвать описание оповещения о закрытии вручную.
		Если Не ОписаниеОповещенияОЗакрытии = Неопределено Тогда
			МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(ПараметрыФормы.Результат, ОписаниеОповещенияОЗакрытии);
		КонецЕсли;
	#КонецЕсли
	
	ПараметрыФормы									= Неопределено;
	ОписаниеОповещенияОЗакрытии						= Неопределено;
	ДокументДанные									= Неопределено;
	Контрагент										= Неопределено;
	ОбогащённыеДанныеНоменклатурыДляСопоставления	= Неопределено;
	ХарактеристикиИспользуютсяВДокументе			= Ложь;
	КнопкаЗаписатьНажата							= Ложь;
	ИдентификаторДокумента							= Неопределено;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьСопоставленияИПоложитьВДокументДанные()

	ДанныеНоменклатурДляЗаписиСопоставлений = Новый Массив;
	
	Для Каждого СтрСопоставления Из ОбогащённыеДанныеНоменклатурыДляСопоставления Цикл
		
		СтрокаВТаблице = ТаблицаСопоставлений.НайтиСтроки(Новый Структура("ИдСтроки", СтрСопоставления.ИдСтроки))[0];
		
		Если Не ЗначениеЗаполнено(СтрокаВТаблице.НоменклатураСБИС) Тогда
			// Если не заполнено основное поле - выгружаем, как есть
			Продолжить;
		КонецЕсли;
		
		Если СтрокаВТаблице.СтрокаИзменена Тогда
			// Если строка изменена, добавляем строку сопоставления для записи, дополняя ее измененными данными
			ОбновитьСтрокуСопоставленияПоСтрокеТаблицы(СтрСопоставления, СтрокаВТаблице);
			ДанныеНоменклатурДляЗаписиСопоставлений.Добавить(СтрСопоставления);
		КонецЕсли;
		
		// Обновим данные по строке в ДокументДанные
		МассивИдСтроки = МестныйКэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(СтрСопоставления.ИдСтроки);
		СтрокаДокумента1С = ДокументДанные.мФайл[МассивИдСтроки[0]][МассивИдСтроки[1]][МассивИдСтроки[2]][Число(МассивИдСтроки[3])];
		
		СтрокаДокумента1С.ТаблДок_Название	= СтрокаВТаблице.НоменклатураСБИС;
		СтрокаДокумента1С.ТаблДок_Кол_во	= Формат(СтрокаВТаблице.КоличествоПересчитанное, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
		СтрокаДокумента1С.Цена				= СтрокаВТаблице.ЦенаПересчитанная;
		
		Если СтрокаДокумента1С.Свойство("ТаблДок_GTIN")
				И ЗначениеЗаполнено(СтрокаВТаблице.GTIN_СБИС) Тогда
			СтрокаДокумента1С.ТаблДок_GTIN = СтрокаВТаблице.GTIN_СБИС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаВТаблице.НаименованиеЕдиницыСБИС) Тогда
			СтрокаДокумента1С.ТаблДок_ЕдИзм		= СтрокаВТаблице.НаименованиеЕдиницыСБИС;
			Если ЗначениеЗаполнено(СтрокаВТаблице.ОКЕИ_ЕдиницыСБИС) Тогда
				СтрокаДокумента1С.ТаблДок_ОКЕИ	= СтрокаВТаблице.ОКЕИ_ЕдиницыСБИС;
			Иначе
				// Неформализированная упаковка
				СтрокаДокумента1С.ТаблДок_ОКЕИ	= "0000";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаВТаблице.КодСБИС) Тогда
			СтрокаДокумента1С.Вставить("ТаблДок_" + СтрокаВТаблице.ТипКодаСБИС, СтрокаВТаблице.КодСБИС);
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаВТаблице.GTIN_СБИС) Тогда
			СтрокаДокумента1С.Вставить("ТаблДок_GTIN", СтрокаВТаблице.GTIN_СБИС);
		КонецЕсли;
		
		Если СтрокаДокумента1С.Свойство("мПараметр") Тогда
			Если ЗначениеЗаполнено(СтрокаВТаблице.КодСБИС)
					И СтрокаДокумента1С.мПараметр.Свойство(СтрокаВТаблице.ТипКодаСБИС) Тогда
				СтрокаДокумента1С.мПараметр[СтрокаВТаблице.ТипКодаСБИС].Параметр_Значение = СтрокаВТаблице.КодСБИС;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаВТаблице.GTIN_СБИС)
					И СтрокаДокумента1С.мПараметр.Свойство("GTIN") Тогда
				СтрокаДокумента1С.мПараметр["GTIN"].Параметр_Значение = СтрокаВТаблице.GTIN_СБИС;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Если ДанныеНоменклатурДляЗаписиСопоставлений.Количество() Тогда
		СпособСопоставления = МестныйКэш.Парам.СпособСопоставленияНоменклатуры; 
		Если СпособСопоставления = 1 Тогда
			ИмяФормыРаботыСНоменклатурой = "СопоставлениеНоменклатуры_ДБФ"; 
		Иначе
			ИмяФормыРаботыСНоменклатурой = "СопоставлениеНоменклатуры_СБИС";
		КонецЕсли;
		
		ФормаРаботыСНоменклатурой = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("НоменклатураПоставщика_МассовоеОбновление", ИмяФормыРаботыСНоменклатурой,"", МестныйКэш);
		
		ПараметрыДляЗаписиСопоставений = Новый Структура("Контрагент, Номенклатура", Контрагент, ДанныеНоменклатурДляЗаписиСопоставлений, Истина);
		
		ФормаРаботыСНоменклатурой.НоменклатураПоставщика_МассовоеОбновление(ПараметрыДляЗаписиСопоставений, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокуСопоставленияПоСтрокеТаблицы(СтрокаСопоставления, СтрокаВТаблице)
	
	НоменклатураСБИС = СтрокаСопоставления.НоменклатураСБИС;
	
	НоменклатураСБИС.Наименование	= СтрокаВТаблице.НоменклатураСБИС;
	НоменклатураСБИС.Код			= СтрокаВТаблице.КодСБИС;
	НоменклатураСБИС.ТипКода		= СтрокаВТаблице.ТипКодаСБИС;
	НоменклатураСБИС.GTIN			= СтрокаВТаблице.GTIN_СБИС;
	
	Для Каждого ЕдиницаСБИС Из НоменклатураСБИС.Единицы Цикл
		ЕдиницаСБИС.Значение.Название		= СтрокаВТаблице.НаименованиеЕдиницыСБИС;
		ЕдиницаСБИС.Значение.ОКЕИ			= СтрокаВТаблице.ОКЕИ_ЕдиницыСБИС;
		ЕдиницаСБИС.Значение.Коэффициент	= СтрокаВТаблице.КоэффициентСБИС;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СтрокаТЧПриИзменении(Элемент)
	
	ТекущиеДанные = МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "ТаблицаСопоставлений").ТекущиеДанные;
	
	ТекущиеДанные.СтрокаИзменена = Истина;
	
	Если Элемент.Имя = "ТаблицаСопоставленийКоличествоПересчитанное" Тогда
		ПересчитатьКоэффициентСБИСПоКоличеству(ТекущиеДанные);
	ИначеЕсли Элемент.Имя = "ТаблицаСопоставленийКоэффициентСБИСк1С" Тогда
		ПересчитатьКоличествоПоКоэффициентуСБИСк1С(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоэффициентСБИСПоКоличеству(ТекущиеДанные)
	
	//уп к
	//10 2 10 5 50
	//
	//10*2=20
	//
	//50/20=2,5
	//	10		2(уп)		х(шт)		   х(шт)  2(уп)		10			?
	//(КолВоСбис / КСбис) * К1С = КолВо1С ~ (К1С / КСбис) *КолВоСбис = КолВо1С ~ (К1С * КолВоСбис) / КСбис = КолВо1С
	//1 / 1 * 0,3 = 0,3
	
	
	
	Если ТекущиеДанные.КоличествоВДокументе1С > 0 Тогда
		ТекущиеДанные.КоэффициентСБИС = ТекущиеДанные.КоличествоВДокументе1С * ТекущиеДанные.Коэффициент1С / ТекущиеДанные.КоличествоПересчитанное;
		ТекущиеДанные.КоэффициентСБИСк1С = ТекущиеДанные.КоличествоПересчитанное / ТекущиеДанные.КоличествоВДокументе1С;
	Иначе
		ТекущиеДанные.КоэффициентСБИС = 1;
		ТекущиеДанные.КоличествоПересчитанное = 0;
		ТекущиеДанные.КоэффициентСБИСк1С = 1;
	КонецЕсли;
	ТекущиеДанные.ЦенаПересчитанная = ТекущиеДанные.ЦенаВДокументе1С / ТекущиеДанные.КоэффициентСБИСк1С;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоПоКоэффициентуСБИСк1С(ТекущиеДанные)
	
	Если ТекущиеДанные.КоэффициентСБИСк1С = 0 Тогда
		МодульОбъектаКлиент().СбисСообщить("Коэффициент должен быть > ""0""");
		ТекущиеДанные.КоэффициентСБИСк1С = 1;
	КонецЕсли;
	
	ТекущиеДанные.КоличествоПересчитанное = ТекущиеДанные.КоличествоВДокументе1С * ТекущиеДанные.КоэффициентСБИСк1С;
	Если ТекущиеДанные.КоличествоПересчитанное > 0 Тогда
		ТекущиеДанные.КоэффициентСБИС = ТекущиеДанные.КоличествоВДокументе1С * ТекущиеДанные.Коэффициент1С / ТекущиеДанные.КоличествоПересчитанное;
	Иначе
		ТекущиеДанные.КоэффициентСБИС = 1;
		ТекущиеДанные.КоличествоПересчитанное = 0;
		ТекущиеДанные.КоэффициентСБИСк1С = 1;
	КонецЕсли;
	ТекущиеДанные.ЦенаПересчитанная = ТекущиеДанные.ЦенаВДокументе1С / ТекущиеДанные.КоэффициентСБИСк1С;
	
КонецПроцедуры




#КонецОбласти // core2_vo2_Формы_ФормаОбратногоСопоставления_СлужебныеПроцедурыИФункции
