
#Область include_core2_vo2_Статусы_Регистры_Переменные

&НаКлиенте
Перем ЛокальныйКэш Экспорт;

#КонецОбласти

#Область include_local_ПолучитьМодульОбъекта

&НаСервере
Функция МодульОбъектаСервер()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция МодульОбъектаСерверБезКонтекста()
	Возврат Новый (Тип("ВнешняяОбработкаОбъект.СБИС"));
КонецФункции

&НаКлиенте
Функция МодульОбъектаКлиент() Экспорт
	Возврат ВладелецФормы.Кэш.СБИС.МодульОбъектаКлиент;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Статусы_Регистры_ВнешнийВызов

//Настраивает форму дял работы
&НаКлиенте
Функция УстановитьПараметрыМодуля(ПараметрыУстановки=Неопределено, Кэш=Неопределено)				Экспорт
	Если Кэш = Неопределено Тогда
		ЛокальныйКэш = ВладелецФормы.Кэш;
	Иначе
		ЛокальныйКэш = Кэш;
	КонецЕсли;
	УстановитьПараметрыРегистры(ЛокальныйКэш);	
    Попытка
		ДобавитьЗаписиВПланВидовХарактеристик();
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СбисИсключение = МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "Статусы_Регистры.ДобавитьЗаписиВПланВидовХарактеристик",,, "Часть функционала внешней обработки будет недоступна (хранение статусов электронных документов, отправка документов на определенный код филиала, фильтрация документов по способу доставки)");
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, СбисИсключение);
	КонецПопытки;
КонецФункции

#Область include_core2_vo2_Статусы_Регистры_ВнешнийВызов_Актуальные

//Новая функция записи изменений по документам. Дополнительные параметры как возможность на расширение
&НаКлиенте
Функция СбисЗаписатьИзмененияПоДокументам1С(Кэш, МассивДокументов, ДопПараметры)	Экспорт
	Перем СбисСтатусРегламент, СбисИдАккаунта;
	// проставляет статусы по идентификаторам пакетов при получении списка изменений
	Если Не МассивДокументов.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	//Сделаем проверку ВФК на случай выноса старой функции.
	Если Не ДопПараметры.Свойство("ПроверкаСтаройФункции")
		Или	ДопПараметры.ПроверкаСтаройФункции Тогда
		фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункцииСеанса(Кэш, "ЗаписатьИзмененияПоДокументам1С","Статусы_Регистры", Новый Структура("ПроверятьВО, КэшироватьФункцию", Ложь, Ложь), Отказ);
		Если Отказ Тогда
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, фрм);
		ИначеЕсли Не фрм = Ложь Тогда
			РезультатДозапроса = Кэш.ФормаНастроек.СбисЗаполнитьНеполученныеНастройки(Кэш, Отказ);
			Если Отказ Тогда
				Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатДозапроса);
				Возврат РезультатДозапроса;
			КонецЕсли;
			фрм.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, Кэш.Парам.КаталогНастроек);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	ДопПараметры.Свойство("ИдАккаунта", СбисИдАккаунта);
	МассивСтатусРегламент = ПараметрыСоединения.МассивСтатусРегламент;
	
	ЗаполнятьСпособОбменаКонтрагента = Кэш.ОбщиеФункции.РассчитатьЗначение("ЗаполнятьСпособОбменаКонтрагента", Кэш.Ини.Конфигурация);
	ЗаполнятьСпособОбменаКонтрагента = ЗаполнятьСпособОбменаКонтрагента = Истина;

	ПараметрыЗапроса	= Новый Структура("СписокИд", Новый Массив);
	ПараметрыЗапроса.Вставить("ИмяПланаВидовХарактеристикСвойствОбъектов",	ПараметрыСоединения.ИмяПланаВидовХарактеристикСвойствОбъектов);
	
	СобытияПакета 		= Неопределено;
	КлючПакета			= Неопределено;
	КартаСписка			= Новый Соответствие;
	ДанныеПоКонтрагентам= Новый Структура;
	Для СчПакета = 0 По МассивДокументов.Количество() - 1 Цикл
		СоставПакета = МассивДокументов[СчПакета];
		Если	СоставПакета.Свойство("Событие", СобытияПакета)
			И	СобытияПакета[0].Свойство("Название")
			И	СобытияПакета[0].Название = "Извещение о получении" Тогда
			//Определим контрагентов для обработки на сервере
			Если ЗаполнятьСпособОбменаКонтрагента Тогда
				КлючИННКПП = "к" + ?(	СоставПакета.Контрагент.Свойство("СвЮЛ"),
										СоставПакета.Контрагент.СвЮЛ.ИНН + "_" + СоставПакета.Контрагент.СвЮЛ.КПП, 
										СоставПакета.Контрагент.СвФЛ.ИНН);
				Если Не ДанныеПоКонтрагентам.Свойство(КлючИННКПП) Тогда
					ДанныеПоКонтрагентам.Вставить(КлючИННКПП, СоставПакета.Контрагент);
				КонецЕсли;
			КонецЕсли;
		Иначе
			СобытияПакета = Неопределено;
		КонецЕсли;	
		// Т.к. при отправке проставили на каждом документе 1С Ид пакета и вложения, ищем все документы, у которых идентификатор начинается на Ид пакета
		Если Не (	СоставПакета.Свойство("Идентификатор", КлючПакета) 
				И	СоставПакета.Свойство("Состояние"))
			Или		СоставПакета.Свойство("Редакция")// на документах 1С проставляем статусы только для актуальных редакций
				И	СоставПакета.Редакция[0].Актуален = "Нет" Тогда
			Продолжить;
		КонецЕсли;
		Если Не	(		СоставПакета.Свойство("Регламент", СбисСтатусРегламент) 
				И		СбисСтатусРегламент.Свойство("Название", СбисСтатусРегламент)
				И НЕ	МассивСтатусРегламент.Найти(СбисСтатусРегламент) = Неопределено) Тогда
			СбисСтатусРегламент = "";
		КонецЕсли;
		
		СвойствоДокументСБИС_Ид = СбисПолучитьСвойствоОбъектаНаКлиенте(Новый Структура("Регламент, Имя", СбисСтатусРегламент, "ДокументСБИС_Ид"), Кэш);
		ПараметрыЗапроса.СписокИд.Добавить(Новый Структура("Ид, Свойство", КлючПакета, СвойствоДокументСБИС_Ид));
		ЭлементКарты = КартаСписка.Получить(КлючПакета);
		Если ЭлементКарты = Неопределено Тогда
			ЭлементКарты = Новый Массив;
			КартаСписка.Вставить(КлючПакета, ЭлементКарты);
		КонецЕсли;
		ЭлементКарты.Добавить(Новый Структура("Индекс, Регламент, Событие", СчПакета, СбисСтатусРегламент, СобытияПакета));
		Если СбисИдАккаунта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		//Расширить карту для поиска с учетом ИД аккаунта
		КлючПакетаАккаунт = ИдПакетаСбис(КлючПакета, СбисИдАккаунта);
		ПараметрыЗапроса.СписокИд.Добавить(Новый Структура("Ид, Свойство", КлючПакетаАккаунт, СвойствоДокументСБИС_Ид));
		ЭлементКарты = КартаСписка.Получить(КлючПакетаАккаунт);
		Если ЭлементКарты = Неопределено Тогда
			ЭлементКарты = Новый Массив;
			КартаСписка.Вставить(КлючПакетаАккаунт, ЭлементКарты);
		КонецЕсли;
		ЭлементКарты.Добавить(Новый Структура("Индекс, Регламент, Событие", СчПакета, СбисСтатусРегламент, СобытияПакета));
	КонецЦикла;
	ПараметрыЗапроса.Вставить("ИмяРегистраСвойствОбъектов", параметрыСоединения.ИмяРегистраСвойствОбъектов);

	РезультатЗапросаСпискаИд = Документы1СПоПараметрам(ПараметрыЗапроса,Новый Структура("ПолучитьИмяМетаданных", Истина),Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатЗапросаСпискаИд);
		Возврат РезультатЗапросаСпискаИд;
	КонецЕсли;
	//Определим ини, котокрые нужны для обработки.
	ДанныеИниДляОбработки = Новый Структура("Конфигурация", Кэш.Ини.Конфигурация);
	Для Каждого СтрокаПоПакетно Из РезультатЗапросаСпискаИд Цикл
		Для Каждого СтрокаДокумента1С Из СтрокаПоПакетно.Значение.Документы1С Цикл
			КлючИни = СтрокаДокумента1С.Метаданные_Имя;
			Если	Не	Кэш.Ини.Свойство(КлючИни)
				Или		ДанныеИниДляОбработки.Свойство(КлючИни) Тогда
				Продолжить;
			КонецЕсли;
			ДанныеИниДляОбработки.Вставить(КлючИни, Кэш.ФормаНастроек.Ини(Кэш, КлючИни));
		КонецЦикла;
	КонецЦикла;
	
	//Дозаполним параметры недостающими данными
	СписокДокументов1СПакета= Неопределено;
	СтрокаЗапросаСпискаИд	= Неопределено;
	Для Каждого КлючИЗначениеКарты Из КартаСписка Цикл
		СтрокаЗапросаСпискаИд = РезультатЗапросаСпискаИд.Получить(КлючИЗначениеКарты.Ключ);
		Если СтрокаЗапросаСпискаИд = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ИндексПакета Из КлючИЗначениеКарты.Значение Цикл
			СоставПакета = МассивДокументов[ИндексПакета.Индекс];
			СтрокаЗапросаСпискаИд.Вставить("НоваяРедакция",				Ложь);
			СтрокаЗапросаСпискаИд.Вставить("ДокументСБИС_Статус",		СбисПолучитьСвойствоОбъектаНаКлиенте(Новый Структура("Регламент, Имя", ИндексПакета.Регламент, "ДокументСБИС_Статус"),		Кэш));
			СтрокаЗапросаСпискаИд.Вставить("ДокументСБИС_Расхождение",	СбисПолучитьСвойствоОбъектаНаКлиенте(Новый Структура("Регламент, Имя", ИндексПакета.Регламент, "ДокументСБИС_Расхождение"),	Кэш));
			СтрокаЗапросаСпискаИд.Вставить("ДокументСБИС_СтатусГос",	СбисПолучитьСвойствоОбъектаНаКлиенте(Новый Структура("Регламент, Имя", ИндексПакета.Регламент, "ДокументСБИС_СтатусГос"),	Кэш));
			СтрокаЗапросаСпискаИд.Вставить("ДокументСБИС_ТекущийЭтап",	СбисПолучитьСвойствоОбъектаНаКлиенте(Новый Структура("Регламент, Имя", ИндексПакета.Регламент, "ДокументСБИС_ТекущийЭтап"),	Кэш));
			СтрокаЗапросаСпискаИд.Вставить("Состояние",					СоставПакета.Состояние);
			Если СоставПакета.Свойство("Событие") И ТипЗнч(СоставПакета.Событие) = тип("Массив") 
					И СоставПакета.Событие.Количество()>0 И СоставПакета.Событие[0].Свойство("Название") Тогда	
				Если ПараметрыСоединения.СтатусыГос.НайтиПоЗначению(СоставПакета.Событие[0].Название) <> Неопределено Тогда  // << alo СтатусГос Список
					СтрокаЗапросаСпискаИд.Вставить("СостояниеГос",		СоставПакета.Событие[0].Название); 
				Иначе
					СтатусГос = МодульОбъектаКлиент().СоставПакета_Получить(СоставПакета, "СтатусГосСистемы");
					СтрокаЗапросаСпискаИд.Вставить("СостояниеГос",		СтатусГос); 
				Конецесли;
			Конецесли;	// alo СтатусГос >>                                      
			
			ЕстьРасхождения = МодульОбъектаКлиент().СоставПакета_Получить(СоставПакета, "ЕстьРасхождения");
			СтрокаЗапросаСпискаИд.Вставить("Расхождение",		ЕстьРасхождения); 
			
			Если СоставПакета.Свойство("АктивныеФазы") И ТипЗнч(СоставПакета.АктивныеФазы) = тип("Массив") 
					И СоставПакета.АктивныеФазы.Количество()>0 И СоставПакета.АктивныеФазы[0].Свойство("Наименование") Тогда	
				СтрокаЗапросаСпискаИд.Вставить("ТекущийЭтап", СоставПакета.АктивныеФазы[0].Наименование);
			Конецесли;
			Если Не ИндексПакета.Событие = Неопределено Тогда
				СтрокаЗапросаСпискаИд.Вставить("Событие",			ИндексПакета.Событие);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ПараметрыОбработки = Новый Структура("Контрагенты, Список", ДанныеПоКонтрагентам, РезультатЗапросаСпискаИд);
	РезультатОбработки = СбисЗаписатьИзмененияПоСвойствам(ПараметрыОбработки, Новый Структура("Ини, ИмяРегистраСвойствОбъектов, НоваяРедакция", ДанныеИниДляОбработки, ПараметрыЗапроса.ИмяРегистраСвойствОбъектов, Ложь), Отказ);
	//Сделаем обработку свойств на сервере и заполним массив документов обработанным результатом
	Для Каждого СтрокаРезультатОбработки Из РезультатОбработки Цикл
		ЭлементКарты = КартаСписка.Получить(СтрокаРезультатОбработки.Ключ);
		Если ЭлементКарты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СписокДокументов = Новый СписокЗначений;
		Для Каждого ОбработаннаяСтрока Из СтрокаРезультатОбработки.Значение Цикл
			СписокДокументов.Добавить(ОбработаннаяСтрока.Ссылка);
		КонецЦикла;
		Для Каждого СтрокаИндексовПакета Из ЭлементКарты Цикл
			МассивДокументов[СтрокаИндексовПакета.Индекс].Вставить("Документы1С", СписокДокументов);
		КонецЦикла;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

//Возвращает значение 1 свойства по 1 ссылке
//ПараметрыСвойства - Структура:
//							ДокументСсылка - ссылка на документ 1С
//							Имя - Строка, имя свойства для поиска, без учета стенда
//							Регламент - Строка для поиска свойства с регламентом.
//Возвращает: значение указанного свойства
&НаКлиенте
Функция СбисПрочитатьЗначениеСвойстваДокумента(ПараметрыСвойства, Кэш=Неопределено)	Экспорт
	Перем ЗначениеСвойства;
	МассивСвойствПрочитать = Новый Массив;
	СвойствоПрочитать = Новый Структура("Имя, Регламент");
	ЗаполнитьЗначенияСвойств(СвойствоПрочитать, ПараметрыСвойства);
	МассивСвойствПрочитать.Добавить(СвойствоПрочитать);
	ПараметрыПрочитать = Новый Структура("СписокДокументов, Свойства, ПолныйСписок", Новый Массив, МассивСвойствПрочитать, Истина);
	ПараметрыПрочитать.СписокДокументов.Добавить(ПараметрыСвойства.ДокументСсылка);
	
	Результат = СбисПрочитатьЗначенияСвойствДокументов(ПараметрыПрочитать, Кэш);
	ЗначениеСвойств = Результат.Получить(ПараметрыСвойства.ДокументСсылка);
	Возврат ЗначениеСвойств.Получить(ПараметрыСвойства.Имя);
КонецФункции

//Возвращает список свойств по списку документов
//ПараметрыСвойства Структура:
//							СписокДокументов- ссылка на документ 1С
//							Свойства		- массив структур:
//								Имя			- Строка, имя свойства для поиска, без учета стенда
//								Регламент	- Строка для поиска свойства с регламентом.
//							ПолныйСписок	- булево, если активно то в результате будет полная выборка по всем свойствам и ссылкам, независимо от того - есть свойства или нет.
//Возвращает Соответствие, где ключ это ссылка на документ 1С, значение - структура найденных свойств без кода сервиса и регламента.
//ВНИМАНИЕ если передаются свойства с регламентом и без, то ключ в таком случае будет совпадать и свойства в ответе перекроют друг-друга.
&НаКлиенте
Функция СбисПрочитатьЗначенияСвойствДокументов(ПараметрыЗапросаВходящие, Кэш)		Экспорт
	Перем ПолныйСписокВРезультат;
	СтрокаКлючей	= "";
	СписокСсылок	= ПараметрыЗапросаВходящие.СписокДокументов;
	Если ТипЗнч(СписокСсылок) = Тип("СписокЗначений") Тогда
		СписокСсылок = СписокСсылок.ВыгрузитьЗначения();
	КонецЕсли;
	СписокСвойствДляЗапроса = Новый Массив;
	СоответстиеСвойств		= Новый Соответствие;//Для перевода свойства с кодом сервиса и регламента в обратную сторону
	Для Каждого ОписаниеСвойства Из ПараметрыЗапросаВходящие.Свойства Цикл
		КлючСвойства = СбисПолучитьКлючСвойстваДокументаНаКлиенте(ОписаниеСвойства);
		СтрокаКлючей = СтрокаКлючей + ?(ПустаяСтрока(СтрокаКлючей), "", Символы.ПС) + ОписаниеСвойства.Имя;
		
		СоответстиеСвойств.Вставить(КлючСвойства, ОписаниеСвойства.Имя);
		СписокСвойствДляЗапроса.Добавить(СбисПолучитьСвойствоОбъектаНаКлиенте(ОписаниеСвойства, ЛокальныйКэш));
	КонецЦикла;
	Если Не ПараметрыЗапросаВходящие.Свойство("ПолныйСписок", ПолныйСписокВРезультат) Тогда
		ПолныйСписокВРезультат = Ложь;
	КонецЕсли;
	
	ВыборкаСвойств = ПрочитатьСвойстваДокументовПоСсылкамНаСервере(Новый Структура("СписокДокументов, СписокСвойств", СписокСсылок, СписокСвойствДляЗапроса));
	Результат = Новый Соответствие;
	Для Каждого СсылкаЗапрос Из СписокСсылок Цикл
		ЗначениеСвойств = ВыборкаСвойств.Получить(СсылкаЗапрос);
		Если ЗначениеСвойств = Неопределено Тогда
			Если ПолныйСписокВРезультат Тогда
				Результат.Вставить(СсылкаЗапрос, Новый Соответствие);
				ЗаполнитьКлючиСоответствия(Результат[СсылкаЗапрос], СтрокаКлючей);
			КонецЕсли;
			Продолжить;
		ИначеЕсли ПолныйСписокВРезультат Тогда
			СтруктураСвойств = Новый Соответствие;
			ЗаполнитьКлючиСоответствия(СтруктураСвойств, СтрокаКлючей);
		Иначе
			СтруктураСвойств = Новый Структура;
		КонецЕсли;
		Для Каждого ЗначениеСвойства Из ЗначениеСвойств Цикл
			СтруктураСвойств.Вставить(СоответстиеСвойств.Получить(ЗначениеСвойства.Наименование), ЗначениеСвойства.Значение);
		КонецЦикла;
		Результат.Вставить(СсылкаЗапрос, СтруктураСвойств);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

// Заполняет ключи соответствия по строке. Разелены ключи
// ччерез перенос строки
//
// Параметры:
//  Соответствие - Соответствие - соответствие для заполнения
//  Ключ - Строка - многострочная строка. 1 строка - 1 ключ
//
&НаКлиенте
Процедура ЗаполнитьКлючиСоответствия(Соответствие, Ключ)

	Если Соответствие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для СчСтроки = 1 По СтрЧислоСтрок(Ключ) Цикл
		
		Соответствие.Вставить(СтрПолучитьСтроку(Ключ, СчСтроки));
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьКлючиСоответствия()

//Возвращает набор ссылок по идентификатору пакета и вложения
//ПараметрыЗаполненияСвязи - Структура
//		ИдентификаторыПолучить - массив структур:
//			Ид				- строка(UUID), чистый ИД пакета для поиска, без ИД аккаунта.
//			ИдВложения(н)	- строка(UUID), ИД вложения для поиска. Если нет, то поиск проводится только по ИД пакета.
//		ИдАккаунта		- строка Идентификатор аккаунта, для дополнительного разреза поиска.
//		ЗаполнитьСумму	- булево, признак необходимости извлечения реквизита "СуммаДокумента".
//Возвращает Соответствие, где ключ это Ид+ИдВложения, а значение это массив найденных ссылок документов
&НаКлиенте
Функция СбисПрочитатьСвязьДокументов1С(ПараметрыЗаполненияСвязи)					Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда 
		Возврат ПрочитатьСвязьДокументов1СПоИдентификаторамСБИС(ПараметрыЗаполненияСвязи);
	#Иначе
		Возврат ПрочитатьСвязьДокументов1СНаСервере(ПараметрыЗаполненияСвязи);
	#КонецЕсли
КонецФункции

//Функция возвращает параметры сопоставленного документа СБИС - ИД пакета и аккаунта
//ПараметрыЧтенияВходящие - Структура:
//		ДокументСсылка - Ссылка на документ, по которому требуется получить свойство
&НаКлиенте
Функция СбисПрочитатьСведенияОПакете(ПараметрыЧтенияВходящие, Кэш)					Экспорт
	ПараметрыЧтенияСвойства	= Новый Структура("Имя, ДокументСсылка", "ДокументСБИС_Ид", ПараметрыЧтенияВходящие.ДокументСсылка);
	Если ПараметрыЧтенияВходящие.Свойство("Регламент") Тогда
		ПараметрыЧтенияСвойства.Вставить("Регламент", ПараметрыЧтенияВходящие.Регламент);
	КонецЕсли;
	ИдДокументаЗначение = СбисПрочитатьЗначениеСвойстваДокумента(ПараметрыЧтенияСвойства, Кэш);
	Возврат СбисРазобратьИдентификатор(ИдДокументаЗначение);
КонецФункции

//Функция формирует из составного ИД структуру с описанием данных ИдДокумента, ИдАккаунта.
&НаКлиенте
Функция СбисРазобратьИдентификатор(ИдПакета, ДопПараметры=Неопределено)				Экспорт
	ИдПакета = СтрЗаменить(ИдПакета, "_", Символы.ПС);
	ИдДокумента = СтрПолучитьСтроку(ИдПакета, 1);
	Если СтрЧислоСтрок(ИдПакета) < 2 Тогда
		ИдАккаунта = "";	
	Иначе
	    ИдАккаунта = СтрПолучитьСтроку(ИдПакета, 2);
	КонецЕсли;	
	Возврат Новый Структура("ИдДокумента, ИдАккаунта", ИдДокумента, ИдАккаунта);
КонецФункции

//Функция получает запрос списка документов из ини под способ хранения сатусов в регистрах.
&НаКлиенте
Функция СбисПолучитьСписокДокументов1С(ПараметрыСпискаДокументов, Кэш)				Экспорт
	ТекстЗапроса = Кэш.ОбщиеФункции.РассчитатьЗначение("ЗапросСпискаДокументов", ПараметрыСпискаДокументов.Ини);
	Для Каждого Элемент Из ПараметрыСоединения.СвойстваВРазрезеКодаСервиса Цикл
		КлючСвойстваНовый = СбисПолучитьКлючСвойстваДокументаНаКлиенте(Новый Структура("Имя", Элемент.Представление));
		Если Элемент.Представление = КлючСвойстваНовый Тогда
			Продолжить;
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """" + Элемент.Представление + """", """" + КлючСвойстваНовый + """");
	КонецЦикла;
	ПараметрыФильтраНаСервер = ПараметрыСпискаДокументов.Фильтр;
	//Переписать запрос к 1С на передачу свойств и параметров в запрос в готовом и явном виде
	// ▼ ayan#bitrix1075_07#УТ2021 Добавление доп отборов Кириллов П.С.  2023.01.20 ▼ Начало
	//Результат = Кэш.ОбщиеФункции.ЗаполнитьМассивДокументов1С(ТекстЗапроса, ПараметрыФильтраНаСервер);
	Результат = Кэш.ОбщиеФункции.ЗаполнитьМассивДокументов1С(ТекстЗапроса, ПараметрыФильтраНаСервер, , Кэш.Текущий.ТипДок);
	// ▲ ayan#bitrix1075_07#УТ2021 Добавление доп отборов Кириллов П.С.  2023.01.20 ▲ Конец 
	Для Каждого КлючИЗначениеФильтр Из ПараметрыФильтраНаСервер Цикл
		ПараметрыСпискаДокументов.Фильтр.Вставить(КлючИЗначениеФильтр.Ключ, КлючИЗначениеФильтр.Значение);
	КонецЦикла;
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Статусы_Регистры_ВнешнийВызов_Устаревшие

//регистры сведений
//TODO40 Сделать вменяемый результат работы формирования планов характеристик для обработки ошибок
&НаКлиенте
Процедура ДобавитьЗаписиВПланВидовХарактеристик() Экспорт
	ДобавитьЗаписиВПланВидовХарактеристикНаСервере();
КонецПроцедуры  

//Возвращает свойство (статус, идентификатор пакета, идентификатор вложения) документа 1С	
&НаКлиенте
Функция ПрочитатьСвойствоДокументаПоСсылке(Кэш, ДокументСсылка, ИмяСвойства, ДопПараметры) Экспорт
	Возврат СбисПрочитатьЗначениеСвойстваДокумента(Новый Структура("Имя, ДокументСсылка", ИмяСвойства, ДокументСсылка), Кэш);
КонецФункции

//UAA Старая функция оставлена для верного поиска, в случае вынесения этого кода в ВФК
&НаКлиенте
Процедура ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Ини, КаталогНастроек) Экспорт
	СбисЗаписатьИзмененияПоДокументам1С(ЛокальныйКэш, МассивДокументов, Новый Структура("ПроверкаСтаройФункции, ИдАккаунта", Ложь, ЛокальныйКэш.Интеграция.ПолучитьИдТекущегоАккаунта(ЛокальныйКэш)));
КонецПроцедуры

//Использовать ЗаполнитьСписокДокументовСБИССвязьюСсылок1С
&НаКлиенте
Процедура ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, ИниКонфигурация, КаталогНастроек) Экспорт
	ЗаполнитьСписокДокументовСБИССвязьюСсылок1С(Новый Структура("СписокДокументовЗаполнить, ИдентификаторыПолучить, ИдАккаунта", МассивДокументов, МассивИдентификаторов, ЛокальныйКэш.Интеграция.ПолучитьИдТекущегоАккаунта(ЛокальныйКэш)), ЛокальныйКэш);
КонецПроцедуры

//Использовать ЗаполнитьСписокДокументовСБИССвязьюСсылок1С
&НаКлиенте
Процедура ПолучитьТаблицуДокументов1СПоИдПакетаСБИС(МассивДокументов, ИниКонфигурация, КаталогНастроек) Экспорт	
	ПараметрыЗаполнить = Новый Структура("СписокДокументовЗаполнить, ИдентификаторыПолучить, ЗаполнитьСумму, ИдАккаунта", МассивДокументов, Новый Массив, Истина, ЛокальныйКэш.Интеграция.ПолучитьИдТекущегоАккаунта(ЛокальныйКэш));
	Для Каждого СтрокаСписка Из ПараметрыЗаполнить.СписокДокументовЗаполнить Цикл
		ПараметрыЗаполнить.ИдентификаторыПолучить.Добавить(Новый Структура("Ид", СтрокаСписка.ИдСБИС));
	КонецЦикла;
	ЗаполнитьСписокДокументовСБИССвязьюСсылок1С(ПараметрыЗаполнить, ЛокальныйКэш);
КонецПроцедуры

// функция ищет связанные документы 1С для каждого вложения пакета и заполняет массив служебных вложений	
&НаКлиенте
Функция НайтиДокументы1СПоПакетуСБИС(ПолныйСоставПакета, КэшИни, КаталогНастроек, МассивСлужебных) Экспорт
	МассивИдентификаторов = Новый Массив;
	ВложенияЗаполнить = Новый Соответствие;
	СчётчикИндекса = 0;
	Для Каждого Вложение Из ПолныйСоставПакета.Вложение Цикл
		Если	Не	Вложение.Свойство("Служебный") 
			Или 	Вложение.Служебный = "Нет" Тогда
			МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения", ПолныйСоставПакета.Идентификатор, Вложение.Идентификатор));
			Вложение.Вставить("Документы1С",		Новый СписокЗначений);
			Вложение.Вставить("Документ1СПроведен",	Ложь);
			ВложенияЗаполнить.Вставить(ПолныйСоставПакета.Идентификатор + Вложение.Идентификатор, Вложение);
		Иначе	
			МассивСлужебных.Добавить(СчётчикИндекса);
		КонецЕсли;
		СчётчикИндекса = СчётчикИндекса + 1;
	КонецЦикла;
	ПараметрыЗаполненияСвязи = Новый Структура("ИдентификаторыПолучить, ИдАккаунта, ЗаполнитьСумму", МассивИдентификаторов, ЛокальныйКэш.Интеграция.ПолучитьИдТекущегоАккаунта(ЛокальныйКэш), Ложь);
	ВыборкаПоСпискуИД = СбисПрочитатьСвязьДокументов1С(ПараметрыЗаполненияСвязи);
	Для Каждого КлючИЗначениеСоотвествие Из ВыборкаПоСпискуИД Цикл
		Вложение = ВложенияЗаполнить.Получить(КлючИЗначениеСоотвествие.Ключ);
		Если Вложение = Неопределено Тогда
			//Нет обратного вложения для заполнения.
			Продолжить;
		КонецЕсли;
		Для Каждого ДокументНайден Из КлючИЗначениеСоотвествие.Значение Цикл
			Вложение.Документы1С.Добавить(ДокументНайден.Ссылка); 
			Вложение.Документ1СПроведен = Вложение.Документ1СПроведен Или ДокументНайден.Проведен;
		КонецЦикла;
	КонецЦикла;
КонецФункции

//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)--> 26 +
//&НаСервереБезКонтекста не было тут изначально, не могу поставить
Функция УдалитьПараметрыДокументаСБИС(СтруктураПараметровДокументаСБИС,ДокументСсылка,Ини,КаталогНастроек) Экспорт
	
	УдалитьПараметрыДокументаСБИСПарам(СтруктураПараметровДокументаСБИС,ДокументСсылка,Ини,КаталогНастроек,Неопределено);
	
КонецФункции
//<-- KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)

Функция УдалитьПараметрыДокументаСБИСПарам(СтруктураПараметровДокументаСБИС,ДокументСсылка,Ини,КаталогНастроек,ДополнительныеПараметры = Неопределено) Экспорт
	
	// удаляет свойства для документа 1С (при удалении сопоставления)	
	Для Каждого Свойство Из СтруктураПараметровДокументаСБИС Цикл
		//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)--> 27
		УдалитьСвойствоОбъекта(Свойство.Ключ,ДокументСсылка,КаталогНастроек,Ини.Конфигурация,ДополнительныеПараметры);
		//<-- KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)
	КонецЦикла;
	
КонецФункции

//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)--> 28  +
&НаСервере
Функция УдалитьСвойствоОбъекта(ИмяСвойства,ДокументСсылка,КаталогНастроек,ИниКонфигурация,ДопПараметры = Неопределено) Экспорт
    ОписаниеИмяСвойства = Новый Структура("Имя", ИмяСвойства);
	Если	ЗначениеЗаполнено(ДопПараметры)
		И	ДопПараметры.Свойство("Регламент") Тогда
		ОписаниеИмяСвойства.Вставить("Регламент", ДопПараметры.Регламент);
	КонецЕсли;
	ЗначениеСвойства = СбисПолучитьСвойствоОбъектаНаСервере(ОписаниеИмяСвойства);
	
	// удаляет значение параметра из регистра сведений	
	ИмяРегистраСвойствОбъектов = ПараметрыСоединения.ИмяРегистраСвойствОбъектов;
	НаборЗаписей = РегистрыСведений[ИмяРегистраСвойствОбъектов].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокументСсылка);
	НаборЗаписей.Отбор.Свойство.Установить(ЗначениеСвойства);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()>0 Тогда	
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		Попытка
			НоваяЗаписьНабора.Значение = "";
			НаборЗаписей.Записать();
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;
КонецФункции

// Не использовать! Старая функция для совместимости. Получает массив ссылок докуметов по ИД пакета СБИС.
&НаКлиенте
Функция ДокументыПоИдПакета(Ид, ИниКонфигурация, ДополнительныеПараметры = Неопределено) Экспорт
	ПараметрыЗаполненияСвязи = Новый Структура("ИдентификаторыПолучить, ИдАккаунта, ЗаполнитьСумму", Новый Массив, ЛокальныйКэш.Интеграция.ПолучитьИдТекущегоАккаунта(ЛокальныйКэш), Ложь);
	ПараметрыЗаполненияСвязи.ИдентификаторыПолучить.Добавить(Новый Структура("Ид", Ид));
	ВыборкаПоСпискуИД = СбисПрочитатьСвязьДокументов1С(ПараметрыЗаполненияСвязи);
	Результат = Новый Массив;
	СписокДокументовПоИд = ВыборкаПоСпискуИД.Получить(Ид);
	Если СписокДокументовПоИд = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	Для Каждого СтрокаВыборки Из СписокДокументовПоИд Цикл
		Результат.Добавить(СтрокаВыборки.Ссылка);
	КонецЦикла;
	Возврат Результат;
конецфункции

// Не использовать! Старая функция для совместимости. Получает массив ссылок докуметов по ИД пакета и вложения СБИС.
&НаКлиенте
Функция НайтиДокументы1СПоИдВложенияСБИС(Ид, ИдВложения,Ини,КаталогНастроек) Экспорт
	ПараметрыЗаполненияСвязи = Новый Структура("ИдентификаторыПолучить, ИдАккаунта, ЗаполнитьСумму", Новый Массив, ЛокальныйКэш.Интеграция.ПолучитьИдТекущегоАккаунта(ЛокальныйКэш), Ложь);
	ПараметрыЗаполненияСвязи.ИдентификаторыПолучить.Добавить(Новый Структура("Ид, ИдВложения", Ид, ИдВложения));
	ВыборкаПоСпискуИД		= СбисПрочитатьСвязьДокументов1С(ПараметрыЗаполненияСвязи);
	СписокДокументовПоИд	= ВыборкаПоСпискуИД.Получить(Ид + ИдВложения);
	Если СписокДокументовПоИд = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Результат = Новый Структура("Ссылки, Проведен", Новый Массив, Ложь);
	Для Каждого СтрокаВыборки Из СписокДокументовПоИд Цикл
		Результат.Ссылки.Добавить(СтрокаВыборки.Ссылка);
		Результат.Проведен = Результат.Проведен Или СтрокаВыборки.Проведен;
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Не использовать! Старая функция для совместимости. Получает Значение свойства по имени.
&НаКлиенте
Функция ПрочитатьПараметрыДокументаСБИС(ДокументСсылка, КаталогНастроек,ИмяСвойства,Ини) Экспорт
	Возврат СбисПрочитатьЗначениеСвойстваДокумента(Новый Структура("Имя, ДокументСсылка", ИмяСвойства, ДокументСсылка), ЛокальныйКэш);
КонецФункции

// Не использовать! Старая функция для совместимости. Получает Значение свойств по именам и ссылкам на документ 1С с учетом стенда.
&НаКлиенте
Функция ПрочитатьПараметрыДокументовСБИС(СписокСсылок,МассивСвойств,Конфигурация,ДополнительныеПараметры) Экспорт
	ПараметрыЗапросаСпискаСвойств = Новый Структура("СписокДокументов, Свойства, ПолныйСписок", СписокСсылок, Новый Массив, Истина);
	Для Каждого Свойство Из МассивСвойств Цикл
		ПараметрыЗапросаСпискаСвойств.Свойства.Добавить(Новый Структура("Имя", Свойство));
	КонецЦикла;
	СписокСвойств = СбисПрочитатьЗначенияСвойствДокументов(ПараметрыЗапросаСпискаСвойств, ЛокальныйКэш);
	Результат = Новый Массив;
	Для Каждого КлючИЗначениеСвойств Из СписокСвойств Цикл
		Результат.Добавить(Новый Структура("Документ1С, СтруктураСвойств", КлючИЗначениеСвойств.Ключ, КлючИЗначениеСвойств.Значение))
	КонецЦикла;	
	Возврат Результат;
КонецФункции

// Не использовать! Старая функция для совместимости. Получает Ид пакета по ссылке.
&НаКлиенте
Функция ПолучитьИдДокументаДопСвойства(СсылкаНаОбъект, ДопПараметры) Экспорт
	Возврат СбисПрочитатьЗначениеСвойстваДокумента(Новый Структура("Имя, ДокументСсылка", "ДокументСБИС_Ид", СсылкаНаОбъект), ЛокальныйКэш);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область include_core2_vo2_Статусы_Регистры_РаботаСПодключением

//Процедура для реестров СБИС. Добавляет в список пакетов найденные документы 1С, их статус и состояние.
//ПараметрыСпискаДокументов - Структура
//		ИдентификаторыПолучить - массив структур с полями Ид, ИдВложения, по которым проводится поиск.
//		ИдАккаунта - строка Идентификатор аккаунта, для дополнительного разреза поиска.
//		ЗаполнитьСумму - булево, признак необходимости извлечения реквизита "СуммаДокумента".
&НаКлиенте
Процедура ЗаполнитьСписокДокументовСБИССвязьюСсылок1С(ПараметрыСпискаДокументов, Кэш) Экспорт
	ПараметрыЗаполненияСвязи = Новый Структура("ИдентификаторыПолучить, ИдАккаунта, ЗаполнитьСумму", ПараметрыСпискаДокументов.ИдентификаторыПолучить, ПараметрыСпискаДокументов.ИдАккаунта, Ложь);
	Если  ПараметрыСпискаДокументов.Свойство("ЗаполнитьСумму") Тогда
		ПараметрыЗаполненияСвязи.ЗаполнитьСумму = ПараметрыСпискаДокументов.ЗаполнитьСумму;
	КонецЕсли;
	ВыборкаПоСпискуИД	= СбисПрочитатьСвязьДокументов1С(ПараметрыЗаполненияСвязи);
	МассивДокументов	= ПараметрыСпискаДокументов.СписокДокументовЗаполнить;	
	Для Каждого СтрокаСпискаЗаполнить Из МассивДокументов Цикл
		СоставПакетаОбработать = СтрокаСпискаЗаполнить.СоставПакета[0].Значение;
		Если	СоставПакетаОбработать.Свойство("Вложение")
			И	СоставПакетаОбработать.Вложение.Количество() Тогда
			ЗаполнитьСтрокуСпискаПоИдПакетаИВложения(СоставПакетаОбработать, СтрокаСпискаЗаполнить, ВыборкаПоСпискуИД, ПараметрыЗаполненияСвязи);
		Иначе
			ЗаполнитьСтрокуСпискаПоИдПакета(СоставПакетаОбработать, СтрокаСпискаЗаполнить, ВыборкаПоСпискуИД, ПараметрыЗаполненияСвязи);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

//Функция делает связь по ИД пакета + вложения.
&НаКлиенте
Процедура ЗаполнитьСтрокуСпискаПоИдПакетаИВложения(СоставПакетаОбработать, СтрокаСпискаЗаполнить, ВыборкаПоСпискуИД, ПараметрыЗаполненияСвязи)
	Для Каждого Вложение Из СоставПакетаОбработать.Вложение Цикл
		Если		Вложение.Свойство("Служебный")
			И	Не	Вложение.Служебный = "Нет" Тогда
			Продолжить;
		КонецЕсли;
			
		Вложение.Вставить("Документы1С", Новый СписокЗначений);
		СтрокаСпискаЗаполнить.Вставить("СуммаДокумента1С",	0);
		СтрокаСпискаЗаполнить.Вставить("Дельта",			0);
		
		МассивДокументовПоИд = ВыборкаПоСпискуИД.Получить(СтрокаСпискаЗаполнить.ИдСБИС + Вложение.Идентификатор);
		Если МассивДокументовПоИд = Неопределено Тогда
			Если Не СтрокаСпискаЗаполнить.Свойство("Проведен") Тогда
				СтрокаСпискаЗаполнить.Вставить("Проведен", -1);
			КонецЕсли;
			ЗаполнитьСтрокуСпискаПоИдПакета(СоставПакетаОбработать, СтрокаСпискаЗаполнить, ВыборкаПоСпискуИД, ПараметрыЗаполненияСвязи);
		Иначе	
			Для Каждого Элемент Из МассивДокументовПоИд Цикл
				СтрокаСпискаЗаполнить.Документы1С.Добавить(Элемент.Ссылка);
				Вложение.Документы1С.Добавить(Элемент.Ссылка);
			КонецЦикла;
			СтрокаСпискаЗаполнить.Вставить("Проведен", СбисИндексКартинкиПоДокументу1С(МассивДокументовПоИд[0]));
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры
	
//Функция делает связь по ИД пакета, если не найдено по ИД пакета + вложения.
&НаКлиенте
Процедура ЗаполнитьСтрокуСпискаПоИдПакета(СоставПакетаОбработать, СтрокаСпискаЗаполнить, ВыборкаПоСпискуИД, ПараметрыЗаполненияСвязи)
	МассивДокументовПоИд = ВыборкаПоСпискуИД.Получить(СтрокаСпискаЗаполнить.ИдСБИС) ;
	Если МассивДокументовПоИд = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаСпискаЗаполнить.Документы1С.Добавить(МассивДокументовПоИд[0].Ссылка);
	СтрокаСпискаЗаполнить.Вставить("Проведен", СбисИндексКартинкиПоДокументу1С(МассивДокументовПоИд[0]));
	Если ПараметрыЗаполненияСвязи.Свойство("ЗаполнитьСумму") Тогда
		Попытка
			СтрокаСпискаЗаполнить.Вставить("СуммаДокумента1С", МассивДокументовПоИд[0].Сумма);
			Дельта = Число(СтрокаСпискаЗаполнить.Сумма) - СтрокаСпискаЗаполнить.СуммаДокумента1С;
			СтрокаСпискаЗаполнить.Вставить("Дельта", ?(Дельта < 0, -Дельта, Дельта));
		Исключение
			//Старая логика, ошибка не обрабатывается.
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

//Обёртка для тонкого клиента.
&НаСервере
Функция ПрочитатьСвязьДокументов1СНаСервере(Знач ПараметрыЧтенияСвойств)
	Возврат ПрочитатьСвязьДокументов1СПоИдентификаторамСБИС(ПараметрыЧтенияСвойств);
КонецФункции
	
&НаСервере
Функция ПрочитатьСвязьДокументов1СПоИдентификаторамСБИС(ПараметрыЧтенияСвойств)
	Перем ИдАккаунтаДляПоиска;
	МассивИдентификаторов	= ПараметрыЧтенияСвойств.ИдентификаторыПолучить;
	РезультатВыборки		= Новый Соответствие;
	Если		МассивИдентификаторов = Неопределено
		Или Не	МассивИдентификаторов.Количество() Тогда
		Возврат РезультатВыборки;
	КонецЕсли;
	//Определение набора свойств
	ИмяРегистраСвойствОбъектов					= ПараметрыСоединения.ИмяРегистраСвойствОбъектов;
	ИмяПланаВидовХарактеристикСвойствОбъектов	= ПараметрыСоединения.ИмяПланаВидовХарактеристикСвойствОбъектов;
	
	МассивСтатусРегламент = ПараметрыСоединения.МассивСтатусРегламент;
	мСвойстваДокументСбисИдВложения	= Новый Массив;
	мСвойстваДокументСбисИд			= Новый Массив;
	
	Свойство_ДокументСБИС_Ид		= СбисПолучитьСвойствоОбъектаНаСервере(Новый Структура("Имя", "ДокументСБИС_Ид"));
	Свойство_ДокументСБИС_ИдВложения= СбисПолучитьСвойствоОбъектаНаСервере(Новый Структура("Имя", "ДокументСБИС_ИдВложения"));
	мСвойстваДокументСбисИдВложения.Добавить(Свойство_ДокументСБИС_ИдВложения);
	мСвойстваДокументСбисИд.Добавить		(Свойство_ДокументСБИС_Ид);

	Для Каждого Элемент Из МассивСтатусРегламент Цикл   
       	мСвойстваДокументСбисИдВложения.Добавить(СбисПолучитьСвойствоОбъектаНаСервере(Новый Структура("Регламент, Имя", Элемент, "ДокументСБИС_ИдВложения")));
		мСвойстваДокументСбисИд.Добавить		(СбисПолучитьСвойствоОбъектаНаСервере(Новый Структура("Регламент, Имя", Элемент, "ДокументСБИС_Ид")));
    КонецЦикла;

	ВремТабл = Новый ТаблицаЗначений;
	ВремТабл.Колонки.Добавить("ИдПакетаКлючПоиска",	Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(999)));//Ключ для поиска свойства с учетом аккаунта и без него
	ВремТабл.Колонки.Добавить("Ид",					Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(999)));
	ВремТабл.Колонки.Добавить("ИдВложения",			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(999)));
	Для Каждого Стр Из МассивИдентификаторов Цикл
		СтрТ = ВремТабл.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТ, Стр);
		СтрТ.ИдПакетаКлючПоиска = СтрТ.Ид;
	КонецЦикла;
	Если	ПараметрыЧтенияСвойств.Свойство("ИдАккаунта", ИдАккаунтаДляПоиска)
		И	ЗначениеЗаполнено(ИдАккаунтаДляПоиска) Тогда
		СписокИдПакетаУчтены = Новый Массив;
		//Для поиска вложений с учетом ИдАккаунта, дополнить ТЗ с ИД пакета записями с ИД аккаунта.
		Для Каждого Стр Из МассивИдентификаторов Цикл
			ИдПакетаДляПоиска = ИдПакетаСбис(Стр.Ид, ИдАккаунтаДляПоиска);
			Если Не СписокИдПакетаУчтены.Найти(ИдПакетаДляПоиска) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрТ = ВремТабл.Добавить();
			СтрТ.Ид = Стр.Ид;
			СтрТ.ИдПакетаКлючПоиска = ИдПакетаДляПоиска;
			СписокИдПакетаУчтены.Добавить(ИдПакетаДляПоиска);
		КонецЦикла;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст  = 
	"ВЫБРАТЬ
    |	ТЗ.ИдПакетаКлючПоиска КАК ИдПакетаКлючПоиска,
    |	ТЗ.Ид КАК Ид
    |ПОМЕСТИТЬ ВТ_ИдПакетов
    |ИЗ
    |	&ТЗ КАК ТЗ
    |ГДЕ
    |	НЕ ТЗ.ИдПакетаКлючПоиска = """"
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ТЗ.ИдВложения КАК ИдВложения
    |ПОМЕСТИТЬ ВТ_ИдВложения
    |ИЗ
    |	&ТЗ КАК ТЗ
    |ГДЕ
    |	НЕ ТЗ.ИдВложения = """"
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ВТ_ИдПакетов.Ид КАК Ид,
    |	ЗначенияСвойствОбъектов.Объект КАК Док1С
    |ПОМЕСТИТЬ ВТДокументыПакета
    |ИЗ
    |	ВТ_ИдПакетов КАК ВТ_ИдПакетов
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистраСвойствОбъектов + " КАК ЗначенияСвойствОбъектов
    |		ПО ВТ_ИдПакетов.ИдПакетаКлючПоиска = ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК СТРОКА(99))
    |			И (ЗначенияСвойствОбъектов.Свойство.Ссылка В (&мСвойстваДокументСбисИд))
    |
    |СГРУППИРОВАТЬ ПО
    |	ВТ_ИдПакетов.Ид,
    |	ЗначенияСвойствОбъектов.Объект
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ВТ_ИдВложения.ИдВложения КАК ИдВложения,
    |	ЗначенияСвойствОбъектов.Объект КАК Док1С
    |ПОМЕСТИТЬ ВТДокументыВложений
    |ИЗ
    |	ВТ_ИдВложения КАК ВТ_ИдВложения
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистраСвойствОбъектов + " КАК ЗначенияСвойствОбъектов
    |		ПО ВТ_ИдВложения.ИдВложения = ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК СТРОКА(99))
    |			И (ЗначенияСвойствОбъектов.Свойство.Ссылка В (&мСвойстваДокументСбисИдВложения))
    |
    |СГРУППИРОВАТЬ ПО
    |	ВТ_ИдВложения.ИдВложения,
    |	ЗначенияСвойствОбъектов.Объект
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ВТДокументыПакета.Ид КАК Ид,
    |	ЕСТЬNULL(ВТДокументыВложений.ИдВложения, """") КАК ИдВложения,
    |	ВТДокументыПакета.Док1С КАК Док1С
	|ИЗ
    |	ВТДокументыПакета КАК ВТДокументыПакета
    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыВложений КАК ВТДокументыВложений
    |		ПО ВТДокументыПакета.Док1С = ВТДокументыВложений.Док1С";

	Запрос.УстановитьПараметр("ТЗ",								ВремТабл);
	Запрос.УстановитьПараметр("мСвойстваДокументСбисИд",		мСвойстваДокументСбисИд);
	Запрос.УстановитьПараметр("мСвойстваДокументСбисИдВложения",мСвойстваДокументСбисИдВложения);

	ВыборкаЗаписей = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("Ид") Цикл
		ВыборкаКлючИд = ВыборкаЗаписей.Ид;
		Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("ИдВложения") Цикл
			СписокДок = Новый Массив;
			КлючДляВыборки = ВыборкаКлючИд + ВыборкаЗаписей.ИдВложения;
			Пока ВыборкаЗаписей.Следующий() Цикл
				//Выбираем пометки удаления и проведения тут. Иначе - вешается запрос.
				СтрокаДобавить = Новый Структура("Ссылка, Проведен, ПометкаУдаления", ВыборкаЗаписей.Док1С);
				Попытка
					СтрокаДобавить.Проведен			= ВыборкаЗаписей.Док1С.Проведен;
				Исключение
					СтрокаДобавить.Проведен			= Ложь;
				КонецПопытки;
				Попытка
					СтрокаДобавить.ПометкаУдаления	= ВыборкаЗаписей.Док1С.ПометкаУдаления;
				Исключение
					СтрокаДобавить.ПометкаУдаления	= Ложь;
				КонецПопытки;
				//Если требуется сумма, то на сервере получить сумму от реквизита. Если есть.
		        Если ПараметрыЧтенияСвойств.ЗаполнитьСумму Тогда
		            СтрокаДобавить.Вставить("Сумма", 0);
					Попытка
						СтрокаДобавить.Сумма = ВыборкаЗаписей.Док1С.СуммаДокумента;
					Исключение
					КонецПопытки;
				КонецЕсли;
				СписокДок.Добавить(СтрокаДобавить);
			КонецЦикла;
			РезультатВыборки.Вставить(КлючДляВыборки, СписокДок);
		КонецЦикла;
	КонецЦикла;
	Возврат РезультатВыборки;	
КонецФункции

//Получает значения указанных свойства по документам на сервере. Возвращает соответствие, где ключ - ссылка на документ, значение - массив структур со Свойствами и значениями
&НаСервере
Функция ПрочитатьСвойстваДокументовПоСсылкамНаСервере(ФильтрВходящий)
	
	СписокДокументов 	= ФильтрВходящий.СписокДокументов;
	СписокСвойств		= ФильтрВходящий.СписокСвойств;
	
	Запрос = Новый Запрос;
	Запрос.Текст  = "ВЫБРАТЬ
	                |	ЗначенияСвойствОбъектов.Объект КАК Документ1С,
	                |	ЗначенияСвойствОбъектов.Свойство КАК Свойство,
	                |	ЗначенияСвойствОбъектов.Свойство.Наименование КАК Наименование,
	                |	ЗначенияСвойствОбъектов.Значение КАК Значение
	                |ИЗ
	                |	РегистрСведений." + ПараметрыСоединения.ИмяРегистраСвойствОбъектов + " КАК ЗначенияСвойствОбъектов
	                |ГДЕ
	                |	ЗначенияСвойствОбъектов.Объект В(&Документ1С)
	                |	И ЗначенияСвойствОбъектов.Свойство В(&СписокСвойств)
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Документ1С";
	
	Запрос.УстановитьПараметр("Документ1С",		СписокДокументов);
	Запрос.УстановитьПараметр("СписокСвойств",	СписокСвойств);
	Результат = Новый Соответствие;
	ВыборкаЗаписей = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("Документ1С") Цикл
		СписокСвойств = Новый Массив;
		Результат.Вставить(ВыборкаЗаписей.Документ1С, СписокСвойств);
		Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("Свойство") Цикл
			СписокСвойств.Добавить(Новый Структура("Свойство, Наименование, Значение", ВыборкаЗаписей.Свойство, ВыборкаЗаписей.Наименование, ВыборкаЗаписей.Значение));
		КонецЦикла;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдПакетаСбис(ИдПакетаСБИС, ИдАккаунта = "")
	Если Не ЗначениеЗаполнено(ИдАккаунта) Тогда
		Возврат ИдПакетаСБИС;
	КонецЕсли;
	Возврат ИдПакетаСБИС + "_" + ИдАккаунта; 
		
КонецФункции

// Функция возвращает индекс картинки по статусу документа 1С	
&НаКлиентеНаСервереБезКонтекста
Функция СбисИндексКартинкиПоДокументу1С(Документ1С)
	Попытка
		Если Документ1С.Проведен Тогда 
			Возврат 0;
		ИначеЕсли Документ1С.ПометкаУдаления Тогда 
			Возврат 2;
		Иначе
			Возврат 1;
		КонецЕсли;
	Исключение
		Возврат 0;
	КонецПопытки;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
функция СбисПриоритетСтатуса(СтатусЭД)
	// Функция возвращает индекс картинки по статусу электронного документа
	Если Найти(нрег(СтатусЭД), "выгружен")=1 или Найти(нрег(СтатусЭД), "загружен на сервер")=1 или Найти(нрег(СтатусЭД), "документ редактируется")=1 или Найти(нрег(СтатусЭД), "есть документ")=1 Тогда     // Выгружен или загружен на сервер
		Возврат 0;
	ИначеЕсли Найти(нрег(СтатусЭД), "отослано приглашение")=1 Тогда      // Отправлено приглашение
		Возврат 1;
	ИначеЕсли Найти(нрег(СтатусЭД), "отправлен")=1 Тогда     // Отправлен
		Возврат 2;
	ИначеЕсли Найти(нрег(СтатусЭД), "ошибка")>0 или Найти(нрег(СтатусЭД), "проблемы при доставке")>0 Тогда     // Ошибки при отправке или при доставке
		Возврат 3;
	ИначеЕсли Найти(нрег(СтатусЭД),"на утверждении")=1 или Найти(нрег(СтатусЭД),"доставлен")=1 Тогда                        // Доставлен
		Возврат 4;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено с проблемами")=1 Тогда                        // Отклонен
		Возврат 5;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено успешно")=1 Тогда                        // Утвержден
		Возврат 6;
	ИначеЕсли Найти(нрег(СтатусЭД), "удален")=1 или Найти(нрег(СтатусЭД), "аннулирован")=1 Тогда                        // Удален контрагентом
		Возврат 7;
	ИначеЕсли Найти(нрег(СтатусЭД), "отозван мной")=1 Тогда                        // Удален мной
		Возврат 7;
	Иначе
		Возврат -1;
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Разобрать_ДокументСБИС_Ид(ИдПакета)
	ИдПакета = СтрЗаменить(ИдПакета, "_", Символы.ПС);
	ИдДокумента = СтрПолучитьСтроку(ИдПакета, 1);
	Если СтрЧислоСтрок(ИдПакета) < 2 Тогда
		ИдАккаунта = "";	
	Иначе
	    ИдАккаунта = СтрПолучитьСтроку(ИдПакета, 2);
	КонецЕсли;	
	Возврат Новый Структура("ИдДокумента, ИдАккаунта", ИдДокумента, ИдАккаунта);
КонецФункции

#КонецОбласти

#Область include_core2_ТребуетРефактор_Статусы_Регистры_РаботаСПодключением

//Устанавливает значение параметра в регистре сведений	
&НаСервере
Функция СбисСвойствоУстановлено(СвойствоПараметр, СвойствоЗначение, ДокументСсылка, НоваяРедакция, ДополнительныеПараметры, Отказ)
	Результат = Истина;
	ИмяРегистраСвойствОбъектов = ДополнительныеПараметры.ИмяРегистраСвойствОбъектов;
	НаборЗаписей = РегистрыСведений[ИмяРегистраСвойствОбъектов].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокументСсылка);
	НаборЗаписей.Отбор.Свойство.Установить(СвойствоПараметр);
	НаборЗаписей.Прочитать();
	
	ЗаписатьНабор = Истина;
	Если Не НаборЗаписей.Количество() Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.Объект = ДокументСсылка;
		//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)--> 24 +
		НоваяЗаписьНабора.Свойство = СвойствоПараметр;
		//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)
	Иначе
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);	
		//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)--> 25 +
		// << alo СтатусГос
		Если СвойствоПараметр.Наименование = СбисПолучитьКлючСвойстваДокументаНаСервере(Новый Структура("Имя", "ДокументСБИС_Статус")) Тогда	
			//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)
			СтароеЗначениеСвойства = НоваяЗаписьНабора.Значение;
			ЗаписатьНабор = (сбисПриоритетСтатуса(СвойствоЗначение) > сбисПриоритетСтатуса(СтароеЗначениеСвойства)) Или НоваяРедакция;
		ИначеЕсли СвойствоПараметр.Наименование = СбисПолучитьКлючСвойстваДокументаНаСервере(Новый Структура("Имя", "ДокументСБИС_СтатусГос")) Тогда	
			ЗаписатьНабор = СвойствоЗначение <> НоваяЗаписьНабора.Значение Или НоваяРедакция;	// alo СтатусГос >>
		КонецЕсли;
	КонецЕсли;
	Если ЗаписатьНабор Тогда
		Попытка
			НоваяЗаписьНабора.Значение = СвойствоЗначение;
			НаборЗаписей.Записать();
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code,message,details", 746, "Ошибка на сервере", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	Возврат ЗаписатьНабор;
КонецФункции

//Возвращает ссылку на свойство плана видов характеристик
&НаСервереБезКонтекста
Функция СвойствоПланаВидовХарактеристик(ПараметрыЗапроса, Отказ)
	СбисИмяПлана = СтрПолучитьСтроку(СтрЗаменить(ПараметрыЗапроса.Тип, ".", Символы.ПС), 2);
	Возврат ПланыВидовХарактеристик[СбисИмяПлана].НайтиПоНаименованию(ПараметрыЗапроса.Ключ, Истина).Ссылка;
КонецФункции

&НаСервереБезКонтекста
Функция Документы1СПоПараметрам(ПараметрыЗапроса, ДополнительныеПараметры, Отказ) Экспорт
	Перем СбисПолучитьИмяМетаданных;
	//Сформируем временную таблицу для запроса 
	Если Не ДополнительныеПараметры.Свойство("ПолучитьИмяМетаданных", СбисПолучитьИмяМетаданных) Тогда
		СбисПолучитьИмяМетаданных = Ложь;
	КонецЕсли;
	ТаблицаСвойства = Новый ТаблицаЗначений;
	ТаблицаСвойства.Колонки.Добавить("Свойство",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка." + ПараметрыЗапроса.ИмяПланаВидовХарактеристикСвойствОбъектов));
	ТаблицаСвойства.Колонки.Добавить("Ид",		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	Для Каждого ЭлементИд Из ПараметрыЗапроса.СписокИд Цикл
		НоваяСтрока = ТаблицаСвойства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементИд);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст  = "ВЫБРАТЬ
	                |	ТаблицаСвойства.Ид КАК Ид,
	                |	ТаблицаСвойства.Свойство КАК Свойство
	                |ПОМЕСТИТЬ ИсточникДанных
	                |ИЗ
	                |	&ТаблицаСвойства КАК ТаблицаСвойства
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ИсточникДанных.Ид КАК ИдентификаторПакета,
	                |	ЗначенияСвойствОбъектов.Объект КАК Ссылка
	                |ИЗ
	                |	ИсточникДанных КАК ИсточникДанных
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ПараметрыЗапроса.ИмяРегистраСвойствОбъектов + " КАК ЗначенияСвойствОбъектов
	                |		ПО ИсточникДанных.Свойство = ЗначенияСвойствОбъектов.Свойство.Ссылка
	                |			И ИсточникДанных.Ид = ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК СТРОКА(99))
	                |ГДЕ
	                |	НЕ ЗначенияСвойствОбъектов.Объект ЕСТЬ NULL
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ИсточникДанных.Ид,
	                |	ЗначенияСвойствОбъектов.Объект
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ИдентификаторПакета";
	Запрос.УстановитьПараметр("ТаблицаСвойства", ТаблицаСвойства);

	Результат = Новый Соответствие;
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 603, "Ошибка выполнения запроса списка документов", ОписаниеОшибки());
	КонецПопытки;
	ВыборкаПоИд = РезультатЗапроса.Выбрать();
	
	МассивДобавить = Неопределено;
	Пока ВыборкаПоИд.Следующий() Цикл
		КлючРезультат = ВыборкаПоИд.ИдентификаторПакета;
		ЗначениеРезультат = Результат.Получить(КлючРезультат);
		Если ЗначениеРезультат = Неопределено Тогда
			МассивДобавить = Новый Массив;
			Результат.Вставить(КлючРезультат, Новый Структура("Документы1С", МассивДобавить));
		Иначе
			МассивДобавить = ЗначениеРезультат.Документы1С;
		КонецЕсли;                                                   
		СтрокаДобавить = Новый Структура("Ссылка", ВыборкаПоИд.Ссылка);
		Если СбисПолучитьИмяМетаданных Тогда
			СтрокаДобавить.Вставить("Метаданные_Имя", ВыборкаПоИд.Ссылка.Метаданные().Имя);
	КонецЕсли;
		МассивДобавить.Добавить(СтрокаДобавить);
	КонецЦикла;	
	Возврат Результат;
конецфункции

&НаСервере
Функция СбисЗаписатьИзмененияПоСвойствам(ПараметрыЗапроса, ДополнительныеПараметры, Отказ)
	КэшНаборовЗаписей = Новый Соответствие;
	РезультатОбработки = Новый Соответствие;
	Для Каждого КлючИЗначение Из ПараметрыЗапроса.Список Цикл
		ДанныеДляОбработки = КлючИЗначение.Значение;
		СписокОбработанныхДокументов = Новый Массив;
		Для Каждого СсылкаНаДокумент1С Из ДанныеДляОбработки.Документы1С Цикл
			ОшибкаУстановкиСвойства = Ложь;
			// << alo СтатусГос Список
			Если ДанныеДляОбработки.Свойство("СостояниеГос") Тогда
				РезультатДобавления = СбисСвойствоУстановлено(ДанныеДляОбработки.ДокументСБИС_СтатусГос, ДанныеДляОбработки.СостояниеГос, СсылкаНаДокумент1С.Ссылка, ДанныеДляОбработки.НоваяРедакция, ДополнительныеПараметры, Отказ);
				Если Отказ Тогда
					СтрокаДобавить = Новый Структура("Ссылка, Отказ, Ошибка", СсылкаНаДокумент1С.Ссылка, Отказ, РезультатДобавления);
					СписокОбработанныхДокументов.Добавить(СтрокаДобавить);
				КонецЕсли;
			КонецЕсли;	// alo СтатусГос Список >>
			Если ДанныеДляОбработки.Свойство("ТекущийЭтап") Тогда
				РезультатДобавления = СбисСвойствоУстановлено(ДанныеДляОбработки.ДокументСБИС_ТекущийЭтап, ДанныеДляОбработки.ТекущийЭтап, СсылкаНаДокумент1С.Ссылка, ДанныеДляОбработки.НоваяРедакция, ДополнительныеПараметры, Отказ);
				Если Отказ Тогда
					СтрокаДобавить = Новый Структура("Ссылка, Отказ, Ошибка", СсылкаНаДокумент1С.Ссылка, Отказ, РезультатДобавления);
					СписокОбработанныхДокументов.Добавить(СтрокаДобавить);
				КонецЕсли;
			КонецЕсли; 
			Если ДанныеДляОбработки.Свойство("Расхождение") Тогда
				РезультатДобавления = СбисСвойствоУстановлено(ДанныеДляОбработки.ДокументСБИС_Расхождение, ДанныеДляОбработки.Расхождение, СсылкаНаДокумент1С.Ссылка, ДанныеДляОбработки.НоваяРедакция, ДополнительныеПараметры, Отказ);
				Если Отказ Тогда
					СтрокаДобавить = Новый Структура("Ссылка, Отказ, Ошибка", СсылкаНаДокумент1С.Ссылка, Отказ, РезультатДобавления);
					СписокОбработанныхДокументов.Добавить(СтрокаДобавить);
				КонецЕсли;
			КонецЕсли;
			РезультатДобавления = СбисСвойствоУстановлено(ДанныеДляОбработки.ДокументСБИС_Статус, ДанныеДляОбработки.Состояние.Название, СсылкаНаДокумент1С.Ссылка, ДанныеДляОбработки.НоваяРедакция, ДополнительныеПараметры, ОшибкаУстановкиСвойства);
			СтрокаДобавить = Новый Структура("Ссылка, Отказ", СсылкаНаДокумент1С.Ссылка, ОшибкаУстановкиСвойства);
			Если ОшибкаУстановкиСвойства Тогда
				СтрокаДобавить.Вставить("Ошибка", РезультатДобавления);
				СписокОбработанныхДокументов.Добавить(СтрокаДобавить);
			ИначеЕсли РезультатДобавления Тогда
				СписокОбработанныхДокументов.Добавить(СтрокаДобавить);
			КонецЕсли;
			ИзменитьРеквизитыДокумента1С(СсылкаНаДокумент1С.Ссылка, ДанныеДляОбработки, ДополнительныеПараметры.Ини);
		КонецЦикла;
		РезультатОбработки.Вставить(КлючИЗначение.Ключ, СписокОбработанныхДокументов);
	КонецЦикла;
	Для Каждого КлючИЗначение Из ПараметрыЗапроса.Контрагенты Цикл
		Контрагент = НайтиКонтрагентаИзДокументаСБИС(ДополнительныеПараметры.Ини.Конфигурация, КлючИЗначение.Значение);
		Если Контрагент = Ложь Тогда
			Продолжить;
		КонецЕсли;
		сбисЗаполнитьСпособДоставкиКонтрагента(Контрагент, ДополнительныеПараметры.Ини.Конфигурация);	
	КонецЦикла;
	Возврат РезультатОбработки;
КонецФункции

&НаСервереБезКонтекста
Процедура ИзменитьРеквизитыДокумента1С(ДокСсылка,СоставПакета,Ини) экспорт
	ИмяДокумента = ДокСсылка.Метаданные().Имя;
	// в фактуре проставляем дату и способ выставления
	Если Ини.Свойство(ИмяДокумента) и Ини[ИмяДокумента].Свойство("мФайл") Тогда
		Попытка
			Если СоставПакета.Свойство("Событие") и СоставПакета.Событие[0].Название = "Извещение о получении" Тогда
				Событие=СоставПакета.Событие[0];
				Для Каждого Элемент Из Ини[ИмяДокумента].мФайл Цикл
					Если Элемент.Значение.Свойство("ЗаполнятьДатуСпособВыставления") и Элемент.Значение.ЗаполнятьДатуСпособВыставления.Значение ="'Истина'" Тогда
						ИмяРеквизитаДатыВыставления = Сред(Элемент.Значение.ДатаВыставления.Значение, Найти(Элемент.Значение.ДатаВыставления.Значение, ".")+1);
						ИмяРеквизитаСпособаВыставления = Сред(Элемент.Значение.СпособВыставления.Значение, Найти(Элемент.Значение.СпособВыставления.Значение, ".")+1);
						ЗначениеСпособаВыставления = Элемент.Значение.СпособВыставления.Вычислить;
						ДокОбъект = ДокСсылка.ПолучитьОбъект();
						ДокОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина); // обязательно требуется для состоянияЭД
						Если ТипЗнч(Событие.ДатаВремяДокумента) = Тип("Дата") Тогда
							ДокОбъект[ИмяРеквизитаДатыВыставления] = Событие.ДатаВремяДокумента;
						Иначе
							ДокОбъект[ИмяРеквизитаДатыВыставления] = ДокОбъект.Дата;
						КонецЕсли;
						ДокОбъект[ИмяРеквизитаСпособаВыставления] = ЗначениеСпособаВыставления;
						ДокОбъект.Записать();
					КонецЕсли;
					Прервать;
				КонецЦикла;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСпособОбменаКонтрагента(СоставПакета,Ини,КэшПоКонтрагентам) экспорт
	Если Ини.Конфигурация.Свойство("ЗаполнятьСпособОбменаКонтрагента") и Ини.Конфигурация.ЗаполнятьСпособОбменаКонтрагента.Значение = "'Истина'" и
		СоставПакета.Свойство("Событие") и СоставПакета.Событие[0].Свойство("Название") и СоставПакета.Событие[0].Название = "Извещение о получении" Тогда
		ИННКПП = ?(СоставПакета.Контрагент.Свойство("СвЮЛ"),СоставПакета.Контрагент.СвЮЛ.ИНН+"_"+СоставПакета.Контрагент.СвЮЛ.КПП, СоставПакета.Контрагент.СвФЛ.ИНН);
		Если не КэшПоКонтрагентам.Свойство("к"+ИННКПП) Тогда
			КэшПоКонтрагентам.Вставить("к"+ИННКПП);
			Контрагент = НайтиКонтрагентаИзДокументаСБИС(Ини.Конфигурация, СоставПакета.Контрагент);
			Если Контрагент<>Ложь Тогда
				сбисЗаполнитьСпособДоставкиКонтрагента(Контрагент,Ини.Конфигурация);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Добавляет свойства для документа 1С (при сопоставлении и загрузке документов)	
&НаСервере
Функция ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам,ИниКонфигурация,КаталогНастроек) Экспорт
	Для Каждого Элемент Из ДанныеПоСтатусам Цикл
		ДопПараметрыЗаписи = Новый Структура("Регламент, ИдАккаунта", "");
		ЗаполнитьЗначенияСвойств(ДопПараметрыЗаписи, Элемент);
		//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)--> 20 +
		ЗаписатьПараметрыДокументаСБИС(Элемент.СтруктураСвойств,Элемент.Документ1С, ИниКонфигурация, КаталогНастроек, ДопПараметрыЗаписи);
		//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)
	КонецЦикла;
КонецФункции

&НаСервере
Функция ЗаписатьПараметрыДокументаСБИС(СтруктураПараметровДокументаСБИС,ДокументСсылка,ИниКонфигурация,КаталогНастроек,ДополнительныеПараметры=Неопределено) Экспорт
	// добавляет свойства для документа 1С (при сопоставлении и загрузке документов)	
	Для Каждого Свойство Из СтруктураПараметровДокументаСБИС Цикл
		//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)--> 21 + 
		ЗначениеЗаписать = Свойство.Значение;
		Если	Не	ПараметрыСоединения.СвойстваВРазрезеАккаунта.НайтиПоЗначению(НРег(Свойство.Ключ)) = Неопределено
			И		ЗначениеЗаполнено(ЗначениеЗаписать)
			И	Не	ДополнительныеПараметры = Неопределено
			И		ДополнительныеПараметры.Свойство("ИдАккаунта")
			И	Не	ДополнительныеПараметры.ИдАккаунта = Неопределено Тогда
			ЗначениеЗаписать = ЗначениеЗаписать + "_" + ДополнительныеПараметры.ИдАккаунта;
		КонецЕсли;

		ДобавитьСвойствоОбъекта(Свойство.Ключ, ЗначениеЗаписать, ДокументСсылка, КаталогНастроек, ИниКонфигурация, Истина, ДополнительныеПараметры);
		//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)
	КонецЦикла;
КонецФункции

&НаСервере
Функция ДобавитьСвойствоОбъекта(ИмяСвойства,ЗначениеСвойстваВх,ДокументСсылка,КаталогНастроек,ИниКонфигурация,НоваяРедакция=Ложь,ДополнительныеПараметры=Неопределено) Экспорт
	
	ПараметрыСвойстваОбъекта = Новый Структура("Имя", ИмяСвойства); 
	Если	ЗначениеЗаполнено(ДополнительныеПараметры)
		И	ДополнительныеПараметры.Свойство("Регламент") Тогда
		ПараметрыСвойстваОбъекта.Вставить("Регламент", ДополнительныеПараметры.Регламент);
	КонецЕсли;
	ПолноеИмяСвойства	= СбисПолучитьКлючСвойстваДокументаНаСервере(ПараметрыСвойстваОбъекта);
	СвойствоСсылка		= СбисПолучитьСвойствоОбъектаНаСервере(ПараметрыСвойстваОбъекта);
	
	// устанавливает значение параметра в регистре сведений	
	ОбновлятьЗначение = Истина;
	ИмяРегистраСвойствОбъектов = ПараметрыСоединения.ИмяРегистраСвойствОбъектов;
	НаборЗаписей = РегистрыСведений[ИмяРегистраСвойствОбъектов].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокументСсылка);
	//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)-->  23 +
	НаборЗаписей.Отбор.Свойство.Установить(СвойствоСсылка);
	//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)
	НаборЗаписей.Прочитать();
	
	Если	ТипЗнч(ЗначениеСвойстваВх) = Тип("Структура")
		Или	ТипЗнч(ЗначениеСвойстваВх) = Тип("Массив") Тогда
		ЗначениеСвойства = МодульОбъектаСервер().ПреобразоватьЗначениеВJSON_НаСервере(ЗначениеСвойстваВх);
	Иначе
		ЗначениеСвойства = ЗначениеСвойстваВх;
	КонецЕсли;
	Если НаборЗаписей.Количество()=0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.Объект = ДокументСсылка;
		//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)--> 24 +
		НоваяЗаписьНабора.Свойство = СвойствоСсылка;
		//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)
	Иначе
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);	
		//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)--> 25 +
		Если Найти(ПолноеИмяСвойства, СбисПолучитьКлючСвойстваДокументаНаСервере(Новый Структура("Имя", "ДокументСБИС_Статус"))) > 0 Тогда
			//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)
			СтароеЗначениеСвойства = НоваяЗаписьНабора.Значение;
			ОбновлятьЗначение = (сбисПриоритетСтатуса(ЗначениеСвойства) > сбисПриоритетСтатуса(СтароеЗначениеСвойства)) Или НоваяРедакция;
		КонецЕсли;
	КонецЕсли;
	Если ОбновлятьЗначение Тогда
		Попытка
			НоваяЗаписьНабора.Значение = ЗначениеСвойства;
			НаборЗаписей.Записать();
						
			//// ▼ ayan#bitrix1125_01#УТ2021 Проставлять у Контрагента флажок "Настроен ЭДО СБИС" = да и отправлять в УТАП Кириллов П.С.  2022.09.01 ▼ Начало
			//Если Найти(ПолноеИмяСвойства, "ДокументСБИС_Статус") > 0 И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			//	аян_ЗарегистрироватьКонтрагентаНастроенЭДО(ДокументСсылка, ЗначениеСвойства);
			//КонецЕсли;				
			//// ▲ ayan#bitrix1125_01#УТ2021 Проставлять у Контрагента флажок "Настроен ЭДО СБИС" = да и отправлять в УТАП Кириллов П.С.  2022.09.01 ▲ Конец
			 
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	возврат ОбновлятьЗначение; // alo
КонецФункции

Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	// преобразует массив структур в таблицу значений	
	Результат = Новый ТаблицаЗначений;
	Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
		Возврат Результат;
	Иначе 
		Образец = МассивСтруктур[0];
		Для Каждого  Стр из Образец Цикл
			Результат.Колонки.Добавить(Стр.Ключ );
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из МассивСтруктур Цикл
		СтрТ = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТ, Стр);		
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Функция ищет организацию или контрагента в базе 1С по ИНН/КПП
&НаСервереБезКонтекста
Функция НайтиУчастникаВСправочнике(оУчастник, ТекстЗапроса, ТолькоПоИНН = Ложь) Экспорт
	ЮлОрг   = оУчастник.Свойство("СвЮЛ");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ?(ЮлОрг, оУчастник.СвЮЛ.ИНН, оУчастник.СвФЛ.ИНН));
	
	Если ЮлОрг и НЕ ТолькоПоИНН Тогда
		Запрос.УстановитьПараметр("КПП",оУчастник.СвЮЛ.КПП);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И Участник.КПП=&КПП","");
	КонецЕсли;
	
	Если оУчастник.Свойство("Подразделение") и оУчастник.Подразделение.Свойство("Идентификатор") Тогда
		Запрос.УстановитьПараметр("КодФилиала",оУчастник.Подразделение.Идентификатор);
	Иначе
		Запрос.УстановитьПараметр("КодФилиала","");
	КонецЕсли;
	
	Если оУчастник.Свойство("GLN") Тогда
		Запрос.УстановитьПараметр("GLN",оУчастник.GLN);
	Иначе
		Запрос.УстановитьПараметр("GLN","");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		Возврат РезультатЗапроса.Ссылка;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции	

// Функция ищет контрагента в базе 1С по данным участника в универсальном формате
&НаСервереБезКонтекста
Функция НайтиКонтрагентаИзДокументаСБИС(Ини, оУчастник) Экспорт
	Если Ини.Свойство("ЗапросКонтрагента") Тогда
		ТекстЗапроса = СтрЗаменить(Ини.ЗапросКонтрагента.Значение,"'","");
	Иначе
		ТекстЗапроса="ВЫБРАТЬ
		|Участник.Ссылка
		|ИЗ
		|"+СтрЗаменить(Ини.Контрагенты.Значение,"'","")+" КАК Участник
		|ГДЕ НЕ Участник.ПометкаУдаления И Участник."+сбисСообщитьИмяРеквизита(СтрЗаменить(Ини.Контрагенты_ИНН.Значение,"'",""))+" =&ИНН
		|И Участник."+сбисСообщитьИмяРеквизита(СтрЗаменить(Ини.Контрагенты_КПП.Значение,"'","")) +"=&КПП";
	КонецЕсли;

	Возврат НайтиУчастникаВСправочнике(оУчастник, ТекстЗапроса);
КонецФункции

// Функция возвращает название реквизита для значений из файлов настроек (например, для [Документ].Контрагент)	
&НаСервереБезКонтекста
Функция сбисСообщитьИмяРеквизита(ЗначениеРеквизита)Экспорт
	Возврат Сред(ЗначениеРеквизита,Найти(ЗначениеРеквизита,".")+1);	
КонецФункции

// устанавливает значение параметра в регистре сведений	
&НаСервере
Функция сбисЗаполнитьСпособДоставкиКонтрагента(Контрагент, ИниКонфигурация) Экспорт
	Свойство = ПланыВидовХарактеристик[ПараметрыСоединения.ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию("СБИС_СпособДоставки").Ссылка;
	Если ЗначениеЗаполнено(Свойство) Тогда
		ИмяРегистраСвойствОбъектов = ПараметрыСоединения.ИмяРегистраСвойствОбъектов;
		НаборЗаписей = РегистрыСведений[ИмяРегистраСвойствОбъектов].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Контрагент);
		НаборЗаписей.Отбор.Свойство.Установить(Свойство);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Добавить();
			НоваяЗаписьНабора.Объект = Контрагент;
			НоваяЗаписьНабора.Свойство = Свойство;
			СправочникСвойствОбъектов = ПараметрыСоединения.СправочникСвойствОбъектов;
			Выборка = Справочники[СправочникСвойствОбъектов].Выбрать(,Свойство,Новый Структура("Наименование", "Бумага, хочет ЭДО"));
			Если Выборка.Следующий() Тогда
				Попытка
					НоваяЗаписьНабора.Значение = Выборка.Ссылка;
					НаборЗаписей.Записать();
				Исключение
					Ошибка = ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция РазбитьСтрокуВМассив(сбисСтрока, сбисРазделитель=".")
	Результат = Новый Массив();	
	МногоуровневаяСтрока = СтрЗаменить(сбисСтрока, сбисРазделитель, Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(МногоуровневаяСтрока) Цикл 
		Результат.Добавить(СокрЛП(СтрПолучитьСтроку(МногоуровневаяСтрока, НомерСтроки)));
	КонецЦикла;
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Статусы_Регистры_СвойстваОбъекта

//Функция получает свойство объекта с учетом кода сервиса и статуса.
&НаКлиенте
Функция СбисПолучитьСвойствоОбъектаНаКлиенте(ОписаниеСвойства, Кэш)
	КлючСвойства = СбисПолучитьКлючСвойстваДокументаНаКлиенте(ОписаниеСвойства);
	СсылкаНаСвойство = ПараметрыСоединения.КэшСвойствОбъектов.Получить(КлючСвойства);
	Если СсылкаНаСвойство = Неопределено Тогда
		Возврат ИзвлечьСвойствоПоОписаниюНаСервере(КлючСвойства);
	КонецЕсли;
	Возврат СсылкаНаСвойство;
КонецФункции

//Функция возвращает ключ свойства с учетом регамлента и установленного кода сервиса на клиенте
&НаКлиенте
Функция СбисПолучитьКлючСвойстваДокументаНаКлиенте(ОписаниеСвойства)
	Перем СбисРегламент;
	КлючСвойства = ОписаниеСвойства.Имя;
	Если Не ПараметрыСоединения.СвойстваВРазрезеКодаСервиса.НайтиПоЗначению(НРег(КлючСвойства)) = Неопределено Тогда
		КлючСвойства = ПараметрыСоединения.КодСервиса + КлючСвойства;
	КонецЕсли;
	Если ОписаниеСвойства.Свойство("Регламент", СбисРегламент)
		И	ЗначениеЗаполнено(СбисРегламент) Тогда
		КлючСвойства = СбисРегламент + "_" + КлючСвойства;
	КонецЕсли;
	Возврат КлючСвойства;
КонецФункции

//Функция возвращает имя свойства с учетом регамлента
&НаКлиентеНаСервереБезКонтекста
Функция СбисПолучитьИмяСвойстваДокумента(ОписаниеСвойства)
	Перем СбисРегламент;
	КлючСвойства = ОписаниеСвойства.Имя;
	Если ОписаниеСвойства.Свойство("Регламент", СбисРегламент)
		И	ЗначениеЗаполнено(СбисРегламент) Тогда
		КлючСвойства = СбисРегламент + "_" + КлючСвойства;
	КонецЕсли;
	Возврат КлючСвойства;
КонецФункции

//Функция получает свойство объекта с учетом кода сервиса и статуса.
&НаСервере
Функция СбисПолучитьСвойствоОбъектаНаСервере(ОписаниеСвойства)
	КлючСвойства = СбисПолучитьКлючСвойстваДокументаНаСервере(ОписаниеСвойства);
	СсылкаНаСвойство = ПараметрыСоединения.КэшСвойствОбъектов.Получить(КлючСвойства);
	Если СсылкаНаСвойство = Неопределено Тогда
		СсылкаНаСвойство = ИзвлечьСвойствоПоОписаниюНаСервере(КлючСвойства);
	КонецЕсли;
	Возврат СсылкаНаСвойство;
КонецФункции

//Функция получает свойство объекта с учетом кода сервиса и статуса.
&НаСервере
Функция ИзвлечьСвойствоПоОписаниюНаСервере(КлючСвойства)
	СсылкаНаСвойство = ПланыВидовХарактеристик[ПараметрыСоединения.ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию(КлючСвойства, Истина).Ссылка;
	ПараметрыСоединения.КэшСвойствОбъектов.Вставить(КлючСвойства, СсылкаНаСвойство);
	Возврат СсылкаНаСвойство;
КонецФункции

//Функция возвращает ключ свойства с учетом регамлента и установленного кода сервиса на сервере
&НаСервере
Функция СбисПолучитьКлючСвойстваДокументаНаСервере(ОписаниеСвойства)
	Перем СбисРегламент;
	КлючСвойства = ОписаниеСвойства.Имя;
	Если Не ПараметрыСоединения.СвойстваВРазрезеКодаСервиса.НайтиПоЗначению(НРег(КлючСвойства)) = Неопределено Тогда
		КлючСвойства = ПараметрыСоединения.КодСервиса + КлючСвойства;
	КонецЕсли;
	Если ОписаниеСвойства.Свойство("Регламент", СбисРегламент)
		И	ЗначениеЗаполнено(СбисРегламент) Тогда
		КлючСвойства = СбисРегламент + "_" + КлючСвойства;
	КонецЕсли;
	Возврат КлючСвойства;
КонецФункции

//Функция добавляет записи в план видов характеристик, необходимые для хранения статусов и идентификаторов в регистрах сведений	
&НаСервере
Процедура ДобавитьЗаписиВПланВидовХарактеристикНаСервере()
	ИмяПланаВидовХарактеристикСвойствОбъектов 	= ПараметрыСоединения.ИмяПланаВидовХарактеристикСвойствОбъектов;
	СправочникСвойствОбъектов 					= ПараметрыСоединения.СправочникСвойствОбъектов; 
	Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяПланаВидовХарактеристикСвойствОбъектов) = Неопределено Тогда
		ВызватьИсключение("В конфигурации отсутствует план видов характеристик " + ИмяПланаВидовХарактеристикСвойствОбъектов + ".");
	КонецЕсли;  
	Отказ = Ложь;
	СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", "ДокументСБИС_Ид"));
	СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", "ДокументСБИС_ИдВложения"));
	СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", "ДокументСБИС_Статус"));
	СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", "ДокументСБИС_Расхождение"));
	СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", "ДокументСБИС_СтатусГос"));
	СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", "ДокументСБИС_ТекущийЭтап"));

	Если ПараметрыСоединения.СохранятьРасхождения Тогда 
		СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", "ДокументСБИС_СравнениеЗначение"));
		СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", "ДокументСБИС_СравнениеСтатус"));
	КонецЕсли;
	
	СбисДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту("СБИС_Идентификатор",	ИмяПланаВидовХарактеристикСвойствОбъектов, "Строка", Отказ);
	СбисДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту("СБИС_СпособДоставки",	ИмяПланаВидовХарактеристикСвойствОбъектов, "СправочникСвойствОбъектов", Отказ);
	СбисДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту("СБИС_КодФилиала",		ИмяПланаВидовХарактеристикСвойствОбъектов, "Строка", Отказ);
	СбисДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту("СБИС_ЗапретРедакций",	ИмяПланаВидовХарактеристикСвойствОбъектов, "Булево", Отказ);
	
    МассивСтатусРегламент = ПараметрыСоединения.МассивСтатусРегламент;
	Для Каждого Элемент Из МассивСтатусРегламент Цикл  
		СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя, Регламент", "ДокументСБИС_Ид",			Элемент));
		СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя, Регламент", "ДокументСБИС_ИдВложения",	Элемент));
		СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя, Регламент", "ДокументСБИС_Статус",		Элемент));
		СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя, Регламент", "ДокументСБИС_Расхождение",	Элемент));
		СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя, Регламент", "ДокументСБИС_СтатусГос",	Элемент));
	КонецЦикла;
	Если Отказ = Истина Тогда
		ВызватьИсключение("Возникли проблемы при создании дополнительных свойств для документов и контрагентов. Для корректного создания дополнительных свойств необходимо провести первичный запуск обработки под пользователем с правами на план видов характеристик "+ИмяПланаВидовХарактеристикСвойствОбъектов+". Для этого обратитесь к вашему администратору 1С.");	
	КонецЕсли;
	
КонецПроцедуры

//Функция добавляет запись в план видов характеристик
&НаСервере
Функция СбисДобавитьЗаписьВПланВидовХарактеристик(ОписаниеСвойства)
	
	Перем НазначениеСвойства;
	КлючСвойства = СбисПолучитьКлючСвойстваДокументаНаСервере(ОписаниеСвойства);
	ОписаниеСвойства.Свойство("Назначение", НазначениеСвойства);
	ИмяПланаВидовХарактеристикСвойствОбъектов = ПараметрыСоединения.ИмяПланаВидовХарактеристикСвойствОбъектов;
	
	ЕстьРеквизитВиден						= Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].Реквизиты.Найти("Виден")<>Неопределено;
	ЕстьРеквизитДоступен					= Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].Реквизиты.Найти("Доступен")<>Неопределено;
	ЕстьРеквизитЭтоДополнительноеСведение	= Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].Реквизиты.Найти("ЭтоДополнительноеСведение")<>Неопределено;
	ЕстьРеквизитВидСвойств					= Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].Реквизиты.Найти("ВидСвойств")<>Неопределено;
	
	НайденнаяЗапись = СбисПолучитьСвойствоОбъектаНаСервере(ОписаниеСвойства);
	Если НЕ НайденнаяЗапись.Пустая() Тогда
		Если		(ЕстьРеквизитВиден И НЕ НайденнаяЗапись.Виден)
				ИЛИ	(ЕстьРеквизитДоступен И НЕ НайденнаяЗапись.Доступен)
				ИЛИ (ЕстьРеквизитЭтоДополнительноеСведение И НЕ НайденнаяЗапись.ЭтоДополнительноеСведение)
				ИЛИ (ЕстьРеквизитВидСвойств И НЕ НайденнаяЗапись.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения) Тогда
			НайденнаяЗаписьОбъект = НайденнаяЗапись.ПолучитьОбъект();
			Если ЕстьРеквизитВиден Тогда
				НайденнаяЗаписьОбъект.Виден = Истина;	
			КонецЕсли;
			Если ЕстьРеквизитДоступен Тогда
				НайденнаяЗаписьОбъект.Доступен = Истина;
			КонецЕсли;
			Если ЕстьРеквизитЭтоДополнительноеСведение Тогда
				НайденнаяЗаписьОбъект.ЭтоДополнительноеСведение = Истина;
			КонецЕсли;
			Если ЕстьРеквизитВидСвойств Тогда
				НайденнаяЗаписьОбъект.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения;
			КонецЕсли;
			НайденнаяЗаписьОбъект.Записать();
		КонецЕсли;
		
		Возврат НайденнаяЗапись;
	КонецЕсли;	
	Попытка
		СвойствоОбъект = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].СоздатьЭлемент();
		СвойствоОбъект.Наименование = КлючСвойства;
		Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("Имя") = Неопределено Тогда
			СвойствоОбъект.Имя = КлючСвойства;
		КонецЕсли;
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки());
		Попытка
			СвойствоОбъект.Заголовок = КлючСвойства;
		Исключение
		КонецПопытки;
		Если ЕстьРеквизитВиден Тогда
			СвойствоОбъект.Виден = Истина;	
		КонецЕсли;
		Если ЕстьРеквизитДоступен Тогда
			СвойствоОбъект.Доступен = Истина;
		КонецЕсли;
		Если ЕстьРеквизитЭтоДополнительноеСведение Тогда
			СвойствоОбъект.ЭтоДополнительноеСведение = Истина;
		КонецЕсли;
		Если ЕстьРеквизитВидСвойств Тогда
			СвойствоОбъект.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения;
		КонецЕсли;
		Попытка
			Если ЗначениеЗаполнено(НазначениеСвойства) Тогда
				СвойствоОбъект.НазначениеСвойства = НазначениеСвойства;
			Иначе
				СвойствоОбъект.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
			КонецЕсли;
		Исключение
		КонецПопытки;
		СвойствоОбъект.УстановитьНовыйКод();
		СвойствоОбъект.Записать();
		Возврат СвойствоОбъект.Ссылка;
	Исключение
		ВызватьИсключение("Не удалось создать дополнительное свойство " + КлючСвойства + ". Детально: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

//Функция добавляет запись в план видов характеристик		
&НаСервере
Функция СбисДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту(ИмяЗаписи, ИмяПланаВидовХарактеристикСвойствОбъектов, ТипЗначения, Отказ = Ложь)
	
	ЕстьРеквизитВиден						= Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].Реквизиты.Найти("Виден")<>Неопределено;
	ЕстьРеквизитДоступен					= Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].Реквизиты.Найти("Доступен")<>Неопределено;
	ЕстьРеквизитЭтоДополнительноеСведение	= Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].Реквизиты.Найти("ЭтоДополнительноеСведение")<>Неопределено;
	ЕстьРеквизитВидСвойств					= Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].Реквизиты.Найти("ВидСвойств")<>Неопределено;
	
	НайденнаяЗапись = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию(ИмяЗаписи).Ссылка;
	Если НЕ НайденнаяЗапись.Пустая() Тогда
		Если		(ЕстьРеквизитВиден И НЕ НайденнаяЗапись.Виден)
				ИЛИ	(ЕстьРеквизитДоступен И НЕ НайденнаяЗапись.Доступен)
				ИЛИ (ЕстьРеквизитЭтоДополнительноеСведение И НЕ НайденнаяЗапись.ЭтоДополнительноеСведение)
				ИЛИ (ЕстьРеквизитВидСвойств И НЕ НайденнаяЗапись.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения) Тогда
			НайденнаяЗаписьОбъект = НайденнаяЗапись.ПолучитьОбъект();
			Если ЕстьРеквизитВиден Тогда
				НайденнаяЗаписьОбъект.Виден = Истина;	
			КонецЕсли;
			Если ЕстьРеквизитДоступен Тогда
				НайденнаяЗаписьОбъект.Доступен = Истина;
			КонецЕсли;
			Если ЕстьРеквизитЭтоДополнительноеСведение Тогда
				НайденнаяЗаписьОбъект.ЭтоДополнительноеСведение = Истина;
			КонецЕсли;
			Если ЕстьРеквизитВидСвойств Тогда
				НайденнаяЗаписьОбъект.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения;
			КонецЕсли;
			НайденнаяЗаписьОбъект.Записать();
		КонецЕсли;
		
		Возврат НайденнаяЗапись;
	КонецЕсли;	
	Попытка
		СвойствоОбъект = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].СоздатьЭлемент();
		СвойствоОбъект.Наименование = ИмяЗаписи;
		Если ТипЗначения = "СправочникСвойствОбъектов" Тогда 
			СправочникСвойствОбъектов = ПараметрыСоединения.СправочникСвойствОбъектов;
			СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка." + СправочникСвойствОбъектов);
		Иначе
			Попытка
				СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(ТипЗначения);
			Исключение
				СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка");
			КонецПопытки;
		КонецЕсли;
		Попытка
			СвойствоОбъект.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
		Исключение
		КонецПопытки;
		Попытка
			СвойствоОбъект.Заголовок = ИмяЗаписи;
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		Если ЕстьРеквизитВиден Тогда
			СвойствоОбъект.Виден = Истина;	
		КонецЕсли;
		Если ЕстьРеквизитДоступен Тогда
			СвойствоОбъект.Доступен = Истина;
		КонецЕсли;
		Если ЕстьРеквизитЭтоДополнительноеСведение Тогда
			СвойствоОбъект.ЭтоДополнительноеСведение = Истина;
		КонецЕсли;
		Если ЕстьРеквизитВидСвойств Тогда
			СвойствоОбъект.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения;
		КонецЕсли;
		Попытка
			НаборДопСв = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
			СвойствоОбъект.НаборСвойств = НаборДопСв;
		Исключение 
			Попытка
				НаборДопСв = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоРеквизиту("ИмяПредопределенногоНабора", "Справочник_Контрагенты");
				СвойствоОбъект.НаборСвойств = НаборДопСв;
			Исключение 
				Ошибка = ОписаниеОшибки();
			КонецПопытки;
		КонецПопытки;
		СвойствоОбъект.УстановитьНовыйКод();
		СвойствоОбъект.Записать();
		Попытка
			НаборДопСвойствКонтр = НаборДопСв.ПолучитьОбъект();
			НовоеСведение = НаборДопСвойствКонтр.ДополнительныеСведения.Добавить();
			НовоеСведение.Свойство = СвойствоОбъект.Ссылка;
			НаборДопСвойствКонтр.Записать();
		Исключение
		КонецПопытки;
		Если ТипЗначения = "СправочникСвойствОбъектов" Тогда
			ЗначениеСпр = Справочники[СправочникСвойствОбъектов].СоздатьЭлемент();
			ЗначениеСпр.Владелец = СвойствоОбъект.Ссылка;
			ЗначениеСпр.Наименование = "ЭДО";
			ЗначениеСпр.Записать();
			ЗначениеСпр = Справочники[СправочникСвойствОбъектов].СоздатьЭлемент();
			ЗначениеСпр.Владелец = СвойствоОбъект.Ссылка;
			ЗначениеСпр.Наименование = "Бумага";
			ЗначениеСпр.Записать();
			ЗначениеСпр = Справочники[СправочникСвойствОбъектов].СоздатьЭлемент();
			ЗначениеСпр.Владелец = СвойствоОбъект.Ссылка;
			ЗначениеСпр.Наименование = "Бумага, хочет ЭДО";
			ЗначениеСпр.Записать();
		КонецЕсли;
		
		Возврат СвойствоОбъект.Ссылка;
	Исключение
		Ошибка = ОписаниеОшибки(); 
		Сообщить("Не удалось создать дополнительное свойство "+ИмяЗаписи);
		Отказ = Истина;
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Статусы_Регистры_Подключение

//Процедура заполняет параметры работы с свойствами в регистрах.
&НаКлиенте
Процедура УстановитьПараметрыРегистры(Кэш)
	ИниКонфигурация								= Кэш.ФормаНастроек.Ини(Кэш, "Конфигурация");
	ИмяРегистраСвойствОбъектов 					= ИмяРегистраСвойствОбъектов(Кэш);  
	ИмяПланаВидовХарактеристикСвойствОбъектов 	= ИмяПланаВидовХарактеристикСвойствОбъектов(Кэш);
	СправочникСвойствОбъектов 					= ИмяСправочникаСвойствОбъектов(Кэш);
	КодСервиса 									= Кэш.СБИС.ПараметрыИнтеграции.КодСервиса;
	СтатусРегламент 							= Кэш.ОбщиеФункции.РассчитатьЗначение("СтатусРегламент", ИниКонфигурация);
	МассивСтатусРегламент						= ?(ЗначениеЗаполнено(СтатусРегламент), РазбитьСтрокуВМассив(СтатусРегламент,","), Новый Массив);
	СвойстваВРазрезеКодаСервиса = Новый СписокЗначений;
	СвойстваВРазрезеКодаСервиса.Добавить("документсбис_статус",				"ДокументСБИС_Статус");
	СвойстваВРазрезеКодаСервиса.Добавить("документсбис_идвложения",			"ДокументСБИС_ИдВложения");
	СвойстваВРазрезеКодаСервиса.Добавить("документсбис_ид",					"ДокументСБИС_Ид");
	СвойстваВРазрезеКодаСервиса.Добавить("документсбис_сравнениезначение",	"ДокументСБИС_СравнениеЗначение");
	СвойстваВРазрезеКодаСервиса.Добавить("документсбис_сравнениестатус",	"ДокументСБИС_СравнениеСтатус");
	СвойстваВРазрезеКодаСервиса.Добавить("документсбис_статусгос",			"ДокументСБИС_СтатусГос"); 
	СвойстваВРазрезеКодаСервиса.Добавить("документсбис_расхождение",			"ДокументСБИС_Расхождение"); 

	СвойстваВРазрезеАккаунта = Новый СписокЗначений;
	СвойстваВРазрезеАккаунта.Добавить("документсбис_ид", "ДокументСБИС_Ид");

	ПараметрыСоединения = Новый Структура(
	"ИмяРегистраСвойствОбъектов, ИмяПланаВидовХарактеристикСвойствОбъектов, СправочникСвойствОбъектов, КодСервиса, МассивСтатусРегламент, СвойстваВРазрезеКодаСервиса, СвойстваВРазрезеАккаунта"
	,ИмяРегистраСвойствОбъектов, ИмяПланаВидовХарактеристикСвойствОбъектов, СправочникСвойствОбъектов, КодСервиса, МассивСтатусРегламент, СвойстваВРазрезеКодаСервиса, СвойстваВРазрезеАккаунта);
	ПараметрыСоединения.Вставить("КэшСвойствОбъектов", Новый Соответствие);
	ПараметрыСоединения.Вставить("СохранятьРасхождения", МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("СохранятьРасхождения"));
	
	// << alo СтатусГос Список допустимых статусов Гос систем. Разделены комментариями с названием систем и типами документов. Повторяющиеся закоентарены
	//	Маркировка
	// Реализация по УПД
	СбисСтатусыГос = Новый СписокЗначений;
	СбисСтатусыГос.Добавить("Отправка в ГИС МТ","Начальное событие маркировки на реализациях по УПД");
	СбисСтатусыГос.Добавить("Коды подтверждены","Документ реализации был утвержден по ЭДО");
	СбисСтатусыГос.Добавить("Регистрация в ГИС МТ","Ожидаем получения успешной технической квитанции");
	СбисСтатусыГос.Добавить("Ошибка регистрации в ГИС МТ","В технической квитанции пришла ошибка");
	// Поступления по УПД
	СбисСтатусыГос.Добавить("Оформлений в ГИС МТ","Начальное событие при получении маркировочного поступления по УПД");
	СбисСтатусыГос.Добавить("Коды отклонены","Документ поступления был отклонен по ЭДО");
	СбисСтатусыГос.Добавить("Коды утверждены","Документ поступления был утвержден по ЭДО");
	//СбисСтатусыГос.Добавить("Регистрация в ГИС МТ","Сделан запрос технической квитанции");
	//СбисСтатусыГос.Добавить("Ошибка регистрации в ГИС МТ","В технической квитанции пришла ошибка");
	СбисСтатусыГос.Добавить("Зарегистрировано в ГИС МТ","В технической квитанции пришел успех");
	// Реализация по Тrue API
	СбисСтатусыГос.Добавить("Оформление в ГИС МТ","Начальное событие для реализации по True API. Документ наполняется наименованиями и редактируется");
	СбисСтатусыГос.Добавить("Оформлено","Редактирование документа завершено");
	//СбисСтатусыГос.Добавить("Отправка в ГИС МТ","Отправка документа в ГИС МТ по True API");
	СбисСтатусыГос.Добавить("Отправлено в ГИС МТ","Отправка завершено (переименовали пред. событие)");
	//СбисСтатусыГос.Добавить("Регистрация в ГИС МТ","Ожидаем утверждения / отклонения покупателем");
	СбисСтатусыГос.Добавить("Принято в ГИС МТ","Документ был утвержден покупателем ИЛИ успешно принят в ГИС МТ в случае реализации не участнику.");
	СбисСтатусыГос.Добавить("Не принято в ГИС МТ","Документ был отклонен покупателем / ГИС МТ");
	// Поступление по True API
	СбисСтатусыГос.Добавить("Получено из ГИС МТ","Начальное событие для документа поступления, полученного по TrueAPI");
	СбисСтатусыГос.Добавить("Утверждение в ГИС МТ","Отправлен файл приёмки всех кодов маркировки");
	СбисСтатусыГос.Добавить("Утверждено в ГИС МТ","Файл приёмки был успешно обработан в ГИС МТ");
	//СбисСтатусыГос.Добавить("Не принято в ГИС МТ","Файл приёмки был отклонен ГИС МТ с ошибкой");
	СбисСтатусыГос.Добавить("Отклонение в ГИС МТ","Отправлен файл приёмки с отклонением всех кодов маркировки");
	СбисСтатусыГос.Добавить("Отклонено в ГИС МТ","Файл приёмки с отклонением был успешно обработан в ГИС МТ");
	// Заказ Документ исходящего заказа используется для заказа кодов маркировки у ГИС МТ в сценариях импорта маркированной продукции
	//не нужно СбисСтатусыГос.Добавить("Оформление заказа кодов ГИС МТ для импорта","Начальное событие для документа. Закрывается, только после успешного заказа кодов на все позиции документа");
	СбисСтатусыГос.Добавить("Регистрация заказа кодов в ГИС МТ","Отправлен заказ кодов в ГИС МТ");
	СбисСтатусыГос.Добавить("Зарегистрирован заказ кодов в ГИС МТ","Заказ кодов успешно обработан в ГИС МТ по части или всем позициям документа");
	СбисСтатусыГос.Добавить("Ошибка при регистрация заказа кодов в ГИС МТ","При регистарции заказа не смогли доставить заказ в ГИС МТ или ГИС МТ обработал заказ с ошибкой");
	СбисСтатусыГос.Добавить("Регистрация упаковок","Будет в документах, по которым пользователь упаковывает полученные коды из документа заказа. Упаковка доступна только после успешной регистрации всего заказа.");
	СбисСтатусыГос.Добавить("Упаковки зарегистрированы","Упаковки были успешно зарегистрированы запросами агрегации в ГИС МТ");
	СбисСтатусыГос.Добавить("Ошибка при регистрации упаковок","Не смогли доставить до ГИС МТ запрос на регистрацию упаковок");
	СбисСтатусыГос.Добавить("Упаковки не зарегистрированы","Упаковки не были зарегистрированы в ГИС МТ");
	СбисСтатусыГос.Добавить("Инициирован заказ марок из внешней системы","Событие, создание которого иницирует робот внешней обработки после успешного заказа кодов маркировки");
	// Импортное поступление 
	//не нужно СбисСтатусыГос.Добавить("Оформление импорта в ГИС МТ","Начальное событие для документа. Закрывается, только после успешного ввода в оборот");
	СбисСтатусыГос.Добавить("Ввод в оборот в ГИС МТ","Ввод в оборот отправлен в ГИС МТ");
	СбисСтатусыГос.Добавить("Ввод в оборот незарегистрирован","Ввод в оборот обработан в ГИС МТ с ошибкой или не доставлен до ГИС МТ");
	СбисСтатусыГос.Добавить("Ввод в оборот зарегистрирован","Ввод в оборот успешно зарегистрирован");
	// Производство
	//не нужно СбисСтатусыГос.Добавить("Оформление в ГИС МТ","Начальное событие для документа. Закрывается, только после успешного ввода в оборот кодов");
	СбисСтатусыГос.Добавить("Получение КМ","Отправлен заказ кодов в ГИС МТ");
	СбисСтатусыГос.Добавить("Получены КМ","Заказ кодов успешно обработан в ГИС МТ по части или всем позициям документа");
	СбисСтатусыГос.Добавить("Ошибка при получении КМ","При регистарции заказа не смогли доставить заказ в ГИС МТ или ГИС МТ обработал заказ с ошибкой");
	СбисСтатусыГос.Добавить("Регистрация упаковок","Отправлен запрос регистрации упаковок в ГИС МТ. Для всех упаковок, заведенных в документах производства, происходит автоматическая регистрация этих упаковок в ГИС МТ");
	СбисСтатусыГос.Добавить("Упаковки зарегистрированы","Упаковки были успешно зарегистрированы запросами агрегации в ГИС МТ");
	СбисСтатусыГос.Добавить("Ошибка при регистрации упаковок","Не смогли доставить до ГИС МТ запрос на регистрацию упаковок");
	СбисСтатусыГос.Добавить("Упаковки не зарегистрированы", "Упаковки не были зарегистрированы в ГИС МТ");
	СбисСтатусыГос.Добавить("Ввод в оборот в ГИС МТ", "Ввод в оборот отправлен в ГИС МТ");
	СбисСтатусыГос.Добавить("Ввод в оборот зарегистрирован", "Ввод в оборот успешно зарегистрирован");
	СбисСтатусыГос.Добавить("Ввод в оборот незарегистрирован", "Ввод в оборот обработан в ГИС МТ с ошибкой или не доставлен до ГИС МТ");
	// Списания	Данные события принимаются и для табачной продукции
	СбисСтатусыГос.Добавить("Оформление списания для ГИС МТ", "Начальное событие или событие после получения ошибки от ГИС МТ. Документ можно редкатировать");
	//СбисСтатусыГос.Добавить("Отправка в ГИС МТ", "Происходит отправка документа в ГИС МТ");
	СбисСтатусыГос.Добавить("Оформлено списание в ГИС МТ", "Документс cписания был успешно зарегистрирован в ГИС МТ");
	СбисСтатусыГос.Добавить("Отклонено в ГИС", "Документ был отклонет с ошибкой в ГИС МТ или не смогли успешно отправить. После него будет новое начальное событие");
	СбисСтатусыГос.Добавить("Нет маркировок", "После добавления/удаления наименований документ перестает быть маркированным");

	//	Маркировка лекарств	
	// Реализация прямым порядком и реализация в ЕАЭС
	СбисСтатусыГос.Добавить("Оформление для МДЛП", "Начальное событие для реализации прямым порядком");
	СбисСтатусыГос.Добавить("Оформлено для МДЛП", "Пользователь завершил оформление (переименование пред события)");
	СбисСтатусыГос.Добавить("Нет маркированных лекарств", "Если пользователь оформил документ с лекарствами и принял решение, что кодов маркировки в нем не будет");
	СбисСтатусыГос.Добавить("Подтверждение кодов покупателем", "Ожидания ответа из ГИС МТ о решении покупателя");
	СбисСтатусыГос.Добавить("Подтверждено в МДЛП", "Реализация была подтверждена");
	СбисСтатусыГос.Добавить("Покупатель отклонил коды", "Реализация была отклонена покупателем");
	СбисСтатусыГос.Добавить("Ошибка регистрации в МДЛП", "Документ был обработан с ошибкой в МДЛП");
	// Поступления прямым порядком
	СбисСтатусыГос.Добавить("Подтверждение в МДЛП", "Начальное событие для лекарственного поступления прямым порядком");
	//СбисСтатусыГос.Добавить("Подтверждено в МДЛП", "Документ подтвержден в МДЛП");
	СбисСтатусыГос.Добавить("Ошибка подтверждения в МДЛП", "Документ подтверждения был отклонен в МДЛП с ошибкой");
	СбисСтатусыГос.Добавить("Отклонение в МДЛП", "Отправка отклонения документа в МДЛП");
	СбисСтатусыГос.Добавить("Отклонено в МДЛП", "Отклонение документа обработано в МДЛП");
	// Реализации обратным порядком
	//СбисСтатусыГос.Добавить("Оформление для МДЛП", "Начальное событие для лекарственных реализаций созданных руками
	СбисСтатусыГос.Добавить("Подтвердить в МДЛП", "Начальное событие для реализаций, полученных по обратному порядку из МДЛП");
	//СбисСтатусыГос.Добавить("Подтверждение в МДЛП", "Отправка подтверждения реализации обратным порядком в МДЛП");
	//СбисСтатусыГос.Добавить("Подтверждено в МДЛП", "Документ подтверждения успешно обработан в МДЛП");
	//СбисСтатусыГос.Добавить("Ошибка подтверждения в МДЛП", "Документ подтверждения обработан в МДЛП с ошибкой");
	СбисСтатусыГос.Добавить("Отклонение в МДЛП", "Документ реализации по обратному порядку отправлен на отклонением");
	//СбисСтатусыГос.Добавить("Отклонено в МДЛП", "Отклонение документа реализации по обратному порядку успешно обработан МДЛП");
	СбисСтатусыГос.Добавить("Ошибка отклонения в МДЛП", "Отклонение документа не принято в МДЛП");
	// Поступления обратным порядком
	//СбисСтатусыГос.Добавить("Оформление для МДЛП", "Начальное событие для поступления обратным порядком");
	//СбисСтатусыГос.Добавить("Оформлено для МДЛП", "Пользователь завершил оформление");
	СбисСтатусыГос.Добавить("Подтверждение   кодов поставщиком", "Ожидание ответа из ГИС МТ о решении поставщика");
	СбисСтатусыГос.Добавить("Подтверждение кодов поставщиком", "Ожидание ответа из ГИС МТ о решении поставщика");
	СбисСтатусыГос.Добавить("Утверждено в МДЛП", "Поставщик утвердил документ");
	СбисСтатусыГос.Добавить("Поставщик отклонил коды", "Поставщик отклонил документ");
	СбисСтатусыГос.Добавить("Ошибка регистрации в МДЛП", "Документ был обработан в МДЛП с ошибкой");
	СбисСтатусыГос.Добавить("Нет маркированных лекарств", "Если пользователь оформил документ с лекарствами и принял решение, что кодов маркировки в нём не будет");
	// Списания
	СбисСтатусыГос.Добавить("Оформление списания для МДЛП", "Начальное событие для лекарственных списаний");
	СбисСтатусыГос.Добавить("Регистрация в МДЛП", "Документ был отправлен на регистрацию в момент, когда регистратор выбытия не работал");
	СбисСтатусыГос.Добавить("Зарегистрировано в МДЛП", "Документ списания зарегистрирован в МДЛП");
	//СбисСтатусыГос.Добавить("Ошибка регистрации в МДЛП", "Документ был отклонен в МДЛП или не смогли отправить");
	СбисСтатусыГос.Добавить("Регистрация через РВ", "Документ был отправлен на регистрацию в МДЛП через РВ");
	СбисСтатусыГос.Добавить("Нет маркированных лекарств", "После добавления/удаления лекарственных наименований или по решению пользователя пометили документ как не требующий отправки в МДЛП");

	// Меркурий		Для Меркурия концепция событий работает не как для остальных документов. Документы обрабатываются по наименованиям. У каждого наименования свой статус. Итоговые статусы по наименованиям влияют на статус документа, при этом событие для документа только одно. 
	//Реализация
	СбисСтатусыГос.Добавить("Оформление в ИС Меркурий", "Основное событие по документу. Если событие активно, то документ обрабатывается. В нём могут быть часть ВСД отправлена, часть нет.");
	СбисСтатусыГос.Добавить("Оформление ВСД", "Количество этих событий зависит от того, частично обрабатывается документ или нет. Пример. В документе 3 ВСД, Пользователь отправляет первую. В ленте появляется событие Оформление ВСД. Если по первой придет ответ, до того как пользователь обработает вторую, то событие закроется. И при отправке второй - создастся новое событие Оформление ВСД. Если вторую обработают, до того как придет ответ по первой, то вторая будет относиться к этому же событию");
	СбисСтатусыГос.Добавить("Аннулирование ВСД", "Работает по тому же принципу что и Оформление ВСД. Если аннулируют документ, по которому все ВСД обработаны, то будет создано новое событие Оформление в ИС Меркурий");
	// Поступление
	СбисСтатусыГос.Добавить("Оформление в ИС Меркурий", "Основное событие по документу. Если событие активно, то документ обрабатывается. В нём могут быть часть ВСД погашена, часть отклонена, часть не обработана.");
	СбисСтатусыГос.Добавить("Гашение ВСД", "Событие по наименованиям. Работает по принципам, описанным для реализаций.");
	ПараметрыСоединения.Вставить("СтатусыГос", СбисСтатусыГос);
	// alo СтатусГос Список >>	
		
КонецПроцедуры  

//Возвращает имя регистра, где хранятся статусы и идентификаторы СБИС	
&НаКлиенте
Функция ИмяРегистраСвойствОбъектов(Кэш) Экспорт      
	
	ИниКонфигурация	= Кэш.ФормаНастроек.Ини(Кэш, "Конфигурация");
	ИмяРегистраСвойствОбъектов = Кэш.ОбщиеФункции.РассчитатьЗначение("ИмяРегистраСвойствОбъектов", ИниКонфигурация);	
	
	Если ИмяРегистраСвойствОбъектов = Неопределено Тогда
		ИмяРегистраСвойствОбъектов = ИмяРегистраСвойствОбъектовНаСервере(ИниКонфигурация);
	КонецЕсли;
	
	Возврат ИмяРегистраСвойствОбъектов;
	
КонецФункции

//Возвращает имя плана видов характеристик, где хранятся названия дополнительных свойств	
&НаКлиенте
Функция ИмяПланаВидовХарактеристикСвойствОбъектов(Кэш) Экспорт
	ИниКонфигурация	= Кэш.ФормаНастроек.Ини(Кэш, "Конфигурация");
	ИмяПланаВидовХарактеристикСвойствОбъектов = Кэш.ОбщиеФункции.РассчитатьЗначение("ИмяПланаВидовХарактеристикСвойствОбъектов", ИниКонфигурация);	
	Если ИмяПланаВидовХарактеристикСвойствОбъектов = Неопределено Тогда
		Возврат ИмяПланаВидовХарактеристикСвойствОбъектовНаСервере(ИниКонфигурация);
	Иначе
		Возврат ИмяПланаВидовХарактеристикСвойствОбъектов;
	КонецЕсли
КонецФункции

//Возвращает имя справочника, где хранятся свойства для статусов контрагентов	
&НаКлиенте
Функция ИмяСправочникаСвойствОбъектов(Кэш) Экспорт
	
	ИниКонфигурация		= Кэш.ФормаНастроек.Ини(Кэш, "Конфигурация");
	РезультатСправочник	= Кэш.ОбщиеФункции.РассчитатьЗначение("СправочникСвойствОбъектов", ИниКонфигурация);	
	
	Если РезультатСправочник = Неопределено Тогда
		
		РезультатСправочник = "ЗначенияСвойствОбъектов";

	КонецЕсли;
	
	Если Не МодульОбъектаКлиент().СбисСуществуетОбъектКонфигурацииКлиент("Справочники", РезультатСправочник) Тогда
		
		СбисИсключение = МодульОбъектаКлиент().НовыйСбисИсключение(779,"Статусы_Регистры.ИмяСправочникаСвойствОбъектов",,,"Не найден тип справочника дополнительных свойств """ + РезультатСправочник + """");
		ВызватьИсключение МодульОбъектаКлиент().СбисИсключение_Представление(СбисИсключение);
		
	КонецЕсли;
	
	Возврат РезультатСправочник;
	
КонецФункции

&НаСервере
Функция ИмяРегистраСвойствОбъектовНаСервере(ИниКонфигурация)
	
	Если		МодульОбъектаСервер().СбисСуществуетОбъектКонфигурацииСервер("РегистрыСведений", "ДополнительныеСведения") Тогда
		Возврат "ДополнительныеСведения";
	ИначеЕсли   МодульОбъектаСервер().СбисСуществуетОбъектКонфигурацииСервер("РегистрыСведений", "ЗначенияСвойствОбъектов") Тогда
		Возврат "ЗначенияСвойствОбъектов";
	Иначе	
		ВызватьИсключение("Не найден регистр для хранения статусов и идентификаторов СБИС");
	КонецЕсли
КонецФункции

&НаСервереБезКонтекста
Функция ИмяПланаВидовХарактеристикСвойствОбъектовНаСервере(ИниКонфигурация)
	Если		Метаданные.ПланыВидовХарактеристик.Найти("ДополнительныеРеквизитыИСведения") <> Неопределено Тогда
		Возврат "ДополнительныеРеквизитыИСведения";
	ИначеЕсли	Метаданные.ПланыВидовХарактеристик.Найти("СвойстваОбъектов") <> Неопределено Тогда
		Возврат "СвойстваОбъектов";
	Иначе
		ВызватьИсключение("Не найден план дополнительных свойств для настройки хранения статусов и идентификаторов СБИС");
	КонецЕсли
КонецФункции

#КонецОбласти
// ▼ ayan#bitrix1125_02#УТ2021 Проставлять у Контрагента флажок "Настроен ЭДО СБИС" = да и отправлять в УТАП Кириллов П.С.  2022.09.01 ▼ Начало

//Если  Контрагент.НастроенЭДОСБИС = ЛОЖЬ - значит не регистртровался в обмене
&НаСервереБезКонтекста
Процедура аян_ЗарегистрироватьКонтрагентаНастроенЭДО(ДокументСсылка, ЗначениеСвойства)
	
	Если НРег(ЗначениеСвойства) = "доставлен" ИЛИ  
		НРег(ЗначениеСвойства) = "получен контрагентом" ИЛИ 
		НРег(ЗначениеСвойства) = "утвержден" ИЛИ
		НРег(ЗначениеСвойства) = "выполнение завершено успешно"  Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Контрагент.Ссылка КАК КонтрагентСсылка,
		|	РеализацияТоваровУслуг.Контрагент.НастроенЭДОСБИС КАК КонтрагентНастроенЭДОСБИС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ДокументСсылка
		|	И РеализацияТоваровУслуг.Контрагент.НастроенЭДОСБИС = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		
		РЗ = Запрос.Выполнить();
		
		Если РЗ.Пустой() Тогда
			Возврат;
		КонецЕсли; 
		
		ВДЗ = РЗ.Выбрать();
		
		Если ВДЗ.Следующий() Тогда
			Попытка
				
				аян_КонтрагентОбъект = ВДЗ.КонтрагентСсылка.ПолучитьОбъект();
				аян_КонтрагентОбъект.НастроенЭДОСБИС = Истина;	
				аян_КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
				аян_КонтрагентОбъект.Записать();
				
				Свойство_аян_ВыгрузитьВУТАП = аян_ОбщийСерверПовтИсп.Свойство_аян_ВыгрузитьВУТАП();
				аян_Разработка.РезультатЗаписиДопСведений(ВДЗ.КонтрагентСсылка, Свойство_аян_ВыгрузитьВУТАП, Истина);
				
			Исключение
				
			КонецПопытки; 
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры	
		
// ▲ ayan#bitrix1125_02#УТ2021 Проставлять у Контрагента флажок "Настроен ЭДО СБИС" = да и отправлять в УТАП Кириллов П.С.  2022.09.01 ▲ Конец
	