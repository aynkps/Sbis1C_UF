
#Область include_local_ПолучитьМодульОбъекта

&НаСервере
Функция МодульОбъектаСервер()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция МодульОбъектаСерверБезКонтекста()
	Возврат Новый (Тип("ВнешняяОбработкаОбъект.СБИС"));
КонецФункции

&НаКлиенте
Функция МодульОбъектаКлиент() Экспорт
	Возврат ВладелецФормы.Кэш.СБИС.МодульОбъектаКлиент;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_Каталог_ВнешниеВызовы

 &НаКлиенте
Процедура	КонфигурацияПриИзменении(ПараметрыКонфигурацииВходящие, Кэш) Экспорт
	
	МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(СбисПолучитьМассивУстановленныхИниФайлов(Кэш), ПараметрыКонфигурацииВходящие.ОбработчикЗавершения);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////
///////////////функции для совместимости кода///////////////
////////////////////////////////////////////////////////////

// Копирует СтруктураОткуда в СтруктураКуда	
&НаСервереБезКонтекста
Процедура сбисСкопироватьСтруктуру(СтруктураКуда, Знач СтруктураОткуда)  Экспорт
	Для Каждого Элемент Из СтруктураОткуда Цикл	
		Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Если Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
				СтруктураКуда.Вставить(Элемент.Ключ, Новый Структура);
			КонецЕсли;
			сбисСкопироватьСтруктуру(СтруктураКуда[Элемент.Ключ], Элемент.Значение);				
		ИначеЕсли Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
			СтруктураКуда.Вставить(Элемент.Ключ,Элемент.Значение);
		Иначе
			СтруктураКуда[Элемент.Ключ] = Элемент.Значение;			
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

//Возвращает полное имя файла обработки.
&НаСервере
Функция СбисОбщиеФункции(Кэш) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат Кэш.ОбщиеФункции;
	#Иначе
		Возврат Вычислить("РеквизитФормыВЗначение(""Объект"")");
	#КонецЕсли	
КонецФункции

////////////////////////////////////////////////////////////
//////////////Установить стандартные настройки//////////////
////////////////////////////////////////////////////////////

// Устанавливает настройки из доступных файлов настроек	
&НаКлиенте
Функция	УстановитьСтандартныеНастройки(Кэш, ПараметрыУстановкиНастроек, Отказ) Экспорт
	Перем КаталогРаспакованныхИни;
	Если Не ПараметрыУстановкиНастроек.Свойство("ВременныйКаталогРаспаковкиИни", КаталогРаспакованныхИни) Тогда
		КаталогРаспакованныхИни = СбисРаспаковатьНастройки(Кэш, ПараметрыУстановкиНастроек, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.сбисИсключение(КаталогРаспакованныхИни, "ФайлыНастроекКаталог.УстановитьСтандартныеНастройки");
		КонецЕсли;
	КонецЕсли;
	СписокТиповНастроек				= СформироватьСписокДоступныхНастроек(Кэш, КаталогРаспакованныхИни);
	
	// Сначала пробуем поискать файлы настроек для текущей конфигурации, потом устанавливаем стандартные.
	СтруктураФайловДляКонфигурации	= Кэш.ФормаНастроекОбщее.ПолучитьМассивФайловДляКонфигурации(СписокТиповНастроек, Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
	Если СтруктураФайловДляКонфигурации = Неопределено Тогда
		СтруктураСистемаПоУмолчанию = Кэш.ФормаНастроекОбщее.СистемаПо_УмолчаниюКлиент();
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ПрефиксТекущейКонфигурации", Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(СтруктураСистемаПоУмолчанию));
		ДопПараметры.Вставить("ВерсияТекущейКонфигурации", СтрЗаменить(СтруктураСистемаПоУмолчанию.version,".","-"));
		СтруктураФайловДляКонфигурации	= Кэш.ФормаНастроекОбщее.ПолучитьМассивФайловДляКонфигурации(СписокТиповНастроек, Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис, ДопПараметры);
	КонецЕсли;
	
	Если СтруктураФайловДляКонфигурации = Неопределено Тогда
		Отказ = Истина;
		СообщениеОбОшибке = "Для конфигурации """ +
								Кэш.ПараметрыСистемы.Конфигурация.КраткаяИнформация + 
								""" не смогли подобрать комплект настроек под версию """ +
								Кэш.ПараметрыСистемы.Конфигурация.Версия + """";
		Возврат МодульОбъектаКлиент().НовыйСбисИсключение(, "ФайлыНастроекКаталог.УстановитьСтандартныеНастройки",610,СообщениеОбОшибке);
	КонецЕсли;
	
	Если СтруктураФайловДляКонфигурации.МассивИни = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьСтандартныеНастройкиНаСервере(ПараметрыУстановкиНастроек, СтруктураФайловДляКонфигурации.МассивИни);
	
КонецФункции

// Устанавливает настройки из доступных файлов настроек	на сервере
&НаСервереБезКонтекста
Процедура	УстановитьСтандартныеНастройкиНаСервере(ПараметрыУстановки, МассивФайлов) Экспорт
	Для Каждого СбисФайл Из МассивФайлов Цикл
		Если Сред(СбисФайл.Имя, Найти(СбисФайл.Имя, ".") + 1, 1) = "0" Тогда    // Файл не нужно ставить по умолчанию
            Продолжить;
        Иначе
            КопироватьФайл(СбисФайл.ПолноеИмя, ПараметрыУстановки.КаталогНастроек + ПараметрыУстановки.Разделитель + СбисФайл.Имя);
        КонецЕсли;
	КонецЦикла;
КонецПроцедуры


////////////////////////////////////////////////////////////
//////////////////Работа с Файлами инишек///////////////////
////////////////////////////////////////////////////////////

//Чтение//

//Читает файлы инишек
&НаКлиенте
Функция		СформироватьСтруктуруИниНаКлиенте(Кэш, МассивУстановленныхИниФайлов, РежимРаботы)//Контекст на клиенте для выгрузки/загруки из каталога
	
	// Формирует структуру установленных файлов настроек
	Если	РежимРаботы	= "ЗагрузкаИзКаталога"	Тогда
		Возврат	СформироватьСтруктуруИниВКонтекстеКлиента(МассивУстановленныхИниФайлов);
	Иначе
		ЧтениеНастроекПоТребованию = Кэш.Парам.ЧтениеНастроекПоТребованию И Не (Кэш.ФормаНастроекОбщее.Открыта());
		ПараметрыФормированияНастроек = Новый Структура("ЧтениеНастроекПоТребованию", ЧтениеНастроекПоТребованию);
		Возврат СформироватьСтруктуруИни(МассивУстановленныхИниФайлов, ПараметрыФормированияНастроек);
	КонецЕсли;
	
КонецФункции

//Формирует структуру установленных файлов настроек	
&НаСервереБезКонтекста
Функция		СформироватьСтруктуруИни(МассивУстановленныхИниФайлов, сбисДополнительныеПараметры)
	
	ПолучитьДанныеИни =	Не	сбисДополнительныеПараметры.Свойство("ЧтениеНастроекПоТребованию")
					Или	Не 	сбисДополнительныеПараметры.ЧтениеНастроекПоТребованию;
	Ини = Новый Структура;
	Для Каждого ИниФайл Из МассивУстановленныхИниФайлов Цикл
		Если	ИниФайл.Ини_ИмяИни = "Конфигурация"//Файл конфигурации в любом случае понадобится, поэтому всё равно читаем его, даже с отключенными данными.
			Или	ПолучитьДанныеИни Тогда
			сбисПолучитьСтруктуруИни(Ини, ИниФайл);
		ИначеЕсли ЗначениеЗаполнено(ИниФайл.ИмяФайла) Тогда
			Ини.Вставить(ИмяИниИзИмениФайла(ИниФайл.ИмяФайла), Неопределено);
		ИначеЕсли ИниФайл.ЕстьИзменения Тогда//Целиком пользовательская инишка
			Ини.Вставить(ИмяИниИзИмениФайла(ИниФайл.ИмяФайлаКлиента), Неопределено);
		КонецЕсли;
	КонецЦикла;
	Возврат Ини;
	
КонецФункции	

// формирует структуру файла настроек	
&НаСервереБезКонтекста
Функция		ПолучитьСтруктуруИниФайла(Ини, Путь, ИмяФайла)
	ИмяИни = ИмяИниИзИмениФайла(ИмяФайла);
	Возврат ПолучитьСтруктуруИниФайлаВИмяИни(Ини, Путь, ИмяФайла, ИмяИни);
КонецФункции

// формирует структуру файла настроек и кладет ее в структуру ини под указанным именем (имя ини отличается от имени файла в случае, если указана ссылка на базовый файл настроек)
&НаСервереБезКонтекста
Функция		ПолучитьСтруктуруИниФайлаВИмяИни(Ини, Путь, ИмяФайла, ИмяИни)
	
	ТаблицаОшибок = Новый Массив();
	Если Не Ини.Свойство(ИмяИни) Тогда
		Ини.Вставить(ИмяИни, Новый Структура);
	КонецЕсли;
	СтруктураИниФайла = Ини[ИмяИни];
	
	ПолноеИмяФайла = Путь+ИмяФайла;
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
		ПостроительDOM = Новый ПостроительDOM; 
		ДокументДОМ = ПостроительDOM.Прочитать(ЧтениеXML);
		ЭлементыБазовыйФайлНастроек = ДокументДОМ.ПолучитьЭлементыПоИмени("БазовыйФайлНастроек");
		// Если есть ссылка на базовый файл настроек, то заполняем сначала структуру по базовому файлу, а потом накладываем на нее структуру текущего файла
		Если ЭлементыБазовыйФайлНастроек.Количество() = 1 Тогда
			ЭлементБазовыйФайлНастроек = ЭлементыБазовыйФайлНастроек.Элемент(0);
			БазовыйФайлНастроек = СокрЛП(СтрЗаменить(ЭлементБазовыйФайлНастроек.ТекстовоеСодержимое,"'",""));
			НайденныеФайлы = НайтиФайлы(Путь+БазовыйФайлНастроек);
			Если НайденныеФайлы.Количество() = 1 Тогда
				ПолучитьСтруктуруИниФайлаВИмяИни(Ини, Путь, НайденныеФайлы[0].Имя, ИмяИни);
			Иначе
				НоваяОшибка = Новый Структура();
				НоваяОшибка.Вставить("ИмяПараметра", "Файл настройки");
				НоваяОшибка.Вставить("ЗначениеПараметра", ИмяФайла);
				НоваяОшибка.Вставить("ТекстОшибки","Не найден файл """+Путь+БазовыйФайлНастроек+""", указанный в качестве базового");
				НоваяОшибка.Вставить("ИнформацияПоОбъекту","");
				НоваяОшибка.Вставить("ИмяОбъекта","");
				НоваяОшибка.Вставить("ПолныйПуть", ПолноеИмяФайла);
				ТаблицаОшибок.Добавить(НоваяОшибка);
			КонецЕсли;
		КонецЕсли;
		ЗаписатьДОМВСтруктуру(ДокументДОМ.ПервыйДочерний.ПервыйДочерний, СтруктураИниФайла,ТаблицаОшибок);	
		ЧтениеXML.Закрыть();
	Исключение
		НоваяОшибка = Новый Структура();
		НоваяОшибка.Вставить("ИмяПараметра", "Файл настройки");
		НоваяОшибка.Вставить("ЗначениеПараметра", ИмяФайла);
		НоваяОшибка.Вставить("ТекстОшибки","Не удалось открыть файл, либо невалидный xml. "+ОписаниеОшибки());
		НоваяОшибка.Вставить("ИнформацияПоОбъекту","");
		НоваяОшибка.Вставить("ИмяОбъекта","");
		НоваяОшибка.Вставить("ПолныйПуть", ПолноеИмяФайла);
		ТаблицаОшибок.Добавить(НоваяОшибка);
		
	КонецПопытки;
	
	СтруктураИниФайла.Вставить("сбисОшибки",ТаблицаОшибок);
	СтруктураИниФайла.Вставить("сбисПолноеИмяФайла",ПолноеИмяФайла);
	СтруктураИниФайла.Вставить("сбисИмяФайла",ИмяФайла);
	
	Возврат СтруктураИниФайла;
КонецФункции

//Дубль функции формирования структуры ини на клиенте. Для УФ - контекст клиента для удобства выгрузки файлов ини.
&НаКлиенте
Функция		СформироватьСтруктуруИниВКонтекстеКлиента(МассивУстановленныхИниФайлов)
	
	// Формирует структуру установленных файлов настроек	
	Ини = Новый Структура;
	Для Каждого ИниФайл Из МассивУстановленныхИниФайлов Цикл
		ПолучитьСтруктуруИниФайлаВКонтекстеКлиента(ини,ИниФайл.ПутьДоИниФайла,ИниФайл.ИмяФайла);  //получили структуру типового ини файла (.sbis.ini)
		Если ИниФайл.ЕстьИзменения Тогда
			ПолучитьСтруктуруИниФайлаВКонтекстеКлиента(ини,ИниФайл.ПутьДоИниФайла,ИниФайл.ИмяФайлаКлиента); //получили структуру ини файла клиента и заменили его элементами
		КонецЕсли;	
	КонецЦикла;
	Возврат Ини;
	
КонецФункции	

//Дубль функции получения данных структуры ини на клиенте. Для УФ - контекст клиента для удобства загрузки файлов ини.
&НаКлиенте
Функция		ПолучитьСтруктуруИниФайлаВКонтекстеКлиента(ини,Путь, ИмяФайла)
	// формирует структуру файла настроек	
	ИмяИни = ИмяИниИзИмениФайла(ИмяФайла);
	Возврат ПолучитьСтруктуруИниФайлаВИмяИниВКонтекстеКлиента(ини, Путь, ИмяФайла, ИмяИни);
КонецФункции

&НаКлиенте
Функция		ПолучитьСтруктуруИниФайлаВИмяИниВКонтекстеКлиента(ини, Путь, ИмяФайла, ИмяИни)
	// формирует структуру файла настроек и кладет ее в структуру ини под указанным именем (имя ини отличается от имени файла в случае, если указана ссылка на базовый файл настроек)
	
	ТаблицаОшибок = Новый Массив();
	Если Не Ини.Свойство(ИмяИни) Тогда
		Ини.Вставить(ИмяИни, Новый Структура);
	КонецЕсли;
	СтруктураИниФайла = Ини[ИмяИни];
	
	ПолноеИмяФайла = Путь+ИмяФайла;
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
		ПостроительDOM = Новый ПостроительDOM; 
		ДокументДОМ = ПостроительDOM.Прочитать(ЧтениеXML);
		ЭлементыБазовыйФайлНастроек = ДокументДОМ.ПолучитьЭлементыПоИмени("БазовыйФайлНастроек");
		// Если есть ссылка на базовый файл настроек, то заполняем сначала структуру по базовому файлу, а потом накладываем на нее структуру текущего файла
		Если ЭлементыБазовыйФайлНастроек.Количество() = 1 Тогда
			ЭлементБазовыйФайлНастроек = ЭлементыБазовыйФайлНастроек.Элемент(0);
			БазовыйФайлНастроек = СокрЛП(СтрЗаменить(ЭлементБазовыйФайлНастроек.ТекстовоеСодержимое,"'",""));
			НайденныеФайлы = НайтиФайлы(Путь+БазовыйФайлНастроек);
			Если НайденныеФайлы.Количество() = 1 Тогда
				ПолучитьСтруктуруИниФайлаВИмяИни(ини, Путь, НайденныеФайлы[0].Имя, ИмяИни);
			Иначе
				НоваяОшибка = Новый Структура();
				НоваяОшибка.Вставить("ИмяПараметра", "Файл настройки");
				НоваяОшибка.Вставить("ЗначениеПараметра", ИмяФайла);
				НоваяОшибка.Вставить("ТекстОшибки","Не найден файл """+Путь+БазовыйФайлНастроек+""", указанный в качестве базового");
				НоваяОшибка.Вставить("ИнформацияПоОбъекту","");
				НоваяОшибка.Вставить("ИмяОбъекта","");
				НоваяОшибка.Вставить("ПолныйПуть", ПолноеИмяФайла);
				ТаблицаОшибок.Добавить(НоваяОшибка);
			КонецЕсли;
		КонецЕсли;
		ЗаписатьДОМВСтруктуруВКонтекстеКлиента(ДокументДОМ.ПервыйДочерний.ПервыйДочерний, СтруктураИниФайла,ТаблицаОшибок);	
		ЧтениеXML.Закрыть();
	Исключение
		НоваяОшибка = Новый Структура();
		НоваяОшибка.Вставить("ИмяПараметра", "Файл настройки");
		НоваяОшибка.Вставить("ЗначениеПараметра", ИмяФайла);
		НоваяОшибка.Вставить("ТекстОшибки","Не удалось открыть файл, либо невалидный xml. "+ОписаниеОшибки());
		НоваяОшибка.Вставить("ИнформацияПоОбъекту","");
		НоваяОшибка.Вставить("ИмяОбъекта","");
		НоваяОшибка.Вставить("ПолныйПуть", ПолноеИмяФайла);
		ТаблицаОшибок.Добавить(НоваяОшибка);
		
	КонецПопытки;
	
	СтруктураИниФайла.Вставить("сбисОшибки",ТаблицаОшибок);
	СтруктураИниФайла.Вставить("сбисПолноеИмяФайла",ПолноеИмяФайла);
	СтруктураИниФайла.Вставить("сбисИмяФайла",ИмяФайла);
	
	Возврат СтруктураИниФайла;
КонецФункции

//Запись//

//Формирует клиентские инишки по итогам проверки с ошибками
&НаСервереБезКонтекста
Процедура	сбисСформироватьИниФайлыКлиентаНаСервере(СписокИниФайловДляПроверки, ВыгружаемыеИни, КаталогНастроек, РежимРаботы)
	
	Для	Каждого	ИниФайл Из СписокИниФайловДляПроверки	Цикл
		ИмяБезРасширения	= ИниФайл.Ини_ИмяБезРасширения;
		ИмяИни				= ИниФайл.Ини_ИмяИни;
		
		Если	Не	ВыгружаемыеИни.Свойство(ИмяИни)	Тогда
			Продолжить;
		КонецЕсли;
		
		сбисСформироватьИниФайлКлиентаНаСервере(ИмяБезРасширения,ВыгружаемыеИни, КаталогНастроек, ИмяИни, РежимРаботы);
		
		ИниФайл.ЕстьИзменения	= Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура	сбисСформироватьИниФайлКлиентаНаСервере(Знач ИмяИниФайлаКлиента,Знач ини, КаталогНастроек, ИмяИни, РежимРаботы)
	// Формирует клиентский файл настроек	
	СтруктураИниФайла	= Ини[ИмяИни];
	СлужебнаяСтруктура	= Ини[ИмяИни];
	
	ИмяИниФайлаКлиента			= ИмяИниФайлаКлиента+".xml";
	НайденныеИниФайлыКлиента	= НайтиФайлы(КаталогНастроек + ИмяИниФайлаКлиента);
	
	//если ини файл настроек клиента сущесвует, то получаем его структуру
	//иначе это новая, пустая структура
	НоваяСтруктура = Новый Структура;
	НоваяСтруктура.Вставить("СлужебнаяСтруктура", Новый Структура);
	Если НайденныеИниФайлыКлиента.Количество() Тогда
		СтруктураИниФайлаКлиента = ПолучитьСтруктуруИниФайла(НоваяСтруктура, КаталогНастроек, ИмяИниФайлаКлиента);
	Иначе	
		СтруктураИниФайлаКлиента = Новый Структура
	КонецЕсли;	
	
	Если РежимРаботы = "ВыгрузкаВКаталог" Тогда
		СтруктураИниФайлаКлиентаВыгрузить = СлужебнаяСтруктура;
	Иначе
		Если ЕстьОшибкаВУзлеСлужебнойСтруктуры(СлужебнаяСтруктура) Тогда //Если ошибок нет, то файл не переписываем
			//Добавляем ошибки из СлужебнойСтруктуры и СтруктуруИниФайлаКлиента
			СтруктураИниФайлаКлиентаВыгрузить = ДобавитьЗначенияСОшибкамиВСтруктуруКлиента(СлужебнаяСтруктура, СтруктураИниФайлаКлиента);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(КаталогНастроек + ИмяИниФайлаКлиента, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();		
	ЗаписьXML.ЗаписатьНачалоЭлемента("ини");
	ЗаписатьУзелСтруктурыВXML("", СтруктураИниФайлаКлиентаВыгрузить, ЗаписьXML);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

//Формирует клиентские инишки в каталог. Для УФ - контекст клиента для удобства выгрузки файлов ини.
&НаКлиенте
Процедура	сбисСформироватьИниФайлыКлиентаВКонтекстеКлиента(Кэш, СписокИниФайловДляПроверки, ВыгружаемыеИни, КаталогНастроек, РежимРаботы)
	
	Для	Каждого	ИниФайл Из СписокИниФайловДляПроверки	Цикл
		ИмяБезРасширения	= ИниФайл.Ини_ИмяБезРасширения;
		ИмяИни				= ИниФайл.Ини_ИмяИни;
		
		Если	Не	ВыгружаемыеИни.Свойство(ИмяИни)	Тогда
			Продолжить;
		КонецЕсли;
		
		СбисСформироватьИниФайлКлиентаВКонтекстеКлиента(Кэш, ИмяБезРасширения,ВыгружаемыеИни, КаталогНастроек, ИмяИни, РежимРаботы);
		
		ИниФайл.ЕстьИзменения	= Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура	СбисСформироватьИниФайлКлиентаВКонтекстеКлиента(Кэш, ИмяИниФайлаКлиента,ини, КаталогНастроек, ИмяИни, РежимРаботы)
	// Формирует клиентский файл настроек	
	СтруктураИниФайла	= Ини[ИмяИни];
	СлужебнаяСтруктура	= Ини[ИмяИни];
	
	ИмяИниФайлаКлиента			= ИмяИниФайлаКлиента+".xml";
	НайденныеИниФайлыКлиента	= НайтиФайлы(КаталогНастроек+ИмяИниФайлаКлиента);
	
	//если ини файл настроек клиента сущесвует, то получаем его структуру
	//иначе это новая, пустая структура
	НоваяСтруктура = Новый Структура;
	НоваяСтруктура.Вставить("СлужебнаяСтруктура", Новый Структура);
	Если НайденныеИниФайлыКлиента.Количество()<>0 Тогда
		СтруктураИниФайлаКлиента = ПолучитьСтруктуруИниФайла(НоваяСтруктура, КаталогНастроек, ИмяИниФайлаКлиента);
	Иначе	
		СтруктураИниФайлаКлиента = Новый Структура
	КонецЕсли;	
	
	Если РежимРаботы = "ВыгрузкаВКаталог" Тогда
		СтруктураИниФайлаКлиентаВыгрузить = Кэш.ФормаНастроекОбщее.ОчиститьСтруктуруИниОтСлужебныхЗначений(СлужебнаяСтруктура);
	ИначеЕсли ЕстьОшибкаВУзлеСлужебнойСтруктуры(СлужебнаяСтруктура) Тогда //Если ошибок нет, то файл не переписываем
		//Добавляем ошибки из СлужебнойСтруктуры и СтруктуруИниФайлаКлиента
		СтруктураИниФайлаКлиентаВыгрузить = ДобавитьЗначенияСОшибкамиВСтруктуруКлиента(СлужебнаяСтруктура, СтруктураИниФайлаКлиента);
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(КаталогНастроек + ИмяИниФайлаКлиента, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();		
	ЗаписьXML.ЗаписатьНачалоЭлемента("ини");
	Попытка
		ЗаписатьУзелСтруктурыВXMLВКонтекстеКлиента(Кэш, СтруктураИниФайлаКлиентаВыгрузить, ЗаписьXML);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке().Описание;
		Если Найти(ИнфоОбОшибке, "%замена%") Тогда
			ИнфоОбОшибке = СтрЗаменить(ИнфоОбОшибке, "%замена%", ИмяИни);
		КонецЕсли;
		СбисИсключение = Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекКаталог.СбисСформироватьИниФайлКлиентаВКонтекстеКлиента", 773,,ИнфоОбОшибке);
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, СбисИсключение, Новый Структура("ФормаВладелец", Кэш.ФормаНастроекОбщее));
	КонецПопытки;
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

// Переименовывает доступные в каталоге настройки под текущую версию конфигурации и архивирует старые. Возвращает Истина, если настроки переименованы и создан архив
&НаКлиенте
Функция ДоступныИПереименованыФайлыНастроекДляНовойВерсииКонфигурации(Кэш, ПараметрыОбновления, Отказ) Экспорт
	СписокТиповНастроек					= СформироватьСписокДоступныхНастроек(Кэш, ПараметрыОбновления.ВременныйКаталогРаспаковкиИни);
	
	ПредставлениеПодсистемы		= Кэш.ФормаНастроекОбщее.ОпределитьТипПодсистемы();
	ПрефиксТекущейКонфигурации	= Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис + ПредставлениеПодсистемы;
	ПараметрыОбновления.Вставить("ПрефиксТекущейКонфигурации", ПрефиксТекущейКонфигурации);
	
	ПрефиксФайловНовойВерсииНастроек	= Кэш.ФормаНастроекОбщее.ПолучитьПрефиксФайловНовойВерсииНастроек(СписокТиповНастроек, , Новый Структура("ПрефиксТекущейКонфигурации", ПрефиксТекущейКонфигурации));
	Если ПрефиксФайловНовойВерсииНастроек = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	НастройкиПереименованы = ДоступныИПереименованыФайлыНастроекДляНовойВерсииКонфигурацииНаСервере(ПараметрыОбновления, ПрефиксФайловНовойВерсииНастроек, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(НастройкиПереименованы, "ФайлыНастроекКаталог.ДоступныИПереименованыНастройкиДляНовойВерсииКонфигурации");
	КонецЕсли;
	Возврат  НастройкиПереименованы;
КонецФункции

// См. описание функции "ДоступныИПереименованыФайлыНастроекДляНовойВерсииКонфигурации"
&НаСервереБезКонтекста
Функция ДоступныИПереименованыФайлыНастроекДляНовойВерсииКонфигурацииНаСервере(ПараметрыОбновления, ПрефиксФайловНовойВерсииНастроек, Отказ)
			
	МассивДоступныхИниФайлов = НайтиФайлы(ПараметрыОбновления.КаталогНастроек,"ВО8*.xml");
	Если НЕ МассивДоступныхИниФайлов.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ПрефиксТекущейКонфигурации = ПараметрыОбновления.ПрефиксТекущейКонфигурации;
	
	МассивДоступныхФайловНастроек = Новый Массив;
	ПерезаписатьИСохранитьФайлыНастроек = Ложь;
	Для Каждого Настройка Из МассивДоступныхИниФайлов Цикл
		ПрефиксДоступныхФайловНастроек = Лев(Настройка.Имя,Найти(Настройка.Имя, "_")-1);
		МассивДоступныхФайловНастроек.Добавить(ПрефиксДоступныхФайловНастроек);
		Если ЭтоНоваяВерсияНаСервере(ПрефиксФайловНовойВерсииНастроек, ПрефиксДоступныхФайловНастроек, ПрефиксТекущейКонфигурации) Тогда
			ПерезаписатьИСохранитьФайлыНастроек = Истина;
		КонецЕсли;
	КонецЦикла;
		
	Если ПерезаписатьИСохранитьФайлыНастроек Тогда	
		// Сделаем бекап, пока еще настройки не переименованы
		РезультатБэкап = СделатьБэкапИниФайлов(ПараметрыОбновления.КаталогНастроек, МассивДоступныхИниФайлов, ПараметрыОбновления, Отказ);
		Если Отказ Тогда 
			//Не удалось сохранить файлы перед обновлением. Выходим
			Возврат РезультатБэкап;
		КонецЕсли;
		ПараметрыОбновления.Вставить("АрхивНастроекУжеСоздан", Истина);
		Для Каждого ФайлНастроек Из МассивДоступныхИниФайлов Цикл
			ПереместитьФайл(ФайлНастроек.ПолноеИмя, СтрЗаменить(ФайлНастроек.ПолноеИмя, Лев(ФайлНастроек.Имя,Найти(ФайлНастроек.Имя, "_")-1), ПрефиксФайловНовойВерсииНастроек));
		КонецЦикла;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоНоваяВерсияНаСервере(НоваяВерсия, СтараяВерсия, ПрефиксВерсии = " ") Экспорт
	// Функция проверяет, является ли текущая версия обработки или SDK новой по отношению к предыдущей запущенной	
	Если Не ЗначениеЗаполнено(СтараяВерсия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрНоваяВерсия = СтрЗаменить(НоваяВерсия, ПрефиксВерсии, "");
	СтрНоваяВерсия = СтрЗаменить(СтрНоваяВерсия, ".", Символы.ПС);
	СтрНоваяВерсия = СтрЗаменить(СтрНоваяВерсия, "-", Символы.ПС);
	
	СтрСтараяВерсия= СтрЗаменить(СтараяВерсия, ПрефиксВерсии, "");
	СтрСтараяВерсия= СтрЗаменить(СтрСтараяВерсия, ".", Символы.ПС);
	СтрСтараяВерсия= СтрЗаменить(СтрСтараяВерсия, "-", Символы.ПС);
	
	сЧислоРазрядов = Макс(СтрЧислоСтрок(СтрНоваяВерсия),СтрЧислоСтрок(СтрСтараяВерсия));
	Для сч = 1 По сЧислоРазрядов Цикл
		ЗначениеРазрядаНов = СтрПолучитьСтроку(СтрНоваяВерсия, сч);
		ЗначениеРазрядаСтар = СтрПолучитьСтроку(СтрСтараяВерсия, сч);
		Попытка
			ЗначениеРазрядаНов = Число(ЗначениеРазрядаНов);
		Исключение
			ЗначениеРазрядаНов = 0;
		КонецПопытки;
		Попытка
			ЗначениеРазрядаСтар = Число(ЗначениеРазрядаСтар);
		Исключение
			ЗначениеРазрядаСтар = 0;
		КонецПопытки;
		
		Если ЗначениеРазрядаНов > ЗначениеРазрядаСтар Тогда
			Возврат Истина;
		ИначеЕсли ЗначениеРазрядаНов = ЗначениеРазрядаСтар Тогда
			Продолжить;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	Возврат Ложь;
КонецФункции


////////////////////////////////////////////////////////////
//////////////////////Работа с файлами//////////////////////
////////////////////////////////////////////////////////////

///////////////////////////
/////////////XML///////////

&НаСервереБезКонтекста
Функция		ПолучитьXMLСПростымиЭлементами(Док, кодировка = "windows-1251")
	// функция формирует строку xml на основании структуры	(xml без атрибутов, с простыми элементами)
	ОбъектXML = Новый ЗаписьXML;
	ОбъектXML.УстановитьСтроку(кодировка);
	ОбъектXML.ЗаписатьОбъявлениеXML();
	ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML,Док);
	СтрXML = ОбъектXML.Закрыть();
	Возврат СтрXML;
КонецФункции

&НаСервереБезКонтекста
Процедура	ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML, СтруктураДокумента)
	// процедура рекурсивно заполняет ЗаписьXML на основании структуры  (xml без атрибутов, с простыми элементами)
	Для Каждого Элемент Из СтруктураДокумента Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Или ТипЗнч(Элемент.Значение) = Тип("Булево") Тогда
			Если Элемент.Ключ = "ЗначениеУзла" Тогда
				ОбъектXML.ЗаписатьТекст(СокрЛП(Элемент.Значение));
			Иначе
				ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
				ОбъектXML.ЗаписатьТекст(СокрЛП(Элемент.Значение));
				ОбъектXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
			ОбъектXML.ЗаписатьТекст(Формат(Элемент.Значение,"ЧРД=.; ЧГ=0"));
			ОбъектXML.ЗаписатьКонецЭлемента();	
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
			ОбъектXML.ЗаписатьТекст(Формат(Элемент.Значение,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс"""));
			ОбъектXML.ЗаписатьКонецЭлемента();
		ИначеЕсли Элемент.Значение = Неопределено и Элемент.Ключ <> "ЗначениеУзла" Тогда
			ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
			ОбъектXML.ЗаписатьТекст("");
			ОбъектXML.ЗаписатьКонецЭлемента();
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Если Элемент.Ключ = "Атрибуты" Тогда
				Для Каждого Атрибут из Элемент.Значение Цикл
					ЗаписатьНеобязательныйАтрибут(Атрибут.Ключ, СокрЛП(Атрибут.Значение), ОбъектXML);	
				КонецЦикла;
			Иначе
				ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
				ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML, Элемент.Значение);
				ОбъектXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
				ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML, ЭлементМассива);
				ОбъектXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

&НаСервереБезКонтекста
Процедура	ЗаписатьНеобязательныйАтрибут(Атрибут,ЗначениеАтрибута,ОбъектXML)
	// Процедура записывает атрибут в ЗаписьXML, если атрибут заполнен	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		Попытка
			ОбъектXML.ЗаписатьАтрибут(Атрибут,ЗначениеАтрибута);
		Исключение
			Сообщить(ОписаниеОшибки()+" "+Атрибут+"="+ЗначениеАтрибута);
		КонецПопытки;
	КонецЕсли;		 
КонецПроцедуры

&НаСервереБезКонтекста
Функция		ЗаполнитьСтруктуруФайлаСПростымиЭлементами(СтрокаXML)
	// Функция формирует структуру по XML (xml без атрибутов, с простыми элементами)	
	СтруктураФайла = Новый Структура;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	ПостроительDOM = Новый ПостроительDOM; 
	Попытка
		ДокументДОМ = ПостроительDOM.Прочитать(ЧтениеXML);
		ПрочитатьУзелDOMСПростымиЭлементами(ДокументДОМ.ПервыйДочерний, СтруктураФайла);
	Исключение
	КонецПопытки;
	Возврат СтруктураФайла;
КонецФункции

&НаСервереБезКонтекста
Процедура	ЗаписатьУзелСтруктурыВXML(КлючУзла, Узел, ЗаписьXML)//Узел - узел структуры
	// Записывает структуру в xml при формировании пользовательского файла настроек	
	Для Каждого ЭлементУзла Из Узел Цикл		
		Если Лев(НРег(ЭлементУзла.Ключ),4) = "сбис" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементУзла.Значение) = Тип("Структура") Тогда
			Если ЭлементУзла.Значение.Свойство("Значение") Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
				Для каждого ПодУзел из ЭлементУзла.Значение Цикл //Записываем в атрибуты все, кроме поля Значение, а Значение кладем в содержимое узла
					Если ПодУзел.Ключ <> "Значение" Тогда
						Если ПодУзел.Ключ = "Отбор" Тогда
							Для Каждого ЭлементОтбора Из ПодУзел.Значение Цикл
								ЗаписьXML.ЗаписатьАтрибут("Отбор_"+ЭлементОтбора.Ключ, ЭлементОтбора.Значение);	
							КонецЦикла;
						Иначе							
							ЗаписьXML.ЗаписатьАтрибут(ПодУзел.Ключ, ПодУзел.Значение);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ЗаписьXML.ЗаписатьТекст(ЭлементУзла.Значение.Значение);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ИначеЕсли ЭлементУзла.Значение.Свойство("сбисПараметрыУзла") и ЭлементУзла.Значение.сбисПараметрыУзла.Свойство("сбисАтрибутИмя") Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
				ЗаписьXML.ЗаписатьАтрибут("Имя", ЭлементУзла.Значение.сбисПараметрыУзла.сбисАтрибутИмя); 
				ЗаписатьУзелСтруктурыВXML(ЭлементУзла.Ключ, ЭлементУзла.Значение, ЗаписьXML);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе	
				Для каждого ПодУзел из ЭлементУзла.Значение Цикл //Выбираем подузлы
					//Если ПодУзел.Значение.Количество() <> 0 Тогда 
					ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
					ЗаписьXML.ЗаписатьАтрибут("Имя", ПодУзел.Ключ);
					ЗаписатьУзелСтруктурыВXML(ПодУзел.Ключ, ПодУзел.Значение, ЗаписьXML);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					//КонецЕсли;
				КонецЦикла;								
			КонецЕсли;	
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
			ЗаписьXML.ЗаписатьТекст(ЭлементУзла.Значение);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

// Записывает структуру в xml при формировании пользовательского файла настроек	как есть
&НаКлиенте
Процедура	ЗаписатьУзелСтруктурыВXMLВКонтекстеКлиента(Кэш, Узел, ЗаписьXML, КлючУзла="", Уровень=1)//Узел - узел структуры
	Для Каждого ЭлементУзла Из Узел Цикл		
		Попытка
			Если ТипЗнч(ЭлементУзла.Значение) = Тип("Структура") Тогда
				Если ЭлементУзла.Значение.Свойство("Значение") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
					Для Каждого ПодУзел из ЭлементУзла.Значение Цикл //Записываем в атрибуты все, кроме поля Значение, а Значение кладем в содержимое узла
						Если		ПодУзел.Ключ = "Значение" Тогда
							Продолжить;
						ИначеЕсли	ПодУзел.Ключ = "Отбор" Тогда
							Для Каждого ЭлементОтбора Из ПодУзел.Значение Цикл
								Попытка
									ЗаписьXML.ЗаписатьАтрибут("Отбор_"+ЭлементОтбора.Ключ, ЭлементОтбора.Значение);	
								Исключение
									ВызватьИсключение("Неизвестный формат узла по пути %замена%.Отбор." + ЭлементОтбора.Ключ);
								КонецПопытки;
							КонецЦикла;
						Иначе							
							Попытка
								ЗаписьXML.ЗаписатьАтрибут(ПодУзел.Ключ, ПодУзел.Значение);
							Исключение
								ВызватьИсключение("Неизвестный формат узла по пути %замена%." + ПодУзел.Ключ);
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;
					ЗаписьXML.ЗаписатьТекст(ЭлементУзла.Значение.Значение);
					ЗаписьXML.ЗаписатьКонецЭлемента();
				ИначеЕсли ЭтоУзелССокращеннымИменем(ЭлементУзла.Ключ, ЭлементУзла.Значение, Уровень) Тогда//На четном уровне могут встречаться узлы с сокращенным тегом Имя
					ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
					ЗаписьXML.ЗаписатьАтрибут("Имя", ЭлементУзла.Ключ);
					ЗаписатьУзелСтруктурыВXMLВКонтекстеКлиента(Кэш, ЭлементУзла.Значение, ЗаписьXML, ЭлементУзла.Ключ, Уровень + 2);
					ЗаписьXML.ЗаписатьКонецЭлемента();
				Иначе
					Для Каждого ПодУзел Из ЭлементУзла.Значение Цикл //Выбираем подузлы
						Попытка
							ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
							Если ТипЗнч(ПодУзел.Значение) = Тип("Строка") Тогда
								ЗаписьXML.ЗаписатьТекст(ПодУзел.Значение);
							Иначе
								ЗаписьXML.ЗаписатьАтрибут("Имя", ПодУзел.Ключ);
								ЗаписатьУзелСтруктурыВXMLВКонтекстеКлиента(Кэш, ПодУзел.Значение, ЗаписьXML, ПодУзел.Ключ, Уровень + 1);
							КонецЕсли;	
							ЗаписьXML.ЗаписатьКонецЭлемента();
						Исключение
							ВызватьИсключение("Неизвестный формат узла по пути %замена%." + ЭлементУзла.Ключ);
						КонецПопытки;
					КонецЦикла;								
				КонецЕсли;	
			Иначе
				ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
				ЗаписьXML.ЗаписатьТекст(ЭлементУзла.Значение);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;	
		Исключение
			ИнфоОбшибке = ИнформацияОбОшибке().Описание;
			Если Найти(ИнфоОбшибке, "%замена%") Тогда
				ВызватьИсключение(СтрЗаменить(ИнфоОбшибке, "%замена%", "%замена%." + ЭлементУзла.Ключ));
			КонецЕсли;
			ВызватьИсключение("Неизвестный формат узла по пути %замена%." + ЭлементУзла.Ключ);
		КонецПопытки;
	КонецЦикла;	
	
КонецПроцедуры

//Проверяет узел на сокращение атрибута имя при одинаковых значениям. Пример: <Сотрудник Имя="Сотрудник"></Сотрудник> в виде структуры будет без атрибута Имя. 
&НаКлиенте
Функция ЭтоУзелССокращеннымИменем(ИмяУзла, ЗначениеУзла, Уровень)
	//Если Цел(Уровень/2) = Уровень/2 Тогда
	Для Каждого КлючИЗначениеУзла Из ЗначениеУзла Цикл
		Если Не ТипЗнч(КлючИЗначениеУзла.Значение) = Тип("Структура") Тогда
			ВызватьИсключение("Неизвестный формат узла по пути %замена%." + КлючИЗначениеУзла.Ключ);
		КонецЕсли;
		Для Каждого КлючИЗначениеПодУзла Из КлючИЗначениеУзла.Значение Цикл
			КлючПодУзла = НРег(КлючИЗначениеПодУзла.Ключ);
			Если Лев(КлючПодУзла, 5) = "выбор" Тогда//Выбор не может быть склеен
				Продолжить;
			ИначеЕсли  	ТипЗнч(КлючИЗначениеПодУзла.Значение) = Тип("Строка") Тогда//Если у одного из подузлов как значение - строка
				Возврат Истина;
			//ИначеЕсли	КлючИЗначениеПодУзла.Значение.Свойство("Значение") 
			//	     И	ТипЗнч(КлючИЗначениеПодУзла.Значение) = Тип("Строка")Тогда
			//	Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//КонецЕсли;
	Возврат Ложь;
КонецФункции

///////////////////////////
/////////////DOM///////////

&НаСервереБезКонтекста
Функция		ПрочитатьУзелDOMСПростымиЭлементами(УзелDOM, Узел)
	// Функция рекурсивно заполняет структуру из узла DOM	
	Уз = УзелDOM;
	Пока Уз<>Неопределено Цикл
		Если ТипЗнч(Уз) = Тип("ТекстDOM") Тогда
			Если Узел.Количество() = 0 Тогда
				Узел = Уз.ПолныйТекст;
			Иначе
				Узел.Вставить("Параметр", Уз.ПолныйТекст);
			КонецЕсли;	
			Возврат Узел;
		Иначе	
			Если Уз.ПервыйДочерний <> Неопределено Тогда
				Узел.Вставить(Уз.ИмяУзла, Новый Структура);
			Иначе
				Узел.Вставить(Уз.ИмяУзла, "");
			КонецЕсли;	
		КонецЕсли;	
		Если Уз.ПервыйДочерний <> Неопределено Тогда
			Уз = УЗ.ПервыйДочерний;
			ДочУзел = Новый Структура;
			сбисСкопироватьСтруктуру(ДочУзел, Узел[УЗ.РодительскийУзел.ИмяУзла]);
			ПрочитатьУзелDOMСПростымиЭлементами(Уз, ДочУзел);
			Узел.Вставить(УЗ.РодительскийУзел.ИмяУзла, ДочУзел);
			Уз = Уз.РодительскийУзел;
		КонецЕсли;
		Уз = Уз.СледующийСоседний;
	КонецЦикла;
	
	Возврат Узел;
	
КонецФункции

&НаСервереБезКонтекста
Процедура	ЗаписатьДОМВСтруктуру(Элемент, СтруктураИниФайла,ТаблицаОшибок)
	// формирует структуру из xml	
	Если Элемент.ТипУзла <> ТипУзлаDOM.Комментарий Тогда
		Если Элемент.ПервыйДочерний=Неопределено или ТипЗнч(Элемент.ПервыйДочерний)=Тип("ТекстDOM") Тогда //это простой элемент
			Попытка
				//СтруктураЭлемента.Вставить(Элемент.ИмяЭлемента, Элемент.ТекстовоеСодержимое);
				Если Не СтруктураИниФайла.Свойство(Элемент.ИмяЭлемента) Тогда
					СтруктураИниФайла.Вставить(Элемент.ИмяЭлемента, Новый Структура);
				КонецЕсли;
				СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить("Значение", Элемент.ТекстовоеСодержимое);
			Исключение
				Попытка
					ДобавитьПростуюОшибку(ТаблицаОшибок,СокрЛП(Элемент.ИмяЭлемента),"Неверное имя переменной");
				Исключение
				КонецПопытки;
			КонецПопытки;
			Если Элемент.ТипУзла <> ТипУзлаDOM.Текст Тогда
				Для Каждого Атрибут  Из Элемент.Атрибуты Цикл
					Попытка
						Если Лев(Атрибут.Имя,6)="Отбор_" Тогда
							Если Не СтруктураИниФайла[Элемент.ИмяЭлемента].Свойство("Отбор") Тогда
								СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить("Отбор", Новый Структура);
							КонецЕсли;
							Если ЗначениеЗаполнено(Атрибут.ТекстовоеСодержимое) Тогда // в отбор добавляем только атрибуты с заполненными значениями
								СтруктураИниФайла[Элемент.ИмяЭлемента].Отбор.Вставить(Сред(Атрибут.Имя, 7),Атрибут.ТекстовоеСодержимое);
							КонецЕсли;
							Если СтруктураИниФайла[Элемент.ИмяЭлемента].Отбор.Свойство(Сред(Атрибут.Имя, 7)) и НЕ ЗначениеЗаполнено(Атрибут.ТекстовоеСодержимое) Тогда // если в стандартном файле значение заполнено, а в пользовательском пустое, удаляем его из отбора
								СтруктураИниФайла[Элемент.ИмяЭлемента].Отбор.Удалить(Сред(Атрибут.Имя, 7));
							КонецЕсли;
						ИначеЕсли	Атрибут.Имя = "Имя"
								И	Элемент.ТекстовоеСодержимое = "''" Тогда
								//Отключение типового составного узла при помощи пользовательской ини
								СтруктураИниФайла[Элемент.ИмяЭлемента].Удалить(Атрибут.ТекстовоеСодержимое);
								СтруктураИниФайла[Элемент.ИмяЭлемента].Удалить("Значение");
						Иначе
							СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Атрибут.Имя,Атрибут.ТекстовоеСодержимое);
						КонецЕсли;
					Исключение
						ДобавитьПростуюОшибку(ТаблицаОшибок,СокрЛП(Элемент.ИмяЭлемента),"Неверное имя атрибута "+Атрибут.Имя);
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		Иначе //это структура
			Если Не СтруктураИниФайла.Свойство(Элемент.ИмяЭлемента) Тогда
				Попытка
					//СтруктураЭлемента.Вставить(Элемент.ИмяЭлемента, Новый Структура);
					СтруктураИниФайла.Вставить(Элемент.ИмяЭлемента, Новый Структура);
				Исключение
					ДобавитьПростуюОшибку(ТаблицаОшибок,"","Неверное имя раздела:"+СокрЛП(Элемент.ИмяЭлемента));
				КонецПопытки;
			КонецЕсли;
			Имя = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
			Если Имя<>Неопределено и Имя.ТекстовоеСодержимое<>"" Тогда
				Если Не СтруктураИниФайла[Элемент.ИмяЭлемента].Свойство(Имя.ТекстовоеСодержимое) Тогда
					Попытка
						//СтруктураЭлемента[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Новый Структура);
						Если Элемент.ИмяЭлемента<>Имя.ТекстовоеСодержимое Тогда
							СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Новый Структура);
						КонецЕсли;
					Исключение
						ДобавитьПростуюОшибку(ТаблицаОшибок,"","Неверное имя атрибута: "+Имя.ТекстовоеСодержимое+" в разделе:"+СокрЛП(Элемент.ИмяЭлемента));
					КонецПопытки;
				Иначе
					// Чтобы соблюсти порядок узлов, установленный в пользовательской настройке, сначала удаляем существующий узел и заново вставляем
					Если 	(	Не	Элемент.ПредыдущийСоседний = Неопределено
							И		Элемент.ИмяУзла = Элемент.ПредыдущийСоседний.ИмяУзла)// делаем только если в пользовательский файл вынесен не один узел. Если вынесен один, значит порядок следования менять не надо.
						Или	(	Не	Элемент.СледующийСоседний = Неопределено
							И		Элемент.ИмяУзла = Элемент.СледующийСоседний.ИмяУзла) Тогда//Так, как нам без разницы, в каком порядке идут узлы в одном контексте, но нам важен порядок составных узлов, вроде Выбор, мФайл, мДокумент, то перестановку делаем только если имена соседей совпадают 
						Копия = СтруктураИниФайла[Элемент.ИмяЭлемента][Имя.ТекстовоеСодержимое];
						СтруктураИниФайла[Элемент.ИмяЭлемента].Удалить(Имя.ТекстовоеСодержимое);
						СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Копия);	
						Если Элемент.СледующийСоседний = Неопределено Тогда	// Это последний элемент в пользовательском файле. Составим полный список пользовательских узлов.
							СтруктураПользовательскихЭлементов = Новый Структура;
							СтруктураПользовательскихЭлементов.Вставить(Имя.ТекстовоеСодержимое);
							ПредыдущийСоседний = Элемент.ПредыдущийСоседний;
							Пока ПредыдущийСоседний<>Неопределено Цикл
								Если ПредыдущийСоседний.ТипУзла <> ТипУзлаDOM.Комментарий Тогда   // пропускаем комментарии
									ИмяПред = ПредыдущийСоседний.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
									Если ИмяПред<>Неопределено и ИмяПред.ТекстовоеСодержимое<>"" Тогда
										СтруктураПользовательскихЭлементов.Вставить(ИмяПред.ТекстовоеСодержимое);
									КонецЕсли;
								КонецЕсли;
								ПредыдущийСоседний = ПредыдущийСоседний.ПредыдущийСоседний;
							КонецЦикла;
							// Далее перенсем узлы, которые отсутствуют в пользовательском файле настроек в конец по порядку обхода.
							// Необходимо для случая, когда в основной файл настроек добавились, например, новые мДокументы, которые не описаны в пользовательском файле. 
							// Если их не перенести в конец, то они будут первые по порядку обхода, что приводит к неправильному определению мДокумента, используемого по умолчанию для загрузки.
							Для Каждого ЭлементОбщейИни Из СтруктураИниФайла[Элемент.ИмяЭлемента] Цикл
								Если НЕ СтруктураПользовательскихЭлементов.Свойство(ЭлементОбщейИни.Ключ) Тогда 
									КопияУзла = СтруктураИниФайла[Элемент.ИмяЭлемента][ЭлементОбщейИни.Ключ];	
									СтруктураИниФайла[Элемент.ИмяЭлемента].Удалить(ЭлементОбщейИни.Ключ);
									СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(ЭлементОбщейИни.Ключ, КопияУзла);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Элемент.ИмяЭлемента<>Имя.ТекстовоеСодержимое Тогда
				ЗаписатьДОМВСтруктуру(Элемент.ПервыйДочерний, СтруктураИниФайла[Элемент.ИмяЭлемента][Имя.ТекстовоеСодержимое],ТаблицаОшибок);
				Иначе
					СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить("сбисПараметрыУзла", Новый Структура("сбисАтрибутИмя", Имя.ТекстовоеСодержимое));	
					ЗаписатьДОМВСтруктуру(Элемент.ПервыйДочерний, СтруктураИниФайла[Элемент.ИмяЭлемента],ТаблицаОшибок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Элемент.СледующийСоседний<>Неопределено Тогда
		ЗаписатьДОМВСтруктуру(Элемент.СледующийСоседний, СтруктураИниФайла,ТаблицаОшибок);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура	ЗаписатьДОМВСтруктуруВКонтекстеКлиента(Элемент, СтруктураИниФайла,ТаблицаОшибок)
	// формирует структуру из xml	
	Если Элемент.ТипУзла <> ТипУзлаDOM.Комментарий Тогда
		Если Элемент.ПервыйДочерний=Неопределено или ТипЗнч(Элемент.ПервыйДочерний)=Тип("ТекстDOM") Тогда //это простой элемент
			Попытка
				//СтруктураЭлемента.Вставить(Элемент.ИмяЭлемента, Элемент.ТекстовоеСодержимое);
				Если Не СтруктураИниФайла.Свойство(Элемент.ИмяЭлемента) Тогда
					СтруктураИниФайла.Вставить(Элемент.ИмяЭлемента, Новый Структура);
				КонецЕсли;
				СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить("Значение", Элемент.ТекстовоеСодержимое);
			Исключение
				Попытка
					ДобавитьПростуюОшибку(ТаблицаОшибок,СокрЛП(Элемент.ИмяЭлемента),"Неверное имя переменной");
				Исключение
				КонецПопытки;
			КонецПопытки;
			Если Элемент.ТипУзла <> ТипУзлаDOM.Текст Тогда
				Для Каждого Атрибут  Из Элемент.Атрибуты Цикл
					Попытка
						Если Лев(Атрибут.Имя,6)="Отбор_" Тогда
							Если Не СтруктураИниФайла[Элемент.ИмяЭлемента].Свойство("Отбор") Тогда
								СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить("Отбор", Новый Структура);
							КонецЕсли;
							//Для возможности отключения атрибутов в серверных настройках, пустые атрибуты добавляем в формируемую структуру ини.
							//При записи изменений, пустые узлы будут отправлены на сервер, чтобы при следущем чтении типовые узлы были отсеяны конвертером и не попали в рабочую инишку.
							//Если ЗначениеЗаполнено(Атрибут.ТекстовоеСодержимое) Тогда // в отбор добавляем только атрибуты с заполненными значениями
								СтруктураИниФайла[Элемент.ИмяЭлемента].Отбор.Вставить(Сред(Атрибут.Имя, 7),Атрибут.ТекстовоеСодержимое);
							//КонецЕсли;
							//Если СтруктураИниФайла[Элемент.ИмяЭлемента].Отбор.Свойство(Сред(Атрибут.Имя, 7)) и НЕ ЗначениеЗаполнено(Атрибут.ТекстовоеСодержимое) Тогда // если в стандартном файле значение заполнено, а в пользовательском пустое, удаляем его из отбора
							//	СтруктураИниФайла[Элемент.ИмяЭлемента].Отбор.Удалить(Сред(Атрибут.Имя, 7));
							//КонецЕсли;
						//Пока отключение узлов отложено, т.к. проблема с конвертацией в json
						//ИначеЕсли Атрибут.Имя="Отключено" И Атрибут.ТекстовоеСодержимое = "Истина" Тогда//Атрибут отключено убирает узел и его подузлы из обсчета.
						//	СтруктураИниФайла[Элемент.ИмяЭлемента].Очистить();
						//	СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Атрибут.Имя,Атрибут.ТекстовоеСодержимое);
						//	Прервать;
						ИначеЕсли	Атрибут.Имя = "Имя"
								И	Элемент.ТекстовоеСодержимое = "''" Тогда
								//Отключение типового составного узла при помощи пользовательской ини
								СтруктураИниФайла[Элемент.ИмяЭлемента][Атрибут.ТекстовоеСодержимое] = Элемент.ТекстовоеСодержимое;
								СтруктураИниФайла[Элемент.ИмяЭлемента].Удалить("Значение");
						Иначе
							СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Атрибут.Имя,Атрибут.ТекстовоеСодержимое);
						КонецЕсли;
					Исключение
						ДобавитьПростуюОшибку(ТаблицаОшибок,СокрЛП(Элемент.ИмяЭлемента),"Неверное имя атрибута "+Атрибут.Имя);
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		Иначе //это структура
			Если Не СтруктураИниФайла.Свойство(Элемент.ИмяЭлемента) Тогда
				Попытка
					//СтруктураЭлемента.Вставить(Элемент.ИмяЭлемента, Новый Структура);
					СтруктураИниФайла.Вставить(Элемент.ИмяЭлемента, Новый Структура);
				Исключение
					ДобавитьПростуюОшибку(ТаблицаОшибок,"","Неверное имя раздела:"+СокрЛП(Элемент.ИмяЭлемента));
				КонецПопытки;
			КонецЕсли;
			Имя = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
			Если Имя<>Неопределено и Имя.ТекстовоеСодержимое<>"" Тогда
				//Отключаем узел с прописываемым именем
				//Узел_Отключено = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("Отключено");
				//Если Узел_Отключено<>Неопределено И Узел_Отключено.ТекстовоеСодержимое="Истина" Тогда
				//	СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Новый Структура("Отключено", Узел_Отключено.ТекстовоеСодержимое));
				//	Возврат;
				//Иначе
				Если Не СтруктураИниФайла[Элемент.ИмяЭлемента].Свойство(Имя.ТекстовоеСодержимое) Тогда
					Попытка
						//СтруктураЭлемента[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Новый Структура);
						Если Элемент.ИмяЭлемента<>Имя.ТекстовоеСодержимое Тогда
							СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Новый Структура);
						КонецЕсли;
					Исключение
						ДобавитьПростуюОшибку(ТаблицаОшибок,"","Неверное имя атрибута: "+Имя.ТекстовоеСодержимое+" в разделе:"+СокрЛП(Элемент.ИмяЭлемента));
					КонецПопытки;
				Иначе
					// Чтобы соблюсти порядок узлов, установленный в пользовательской настройке, сначала удаляем существующий узел и заново вставляем
					Если НЕ (Элемент.ПредыдущийСоседний = Неопределено и Элемент.СледующийСоседний = Неопределено) Тогда // делаем только если в пользовательский файл вынесен не один узел. Если вынесен один, значит порядок следования менять не надо.
						Копия = СтруктураИниФайла[Элемент.ИмяЭлемента][Имя.ТекстовоеСодержимое];
						СтруктураИниФайла[Элемент.ИмяЭлемента].Удалить(Имя.ТекстовоеСодержимое);
						СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Копия);	
					КонецЕсли;
				КонецЕсли;
				Если Элемент.ИмяЭлемента<>Имя.ТекстовоеСодержимое Тогда
				ЗаписатьДОМВСтруктуруВКонтекстеКлиента(Элемент.ПервыйДочерний, СтруктураИниФайла[Элемент.ИмяЭлемента][Имя.ТекстовоеСодержимое],ТаблицаОшибок);
				Иначе
					ЗаписатьДОМВСтруктуруВКонтекстеКлиента(Элемент.ПервыйДочерний, СтруктураИниФайла[Элемент.ИмяЭлемента],ТаблицаОшибок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Элемент.СледующийСоседний<>Неопределено Тогда
		ЗаписатьДОМВСтруктуруВКонтекстеКлиента(Элемент.СледующийСоседний, СтруктураИниФайла,ТаблицаОшибок);
	КонецЕсли;
КонецПроцедуры

///////////////////////////
///////////Прочее//////////

&НаСервереБезКонтекста
Процедура	УдалитьФайлыНаСервере(Путь, Маска)// Удаляет выбранные файлы настроек на сервере
	
	УдалитьФайлы(Путь, Маска);
	
КонецПроцедуры

////////////////////////////////////////////////////
///////////Основные процедуры и функции/////////////
////////////////////////////////////////////////////

///////////////////////////
///////Внешний вызов///////

&НаКлиенте
Процедура	ИнициализироватьКэшНастроек(Кэш, ПараметрыИнициализации=Неопределено, Отказ=Ложь) 						Экспорт
	
	Если ТипЗнч(ПараметрыИнициализации) = Тип("Структура") 
		И ПараметрыИнициализации.Свойство("Обновить")  //флаг "Обновить" используется для установки кэша серверных настроек при изменении параметров 
		И ПараметрыИнициализации.Обновить Тогда
		Возврат;
	КонецЕсли;
	
	КэшНастроек				= Неопределено;
	ПараметрыНастроек		= Неопределено;
	ПрефиксСервисСистемы	= "ВО82";
	РежимНастроек			= "Каталог";
	
	//Если Не	(	Кэш.Свойство("КэшНастроек", КэшНастроек)
	//		И	ЗначениеЗаполнено(КэшНастроек)
	//		И	КэшНастроек.ПараметрыНастроек.Режим = РежимНастроек) Тогда
	КэшНастроек = Новый Структура("ИниВПорядке", Ложь);
	ПараметрыНастроек = Новый Структура;
	ПараметрыНастроек.Вставить("Режим",							"Каталог");
	ПараметрыНастроек.Вставить("ПрефиксСервис",					ПрефиксСервисСистемы);
	ПараметрыНастроек.Вставить("ЭлементФормы",					"КаталогНастроек");
	ПараметрыНастроек.Вставить("ПрефиксУстановленныхНастроек",	"-");//Передаваемый в статистику префикс от выбранных настроек.
	КэшНастроек.Вставить("ПараметрыНастроек",	ПараметрыНастроек);
	//КонецЕсли;
	КэшНастроек.Вставить("ИзмененияВНастройках",Ложь);
	
	Если Кэш.Свойство("КэшЗначенийИни") Тогда 
		Кэш.КэшЗначенийИни.ИниЗагрузки = Новый Структура();//Очищаем закэшированные значения ини загрузки.
	КонецЕсли;             
	
	Если ТипЗнч(ПараметрыИнициализации) = Тип("Структура") 
		И ПараметрыИнициализации.Свойство("ИнициализацияВременногоКэша") 
		И ПараметрыИнициализации.ИнициализацияВременногоКэша Тогда 
		Кэш.Вставить("КэшНастроек", КэшНастроек);
		Кэш.Парам.Вставить("ИдентификаторНастроек", СбисПолучитьИдентификаторНастроек(Кэш));
	Иначе 
		Кэш.ФормаНастроекОбщее.МестныйКэш = Кэш;
		МодульОбъектаКлиент().ОбновитьПараметрГлобальногоМодуля("ФормаНастроек",	ЭтаФорма);
		МодульОбъектаКлиент().ОбновитьПараметрГлобальногоМодуля("КэшНастроек",		КэшНастроек);
		МодульОбъектаКлиент().ИзменитьПараметрСбис("ИдентификаторНастроек", СбисПолучитьИдентификаторНастроек(Кэш));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура	ИнициализироватьКэшНастроекСБИС(Кэш, ПараметрыИнициализации=Неопределено, Отказ=Ложь) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	КэшIntegrationConnection= Новый Соответствие;
	КэшПолученныхНастроек	= Новый Структура;
	ПараметрыНастроек		= Новый Структура;
	КэшНастроек				= Новый Структура("ПараметрыНастроек, КэшIntegrationConnection, ИзмененияВНастройках, ИниВПорядке", ПараметрыНастроек, КэшIntegrationConnection, Ложь, Ложь);
	ПрефиксСервисСистемы	= "Com1C";
	
	ПараметрыНастроек.Вставить("ПрефиксСервис",					ПрефиксСервисСистемы + "82");	//Префикс системы по-умолчанию, для стандартных настроек
	ПараметрыНастроек.Вставить("ЭлементФормы",					"НастройкиНазвание");			//Элемент формы по-умолчанию
	ПараметрыНастроек.Вставить("ПрефиксУстановленныхНастроек",	"-");							//Передаваемый в статистику префикс от выбранных настроек.
	ПараметрыНастроек.Вставить("ПолучатьИниЗаРаз",				30);							//Определяет максимальное количество ини, получаемое запросом на сервер за раз. Разбивка для ускорения обработки больших строк.
	ПараметрыНастроек.Вставить("СимволыКаталог",				"@/-_=\# &:|;?.");				//Последовательность символов, которых не может быть в идентификаторе соединения, но могут быть в пути к папке
	ПараметрыНастроек.Вставить("КэшироватьВсеПолучаемые",		Ложь);							//Определяет необходимость хранить полученные ини в памяти.
	ПараметрыНастроек.Вставить("ИспользоватьУИДИнтеграции",		Истина);						//Определяет залоченность системы на УИД интеграции. В Мастере нельзя создать коннекшен и/или шаблон, отличный от установленного.
	ПараметрыНастроек.Вставить("СформироватьСтруктуруРазделов",	Ложь);							//Определяет необходимость формировать структуру разделов с Сбис Меню по всем инишкам.
	ПараметрыНастроек.Вставить("Режим",							"Каталог");
	ПараметрыНастроек.Вставить("ПоследнийРаздел",				"");							//Определяет наличие перехода в раздел настроек.
	
	
	ПараметрыСистемы = Кэш.ПараметрыСистемы;
	Если ПараметрыСистемы = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ПараметрыКонфигурации = Кэш.ФормаНастроекОбщее.ОпределитьПараметрыКонфигурации(Кэш.ПараметрыСистемы, Отказ);
	
	//Определяем service в зависимости от текущей версии системы
	ВерсияСистемыМС = СтрЗаменить(ПараметрыСистемы.Клиент.ВерсияПриложения, ".", Символы.ПС);
	service = ПрефиксСервисСистемы + СтрПолучитьСтроку(ВерсияСистемыМС,1);
	ПодВерсияСистемы2 = СтрПолучитьСтроку(ВерсияСистемыМС,2);
	Если (ПодВерсияСистемы2 = "1") Тогда
		ПодВерсияСистемы2 = "2";
	КонецЕсли;
	service = service + ПодВерсияСистемы2;
	
	ПараметрыКонфигурации.Вставить("service", service);
	КэшНастроек.Вставить("ПараметрыКонфигурации", ПараметрыКонфигурации);
	
	СоответствиеНазваний= Новый Массив;
	ДоступныеТипыИни	= Новый Массив;
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "Конфигурация",		"Конфигурация"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "сбисМеню",			"сбисМеню"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "СинхВыгрузка", 		"СинхВыгрузка"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "СинхЗагрузка", 		"СинхЗагрузка"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "ЗагрузкаИсходящих",	"Загрузка_Исходящий"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "Загрузка", 			"Загрузка_Входящий"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "ВыгрузкаВходящих", 	"Выгрузка_Входящий"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "Выгрузка", 			""));
	//Так, как в меню могут быть различные типы, не относящиеся к обработке, делаем фильтр.
	ДоступныеТипыИни.Добавить("Система");
	Для Шаг = 4 По СоответствиеНазваний.Количество()-1 Цикл
		ДоступныеТипыИни.Добавить(СоответствиеНазваний[Шаг].json);
	КонецЦикла;
	ПараметрыНастроек.Вставить("СоответствиеНазваний",СоответствиеНазваний);//Шаблон перевода имен названий сервис-обработка
	ПараметрыНастроек.Вставить("ДоступныеТипыИни",	ДоступныеТипыИни);		//Список доступных типов ини для работы обработки

	СписокПараметровХранящихсяНаШаблоне = Новый Массив;
    СписокПараметровХранящихсяНаШаблоне.Добавить("использоватьгенератор");
	СписокПараметровХранящихсяНаШаблоне.Добавить("реквизитсопоставленияноменклатуры");
	Если МодульОбъектаКлиент().ИспользоватьСбисПараметрыДляХраненияОбщихНастроек() Тогда 
    	СписокПараметровХранящихсяНаШаблоне.Добавить("saby_params");
	КонецЕсли;
   	Если Кэш.Парам.СпособХраненияМетокСтатусов = 1 Тогда
        СписокПараметровХранящихсяНаШаблоне.Добавить("status_marks");
    КонецЕсли;
	КэшНастроек.Вставить("СписокПараметровХранящихсяНаШаблоне", СписокПараметровХранящихсяНаШаблоне);
	
	//Очищаем закэшированные значения ини загрузки.
	Если Кэш.Свойство("КэшЗначенийИни") Тогда 
		Кэш.КэшЗначенийИни.ИниЗагрузки = Новый Структура();
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыИнициализации) = Тип("Структура") 
		И ПараметрыИнициализации.Свойство("ИнициализацияВременногоКэша") 
		И ПараметрыИнициализации.ИнициализацияВременногоКэша Тогда 
		Кэш.Вставить("КэшНастроек", КэшНастроек);
	Иначе 
		МодульОбъектаКлиент().ОбновитьПараметрГлобальногоМодуля("ФормаНастроек",	ЭтаФорма);
		МодульОбъектаКлиент().ОбновитьПараметрГлобальногоМодуля("КэшНастроек",		КэшНастроек);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция		ПолучитьМассивФайловДляКонфигурации(Кэш,СписокТиповНастроек, ПрефиксСервис,ЗначениеПредставление)		Экспорт
	
	Возврат	Кэш.ФормаНастроекОбщее.ПолучитьМассивФайловДляКонфигурации(СписокТиповНастроек, ПрефиксСервис, ЗначениеПредставление);
	
КонецФункции

&НаКлиенте
Функция		ПолучитьИнформациюПоНастройкам(Кэш, ПараметрыСтатистики, Отказ)											Экспорт
	
	КаталогПоиска = Кэш.Парам.ИдентификаторНастроек;
	
	ФайлыНастроек	= ПолучитьМассивУстановленныхИниФайлов(КаталогПоиска, Новый Структура("Автообновление", Кэш.Парам.НастройкиАвтообновление));
	ФайлыXSLT		= сбисПолучитьСписокXSLT(КаталогПоиска + ?(Прав(КаталогПоиска, 1) = "\", "", "\") + "xslt");
	
	Если Кэш.Заплатки = Ложь Тогда
		ЕстьФункции = Ложь;
	Иначе
		ЕстьФункции = Истина;
	КонецЕсли;
	Результат = Новый Структура("XSLT,XML,EPF", ФайлыXSLT, ФайлыНастроек, Новый Структура("ЕстьИзменения", ЕстьФункции));
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция		СбисПолучитьИдентификаторНастроек(Кэш)																	Экспорт
	
	Возврат Кэш.Парам.КаталогНастроек;
	
КонецФункции

//Функция возвращает последний сохраненный идентификатор настроек в СБИС для выбранного логина пользователя
&НаКлиенте
Функция		СбисПолучитьИдентификаторНастроекСБИС(Кэш) Экспорт
	
	КлючиНастроек = КлючиНастроекСБИС(Кэш);

	Для Каждого КлючНастроек Из	КлючиНастроек Цикл
		ЗначениеИдентификатора = Кэш.Парам.ИдентификаторыНастроекВСБИС.НайтиПоЗначению(КлючНастроек);
		Если Не ЗначениеИдентификатора = Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеИдентификатора = Неопределено Тогда
		Результат = "";
	Иначе
		Результат = ЗначениеИдентификатора.Представление;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Возвращает список ключей в порядке их приоритета для поиска сохранённого коннекшена. Первый ключ в списке - основной
&НаКлиенте
Функция		КлючиНастроекСБИС(Кэш) Экспорт
	
	ШаблонКлюча = "{КодСервиса}{ИдПользователя}_{ИдАккаунта}";
	ПараметрыПрименить = Новый Структура("Заменить", Кэш.СБИС.ПараметрыИнтеграции);

	Результат = Новый Массив;
	КлючДобавить = МодульОбъектаКлиент().СбисФормат(ШаблонКлюча, ПараметрыПрименить);
	Если ЗначениеЗаполнено(КлючДобавить) Тогда
		Результат.Добавить(КлючДобавить);
	КонецЕсли;
	Если		ЗначениеЗаполнено(Кэш.СБИС.ПараметрыИнтеграции.Пользователь) Тогда
		КлючНастроек = Кэш.СБИС.ПараметрыИнтеграции.Пользователь;
	ИначеЕсли	ЗначениеЗаполнено(Кэш.ГлавноеОкно.Пользователь) Тогда
		КлючНастроек = Кэш.ГлавноеОкно.Пользователь;
	ИначеЕсли	Кэш.СБИС.ОбменВключен
			И	Кэш.СБИС.Авторизован Тогда
		КлючНастроек = Кэш.Интеграция.ИнформацияОТекущемПользователе(Кэш);
	Иначе
		КлючНастроек = "";
	КонецЕсли;
	ШаблонКлюча = "{КодСервиса}{ИдПользователя}";
	ПараметрыФормат = Новый Структура("КодСервиса, ИдПользователя", "", "", "");
	ПараметрыПрименить.Заменить = ПараметрыФормат;
	Если ЗначениеЗаполнено(КлючНастроек) Тогда
		ПараметрыФормат.КодСервиса		= Кэш.СБИС.ПараметрыИнтеграции.КодСервиса;
		ПараметрыФормат.ИдПользователя	= НРег(СтрЗаменить(СтрЗаменить(СтрЗаменить(КлючНастроек, " ", ""), Символы.ПС, ""), Символы.Таб, ""));
		Результат.Добавить(МодульОбъектаКлиент().СбисФормат(ШаблонКлюча, ПараметрыПрименить));
		ПараметрыФормат.КодСервиса = "";
		Результат.Добавить(МодульОбъектаКлиент().СбисФормат(ШаблонКлюча, ПараметрыПрименить));
	КонецЕсли;
	Если Не Кэш.Парам.ВходПоСертификату Тогда
		ПараметрыФормат.ИдПользователя	= НРег(Кэш.Парам.Логин);
		Результат.Добавить(МодульОбъектаКлиент().СбисФормат(ШаблонКлюча, ПараметрыПрименить));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция		СбисОбновитьМассивУстановленныхИниФайлов(Кэш, МассивУстановленныхИни)									Экспорт
	
	Возврат	ПолучитьМассивУстановленныхИниФайлов(Кэш.Парам.КаталогНастроек, Новый Структура("Автообновление", Кэш.Парам.НастройкиАвтообновление));
	
КонецФункции

&НаКлиенте                                  
Функция		СбисОтключитьВыбранныеФайлыНастроек(МассивИниКОтключению, Кэш, КаталогНастроек, Отказ)					Экспорт
	
	ПараметрыНастроек = Новый Структура("Автообновление, Конфигурация, Разделитель, КлючАрхива", Кэш.Парам.НастройкиАвтообновление, Кэш.ПараметрыСистемы.Конфигурация, Кэш.ОбщиеФункции.СбисФорматРазделителя(Кэш.ПараметрыСистемы.Сервер), "Отключение");
	УстановленныеИни = ОтключитьФайлыНастроекНаСервере(МассивИниКОтключению, КаталогНастроек, ПараметрыНастроек, Отказ);
	Кэш.Вставить("ини",	СформироватьСтруктуруИни(УстановленныеИни, Новый Структура));
	Возврат	УстановленныеИни;
	
КонецФункции

&НаКлиенте                                  
Функция		СбисОпределитьНеобходимостьПроверки(Кэш, УстановленныеИниФайлы, СтруктураПараметров)					Экспорт
	
	НужноПроверять = Ложь;
	//Определим необходимость проверки по последним изменениям в настройках
	Для Каждого ИниФайл Из УстановленныеИниФайлы Цикл
		ИмяСвойства					= СтрЗаменить(СтрЗаменить(ИниФайл.Имяфайла,".","_"),"-","_");
		ИмяСвойстваКлиент			= СтрЗаменить(ИмяСвойства,"_sbis3","");
		ДатаФайла					= ?(ЗначениеЗаполнено(ИниФайл.ДатаФайла),				ИниФайл.ДатаФайла,						Ложь);
		ДатаФайлаКлиент				= ?(ЗначениеЗаполнено(ИниФайл.ДатаФайлаКлиент),			ИниФайл.ДатаФайлаКлиент,				Ложь);
		ПараметрыДатаФайла			= ?(	СтруктураПараметров.Свойство(ИмяСвойства)
										И	ИмяСвойства<>ИмяСвойстваКлиент,					СтруктураПараметров[ИмяСвойства],		Ложь); // если есть только пользовательский файл, то присваиваем Ложь
		ПараметрыДатаФайлаКлиент	= ?(СтруктураПараметров.Свойство(ИмяСвойстваКлиент),	СтруктураПараметров[ИмяСвойстваКлиент],	Ложь);
		
		Если	ДатаФайла = ПараметрыДатаФайла
			И	(	ДатаФайлаКлиент = Ложь
				Или	ДатаФайлаКлиент	= ПараметрыДатаФайлаКлиент)	Тогда//Файл не обновлялся, не проверяем
				
				ИниФайл.Вставить("НужноПроверять", Ложь);
				Продолжить;
		Иначе//Отметить в сбисПараметрах последнее обновление
			НужноПроверять = Истина;
			ИниФайл.Вставить("НужноПроверять", Истина);
			Если ЗначениеЗаполнено(ИниФайл.ДатаФайла)		Тогда
				СтруктураПараметров.Вставить(ИмяСвойства,ИниФайл.ДатаФайла);
			КонецЕсли;
			Если ЗначениеЗаполнено(ИниФайл.ДатаФайлаКлиент)	Тогда
				СтруктураПараметров.Вставить(ИмяСвойстваКлиент,ИниФайл.ДатаФайлаКлиент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Определим общие параметры проверки
	Если Кэш.ФормаНастроекОбщее.сбисОпределитьНеобходимостьПроверки(Кэш, СтруктураПараметров) Тогда
		НужноПроверять = Истина;
	КонецЕсли;
	
	Возврат НужноПроверять;
	
КонецФункции
	
&НаКлиенте
Процедура	СбисОчиститьКэшНастроек(КэшНастроек)																	Экспорт
	
	Возврат;
	
КонецПроцедуры

//Функция вызова формирования настроек из каталога.
&НаКлиенте
Функция		СбисПолучитьНастройки(Кэш=Неопределено,Отказ=Ложь,ПродолжитьВыполнение=Истина)							Экспорт
	Перем РежимРаботы, КэшIntegrtationConfig;
	Если Кэш = Неопределено	Тогда//Для теста функции при поиске
		Возврат	Истина;
	КонецЕсли;
	
	КаталогНастроек = Кэш.Парам.КаталогНастроек;
	Кэш.Парам.Вставить("ИдентификаторНастроек",	КаталогНастроек);
	
	РезультатИзмененияПараметров = сбисПолучитьНастройки_ОбработатьПараметрыРаботы(Кэш,Отказ,ПродолжитьВыполнение);
	
	//Смотрим режимы изменения настроек: нужна ли проверка. Если нужна, то запускаем повторное формирование настроек 
	Если	Не	Кэш.Свойство("ДополнительныеПараметры",	РежимРаботы)
		Или	Не	РежимРаботы.Свойство("РежимРаботы",		РежимРаботы) Тогда//Определяется режим работы формы настроек. Значения: Стандартный, ЗагрузкаИзКаталога.
		Если Не РезультатИзмененияПараметров = Неопределено Тогда
			Возврат РезультатИзмененияПараметров;
		КонецЕсли;
		РежимРаботы = "Стандартный";
	КонецЕсли;
	
	ПараметрыПолученияНастроек = Новый Структура("КаталогНастроек, Режим", КаталогНастроек, РежимРаботы);
	ПараметрыПолученияНастроек.Вставить("Разделитель",		Кэш.ОбщиеФункции.СбисФорматРазделителя(Кэш.ПараметрыСистемы.Сервер));
	ПараметрыПолученияНастроек.Вставить("ВременныйКаталог",	Кэш.ОбщиеФункции.СбисФорматКаталога(Кэш.ОбщиеФункции.СбисКаталогВременныхФайловНаСервере(), Кэш.ПараметрыСистемы.Сервер));
	ПараметрыПолученияНастроек.Вставить("Конфигурация",		Кэш.ПараметрыСистемы.Конфигурация);
	Если РежимРаботы = "ЗагрузкаИзКаталога" Тогда
		//тест каталога проходит на сервере, тогда как для загрузки из каталога указывается папка на клиенте
		ПараметрыПолученияНастроек.КаталогНастроек = Кэш.ОбщиеФункции.сбисФорматКаталога(КаталогНастроек, Кэш.ПараметрыСистемы.Клиент);		
	Иначе	
		ТестКаталогНастроек = СформироватьКаталогНастроек(Кэш, КаталогНастроек, Отказ);
		Если Отказ Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, ТестКаталогНастроек, Новый Структура("ФормаВладелец", Кэш.ФормаНастроекОбщее));
			Возврат	Неопределено;
		Иначе
			ПараметрыПолученияНастроек.КаталогНастроек = ТестКаталогНастроек;
		КонецЕсли;
		
		Если Кэш.Парам.НастройкиАвтообновление Тогда
			РезультатПроверки = СбисПроверитьНаличиеОбновлений(Кэш, ПараметрыПолученияНастроек, Отказ);
		Иначе
			РезультатПроверки = Ложь;
		КонецЕсли;
		Если Отказ Тогда
			Если	ПараметрыПолученияНастроек.Свойство("ПоказатьОкноВручную") 
				И	ПараметрыПолученияНастроек.ПоказатьОкноВручную Тогда 
				ПоказатьСообщениеСкачатьНастройки(Кэш, РезультатПроверки);
			КонецЕсли;
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатПроверки, Новый Структура("ФормаВладелец", Кэш.ФормаНастроекОбщее));
			//Не удалось прочитать обновление настроек на сервере, но можно продолжить дальше 
			Отказ = Ложь;
		ИначеЕсли РезультатПроверки Тогда
			//Менялись файлы настроек. Ини надо перепроверить
			Кэш.КэшНастроек.ИниВПорядке = Ложь;
		ИначеЕсли Кэш.КэшНастроек.ИниВПорядке Тогда//Если ини в порядке, тогда всё уже и так готово к работе
			ПродолжитьВыполнение = Ложь;
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	Кэш.Парам.Вставить("КаталогНастроек",		ПараметрыПолученияНастроек.КаталогНастроек);
	Кэш.Парам.Вставить("ИдентификаторНастроек",	ПараметрыПолученияНастроек.КаталогНастроек);
	Если РежимРаботы = "Стандартный" Тогда
		сбисПодключитьЗаплатки(Кэш, ПараметрыПолученияНастроек);	
		сбисСформироватьСтруктуруXSLT(Кэш, ПараметрыПолученияНастроек.КаталогНастроек,,Отказ);
	КонецЕсли;
	
	Если Не Кэш.ТихийРежим Тогда
		Кэш.ГлавноеОкно.сбисПоказатьСостояние("Формирование структуры настроек", Кэш.ГлавноеОкно);
	КонецЕсли;
	РезультатУстановки = СбисПолучитьУстановленныеНастройки(Кэш, ПараметрыПолученияНастроек, Отказ);
	Если Не Кэш.ТихийРежим Тогда
		Кэш.ГлавноеОкно.сбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатУстановки, Новый Структура("ФормаВладелец", Кэш.ФормаНастроекОбщее));
		Возврат Неопределено;
	КонецЕсли; 
	
	// Подрубаем Connection для работы с методами, доступными только на Connection, а-ля Контрагенты в обработке          
	СбисПолучитьНастройкиСБИС(Кэш);
	
	Возврат РезультатУстановки
		
КонецФункции

//Функция вызова формирования настроек из каталога.
&НаКлиенте
Функция		СбисПолучитьНастройкиСБИС(Кэш, Отказ=Ложь, ПродолжитьВыполнение=Истина)						Экспорт 
	Перем КлассКонекшенаПрименить;
	
	Если МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("СерверныеНастройки") Тогда                      
		 
		ПараметрыКэша = Новый Структура("ТихийРежим, Владелец,			ПараметрыСистемы",
										Истина,		 Кэш.ГлавноеОкно, 	Кэш.ПараметрыСистемы);
										
		ВремКэш = МодульОбъектаКлиент().НовыйЛокальныйКэш(ПараметрыКэша); 
		ВремКэш.Вставить("ФормаНастроекОбщее", Кэш.ФормаНастроекОбщее); 
		ВремКэш.Вставить("ФормаНастроек", Кэш.ФормаНастроек); 
		ВремКэш.Вставить("ОбщиеФункции", Кэш.ОбщиеФункции);
		ВремКэш.Вставить("Интеграция", Кэш.Интеграция);
		ВремКэш.Вставить("РаботаСJSON", Кэш.РаботаСJSON);
		ВремКэш.СБИС = Кэш.СБИС;
		ВремКэш.Парам = Новый Структура;
		ВремКэш.Парам.Вставить("СпособХраненияМетокСтатусов", Неопределено);
		ВремКэш.Парам.Вставить("ИдентификаторСессии", Неопределено);
		ВремКэш.Парам.Вставить("ПолнаяВерсияПродукта", Неопределено);
		ВремКэш.Парам.Вставить("ПроксиЛогин", Неопределено);
		ВремКэш.Парам.Вставить("ПроксиПароль", Неопределено);
		ВремКэш.Парам.Вставить("ПроксиПорт", Неопределено);
		ВремКэш.Парам.Вставить("ПроксиСервер", Неопределено);
		ВремКэш.Парам.Вставить("ТипПрокси", Неопределено);
		ВремКэш.Парам.Вставить("ИнтеграцияAPIВызовыНаКлиенте", Неопределено);
		ЗаполнитьЗначенияСвойств(ВремКэш.Парам, Кэш.Парам);
		ВремКэш.Парам.Вставить("СпособХраненияНастроек",	1);
		ВремКэш.Парам.Вставить("ИдентификаторНастроек",	"");
		ВремКэш.Парам.Вставить("НастройкиАвтообновление",	Ложь);
		
		ВремКэш.Вставить("СовместимостьМетодов", Кэш.СовместимостьМетодов);

		ИнициализироватьКэшНастроекСБИС(ВремКэш, Новый Структура("Обновить, ИнициализацияВременногоКэша", Ложь, Истина), Отказ);    
		КлассКонекшенаПрименить = НовыйIntegrationConnection(ВремКэш, Новый Структура("Идентификатор, ИнитКоннекшен, ИнициироватьДанные", СбисПолучитьИдентификаторНастроекСБИС(Кэш), Истина, Ложь), Отказ);
		
		Если Не Отказ Тогда
			
			КлассIntegrationConnection_СохранитьПодключение(ВремКэш, КлассКонекшенаПрименить, Новый Структура("Отказ, ПодолжитьВыполнение", Ложь, Истина), Отказ);
			Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", КлассКонекшенаПрименить);
			
		КонецЕсли;
		      
		
	КонецЕсли;
	
	Возврат КлассКонекшенаПрименить;
		
КонецФункции

//Для вызова получения списка настроек
&НаКлиенте
Функция		СбисПолучитьСписокДоступныхНастроек(Кэш)																Экспорт
	Отказ = Ложь;
	РезультатРаспаковки = СбисРаспаковатьНастройки(Кэш, Новый Структура,Отказ);
	Если Отказ Тогда
		Если	РезультатРаспаковки.code = 784
			Или	РезультатРаспаковки.code = 779 Тогда
			ПоказатьСообщениеСкачатьНастройки(Кэш, РезультатРаспаковки);
			Возврат Новый СписокЗначений;
		КонецЕсли;
			
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, РезультатРаспаковки);
		Возврат Неопределено;
	КонецЕсли;
	СписокТиповНастроек = СформироватьСписокДоступныхНастроек(Кэш, РезультатРаспаковки);
	//Вроде не нужно. Инициируем кэш при переключении формы
	//Если Не Кэш.КэшНастроек.Количество() Тогда//исправлена ошибка с отсутствием префикса системы каталожных инишек
	//	ИнициализироватьКэшНастроек(Кэш);
	//КонецЕсли;
	
	Возврат	СписокТиповНастроек;

КонецФункции

&НаКлиенте
Функция		СбисПолучитьШапкуПротоколаОбОшибках(Кэш, СписокИниФайловДляПроверки)									Экспорт
	
	ПараметрыПротокола	= Новый	Структура();
	Если	СписокИниФайловДляПроверки.Количество()	Тогда
		Префикс = Лев(СписокИниФайловДляПроверки[0].Имяфайла,Найти(СписокИниФайловДляПроверки[0].Имяфайла,"_")-1);
	Иначе
		Префикс	= "";
	КонецЕсли;
	ПараметрыПротокола.Вставить("КонфигурацияФайловНастроек",	Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис, Префикс));
	ПараметрыПротокола.Вставить("КаталогНастроек",				"""" + Кэш.Парам.ИдентификаторНастроек + """");
	ПараметрыПротокола.Вставить("Версия",						Кэш.ГлавноеОкно.Версия);
	ПараметрыПротокола.Вставить("ЗаголовокКаталог",				"Каталог настроек: ");

	Возврат ПараметрыПротокола;
	
КонецФункции

&НаКлиенте
Функция		СбисПолучитьСтруктуруКонфигурации(Кэш, СтруктураКонфигураций, ЗначениеКонфигурации)						Экспорт
	
	// Функция возвращает массив доступных файлов настроек для текущей конфигурации 	
	Для Каждого СтрокаСтруткур из СтруктураКонфигураций Цикл
		Если СтрокаСтруткур.Значение.НазываниеКонфигурации = ЗначениеКонфигурации Тогда
			Возврат СтрокаСтруткур.Значение.СтруктураКонфигурации;			
		КонецЕсли;	
	КонецЦикла;
	
КонецФункции	

&НаКлиенте                                  
Процедура	СбисВыгрузитьНастройкиВКаталог(Кэш, ДопПараметры)														Экспорт
	Перем КаталогКлиент;
	ГлавноеОкно		= Кэш.ГлавноеОкно;
	КаталогСервер	= Кэш.Парам.КаталогНастроек;
	
	ПараметрыПродолжить = Новый Структура("Кэш", Кэш);	
	ПараметрыПродолжить.Вставить("ОписаниеОповещенияОЗавершении", ДопПараметры.ОписаниеОповещенияОЗавершении);
	
	ДиалогОткрытия	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Каталог	= КаталогСервер; 
	ДиалогОткрытия.Заголовок= "Выберите каталог, куда требуется перенести настройки с сервера"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		КаталогКлиент = Кэш.ОбщиеФункции.СбисФорматКаталога(ДиалогОткрытия.Каталог, Кэш.ПараметрыСистемы.Клиент); 
	КонецЕсли;
	
	ВыгрузитьНастройкиНаКлиент_ПослеВвода(КаталогКлиент, ПараметрыПродолжить);
КонецПроцедуры

//Загружает настройки на сервер из выбранного каталога на клиенте
&НаКлиенте                                  
Процедура	СбисЗагрузитьНастройкиИзКаталога(Кэш, ДопПараметры)														Экспорт
	Перем КаталогКлиент;
	ГлавноеОкно		= Кэш.ГлавноеОкно;
	КаталогСервер	= Кэш.Парам.КаталогНастроек;
	
	ПараметрыПродолжить = Новый Структура("Кэш", Кэш);	
	ПараметрыПродолжить.Вставить("ОписаниеОповещенияОЗавершении", ДопПараметры.ОписаниеОповещенияОЗавершении);
	
	ДиалогОткрытия	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Каталог	= КаталогСервер; 
	ДиалогОткрытия.Заголовок= "Выберите каталог, откуда требуется перенести настройки на сервер"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		КаталогКлиент = Кэш.ОбщиеФункции.СбисФорматКаталога(ДиалогОткрытия.Каталог, Кэш.ПараметрыСистемы.Клиент); 
	КонецЕсли;
	
	ЗагрузитьНастройкиНаСервер_ПослеВвода(КаталогКлиент, ПараметрыПродолжить);
КонецПроцедуры

&НаКлиенте                                  
Процедура	АвтообновлениеПриИзменении(Кэш, НовоеЗначение)															Экспорт
	Кэш.Парам.НастройкиАвтообновление = НовоеЗначение;
	СбисПараметры = ПолучитьПараметрыСБИС(Кэш, Кэш.Парам.ИдентификаторНастроек, Ложь);
	СбисПараметры.Вставить("НастройкиАвтообновление", НовоеЗначение);
	СохранитьПараметрыСБИС(Кэш, СбисПараметры, Кэш.Парам.ИдентификаторНастроек, Ложь);
	УстановленныеИниФайлы = ПолучитьМассивУстановленныхИниФайлов(Кэш.Парам.ИдентификаторНастроек, Новый Структура("Автообновление", Кэш.Парам.НастройкиАвтообновление));
	Кэш.ГлавноеОкно.СбисОбновитьИнформациюНастроекНаГлавномОкне(Кэш, УстановленныеИниФайлы, Ложь);
КонецПроцедуры

&НаКлиенте                                  
Процедура ИспользоватьГенераторПриИзменении (Кэш, НовоеЗначение)    Экспорт  
	СбисПараметры = ПолучитьПараметрыСБИС(Кэш, Кэш.Парам.ИдентификаторНастроек, Ложь);
	СбисПараметры.Вставить("ИспользоватьГенератор", НовоеЗначение);
	СохранитьПараметрыСБИС(Кэш, СбисПараметры, Кэш.Парам.ИдентификаторНастроек, Ложь);
КонецПроцедуры   

&НаКлиенте
Процедура	СбисСформироватьИниФайлыКлиента(Кэш, СписокФайловПроверки, ВыгружаемыеИни)								Экспорт
	            
	Если	Кэш.Свойство("ДополнительныеПараметры")
		И	Кэш.ДополнительныеПараметры.Свойство("РежимРаботы") Тогда
		РежимРаботы	= Кэш.ДополнительныеПараметры.РежимРаботы;
	Иначе
		РежимРаботы="Стандартный";
	КонецЕсли;

	Если		РежимРаботы	= "ВыгрузкаВКаталог"	Тогда
		сбисСформироватьИниФайлыКлиентаВКонтекстеКлиента(Кэш, СписокФайловПроверки, ВыгружаемыеИни, Кэш.Парам.ИдентификаторНастроек, РежимРаботы);
	ИначеЕсли	РежимРаботы	= "ЗагрузкаИзКаталога"	Тогда//При загрузке из каталога, клиентские ини об ошибках не формируем. Надо просто очистить файлы от ошибок, если были.
		Кэш.Ини = Кэш.ФормаНастроекОбщее.ОчиститьСтруктуруИниОтСлужебныхЗначений(Кэш.Ини);
	Иначе
		сбисСформироватьИниФайлыКлиентаНаСервере(СписокФайловПроверки,	ВыгружаемыеИни, Кэш.Парам.ИдентификаторНастроек, РежимРаботы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция		СбисУстановитьВыбранныеФайлыНастроек(МассивФайловДляУстановки, Кэш, КаталогНастроек, Отказ)				Экспорт
	
	ПараметрыНастроек = Новый Структура("Автообновление", Кэш.Парам.НастройкиАвтообновление);
	УстановленныеИни = УстановитьФайлыНастроекНаСервере(МассивФайловДляУстановки, КаталогНастроек, ПараметрыНастроек, Отказ);
	Кэш.Вставить("ини",	СформироватьСтруктуруИни(УстановленныеИни, Новый Структура));
	Попытка
		Кэш.ФормаНастроекОбщее.СбисУстановитьНастройки(Новый Структура("ПринудительнаяПроверка, СписокИни", Ложь, УстановленныеИни), Кэш);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();     
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФайлыНастроекСервер.СбисУстановитьВыбранныеФайлыНастроек"), Новый Структура("ФормаВладелец", Кэш.ФормаНастроекОбщее));		
	КонецПопытки;	
КонецФункции

///////////////////////////
/////Внутренний вызов//////

//Процедура получает настройки на клиент
&НаКлиенте                                  
Процедура	ВыгрузитьНастройкиНаКлиент_ПослеВвода(КаталогНастроекКлиент=Неопределено, ДопПараметры) Экспорт 
	Кэш = ДопПараметры.Кэш;
	Если КаталогНастроекКлиент = Неопределено Тогда
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш,, ДопПараметры.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	
	ДопПараметры.Вставить("КаталогНаКлиенте",	КаталогНастроекКлиент);
	ДопПараметры.Вставить("КаталогНаСервере",	Кэш.Парам.ИдентификаторНастроек);
	ДопПараметры.Вставить("ВариантОбработки",	0);
	ДопПараметры.Вставить("Распаковать", 		Истина);
	
	Отказ = Ложь;
	ПроверкаНаСервере = СобратьСпискиНастроекНаСервере(Кэш.ОбщиеФункции.КэшДляСервера(Кэш), ДопПараметры.КаталогНаСервере, Отказ);
	Если Отказ Тогда
		ДопПараметры.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, ПроверкаНаСервере, ДопПараметры.ОписаниеОповещенияОЗавершении);
		Возврат;
	ИначеЕсли ПроверкаНаСервере = Неопределено Тогда
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш,  "В каталоге " + ДопПараметры.КаталогНаСервере + " нет настроек для переноса.", ДопПараметры.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	ДопПараметры.Вставить("НастройкиНаСервере", ПроверкаНаСервере);
	ПроверкаНаКлиенте = СобратьСпискиНастроекНаКлиенте(Кэш, ДопПараметры.КаталогНаКлиенте, Отказ);
	Если Отказ Тогда
		Если ПроверкаНаСервере.code = 779 Тогда
			ДопПараметры.Вставить("НастройкиНаКлиенте");
			ОповещениеПродолжить = Кэш.ОбщиеФункции.СбисОписаниеОповещения(Кэш, "ВыгрузитьНастройки_ОбработкаДиалога", ЭтаФорма, ДопПараметры);
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(4,	"Создать новый каталог");
			СписокКнопок.Добавить(10,	"Отменить");
			ТекстВопроса = "Не найден выбранный каталог " + ДопПараметры.КаталогНаКлиенте;
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, Вопрос(ТекстВопроса, СписокКнопок), ОповещениеПродолжить)
			#Иначе
				ПоказатьВопрос(ОповещениеПродолжить, ТекстВопроса, СписокКнопок);
			#КонецЕсли
		Иначе
			ДопПараметры.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
			Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, ПроверкаНаСервере, ДопПараметры.ОписаниеОповещенияОЗавершении);
		КонецЕсли;
	ИначеЕсли Не ПроверкаНаКлиенте = Неопределено Тогда
		ДопПараметры.Вставить("НастройкиНаКлиенте", ПроверкаНаКлиенте);
		ОповещениеПродолжить = Кэш.ОбщиеФункции.СбисОписаниеОповещения(Кэш, "ВыгрузитьНастройки_ОбработкаДиалога", ЭтаФорма, ДопПараметры);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(1,	"Заменить одноименные файлы");
		СписокКнопок.Добавить(2,	"Удалить старые настройки");
		СписокКнопок.Добавить(10,	"Отменить");
		ТекстВопроса = "В каталоге " + ДопПараметры.КаталогНаКлиенте + " имеются настройки.";
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, Вопрос(ТекстВопроса, СписокКнопок), ОповещениеПродолжить)
		#Иначе
			ПоказатьВопрос(ОповещениеПродолжить, ТекстВопроса, СписокКнопок);
		#КонецЕсли
	Иначе
		СбисПолучитьНастройкиССервера_Клиент(ДопПараметры);
	КонецЕсли;
КонецПроцедуры

//Старая процедура. Явно прописан контекст выполнения + изменена проверка предыдущей версии
&НаСервереБезКонтекста
Функция		ОбновитьИниФайлыНаСервере(ПараметрыОбновленияИни, Отказ)
	СбисКаталог = ПараметрыОбновленияИни.КаталогНастроек;
	МассивУстановленныхТиповыхИниФайлов	= НайтиФайлы(СбисКаталог,"ВО8*.sbis3.xml");
	МассивУстановленныхИниФайлов		= НайтиФайлы(СбисКаталог,"ВО8*.xml");
	
	Если Не МассивУстановленныхТиповыхИниФайлов.Количество() Тогда
		//Нет типовых файлов, которые надо обработать
		Возврат Ложь;
	КонецЕсли;
	
	// Если архив не был сделан ранее (напр., при переименовании файлов под новую версию), то делаем бекап на этом шаге
	АрхивНастроекУжеСоздан = Ложь;
	Если	НЕ ПараметрыОбновленияИни.Свойство("АрхивНастроекУжеСоздан", АрхивНастроекУжеСоздан)
		ИЛИ НЕ АрхивНастроекУжеСоздан = Истина Тогда
		
		РезультатБэкап = СделатьБэкапИниФайлов(СбисКаталог, МассивУстановленныхИниФайлов, ПараметрыОбновленияИни, Отказ);
		Если Отказ Тогда 
			//Не удалось сохранить файлы перед обновлением. Выходим
			Возврат РезультатБэкап;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СбисСтрока Из МассивУстановленныхТиповыхИниФайлов Цикл
		//Проверим наличие файла в распаковке автообновления
		ПутьКФайлуОткуда = СбисНайтиФайлОбновления(ПараметрыОбновленияИни.ВременныйКаталогРаспаковкиИни, СбисСтрока);
		Если ПутьКФайлуОткуда = Неопределено Тогда
			//Такого типового файла нет. Ошибка?
			Продолжить;
		КонецЕсли;
		Попытка
			КопироватьФайл(ПутьКФайлуОткуда, СбисКаталог + СбисСтрока.Имя);
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code,details", 772, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	Возврат Истина;
КонецФункции

//Функция проверяет установленную версию на сервере СБИС и скачивает архивы в случае необходимости
&НаКлиенте
Функция		ПроверитьИОбновитьАрхивыНастроек(Кэш, ПараметрыОбновления, Отказ)
	Перем СбисВерсияТекущая;
	СбисПараметры = ПолучитьПараметрыСБИС(Кэш, ПараметрыОбновления.КаталогНастроек, Отказ);
	Если Не СбисПараметры.Свойство("ВерсияНастроек", СбисВерсияТекущая) Тогда
		СбисВерсияТекущая = "0";
		Кэш.Парам.ИдентификаторНастроек = ПараметрыОбновления.КаталогНастроек;
	КонецЕсли;
	ПараметрыАрхиваНастроек	= СбисПараметрыАрхиваНастроек(Кэш, "Settings");
	ПараметрыАрхиваXSLT		= СбисПараметрыАрхиваНастроек(Кэш, "XSLT");
	
	СбисВерсияНастроекНаСервере = СбисВерсияНастроекНаСервере(Кэш, Отказ);
	Если Отказ Тогда
		//Если это установка, то может быть проблема с получением файлов. Тогда ошибка получения файла версии не считается как ошибка
		СбисИсключение = Кэш.ОбщиеФункции.СбисИсключение(СбисВерсияНастроекНаСервере, "ФайлыНастроекКаталог.ПроверитьИОбновитьАрхивыНастроек");
		Если Не	(	ПроверитьНаличиеФайлаНаСервере(ПараметрыАрхиваНастроек.ПутьКАрхиву,	ПараметрыАрхиваНастроек.ИмяАрхива + "." + ПараметрыАрхиваНастроек.Расширение)
				И	ПроверитьНаличиеФайлаНаСервере(ПараметрыАрхиваXSLT.ПутьКАрхиву,		ПараметрыАрхиваXSLT.ИмяАрхива + "." + ПараметрыАрхиваXSLT.Расширение)) Тогда
			ПараметрыОбновления.Вставить("ПоказатьОкноВручную", Истина);
		КонецЕсли;		
		Возврат СбисИсключение;
		//Иначе
		//	//Если файлы не скачиваются, но они есть в каталоге, считаем что версия настроек нулевая. Проверим дальше, что есть. Если нет, то ошибка скачки
		//	Отказ = Ложь;
		//	СбисВерсияНастроекНаСервере = "0";
		//	Кэш.ОбщиеФункции.СбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(Кэш, Новый Структура("Действие, Ошибка", "Запись ошибки", СбисИсключение), Ложь);
		//КонецЕсли;
	КонецЕсли;
	
	Если	Не	Кэш.ОбщиеФункции.ЭтоНоваяВерсия(СбисВерсияНастроекНаСервере, СбисВерсияТекущая)
		И		ПроверитьНаличиеФайлаНаСервере(ПараметрыАрхиваНастроек.ПутьКАрхиву,	ПараметрыАрхиваНастроек.ИмяАрхива + "." + ПараметрыАрхиваНастроек.Расширение)
		И		ПроверитьНаличиеФайлаНаСервере(ПараметрыАрхиваXSLT.ПутьКАрхиву,		ПараметрыАрхиваXSLT.ИмяАрхива + "." + ПараметрыАрхиваXSLT.Расширение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//В случае изменения версии, перекачаем архивы настроек и xslt
	РезультатВыполнения = СбисСкачатьАрхивНаСервер(Кэш, ПараметрыАрхиваНастроек, Отказ);
	Если Отказ Тогда
		ПараметрыОбновления.Вставить("ПоказатьОкноВручную", Истина);
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.ПроверитьИОбновитьАрхивыНастроек");
	КонецЕсли;
	РезультатВыполнения = СбисСкачатьАрхивНаСервер(Кэш, ПараметрыАрхиваXSLT, Отказ);
	Если Отказ Тогда
		ПараметрыОбновления.Вставить("ПоказатьОкноВручную", Истина);
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.ПроверитьИОбновитьАрхивыНастроек");
	КонецЕсли;
	СбисПараметры.Вставить("ВерсияНастроек", СбисВерсияНастроекНаСервере);
	СохранитьПараметрыСБИС(Кэш, СбисПараметры, ПараметрыОбновления.КаталогНастроек);
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция		ПолучитьФайлыНастроекССервера(ИмяФайла)
	//// найдем все настройки и обрабокт в папке настроект на сервере 
	//// все файлы добавим в архив для того что бы не записывать каждый файл по отдельности во временное хранилище 
	//ЗаписьZIP = Новый ЗаписьZipФайла(КаталогНастроек + ИмяФайла);
	//МассивНайденныхФайловXML = НайтиФайлы(КаталогНастроек, "*.xml");
	//МассивНайденныхФайловEPF = НайтиФайлы(КаталогНастроек, "*.epf");
	//Если МассивНайденныхФайловXML.Количество() > 0 Тогда 
	//	// добавляем файлы в архив
	//	СкопироватьФайлыНаКлиент(МассивНайденныхФайловXML, ЗаписьZIP);
	//	СкопироватьФайлыНаКлиент(МассивНайденныхФайловEPF, ЗаписьZIP);
	//КонецЕсли;
	//ЗаписьZIP.Записать();
	//// поместим во временное хранилище, архив переводим в двоичные данные
	//Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(КаталогНастроек + ИмяФайла), ЭтаФорма.УникальныйИдентификатор);
	//Возврат Адрес;
КонецФункции

&НаСервереБезКонтекста
Функция		ПроверитьНаличиеФайлаНаСервере(ПутьКФайлу, ИмяФайла)
	СбисИмяАрхива = ПутьКФайлу + ИмяФайла;
	СбисФайлТест = Новый Файл(СбисИмяАрхива);
	Если Не СбисФайлТест.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура	ПоказатьСообщениеСкачатьНастройки(Кэш, СбисОшибка)
	ТекстПредупреждение =	СбисОшибка.message + Символы.ПС + 
							" (" + СбисОшибка.details + ")" + Символы.ПС + 
							"Скачайте файлы настроек вручную и поместите их в каталог " + СбисПутьКАктуальнымАрхивам(Кэш) + "." + Символы.ПС + 
							"После чего перезапустите обработку.";
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("АдресСсылка",	"https://sbis.ru/help/integration/1C_set/modul/download");
	ПараметрыСообщения.Вставить("ТекстСсылка",	"Скачать актуальные файлы настроек");
	ПараметрыСообщения.Вставить("Текст",		ТекстПредупреждение);
	ФормаПредупреждение = Кэш.ГлавноеОкно.сбисПолучитьФорму("ФормаПредупреждения",,,Кэш.ГлавноеОкно);
	ФормаПредупреждение.Показать(Кэш, ПараметрыСообщения);
КонецПроцедуры

//получаем массив файлов из каталога
&НаСервереБезКонтекста
Функция		ПолучитьМассивУстановленныхИниФайлов(Каталог, ДополнительныеПараметры)
	// Получает массив установленных файлов настроек	
	МассивУстановленныхИниФайлов	= Новый Массив();
	
	МассивФайловВКаталоге				= НайтиФайлы(Каталог,"ВО8*.xml");
	МассивУстановленныхТиповыхИниФайлов	= НайтиФайлы(Каталог,"ВО8*.sbis3.xml");
	
	СписокУстановленныхИниФайлов				= Новый Соответствие();
	СписокУстановленныхИниФайловБезПрефиксов	= Новый Соответствие();
	СписокУстановленныхТиповыхИниФайлов			= Новый СписокЗначений();
	
	Для Каждого ИниФайл Из МассивФайловВКаталоге Цикл
		СписокУстановленныхИниФайлов.Вставить(ИниФайл.Имя,ИниФайл);
		СписокУстановленныхИниФайловБезПрефиксов.Вставить(Сред(ИниФайл.Имя, Найти(ИниФайл.Имя, "_")+1),ИниФайл);
	КонецЦикла;
	
	ФильтрПоИменамИни = Неопределено;
	Если		ДополнительныеПараметры = Неопределено
		Или	Не	ДополнительныеПараметры.Свойство("ФильтрПоИменамИни", ФильтрПоИменамИни) Тогда
		//Отбираем все
		//ФильтрПоИменамИни = Новый Массив;
	КонецЕсли;
	
	СписокУстановленныхТиповыхИниФайлов.ЗагрузитьЗначения(МассивУстановленныхТиповыхИниФайлов);
	
	//пробегаем по списку установленных типовых ини файлов (.sbis3.xml) и в общем списке установленных ини файлов
	//ищем соответствующие ини файлы клиента, затем из общего списка удаляем записи типовых ини файлов и, если нашли, ини файл клиента
	//к концу цикла в общем списке установленных ини файлов останутся неопределенные ини файлы
	Для Каждого ИниФайл Из СписокУстановленныхТиповыхИниФайлов Цикл
		ИмяФайлаНастроекКлиента			= СтрЗаменить(ИниФайл.Значение.Имя,".sbis3.xml",".xml");
		ИмяФайлаБезРасширения			= Лев(ИниФайл.Значение.Имя,Найти(ИниФайл.Значение.Имя,".")-1);
		ИмяФайлаБезРасширенияБезПрефикса= Сред(ИмяФайлаБезРасширения, Найти(ИмяФайлаБезРасширения, "_")+1);
		НайденыйФайлНастроекКлиента		= СписокУстановленныхИниФайловБезПрефиксов.Получить(ИмяФайлаБезРасширенияБезПрефикса+".xml");
		
		НоваяСтрока = Новый Структура();
		НоваяСтрока.Вставить("Имяфайла",				ИниФайл.Значение.Имя);
		НоваяСтрока.Вставить("ИмяфайлаБезРасширения",	ИмяФайлаБезРасширения);
		НоваяСтрока.Вставить("Автообновление",			ДополнительныеПараметры.Автообновление); 
		НоваяСтрока.Вставить("ПутьДоИниФайла",			ИниФайл.Значение.Путь);
		НоваяСтрока.Вставить("ДатаФайла",				ИниФайл.Значение.ПолучитьВремяИзменения() );
		НоваяСтрока.Вставить("Стандартная",				Истина);
		
		//из общего списка ини файлов удаляем .sbis.ini
		СписокУстановленныхИниФайлов.Удалить(ИниФайл.Значение.Имя);
		
		//если в общем списке нашли ини файл клиента то удаляем его из этого списка
		Если НайденыйФайлНастроекКлиента = Неопределено Тогда
			НоваяСтрока.Вставить("ЕстьИзменения",	Ложь);
			НоваяСтрока.Вставить("Пользовательская",Ложь);
			НоваяСтрока.Вставить("ДатаФайлаКлиент",	"" );
			НоваяСтрока.Вставить("ИмяФайлаКлиента",	"" );
		Иначе
			НоваяСтрока.Вставить("ЕстьИзменения",	Истина);
			НоваяСтрока.Вставить("Пользовательская",Истина);
			НоваяСтрока.Вставить("ДатаФайлаКлиент",	НайденыйФайлНастроекКлиента.ПолучитьВремяИзменения() );
			НоваяСтрока.Вставить("ИмяФайлаКлиента",	НайденыйФайлНастроекКлиента.Имя );
			СписокУстановленныхИниФайлов.Удалить(НайденыйФайлНастроекКлиента.Имя);
		КонецЕсли;
		НоваяСтрока.Вставить("Ини_ИмяИни",				ИмяИниИзИмениФайла(ИниФайл.Значение.Имя));
		НоваяСтрока.Вставить("Ини_ИмяБезРасширения",	Сред(НоваяСтрока.ИмяФайла,1,Найти(НоваяСтрока.ИмяФайла,".")-1));
		Если	ЗначениеЗаполнено(ФильтрПоИменамИни)
			И 	ФильтрПоИменамИни.Найти(ВРег(НоваяСтрока.Ини_ИмяИни)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		МассивУстановленныхИниФайлов.Добавить(НоваяСтрока)
	КонецЦикла;	
	
	//в общем списке всех ини файлов останутся не определенные ини файлы
	//добавляем их таблицу отдельными строками
	Для Каждого Элемент из СписокУстановленныхИниФайлов Цикл 
		НоваяСтрока = Новый Структура();
		НоваяСтрока.Вставить("Имяфайла",				Элемент.Значение.Имя);
		НоваяСтрока.Вставить("ИмяфайлаБезРасширения",	Элемент.Значение.ИмяБезРасширения);
		НоваяСтрока.Вставить("Автообновление",			Ложь);
		НоваяСтрока.Вставить("ЕстьИзменения",			Ложь);
		НоваяСтрока.Вставить("Стандартная",				Ложь);
		НоваяСтрока.Вставить("Пользовательская",		Истина);
		НоваяСтрока.Вставить("ПутьДоИниФайла",			Элемент.Значение.Путь);
		НоваяСтрока.Вставить("ДатаФайла",				"");
		НоваяСтрока.Вставить("ДатаФайлаКлиент",			Элемент.Значение.ПолучитьВремяИзменения());
		НоваяСтрока.Вставить("ИмяФайлаКлиента",			"");
		НоваяСтрока.Вставить("Ини_ИмяИни",				ИмяИниИзИмениФайла(Элемент.Ключ));
		НоваяСтрока.Вставить("Ини_ИмяБезРасширения",	Сред(НоваяСтрока.ИмяФайла,1,Найти(НоваяСтрока.ИмяФайла,".")-1));
		
		Если	ЗначениеЗаполнено(ФильтрПоИменамИни)
			И 	ФильтрПоИменамИни.Найти(ВРег(НоваяСтрока.Ини_ИмяИни)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивУстановленныхИниФайлов.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Возврат МассивУстановленныхИниФайлов;
	
КонецФункции

//получаем массив файлов из каталога на клиенте. При загрузке из выбранного пользователем каталога 
&НаКлиенте
Функция		ПолучитьМассивУстановленныхИниФайловВКонтекстеКлиента(Каталог)
	// Получает массив установленных файлов настроек	
	МассивУстановленныхИниФайлов	= Новый Массив();
	
	МассивФайловВКаталоге			= НайтиФайлы(Каталог,"ВО8*.xml");
	
	//на тот случай если при установке стандартных файлов изменился каталог настроек
	//Каталог =ПолучитьФорму("ВнешняяОбработка.СБИС.Форма.ФормаГлавноеОкно").КаталогНастроек;
	
	МассивУстановленныхТиповыхИниФайлов	= НайтиФайлы(Каталог,"ВО8*.sbis3.xml");
	
	СписокУстановленныхИниФайлов				= Новый Соответствие();
	СписокУстановленныхИниФайловБезПрефиксов	= Новый Соответствие();
	СписокУстановленныхТиповыхИниФайлов			= Новый СписокЗначений();
	
	Для Каждого ИниФайл Из МассивФайловВКаталоге Цикл
		СписокУстановленныхИниФайлов.Вставить(ИниФайл.Имя,ИниФайл);
		СписокУстановленныхИниФайловБезПрефиксов.Вставить(Сред(ИниФайл.Имя, Найти(ИниФайл.Имя, "_")+1),ИниФайл);
	КонецЦикла;	
	
	СписокУстановленныхТиповыхИниФайлов.ЗагрузитьЗначения(МассивУстановленныхТиповыхИниФайлов);
	
	//пробегаем по списку установленных типовых ини файлов (.sbis.ini) и в общем списке установленных ини файлов
	//ищем соответствующие ини файлы клиента, затем из общего списка удаляем записи типовых ини файлов и, если нашли, ини файл клиента
	//к концу цикла в общем списке установленных ини файлов останутся неопределенные ини файлы
	Для Каждого ИниФайл Из СписокУстановленныхТиповыхИниФайлов Цикл
		ИмяФайлаНастроекКлиента			= СтрЗаменить(ИниФайл.Значение.Имя,".sbis3.xml",".xml");
		ИмяФайлаБезРасширения			= Лев(ИниФайл.Значение.Имя,Найти(ИниФайл.Значение.Имя,".")-1);
		ИмяФайлаБезРасширенияБезПрефикса= Сред(ИмяФайлаБезРасширения, Найти(ИмяФайлаБезРасширения, "_")+1);
		НайденыйФайлНастроекКлиента		= СписокУстановленныхИниФайловБезПрефиксов.Получить(ИмяФайлаБезРасширенияБезПрефикса+".xml");
		
		НоваяСтрока = Новый Структура();
		НоваяСтрока.Вставить("Имяфайла",				ИниФайл.Значение.Имя);
		НоваяСтрока.Вставить("ИмяфайлаБезРасширения",	ИмяФайлаБезРасширения);
		НоваяСтрока.Вставить("Автообновление",			Истина); 
		НоваяСтрока.Вставить("ПутьДоИниФайла",			ИниФайл.Значение.Путь);
		НоваяСтрока.Вставить("ДатаФайла",				ИниФайл.Значение.ПолучитьВремяИзменения() );
		
		//из общего списка ини файлов удаляем .sbis.ini
		СписокУстановленныхИниФайлов.Удалить(ИниФайл.Значение.Имя);
		
		//если в общем списке нашли ини файл клиента то удаляем его из этого списка
		Если НайденыйФайлНастроекКлиента<>Неопределено Тогда
			НоваяСтрока.Вставить("ЕстьИзменения",	Истина);
			НоваяСтрока.Вставить("ДатаФайлаКлиент",	НайденыйФайлНастроекКлиента.ПолучитьВремяИзменения() );
			НоваяСтрока.Вставить("ИмяФайлаКлиента",	НайденыйФайлНастроекКлиента.Имя );
			СписокУстановленныхИниФайлов.Удалить(НайденыйФайлНастроекКлиента.Имя);
		Иначе	
			НоваяСтрока.Вставить("ЕстьИзменения",	Ложь);
			НоваяСтрока.Вставить("ДатаФайлаКлиент",	"" );
			НоваяСтрока.Вставить("ИмяФайлаКлиента",	"" );
		КонецЕсли;
		НоваяСтрока.Вставить("Ини_ИмяИни",				ИмяИниИзИмениФайла(ИниФайл.Значение.Имя));
		НоваяСтрока.Вставить("Ини_ИмяБезРасширения",	Сред(НоваяСтрока.ИмяФайла,1,Найти(НоваяСтрока.ИмяФайла,".")-1));
		МассивУстановленныхИниФайлов.Добавить(НоваяСтрока)
	КонецЦикла;	
	
	//в общем списке всех ини файлов останутся не определенные ини файлы
	//добавляем их таблицу отдельными строками
	Для Каждого Элемент из СписокУстановленныхИниФайлов Цикл 
		НоваяСтрока = Новый Структура();
		НоваяСтрока.Вставить("Имяфайла",				Элемент.Значение.Имя);
		НоваяСтрока.Вставить("ИмяфайлаБезРасширения",	Элемент.Значение.ИмяБезРасширения);
		НоваяСтрока.Вставить("Автообновление",			Ложь);
		НоваяСтрока.Вставить("ЕстьИзменения",			Ложь);
		НоваяСтрока.Вставить("ПутьДоИниФайла",			Элемент.Значение.Путь);
		НоваяСтрока.Вставить("ДатаФайла",				"");
		НоваяСтрока.Вставить("ДатаФайлаКлиент",			Элемент.Значение.ПолучитьВремяИзменения());
		НоваяСтрока.Вставить("ИмяФайлаКлиента",			"");
		//aa/uferov вынесено сюда для, для готового использования на общих функциях
		НоваяСтрока.Вставить("Ини_ИмяИни",				ИмяИниИзИмениФайла(Элемент.Ключ));
		НоваяСтрока.Вставить("Ини_ИмяБезРасширения",	Сред(НоваяСтрока.ИмяФайла,1,Найти(НоваяСтрока.ИмяФайла,".")-1));
		
		МассивУстановленныхИниФайлов.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Возврат МассивУстановленныхИниФайлов;
	
КонецФункции

&НаКлиенте
Функция		СбисПроверитьНаличиеОбновлений(Кэш, ПараметрыОбновления, Отказ)
	Кэш.ГлавноеОкно.сбисПоказатьСостояние("Проверка наличия обновления файлов настроек", Кэш.ГлавноеОкно);
	
	РезультатОбновления = ПроверитьИОбновитьАрхивыНастроек(Кэш, ПараметрыОбновления, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбновления, "ФайлыНастроекКаталог.СбисПроверитьНаличиеОбновлений");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОбновления.КаталогНастроек) Тогда
		СтруктураПараметровСбис = Кэш.ФормаНастроек.ПолучитьПараметрыСБИС(Кэш, ПараметрыОбновления.КаталогНастроек, Отказ);
		Если Отказ Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
			Возврат Кэш.ОбщиеФункции.СбисИсключение(СтруктураПараметровСбис, "ФайлыНастроекКаталог.СбисПроверитьНаличиеОбновлений");
		КонецЕсли;
		НеобходимаПроверкаНастроек = Кэш.ФормаНастроекОбщее.сбисОпределитьНеобходимостьПроверки(Кэш, СтруктураПараметровСбис);
		Если РезультатОбновления ИЛИ НеобходимаПроверкаНастроек Тогда
			//Распакуем ини во временную папку
			РезультатРаспаковки = СбисРаспаковатьНастройки(Кэш, ПараметрыОбновления, Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатРаспаковки, "ФайлыНастроекКаталог.СбисПроверитьНаличиеОбновлений");
			Иначе
				ПараметрыОбновления.Вставить("ВременныйКаталогРаспаковкиИни", РезультатРаспаковки);
			КонецЕсли;
		Иначе
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
			Возврат Ложь;
		КонецЕсли; 
	Иначе
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Возврат Ложь;
	КонецЕсли;
	
	ДублиУдалены = УдалитьДублиИни(ПараметрыОбновления, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Возврат Кэш.ОбщиеФункции.СбисИсключение(ДублиУдалены, "ФайлыНастроекКаталог.СбисПроверитьНаличиеОбновлений");
	КонецЕсли;
	
	ДоступныИПереименованыФайлыНастроекДляНовойВерсииКонфигурации = ДоступныИПереименованыФайлыНастроекДляНовойВерсииКонфигурации(Кэш, ПараметрыОбновления, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Возврат Кэш.ОбщиеФункции.СбисИсключение(ДоступныИПереименованыФайлыНастроекДляНовойВерсииКонфигурации, "ФайлыНастроекКаталог.СбисПроверитьНаличиеОбновлений");
	КонецЕсли;
	
	Если	Не РезультатОбновления
		И 	Не ДоступныИПереименованыФайлыНастроекДляНовойВерсииКонфигурации Тогда//Настройки актуальны, дальше ничего не требуется
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Возврат Ложь;
	КонецЕсли;	
	
	Кэш.ГлавноеОкно.сбисПоказатьСостояние("Обновление файлов настроек", Кэш.ГлавноеОкно);
	//Выполним обновление файлов настроек
	РезультатВыполнения = СбисОбновитьИниФайлы(Кэш, ПараметрыОбновления, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.СбисПроверитьНаличиеОбновлений");
	КонецЕсли;
	Сообщить("Файлы настроек успешно обновлены.");
	Возврат Истина;
КонецФункции

//Отдаёт версию настроек на сервере СБИС
&НаКлиенте
Функция		СбисВерсияНастроекНаСервере(Кэш, Отказ)
	СбисПараметрыОбновления = Кэш.ОбщиеФункции.СбисПараметрыСервисаОбновления(Кэш);
	СбисПараметрыОбновления.Вставить("ИмяФайла", Кэш.ОбщиеФункции.СбисПолучитьИмяВременногоФайлаКлиент("txt"));
	СбисПараметрыОбновления.URL = СбисПараметрыОбновления.URL_Settings + "SettingsVersion.txt";
	СбисПараметрыОбновления.Вставить("Таймаут", 3);
	
	РезультатЧтения = Кэш.Интеграция.СбисПолучитьПараметрыАктуальнойВерсии(Кэш, СбисПараметрыОбновления, Отказ);
	Если Отказ Тогда
		// Если настройки недоступны по новому url, будем смотреть старый
		Отказ = Ложь;
		СбисПараметрыОбновления.URL = СбисПараметрыОбновления.URL_Old_Settings + "SettingsVersion.txt";
		РезультатЧтения = Кэш.Интеграция.СбисПолучитьПараметрыАктуальнойВерсии(Кэш, СбисПараметрыОбновления, Отказ);
	КонецЕсли;
	Если Отказ Тогда
		//Проблема со скачкой файла версии.
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатЧтения, "ФайлыНастроекКаталог.СбисВерсияНастроекНаСервере");
	КонецЕсли;
	//Читаем информацию о обновлении
	Попытка
		CбисВерсияНаСервере = Новый ЧтениеТекста(СбисПараметрыОбновления.ИмяФайла);
		CбисВерсияНаСервере = CбисВерсияНаСервере.ПрочитатьСтроку();
		Если Не ЗначениеЗаполнено(CбисВерсияНаСервере) Тогда
			CбисВерсияНаСервере = "0";
		КонецЕсли;
		Возврат CбисВерсияНаСервере;
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатЧтения, "ФайлыНастроекКаталог.СбисВерсияНастроекНаСервере");
	КонецПопытки;
КонецФункции

//Вызов через клиент, получаем флаг проверки предыдущей версии с 19 и уже потом на сервере делается обработка.
//СбисПараметрыОбновления - параметры 
//	ВременныйКаталог - отформатированный путь, кудм можно распаковать файлы
//	КаталогНастроек - отформатированный путь на сервере, где лежат готовые настройки
&НаКлиенте
Функция		СбисОбновитьИниФайлы(Кэш, СбисПараметрыОбновления, Отказ)
	
	СбисКаталогНаСервере = СбисПараметрыОбновления.КаталогНастроек;
	Если Не ЗначениеЗаполнено(СбисКаталогНаСервере) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Обновим типовые ини из распакованных
	РезультатОбновления = ОбновитьИниФайлыНаСервере(СбисПараметрыОбновления, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатОбновления, "ФайлыНастроекКаталог.СбисОбновитьИниФайлы");
	КонецЕсли;
	
	//Распакуем xslt сразу в каталог настроек
	РезультатРаспаковки = СбисРаспаковатьXSLT(Кэш, Новый Структура("КаталогРаспаковки", Кэш.ОбщиеФункции.сбисФорматКаталога(СбисКаталогНаСервере + "xslt", Кэш.ПараметрыСистемы.Сервер)), Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатРаспаковки, "ФайлыНастроекКаталог.СбисОбновитьИниФайлы");
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Процедура	СкопироватьФайлыНаКлиент(МассивФайлов, ЗаписьZIP)
	Для Каждого Файла Из МассивФайлов Цикл
		ЗаписьZIP.Добавить(Файла.ПолноеИмя);	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция		СбисПолучитьУстановленныеНастройки(Кэш, ПараметрыУстановки, Отказ)
	
	Если ПараметрыУстановки.Режим = "ЗагрузкаИзКаталога" Тогда
		УстановленныеИниФайлы	= ПолучитьМассивУстановленныхИниФайловВКонтекстеКлиента(ПараметрыУстановки.КаталогНастроек);
	Иначе
		УстановленныеИниФайлы	= ПолучитьМассивУстановленныхИниФайлов(ПараметрыУстановки.КаталогНастроек, Новый Структура("Автообновление", Кэш.Парам.НастройкиАвтообновление));
		Если Не УстановленныеИниФайлы.Количество() Тогда
			//устанавливаем стандартные файлы настроек
			РезультатУстановки = УстановитьСтандартныеНастройки(Кэш, ПараметрыУстановки, Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатУстановки, "ФайлыНастроекКаталог.СбисПолучитьУстановленныеНастройки");
			КонецЕсли;
			УстановленныеИниФайлы = ПолучитьМассивУстановленныхИниФайлов(ПараметрыУстановки.КаталогНастроек, Новый Структура("Автообновление", Кэш.Парам.НастройкиАвтообновление));
		КонецЕсли;
	КонецЕсли;
	
	Если УстановленныеИниФайлы.Количество() Тогда						
		Кэш.Вставить("Ини", СформироватьСтруктуруИниНаКлиенте(Кэш, УстановленныеИниФайлы,  ПараметрыУстановки.Режим));
		Кэш.КэшНастроек.ПараметрыНастроек.Вставить("ПрефиксУстановленныхНастроек", Сред(УстановленныеИниФайлы[0].Имяфайла,5, Найти(УстановленныеИниФайлы[0].Имяфайла,"_")-5));
	Иначе
		УстановленныеИниФайлы	= Неопределено;
	КонецЕсли;
		
	Возврат	УстановленныеИниФайлы;
	
КонецФункции

// Формирование массива обновленных настроек без поднятия версии под текущую версию конфигурации
// ПараметрыОбновления - Структура (см. ФайлыНастроекОбщее - ОсвежитьФайлыНастроек)
&НаКлиенте
Функция ПолучитьОсвеженныеФайлыНастроек(Кэш, ПараметрыОбновления, Отказ) Экспорт
	
	Кэш.ГлавноеОкно.сбисПоказатьСостояние("Проверка наличия обновления файлов настроек", Кэш.ГлавноеОкно);
	
	// Обновляем архивы настроек
	РезультатОбновления = ПроверитьИОбновитьАрхивыНастроек(Кэш, ПараметрыОбновления, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбновления, "ФайлыНастроекКаталог.ПолучитьОсвеженныеФайлыНастроек");
	КонецЕсли;
	
	// Распакуем настройки во временную папку
	Если ЗначениеЗаполнено(ПараметрыОбновления.КаталогНастроек) Тогда
		Если РезультатОбновления Тогда
			РезультатРаспаковки = СбисРаспаковатьНастройки(Кэш, ПараметрыОбновления, Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатРаспаковки, "ФайлыНастроекКаталог.ПолучитьОсвеженныеФайлыНастроек");
			Иначе
				ПараметрыОбновления.Вставить("ВременныйКаталогРаспаковкиИни", РезультатРаспаковки);
			КонецЕсли;
		Иначе
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
			Возврат Неопределено;
		КонецЕсли; 
	Иначе
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Возврат Неопределено;
	КонецЕсли;
	
	// Выполним обновление (копирование) файлов настроек в каталоге
	Кэш.ГлавноеОкно.сбисПоказатьСостояние("Обновление файлов настроек", Кэш.ГлавноеОкно);
	РезультатВыполнения = СбисОбновитьИниФайлы(Кэш, ПараметрыОбновления, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.ПолучитьОсвеженныеФайлыНастроек");
	КонецЕсли;
	
	// Обновим данные XSLT и запишем в кэш
	сбисСформироватьСтруктуруXSLT(Кэш, ПараметрыОбновления.КаталогНастроек,,Отказ);
	
	// Сформируем массив обновленных файлов настроек
	РезультатУстановки = СбисПолучитьУстановленныеНастройки(Кэш, ПараметрыОбновления, Отказ);
	Если Не Кэш.ТихийРежим Тогда
		Кэш.ГлавноеОкно.сбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатУстановки, Новый Структура("ФормаВладелец", Кэш.ФормаНастроекОбщее));
		Возврат Неопределено;
	КонецЕсли;
	
	Сообщить("Файлы настроек успешно обновлены.");
	
	Возврат РезультатУстановки;
	
КонецФункции

&НаКлиенте
Функция		СформироватьКаталогНастроек(Кэш, КаталогНастроекНазвание, Отказ) Экспорт
	
	Если КаталогНастроекНазвание = "" Тогда//устанавливаем каталог по умолчанию
		ПараметрыКонфигурации	= Кэш.ФормаНастроекОбщее.ОпределитьПараметрыКонфигурации(Кэш.ПараметрыСистемы, Отказ);
		ПараметрыКаталога		= Новый Структура(
			"КаталогНастроек,			ПрефиксСистемы,						ПараметрыСистемы", 
			КаталогНастроекНазвание,	ПараметрыКонфигурации.subsystem,	Кэш.ПараметрыСистемы);	
		ТестКаталогНастроек = СбисСформироватьКаталогПоУмолчанию(ПараметрыКаталога, Отказ);
	Иначе
		ТестКаталогНастроек = Кэш.ОбщиеФункции.СбисФорматКаталога(КаталогНастроекНазвание, Кэш.ПараметрыСистемы.Сервер);
		ТестКаталогНастроек = СбисСоздатьКаталогНаСервере(ТестКаталогНастроек, Кэш.ПараметрыСистемы, Отказ);
	КонецЕсли;
	Возврат ТестКаталогНастроек;
КонецФункции

//Устанавливает значение каталога по-умолчанию.
&НаСервереБезКонтекста
Функция		СбисСформироватьКаталогПоУмолчанию(Знач КаталогПараметры, Отказ);
	
	ПрефиксСистемы = КаталогПараметры.ПрефиксСистемы;
	ПараметрыСистемы = КаталогПараметры.ПараметрыСистемы;
	Если ПараметрыСистемы.Сервер.ЭтоLinux Тогда
		сбисРазделитель = "/";
		КаталогНастроекСБИС	= КаталогВременныхФайлов();
	Иначе
		сбисРазделитель = "\";
		КаталогНастроекСБИС	= Лев(КаталогВременныхФайлов(), 3);
	КонецЕсли;
	КаталогНастроекСБИС	= КаталогНастроекСБИС + "Sbis1C" + сбисРазделитель;
	КаталогНастроекТест	= КаталогНастроекСБИС;
	//Проверим наличие каталога на диске
	Если Не ПустаяСтрока(ПрефиксСистемы) Тогда
		КаталогНастроекТест = КаталогНастроекСБИС + ПрефиксСистемы + сбисРазделитель;
		КаталогФайл = Новый Файл(КаталогНастроекТест);
		Если 	КаталогФайл.Существует()
			И	КаталогФайл.ЭтоКаталог() Тогда
			Возврат сбисСоздатьКаталогНаСервере(КаталогНастроекТест, ПараметрыСистемы, Отказ);
		КонецЕсли;	
	КонецЕсли;
	КаталогНастроекТест = КаталогНастроекСБИС;		
	//Проверим старый путь, если там есть ини конфигурации, то папка со старыми настройками найдена, если там нет ини, то созадем подпапку с префиксом конфигурации
	КаталогФайл = Новый Файл(КаталогНастроекТест);
	Если 	КаталогФайл.Существует()
		И	КаталогФайл.ЭтоКаталог() Тогда
		ФайлКонфигурации = НайтиФайлы(КаталогНастроекТест, "*Конфигурация*.xml", Ложь);
		Если ФайлКонфигурации.Количество() Тогда
			Возврат сбисСоздатьКаталогНаСервере(КаталогНастроекТест, ПараметрыСистемы, Отказ);
		ИначеЕсли Не ПустаяСтрока(ПрефиксСистемы) Тогда
			КаталогНастроекТест = КаталогНастроекТест + ПрефиксСистемы + сбисРазделитель;
			Возврат сбисСоздатьКаталогНаСервере(КаталогНастроекТест, ПараметрыСистемы, Отказ);
		Иначе
			Возврат сбисСоздатьКаталогНаСервере(КаталогНастроекТест, ПараметрыСистемы, Отказ);
		КонецЕсли;
	Иначе
		Если Не ПустаяСтрока(ПрефиксСистемы) Тогда
			КаталогНастроекТест = КаталогНастроекСБИС + ПрефиксСистемы + сбисРазделитель;
		КонецЕсли;	
		Возврат сбисСоздатьКаталогНаСервере(КаталогНастроекТест, ПараметрыСистемы, Отказ);
	КонецЕсли;
	
КонецФункции

// Функция проверяет заполненность и существование каталога настроек, создает если нет.	
&НаКлиенте
Функция		СбисСоздатьКаталогНаКлиенте(КаталогПуть, ПараметрыСистемы, Отказ);
	Попытка
		СоздатьКаталог(КаталогПуть);
		КаталогНастроек	= Новый Файл(КаталогПуть);
		Если Не КаталогНастроек.Существует() Тогда
			ВызватьИсключение("Каталог не доступен" + ?(ПараметрыСистемы.Конфигурация.Файловая, "", " с сервера для клиент-серверной версии"));
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details",772, "Ошибка работы с файловой системой", "Не удалось проверить наличие каталога " + КаталогПуть + "! Причина: "	+ ОписаниеОшибки());
	КонецПопытки;
	Возврат КаталогПуть;
КонецФункции

// Функция проверяет заполненность и существование каталога настроек, создает если нет.	
&НаСервереБезКонтекста
Функция		СбисСоздатьКаталогНаСервере(Знач КаталогПуть, Знач ПараметрыСистемы, Отказ);
	Попытка
		СоздатьКаталог(КаталогПуть);
		КаталогНастроек	= Новый Файл(КаталогПуть);
		Если Не КаталогНастроек.Существует() Тогда
			ВызватьИсключение("Каталог не доступен" + ?(ПараметрыСистемы.Конфигурация.Файловая, "", " с сервера для клиент-серверной версии"));
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details",772, "Ошибка работы с файловой системой", "Не удалось проверить наличие каталога " + КаталогПуть + "! Причина: "	+ ОписаниеОшибки());
	КонецПопытки;
	Возврат КаталогПуть;
КонецФункции

//Функция выполняет проверку изменения параметров работы формы настроек. Возвращает результат изменения параметров, либо неопределено.
&НаКлиенте                                  
Функция		СбисПолучитьНастройки_ОбработатьПараметрыРаботы(Кэш, Отказ, ПродолжитьВыполнение)
	
	ПараметрРаботы = Неопределено;
	Если ПараметрыРаботы.Свойство("ИзменениеПользователя") Тогда
		ПараметрыРаботы.Удалить("ИзменениеПользователя");
	КонецЕсли;
	Если ПараметрыРаботы.Свойство("ВыполнитьПроверку",ПараметрРаботы) Тогда				
		Если ПараметрРаботы Тогда
			Кэш.КэшНастроек.ИниВПорядке = Ложь;
			Кэш.ини = Новый Структура;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыРаботы.Свойство("КэшироватьТекущие") Тогда
		ПараметрыРаботы.Удалить("КэшироватьТекущие");
	КонецЕсли;
	//Чистим способ данные по конфигурациям в кэше и выбранную конфу, так как другой способ хранения настроек
	Если ПараметрыРаботы.Свойство("ИзмененаФормаНастроек", ПараметрРаботы) Тогда
		Если ПараметрРаботы Тогда
			Кэш.ФормаНастроекОбщее.ОчиститьСобранныеНастройки(Кэш);
		КонецЕсли;
		ПараметрыРаботы.Удалить("ИзмененаФормаНастроек");
	КонецЕсли;
КонецФункции

&НаКлиенте                                  
Функция		СбисПутьКАктуальнымАрхивам(Кэш)
	сбисРазделитель = Кэш.ОбщиеФункции.сбисФорматРазделителя(Кэш.ПараметрыСистемы.Сервер);
	Возврат Кэш.ОбщиеФункции.сбисФорматКаталога(Кэш.Парам.ИдентификаторНастроек, Кэш.ПараметрыСистемы.Сервер) + "Архив" + сбисРазделитель;
	//Возврат Кэш.ОбщиеФункции.сбисФорматКаталога(Кэш.Парам.ИдентификаторНастроек, Кэш.ПараметрыСистемы.Сервер) + "Архив" + сбисРазделитель + "Настройки" + сбисРазделитель + Кэш.ПараметрыСистемы.Обработка.Версия + сбисРазделитель;
КонецФункции

&НаКлиенте
Функция		СбисСкачатьАрхивНаСервер(Кэш, СбисПараметрыАрхива, Отказ)
	СбисПутьКВременномуФайлу = Кэш.ОбщиеФункции.СбисПолучитьИмяВременногоФайлаКлиент("zip");
	ПараметрыЗапросаФайла = Кэш.ОбщиеФункции.СбисПараметрыСервисаОбновления(Кэш);
	ПараметрыЗапросаФайла.Вставить("ИмяФайла", СбисПутьКВременномуФайлу);
	ПараметрыЗапросаФайла.URL = ПараметрыЗапросаФайла.URL_Settings + СбисПараметрыАрхива.КлючАрхива + "." + СбисПараметрыАрхива.Расширение;
	
	РезультатВыполнения = Кэш.Интеграция.СбисСохранитьВФайлПоСсылке(Кэш, ПараметрыЗапросаФайла, Отказ);
	Если Отказ Тогда
		// Если настройки недоступны по новому url, будем смотреть старый
		Отказ = Ложь;
		ПараметрыЗапросаФайла.URL = ПараметрыЗапросаФайла.URL_Old_Settings + СбисПараметрыАрхива.КлючАрхива + "." + СбисПараметрыАрхива.Расширение;
		РезультатВыполнения = Кэш.Интеграция.СбисСохранитьВФайлПоСсылке(Кэш, ПараметрыЗапросаФайла, Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.СбисСкачатьАрхивНаСервер"); 
	КонецЕсли;                           
	ПараметрыПереноса = Новый Структура("НаСервер, ОчиститьПослеПереноса, Файлы", Истина, Истина, Новый Массив);
	ПараметрыПереноса.Файлы.Добавить(Новый Структура(
	"ИмяФайла,																ИмяФайлаОткуда,				ПутьКуда", 
	СбисПараметрыАрхива.ИмяАрхива + "." + СбисПараметрыАрхива.Расширение,	СбисПутьКВременномуФайлу,	СбисПараметрыАрхива.ПутьКАрхиву));
	
	РезультатВыполнения = Кэш.ОбщиеФункции.сбисСкопироватьФайлы(Кэш, ПараметрыПереноса, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.СбисСкачатьАрхивНаСервер"); 
	КонецЕсли;
	Возврат Истина;
КонецФункции

//Функция распаковывет архив в контексте сервера. Если архива нет, скачивает его с update, переносит на сервер и распаковывет 
&НаКлиенте
Функция		СбисПроверитьИРаспаковатьАрхивНаСервере(Кэш, ПараметрыРаспаковки, Отказ)
	РезультатВыполнения = сбисРаспаковатьАрхивНаСервере(ПараметрыРаспаковки, Отказ);
	Если Отказ Тогда
		//Файл не найден. Попробуем скачать с update и повторить операцию.
		Если РезультатВыполнения.code = 779 Тогда
			Отказ = Ложь;
		Иначе
			Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.сбисПроверитьИРаспаковатьАрхив"); 
		КонецЕсли;
	Иначе
		Возврат РезультатВыполнения;
	КонецЕсли;
	//TODO42 убрать скачку файла при отсутствии архива
	РезультатВыполнения = СбисСкачатьАрхивНаСервер(Кэш, ПараметрыРаспаковки, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.сбисПроверитьИРаспаковатьАрхив"); 
	КонецЕсли;
	РезультатВыполнения = СбисРаспаковатьАрхивНаСервере(ПараметрыРаспаковки, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.сбисПроверитьИРаспаковатьАрхив"); 
	КонецЕсли;
	Возврат РезультатВыполнения
	
КонецФункции

//Распаковывает дефолтные настройки. Если не указано куда, то во временный каталог
&НаСервереБезКонтекста
Функция		СбисРаспаковатьАрхивНаСервере(Знач ПараметрыРаспаковки, Отказ)
	Перем ПутьКАрхиву, ИмяАрхива, РасширениеАрхива, КаталогРаспаковки;
	
	Если		Не ПараметрыРаспаковки.Свойство("ПутьКАрхиву", ПутьКАрхиву)
			Или	Не ЗначениеЗаполнено(ПутьКАрхиву) Тогда
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 785, "Ошибка во входящих данных", "Не указан путь к архиву настроек для распаковки");
	ИначеЕсли	Не ПараметрыРаспаковки.Свойство("ИмяАрхива", ИмяАрхива)
			Или	Не ЗначениеЗаполнено(ИмяАрхива) Тогда
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 785, "Ошибка во входящих данных", "Не указано имя архива настроек для распаковки");
	ИначеЕсли	Не ПараметрыРаспаковки.Свойство("КаталогРаспаковки", КаталогРаспаковки)
			Или	Не ЗначениеЗаполнено(КаталогРаспаковки) Тогда
		КаталогРаспаковки = КаталогВременныхФайлов();
		КаталогРаспаковки = КаталогРаспаковки + ?(Прав(КаталогРаспаковки,1) = ПараметрыРаспаковки.Разделитель, "", ПараметрыРаспаковки.Разделитель) + "sbis_83_tmp" + ПараметрыРаспаковки.Разделитель;
	КонецЕсли;
	Если Не ПараметрыРаспаковки.Свойство("Расширение", РасширениеАрхива) Тогда
		РасширениеАрхива = "zip";
	КонецЕсли;
	//Проверим наличие архива
	СбисИмяАрхива = ПутьКАрхиву + ИмяАрхива + "." + РасширениеАрхива;
	СбисФайлТест = Новый Файл(СбисИмяАрхива);
	Если Не СбисФайлТест.Существует() Тогда
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 779, "Не найден объект", "По пути " + ПутьКАрхиву + " отсутствует файл " + ИмяАрхива);
	КонецЕсли;
	//Проверим наличие уже существующих файлов и очистим их
	Если ПараметрыРаспаковки.Свойство("МаскиФайловУдалить") Тогда
		Для Каждого сбисМаскаФайлов Из ПараметрыРаспаковки.МаскиФайловУдалить Цикл
			СбисФайлТест = НайтиФайлы(КаталогРаспаковки,сбисМаскаФайлов);
			Для Каждого сбисФайл Из СбисФайлТест Цикл
				Попытка
					УдалитьФайлы(сбисФайл.ПолноеИмя);
				Исключение
					Отказ = Истина;
					Возврат Новый Структура("code,message,details", 772, "Ошибка работы с файловой системой", ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;
	Попытка
		ФайлАрхива = Новый ЧтениеZipФайла(СбисИмяАрхива);
		ФайлАрхива.ИзвлечьВсе(КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать); 
		ФайлАрхива.Закрыть(); 
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 772, "Ошибка работы с файловой системой: не удалось распаковать файлы настроек. Возможная причина: недостаточно прав на каталог """+ ПутьКАрхиву +""". Предоставьте права на изменение файлов каталога.", ОписаниеОшибки());
	КонецПопытки;
	Возврат КаталогРаспаковки;
	
КонецФункции	

&НаКлиенте                                  
Функция		СбисРаспаковатьНастройки(Кэш, ДополнительныеПараметры, Отказ) Экспорт
	Перем СбисКаталогРаспаковки;
	Если Не ДополнительныеПараметры.Свойство("ВременныйКаталог", СбисКаталогРаспаковки) Тогда
		СбисКаталогРаспаковки	= Кэш.ОбщиеФункции.СбисФорматКаталога(Кэш.ОбщиеФункции.СбисКаталогВременныхФайловНаСервере(), Кэш.ПараметрыСистемы.Сервер);
	КонецЕсли;
	СбисКаталогРаспаковки	= Кэш.ОбщиеФункции.СбисФорматКаталога(СбисКаталогРаспаковки + "_82_ini_tmp", Кэш.ПараметрыСистемы.Сервер);
	ПараметрыРаспаковки		= СбисПараметрыАрхиваНастроек(Кэш, "Settings");
	
	ПараметрыРаспаковки.Вставить("МаскиФайловУдалить",	Новый Массив);
	ПараметрыРаспаковки.Вставить("КаталогРаспаковки",	СбисКаталогРаспаковки);
	ПараметрыРаспаковки.МаскиФайловУдалить.Добавить("*");
	РезультатРаспаковки = СбисРаспаковатьАрхивНаСервере(ПараметрыРаспаковки, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатРаспаковки, "ФайлыНастроекКаталог.СбисРаспаковатьНастройки"); 
	КонецЕсли;
	Возврат РезультатРаспаковки;
	
КонецФункции

&НаКлиенте                                  
Функция		СбисПараметрыАрхиваНастроек(Кэш, СбисИмяАрхива)
	Результат = Новый Структура("ИмяАрхива, КлючАрхива, Расширение", СбисИмяАрхива, СбисИмяАрхива, "zip");
	Если Кэш.ОбщиеФункции.ЭтоНоваяВерсия(Кэш.ПараметрыСистемы.Клиент.ВерсияПриложения, "8.3") Тогда
		Результат.КлючАрхива = Результат.КлючАрхива + "8_3";
	КонецЕсли;
	СбисПутьКНастройкам = СбисПутьКАктуальнымАрхивам(Кэш);
	Результат.Вставить("ПутьКАрхиву", СбисПутьКНастройкам);
	Результат.Вставить("Разделитель", Кэш.ОбщиеФункции.СбисФорматРазделителя(Кэш.ПараметрыСистемы.Сервер));
	Возврат Результат;
КонецФункции

//Собирает все настройки из каталога в архив для передачи на сервер
&НаКлиенте                                  
Функция		СобратьСпискиНастроекНаКлиенте(Кэш, КаталогНастроек, Отказ)
	Файл = Новый Файл(КаталогНастроек);
	Если Не Файл.Существует() Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, ЭтаФорма.ИмяФормы + "." + "СобратьСпискиНастроекНаСервере", 779, "Каталог не существует");
	ИначеЕсли Не Файл.ЭтоКаталог() Тогда
		КаталогНастроекРазбит = СтрЗаменить(СтрЗаменить(КаталогНастроек, "/", Символы.ПС), "\", Символы.ПС);
		КаталогНастроек = Сред	(КаталогНастроек, 
								1,
								СтрДлина(КаталогНастроек) - СтрДлина(СтрПолучитьСтроку(КаталогНастроекРазбит, СтрЧислоСтрок(КаталогНастроекРазбит)))-1);
	КонецЕсли;
	КаталогXSLT = Кэш.ОбщиеФункции.СбисФорматКаталога(КаталогНастроек + "xslt", Кэш.ПараметрыСистемы.Клиент);
	
	//Ищем файлы в каталоге который выбрали на клиенте. 
	НастройкиВКаталоге = Новый Структура("XSLT, INI, EPF", Новый Массив, Новый Массив, Новый Массив);
	НастройкиВКаталоге.INI	= НайтиФайлы(КаталогНастроек, "ВО8*.xml");
	НастройкиВКаталоге.EPF	= НайтиФайлы(КаталогНастроек, "ВнешниеФункции_Клиент.epf");
	МассивНайденныхФайловXSLT1	= НайтиФайлы(КаталогXSLT, "*.xslt");
	МассивНайденныхФайловXSLT2	= НайтиФайлы(КаталогXSLT, "*.sbis3.xslt");

	Если	Не НастройкиВКаталоге.INI.Количество()
		И	Не НастройкиВКаталоге.EPF.Количество()
		И	(	Не	МассивНайденныхФайловXSLT1.Количество()
			Или		МассивНайденныхФайловXSLT1.Количество()	= МассивНайденныхФайловXSLT2.Количество())  Тогда
		Возврат Неопределено;
	КонецЕсли;
	Для Каждого ЭлементНастройкиПеренести Из МассивНайденныхФайловXSLT1 Цикл
		Если Найти(ЭлементНастройкиПеренести.ПолноеИмя, ".sbis3") Тогда
			Продолжить;
		КонецЕсли;
		НастройкиВКаталоге.XSLT.Добавить(ЭлементНастройкиПеренести);
	КонецЦикла;
	Возврат НастройкиВКаталоге;
КонецФункции

//Собирает все настройки из каталога в архив для передачи на сервер
&НаСервере                                  
Функция		СобратьСпискиНастроекНаСервере(Кэш, КаталогНастроек, Отказ) Экспорт
	Файл = Новый Файл(КаталогНастроек);
	Если Не Файл.Существует() Тогда
		Отказ = Истина;
		Возврат СбисОбщиеФункции(Кэш).СбисИсключение(, ЭтаФорма.ИмяФормы + "." + "СобратьСпискиНастроекНаСервере", 779, "Каталог не существует");
	ИначеЕсли Не Файл.ЭтоКаталог() Тогда
		КаталогНастроекРазбит = СтрЗаменить(СтрЗаменить(КаталогНастроек, "/", Символы.ПС), "\", Символы.ПС);
		КаталогНастроек = Сред	(КаталогНастроек, 
								1,
								СтрДлина(КаталогНастроек) - СтрДлина(СтрПолучитьСтроку(КаталогНастроекРазбит, СтрЧислоСтрок(КаталогНастроекРазбит)))-1);
	КонецЕсли;
	КаталогXSLT = СбисОбщиеФункции(Кэш).СбисФорматКаталога(КаталогНастроек + "xslt", Кэш.ПараметрыСистемы.Сервер);
	
	//Ищем файлы в каталоге который выбрали на клиенте. 
	НастройкиВКаталоге = Новый Структура("XSLT, INI, EPF", Новый Массив, Новый Массив, Новый Массив);
	МассивНайденныхФайловINI	= НайтиФайлы(КаталогНастроек, "ВО8*.xml");
	МассивНайденныхФайловEPF	= НайтиФайлы(КаталогНастроек, "ВнешниеФункции_Клиент.epf");
	МассивНайденныхФайловXSLT1	= НайтиФайлы(КаталогXSLT, "*.xslt");
	МассивНайденныхФайловXSLT2	= НайтиФайлы(КаталогXSLT, "*.sbis3.xslt");

	Если	Не МассивНайденныхФайловINI.Количество()
		И	Не МассивНайденныхФайловEPF.Количество()
		И	(	Не	МассивНайденныхФайловXSLT1.Количество()
			Или		МассивНайденныхФайловXSLT1.Количество()	= МассивНайденныхФайловXSLT2.Количество())  Тогда
		Возврат Неопределено;
	КонецЕсли;
	Для Каждого ЭлементНастройкиПеренести Из МассивНайденныхФайловXSLT1 Цикл
		Если Найти(ЭлементНастройкиПеренести.ПолноеИмя, ".sbis3") Тогда
			Продолжить;
		КонецЕсли;
		НастройкиВКаталоге.XSLT.Добавить(Новый Структура("ПолноеИмя", ЭлементНастройкиПеренести.ПолноеИмя));
	КонецЦикла;
	Для Каждого ЭлементНастройкиПеренести Из МассивНайденныхФайловINI Цикл
		НастройкиВКаталоге.INI.Добавить(Новый Структура("ПолноеИмя", ЭлементНастройкиПеренести.ПолноеИмя));
	КонецЦикла;
	Для Каждого ЭлементНастройкиПеренести Из МассивНайденныхФайловEPF Цикл
		НастройкиВКаталоге.EPF.Добавить(Новый Структура("ПолноеИмя", ЭлементНастройкиПеренести.ПолноеИмя));
	КонецЦикла;
	Возврат НастройкиВКаталоге;
КонецФункции

&НаКлиенте                                  
Процедура	ЗагрузитьНастройкиНаСервер_ПослеВвода(КаталогНастроекКлиент=Неопределено, ДопПараметры) Экспорт 
	Кэш = ДопПараметры.Кэш;
	Если КаталогНастроекКлиент = Неопределено Тогда
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш,, ДопПараметры.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	
	ДопПараметры.Вставить("КаталогНаКлиенте", КаталогНастроекКлиент);
	ДопПараметры.Вставить("КаталогНаСервере", Кэш.Парам.ИдентификаторНастроек);
	ДопПараметры.Вставить("ВариантОбработки", 0);
	
	Отказ = Ложь;
	ПроверкаНаКлиенте = СобратьСпискиНастроекНаКлиенте(Кэш, ДопПараметры.КаталогНаКлиенте, Отказ);
	Если Отказ Тогда
		ДопПараметры.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, ПроверкаНаКлиенте, ДопПараметры.ОписаниеОповещенияОЗавершении);
	ИначеЕсли ПроверкаНаКлиенте = Неопределено Тогда
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш,  "В каталоге " + ДопПараметры.КаталогНаКлиенте + " нет настроек для переноса.", ДопПараметры.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	ДопПараметры.Вставить("НастройкиНаКлиенте", ПроверкаНаКлиенте);
	ПроверкаНаСервере = СобратьСпискиНастроекНаСервере(Кэш.ОбщиеФункции.КэшДляСервера(Кэш), ДопПараметры.КаталогНаСервере, Отказ);
	Если Отказ Тогда
		ДопПараметры.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, ПроверкаНаСервере, ДопПараметры.ОписаниеОповещенияОЗавершении);
	ИначеЕсли Не ПроверкаНаСервере = Неопределено Тогда
		ДопПараметры.Вставить("НастройкиНаСервере", ПроверкаНаСервере);
		ОповещениеПродолжить = Кэш.ОбщиеФункции.СбисОписаниеОповещения(Кэш, "ЗагрузитьНастройки_ОбработкаДиалога", ЭтаФорма, ДопПараметры);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(1,	"Заменить одноименные файлы");
		СписокКнопок.Добавить(2,	"Удалить старые настройки");
		СписокКнопок.Добавить(10,	"Отменить");
		ТекстВопроса = "В каталоге " + ДопПараметры.КаталогНаСервере + " имеются настройки.";
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, Вопрос(ТекстВопроса, СписокКнопок), ОповещениеПродолжить)
		#Иначе
			ПоказатьВопрос(ОповещениеПродолжить, ТекстВопроса, СписокКнопок);
		#КонецЕсли
	Иначе
		ОтправитьНастройкиНаСервер_Клиент(ДопПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте                                  
Процедура	ЗагрузитьНастройки_ОбработкаДиалога(РезультатДиалога, ДопПараметры) Экспорт 
	Если РезультатДиалога = 10 Тогда
		ДопПараметры.Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(ДопПараметры.Кэш,, ДопПараметры.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	ДопПараметры.Вставить("ВариантОбработки", РезультатДиалога);
	ОтправитьНастройкиНаСервер_Клиент(ДопПараметры);
КонецПроцедуры

&НаКлиенте                                  
Процедура	ВыгрузитьНастройки_ОбработкаДиалога(РезультатДиалога, ДопПараметры) Экспорт 
	Если РезультатДиалога = 10 Тогда
		ДопПараметры.Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(ДопПараметры.Кэш,, ДопПараметры.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	ДопПараметры.Вставить("ВариантОбработки", РезультатДиалога);
	СбисПолучитьНастройкиССервера_Клиент(ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура	ОтправитьНастройкиНаСервер_Клиент(ПараметрыЗагрузки)
	Отказ					= Ложь;
	Кэш						= ПараметрыЗагрузки.Кэш;
	КаталогНастроекКлиент	= ПараметрыЗагрузки.КаталогНаКлиенте;
	ДанныеНаКлиенте			= ПараметрыЗагрузки.НастройкиНаКлиенте;

	Кэш.ГлавноеОкно.СбисПоказатьСостояние("Сбор настроек", Кэш.ГлавноеОкно);
	
	ПараметрыЗагрузки.Вставить("ИмяАрхива", "SbisSettingsIN.zip");
	СбисПутьКВременномуФайлу = КаталогНастроекКлиент + ПараметрыЗагрузки.ИмяАрхива;
	АрхивНаКлиенте = Новый ЗаписьZipФайла(СбисПутьКВременномуФайлу);
	Для Каждого ЭлементНастройкиПеренести Из ДанныеНаКлиенте.INI Цикл
		АрхивНаКлиенте.Добавить(ЭлементНастройкиПеренести.ПолноеИмя);
	КонецЦикла;
	Для Каждого ЭлементНастройкиПеренести Из ДанныеНаКлиенте.EPF Цикл
		АрхивНаКлиенте.Добавить(ЭлементНастройкиПеренести.ПолноеИмя);
	КонецЦикла;
	Для Каждого ЭлементНастройкиПеренести Из ДанныеНаКлиенте.XSLT Цикл
		АрхивНаКлиенте.Добавить(ЭлементНастройкиПеренести.ПолноеИмя);
	КонецЦикла;
	АрхивНаКлиенте.Записать();
	ОчиститьФайл = Не ПараметрыЗагрузки.КаталогНаКлиенте = ПараметрыЗагрузки.КаталогНаСервере Или Не Кэш.ПараметрыСистемы.Конфигурация.Файловая;
	ПараметрыПереноса = Новый Структура("НаСервер, ОчиститьПослеПереноса, Файлы", Истина, ОчиститьФайл, Новый Массив);
	ПараметрыПереноса.Файлы.Добавить(Новый Структура(
	"ИмяФайла,					ИмяФайлаОткуда,				ПутьКуда", 
	ПараметрыЗагрузки.ИмяАрхива,СбисПутьКВременномуФайлу,	ПараметрыЗагрузки.КаталогНаСервере));
	
	Кэш.ГлавноеОкно.СбисПоказатьСостояние("Отправка", Кэш.ГлавноеОкно);
	РезультатВыполнения = Кэш.ОбщиеФункции.СбисСкопироватьФайлы(Кэш, ПараметрыПереноса, Отказ);
	Если Отказ Тогда
		ПараметрыЗагрузки.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, АрхивНаКлиенте, ПараметрыЗагрузки.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	ПараметрыНаСервер = Новый Структура("КаталогНаСервере, ВариантОбработки,НастройкиНаСервере, ИмяАрхива");
	ЗаполнитьЗначенияСвойств(ПараметрыНаСервер, ПараметрыЗагрузки);
	Кэш.ГлавноеОкно.СбисПоказатьСостояние("Распаковка", Кэш.ГлавноеОкно);
	РезультатВыполнения = РаспаковатьНастройкиНаСервере(Кэш.ОбщиеФункции.КэшДляСервера(Кэш), ПараметрыНаСервер, Отказ);
	Кэш.КэшНастроек.ИниВПорядке = Ложь;
	Если Отказ Тогда
		ПараметрыЗагрузки.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
	Иначе
		ОшибкаУстановки = Ложь;
		УстановленныеИниФайлы = Кэш.ФормаНастроек.СбисПолучитьНастройки(Кэш, ОшибкаУстановки);
		Если Не ОшибкаУстановки Тогда
			Кэш.ГлавноеОкно.СбисОбновитьИнформациюНастроекНаГлавномОкне(Кэш, УстановленныеИниФайлы, ОшибкаУстановки);
		КонецЕсли;
	КонецЕсли;
	Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, РезультатВыполнения, ПараметрыЗагрузки.ОписаниеОповещенияОЗавершении);
КонецПроцедуры

&НаКлиенте
Процедура	СбисПолучитьНастройкиДляТП(ПараметрыВыгрузки) Экспорт
	СбисПолучитьНастройкиССервера_Клиент(ПараметрыВыгрузки);
КонецПроцедуры
&НаКлиенте
Процедура	СбисПолучитьНастройкиССервера_Клиент(ПараметрыВыгрузки) Экспорт
	Перем ДанныеНаКлиенте;
	Отказ					= Ложь;
	Кэш						= ПараметрыВыгрузки.Кэш;
	КаталогНастроекКлиент	= ПараметрыВыгрузки.КаталогНаКлиенте;
	
	Если ПараметрыВыгрузки.ВариантОбработки = 4 Тогда
		РезультатОбработки = СбисСоздатьКаталогНаКлиенте(ПараметрыВыгрузки.КаталогНаКлиенте, Кэш.ПараметрыСистемы, Отказ);
		Если Отказ Тогда
			ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
			Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, ЭтаФорма.ИмяФормы + "." + "ПолучитьНастройкиССервера_Клиент"), ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
			Возврат;
		КонецЕсли;
	ИначеЕсли Не ПараметрыВыгрузки.Свойство("НастройкиНаКлиенте", ДанныеНаКлиенте) Тогда
		ПараметрыВыгрузки.Вставить("НастройкиНаКлиенте");
	КонецЕсли;
	Кэш.ГлавноеОкно.СбисПоказатьСостояние("Сбор настроек", Кэш.ГлавноеОкно);
	
	ПараметрыВыгрузки.Вставить("ИмяАрхива", "SbisSettingsOUT.zip");
	
	ПараметрыНаСервер = Новый Структура("КаталогНаСервере, ВариантОбработки,НастройкиНаСервере, ИмяАрхива");
	ЗаполнитьЗначенияСвойств(ПараметрыНаСервер, ПараметрыВыгрузки);
	АдресАрхива = СобратьНастройкиНаСервере(Кэш.ОбщиеФункции.КэшДляСервера(Кэш), ПараметрыНаСервер, Отказ);
	Если Отказ Тогда
		ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, АдресАрхива, ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	Попытка
		СбисДанныеФайла = ПолучитьИзВременногоХранилища(АдресАрхива);
		СбисДанныеФайла.Записать(ПараметрыВыгрузки.КаталогНаКлиенте + ПараметрыВыгрузки.ИмяАрхива);
	Исключение
		ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
		СбисОшибка = Кэш.ОбщиеФункции.СбисИсключение(ОписаниеОшибки(), ЭтаФорма.ИмяФормы + "." + "ПолучитьНастройкиССервера_Клиент");
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, СбисОшибка, ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецПопытки;
	
	Если Не ПараметрыВыгрузки.Распаковать Тогда
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, ПараметрыВыгрузки.КаталогНаКлиенте + ПараметрыВыгрузки.ИмяАрхива, ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	Кэш.ГлавноеОкно.СбисПоказатьСостояние("Распаковка", Кэш.ГлавноеОкно);
	РезультатВыполнения = РаспаковатьНастройкиНаКлиенте(Кэш, ПараметрыВыгрузки, Отказ);
	Если Отказ Тогда
		ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
	КонецЕсли;
	Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, КаталогНастроекКлиент, ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
КонецПроцедуры

&НаСервере
Функция		РаспаковатьНастройкиНаСервере(Кэш, ПараметрыЗагрузки, Отказ)
	ДопПараметры = Новый Структура("КлючАрхива", "ЗагрузкаНаСервер");
	Если ПараметрыЗагрузки.ВариантОбработки = 1 Тогда
		//Стандартный вариант работы с заменой при наличии одноименных файлов.
		РезультатОбработки = СделатьБэкапНастроек(Кэш, ПараметрыЗагрузки.КаталогНаСервере, ПараметрыЗагрузки.НастройкиНаСервере, ДопПараметры, Отказ);
		Если Отказ Тогда
			Возврат СбисОбщиеФункции(Кэш).СбисИсключение(РезультатОбработки, ЭтаФорма.ИмяФормы + ".РаспаковатьНастройкиНаСервере");
		КонецЕсли;
	ИначеЕсли ПараметрыЗагрузки.ВариантОбработки = 2 Тогда
		//Удалим старые файлы настроек, предварительно сделав бэкап
		РезультатБэкап = СделатьБэкапНастроек(Кэш, ПараметрыЗагрузки.КаталогНаСервере, ПараметрыЗагрузки.НастройкиНаСервере, ДопПараметры, Отказ);
		Если Отказ Тогда
			Возврат СбисОбщиеФункции(Кэш).СбисИсключение(РезультатБэкап, ЭтаФорма.ИмяФормы + ".РаспаковатьНастройкиНаСервере");
		КонецЕсли;
		ФайлыУдалить = Неопределено;
		Если ПараметрыЗагрузки.НастройкиНаСервере.Свойство("INI", ФайлыУдалить) Тогда
			Попытка
				Для Каждого ЭлементНастройкиПеренести Из ФайлыУдалить Цикл
					УдалитьФайлы(ЭлементНастройкиПеренести.ПолноеИмя);
				КонецЦикла;
			Исключение
				Отказ = Истина;
				Возврат СбисОбщиеФункции(Кэш).СбисИсключение(, ЭтаФорма.ИмяФормы + ".РаспаковатьНастройкиНаСервере",772,,ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		Если ПараметрыЗагрузки.НастройкиНаСервере.Свойство("EPF", ФайлыУдалить) Тогда
			Попытка
				Для Каждого ЭлементНастройкиПеренести Из ФайлыУдалить Цикл
					УдалитьФайлы(ЭлементНастройкиПеренести.ПолноеИмя);
				КонецЦикла;
			Исключение
				Отказ = Истина;
				Возврат СбисОбщиеФункции(Кэш).СбисИсключение(, ЭтаФорма.ИмяФормы + ".РаспаковатьНастройкиНаСервере",772,,ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		Если ПараметрыЗагрузки.НастройкиНаСервере.Свойство("XSLT", ФайлыУдалить) Тогда
			Попытка
				Для Каждого ЭлементНастройкиПеренести Из ФайлыУдалить Цикл
					УдалитьФайлы(ЭлементНастройкиПеренести.ПолноеИмя);
				КонецЦикла;
			Исключение
				Отказ = Истина;
				Возврат СбисОбщиеФункции(Кэш).СбисИсключение(, ЭтаФорма.ИмяФормы + ".РаспаковатьНастройкиНаСервере",772,,ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	// после получени и преобразования из двоичных данных, распакуем архив в папку клиента
	КаталогXSLT = СбисОбщиеФункции(Кэш).СбисФорматКаталога(ПараметрыЗагрузки.КаталогНаСервере + "xslt", Кэш.ПараметрыСистемы.Сервер);
	СбисСоздатьКаталогНаСервере(КаталогXSLT, Кэш.ПараметрыСистемы, Отказ);
	Попытка
		ЧтениеZIP = Новый ЧтениеZipФайла(ПараметрыЗагрузки.КаталогНаСервере + ПараметрыЗагрузки.ИмяАрхива);
		Для Каждого ЭлементZIP Из ЧтениеZIP.Элементы Цикл
			Если		Найти(ЭлементZIP.ПолноеИмя, ".xml")
					Или	Найти(ЭлементZIP.ПолноеИмя, ".epf") Тогда
				ЧтениеZIP.Извлечь(ЭлементZIP, ПараметрыЗагрузки.КаталогНаСервере);
			ИначеЕсли	Найти(ЭлементZIP.ПолноеИмя, ".xslt") Тогда
				ЧтениеZIP.Извлечь(ЭлементZIP, КаталогXSLT);
			КонецЕсли;
		КонецЦикла;
		ЧтениеZIP.Закрыть();
	Исключение
		Отказ = Истина;
		Возврат СбисОбщиеФункции(Кэш).СбисИсключение(, ЭтаФорма.ИмяФормы + ".РаспаковатьНастройкиНаСервере",772,,ОписаниеОшибки());
	КонецПопытки;
	УдалитьФайлы(ПараметрыЗагрузки.КаталогНаСервере + ПараметрыЗагрузки.ИмяАрхива);
	Возврат "Выполнено";
КонецФункции

&НаКлиенте
Функция		РаспаковатьНастройкиНаКлиенте(Кэш, ПараметрыЗагрузки, Отказ)
	ДопПараметры = Новый Структура("КлючАрхива", "ЗагрузкаНаСервер");
	Если ПараметрыЗагрузки.ВариантОбработки = 1 Тогда
	ИначеЕсли ПараметрыЗагрузки.ВариантОбработки = 2 Тогда
		ФайлыУдалить = Неопределено;
		Если ПараметрыЗагрузки.НастройкиНаКлиенте.Свойство("INI", ФайлыУдалить) Тогда
			Попытка
				Для Каждого ЭлементНастройкиПеренести Из ФайлыУдалить Цикл
					УдалитьФайлы(ЭлементНастройкиПеренести.ПолныйПуть);
				КонецЦикла;
			Исключение
				Возврат Кэш.ОбщиеФункции.СбисИсключение(, ЭтаФорма.ИмяФормы + ".РаспаковатьНастройкиНаКлиенте",772,,ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		Если ПараметрыЗагрузки.НастройкиНаКлиенте.Свойство("EPF", ФайлыУдалить) Тогда
			Попытка
				Для Каждого ЭлементНастройкиПеренести Из ФайлыУдалить Цикл
					УдалитьФайлы(ЭлементНастройкиПеренести.ПолныйПуть);
				КонецЦикла;
			Исключение
				Возврат Кэш.ОбщиеФункции.СбисИсключение(, ЭтаФорма.ИмяФормы + ".РаспаковатьНастройкиНаКлиенте",772,,ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		Если ПараметрыЗагрузки.НастройкиНаКлиенте.Свойство("XSLT", ФайлыУдалить) Тогда
			Попытка
				Для Каждого ЭлементНастройкиПеренести Из ФайлыУдалить Цикл
					УдалитьФайлы(ЭлементНастройкиПеренести.ПолныйПуть);
				КонецЦикла;
			Исключение
				Возврат Кэш.ОбщиеФункции.СбисИсключение(, ЭтаФорма.ИмяФормы + ".РаспаковатьНастройкиНаКлиенте",772,,ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	// после получени и преобразования из двоичных данных, распакуем архив в папку клиента
	КаталогXSLT = Кэш.ОбщиеФункции.СбисФорматКаталога(ПараметрыЗагрузки.КаталогНаКлиенте + "xslt", Кэш.ПараметрыСистемы.Сервер);
	СбисСоздатьКаталогНаКлиенте(КаталогXSLT, Кэш.ПараметрыСистемы, Отказ);
	Попытка
		ЧтениеZIP = Новый ЧтениеZipФайла(ПараметрыЗагрузки.КаталогНаКлиенте + ПараметрыЗагрузки.ИмяАрхива);
		Для Каждого ЭлементZIP Из ЧтениеZIP.Элементы Цикл
			Если		Найти(ЭлементZIP.ПолноеИмя, ".xml")
					Или	Найти(ЭлементZIP.ПолноеИмя, ".epf") Тогда
				ЧтениеZIP.Извлечь(ЭлементZIP, ПараметрыЗагрузки.КаталогНаКлиенте);
			ИначеЕсли	Найти(ЭлементZIP.ПолноеИмя, ".xslt") Тогда
				ЧтениеZIP.Извлечь(ЭлементZIP, КаталогXSLT);
			КонецЕсли;
		КонецЦикла;
		ЧтениеZIP.Закрыть();
	Исключение
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, ЭтаФорма.ИмяФормы + ".РаспаковатьНастройкиНаСервере",772,,ОписаниеОшибки());
	КонецПопытки;
	УдалитьФайлы(ПараметрыЗагрузки.КаталогНаКлиенте + ПараметрыЗагрузки.ИмяАрхива);
	Возврат "Выполнено";
КонецФункции

// Функция формирует полный список доступных настроек
&НаКлиенте
Функция		СформироватьСписокДоступныхНастроек(Кэш, КаталогРаспаковки)
	СписокТиповНастроек = СформироватьСписокДоступныхНастроекНаСервере(КаталогРаспаковки);
	ПараметрыСериализации = Новый Структура("Разделитель", "-");
	Для Каждого ЭлементСписка Из СписокТиповНастроек Цикл
		СбисЗначениеПодсистемы	= СтрЗаменить(Кэш.ФормаНастроекОбщее.ОтсеятьЧисла(Сред(ЭлементСписка.Представление, СтрДлина(Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис)+1)), "-", "");
		СбисРазрядыВерсии		= Сред(ЭлементСписка.Представление,Найти(ЭлементСписка.Представление, СбисЗначениеПодсистемы) + СтрДлина(СбисЗначениеПодсистемы));
		СбисРазрядыВерсии		= Кэш.ОбщиеФункции.СериализоватьВерсию(СбисРазрядыВерсии, "Дозаполнить", ПараметрыСериализации);
		ЭлементСписка.Значение.Вставить("ПредставлениеВерсии", СбисРазрядыВерсии);
	КонецЦикла;
	Возврат СписокТиповНастроек;
КонецФункции

&НаСервере
Функция		СформироватьСписокДоступныхНастроекНаСервере(КаталогРаспаковки)
	//На сервере так, как вся работа с файлами настроек идёт там
	
	// Каждый элемент списка - массив файлов настроек для определенной конфигурации
	СписокТиповНастроек	= Новый СписокЗначений;
	СписокПрефиксов		= Новый Массив();
	
	СписокФайлов		= НайтиФайлы(КаталогРаспаковки,"ВО8*.sbis3.xml");
	
	Для Каждого ИниФайл из СписокФайлов Цикл
		Префикс	= НайтиПрефиксВИмениФайла(ИниФайл.Имя); // Берет все до первого подчеркивания
		Если	СписокПрефиксов.Найти(Префикс) = Неопределено Тогда
			СписокПрефиксов.Добавить(Префикс);
			МаскаФайлов		= Префикс+"_*.sbis3.xml";
			МассивФайлов	= НайтиФайлы(КаталогРаспаковки,МаскаФайлов);
			
			МассивСтруктурФайлов = Новый Массив();
			Для Каждого Файл из МассивФайлов Цикл
				НоваяСтрока = Новый Структура();
				НоваяСтрока.Вставить("Имя",					Файл.Имя);
				НоваяСтрока.Вставить("ИмяБезРасширения",	Файл.ИмяБезРасширения);
				НоваяСтрока.Вставить("ПолноеИмя",			Файл.ПолноеИмя);
				НоваяСтрока.Вставить("Путь",				Файл.Путь);
				НоваяСтрока.Вставить("Расширение",			Файл.Расширение);
				МассивСтруктурФайлов.Добавить(НоваяСтрока);
			КонецЦикла;	
			
			СписокТиповНастроек.Добавить(Новый	Структура("МассивИни,ПараметрыКонфигурации",	МассивСтруктурФайлов, Новый	Структура),Префикс);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат СписокТиповНастроек;
	
КонецФункции

&НаСервереБезКонтекста
Функция		СбисНайтиФайлОбновления(ВременныйКаталогРаспаковкиИни, СбисСтрока)
	ПутьКФайлуОткуда = ВременныйКаталогРаспаковкиИни + СбисСтрока.Имя; 
	Файл = Новый Файл(ПутьКФайлуОткуда);
	Если Файл.Существует() Тогда
		Возврат ПутьКФайлуОткуда;
	КонецЕсли;
	СтрИмяФайлаБезРасширений = СтрПолучитьСтроку(СтрЗаменить(СбисСтрока.Имя, ".", Символы.ПС),1);
	ФайлПоМаске = НайтиФайлы(ВременныйКаталогРаспаковкиИни, СтрИмяФайлаБезРасширений + ".*sbis3.xml");
	Если ФайлПоМаске.Количество() Тогда
		Возврат ФайлПоМаске[0].ПолноеИмя;
	КонецЕсли;
	//На случай различий связанных с дополненным именем файлов
	СтрИмяФайлаРаздел = СтрЗаменить(СтрИмяФайлаБезРасширений, "_", Символы.ПС);
	Если	СтрПолучитьСтроку(СтрИмяФайлаРаздел, 2) = "Загрузка"
		Или	СтрПолучитьСтроку(СтрИмяФайлаРаздел, 2) = "Выгрузка" Тогда
		СтрИмяФайлаБезРасширений = СтрПолучитьСтроку(СтрИмяФайлаРаздел, 1);
		Для Счетчик = 4 По СтрЧислоСтрок(СтрИмяФайлаРаздел) Цикл
			СтрИмяФайлаБезРасширений = СтрИмяФайлаБезРасширений + "_" + СтрПолучитьСтроку(СтрИмяФайлаРаздел, Счетчик);
		КонецЦикла;
		ФайлПоМаске = НайтиФайлы(ВременныйКаталогРаспаковкиИни, СтрИмяФайлаБезРасширений + ".*sbis3.xml");
		Если ФайлПоМаске.Количество() Тогда
			Возврат ФайлПоМаске[0].ПолноеИмя;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции
	
//Делает бэкап ини файлов, пользовательских XSLT и внешних функций в указанном каталоге.
&НаСервере
Функция		СделатьБэкапНастроек(Кэш, СбисКаталог, СписокДанныеЗаписать=Неопределено, ДопПараметры=Неопределено, Отказ)
	Перем ФайлыНаЗапись;

	Если СписокДанныеЗаписать = Неопределено Тогда
		СписокДанныеЗаписать = СобратьСпискиНастроекНаСервере(ДопПараметры.Кэш, СбисКаталог, Отказ);
		Если СписокДанныеЗаписать = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	СбисОбработкаОбъект = СбисОбщиеФункции(Кэш);
	
	СбисПутьКАрхиву = СбисСоздатьКаталогНаСервере(СбисКаталог + "Архив", ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат СбисПутьКАрхиву;
	Иначе
		СбисПутьКАрхиву = СбисОбработкаОбъект.СбисФорматКаталога(СбисПутьКАрхиву, Кэш.ПараметрыСистемы.Сервер);
	КонецЕсли;
	СбисКлючАрхива = "";
	Если ДопПараметры.Свойство("КлючАрхива") Тогда
		СбисКлючАрхива = ДопПараметры.КлючАрхива + "_";
	КонецЕсли;
	СбисКлючАрхива = СбисКлючАрхива + Формат(ТекущаяДата(),"ДФ=""дд.ММ.гггг'_'ЧЧ.мм.сс""")+".zip";
	ПутьКАрхивуПолный = СбисПутьКАрхиву + СбисКлючАрхива;
	ЗаписьZIP = Новый ЗаписьZipФайла(ПутьКАрхивуПолный);
	Если СписокДанныеЗаписать.Свойство("INI", ФайлыНаЗапись) Тогда
		Для Каждого ЭлементНастройкиПеренести Из ФайлыНаЗапись Цикл
			ЗаписьZIP.Добавить(ЭлементНастройкиПеренести.ПолноеИмя);
		КонецЦикла;
	КонецЕсли;
	Если СписокДанныеЗаписать.Свойство("EPF", ФайлыНаЗапись) Тогда
		Для Каждого ЭлементНастройкиПеренести Из ФайлыНаЗапись Цикл
			ЗаписьZIP.Добавить(ЭлементНастройкиПеренести.ПолноеИмя);
		КонецЦикла;
	КонецЕсли;
	Если СписокДанныеЗаписать.Свойство("XSLT", ФайлыНаЗапись) Тогда
		Для Каждого ЭлементНастройкиПеренести Из ФайлыНаЗапись Цикл
			ЗаписьZIP.Добавить(ЭлементНастройкиПеренести.ПолноеИмя);
		КонецЦикла;
	КонецЕсли;
	Попытка
		ЗаписьZIP.Записать();
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,details", 772, ОписаниеОшибки());
	КонецПопытки;
	Возврат ПутьКАрхивуПолный;
КонецФункции

&НаСервере
Функция		СобратьНастройкиНаСервере(Кэш, ПараметрыСбора, Отказ) Экспорт
	Перем СписокДанные; 
	СбисПутьКВременномуФайлу = ПараметрыСбора.КаталогНаСервере + ПараметрыСбора.ИмяАрхива;
	
	Если Не ПараметрыСбора.Свойство("НайстройкиНаСервере", СписокДанные) Тогда
		СписокДанные = СобратьСпискиНастроекНаСервере(Кэш, ПараметрыСбора.КаталогНаСервере, Отказ);
		Если СписокДанные = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		АрхивНаСервере = Новый ЗаписьZipФайла(СбисПутьКВременномуФайлу);
		Для Каждого ЭлементНастройкиПеренести Из СписокДанные.INI Цикл
			АрхивНаСервере.Добавить(ЭлементНастройкиПеренести.ПолноеИмя);
		КонецЦикла;
		Для Каждого ЭлементНастройкиПеренести Из СписокДанные.EPF Цикл
			АрхивНаСервере.Добавить(ЭлементНастройкиПеренести.ПолноеИмя);
		КонецЦикла;
		Для Каждого ЭлементНастройкиПеренести Из СписокДанные.XSLT Цикл
			АрхивНаСервере.Добавить(ЭлементНастройкиПеренести.ПолноеИмя);
		КонецЦикла;
		АрхивНаСервере.Записать();
	Исключение
		Отказ = Истина;
		Возврат СбисОбщиеФункции(Кэш).СбисИсключение(, ЭтаФорма.ИмяФормы + ".СобратьНастройкиНаСервере",772,,ОписаниеОшибки());
	КонецПопытки;
	Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СбисПутьКВременномуФайлу));
КонецФункции
	
//Делает бэкап ини файлов в каталоге настроек.
&НаСервереБезКонтекста
Функция		СделатьБэкапИниФайлов(СбисКаталог, МассивИниФайлов, ДополнительныеПараметры, Отказ)
	Если Не МассивИниФайлов.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	СбисРазделитель = ДополнительныеПараметры.Разделитель;
	СбисПутьКАрхиву = СбисСоздатьКаталогНаСервере(СбисКаталог + "Архив", ДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		Возврат СбисПутьКАрхиву;
	КонецЕсли;
	СбисКлючАрхива = "";
	Если ДополнительныеПараметры.Свойство("КлючАрхива") Тогда
		СбисКлючАрхива = ДополнительныеПараметры.КлючАрхива + "_";
	КонецЕсли;
	ПолноеИмяАрхиваНастроек = СбисПутьКАрхиву + СбисРазделитель + СбисКлючАрхива + Формат(ТекущаяДата(),"ДФ=""дд.ММ.гггг'_'ЧЧ.мм.сс""")+".zip";
	ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяАрхиваНастроек);
	Если ТипЗнч(МассивИниФайлов) = Тип("СписокЗначений") Тогда
		Для Каждого СбисСтрока Из МассивИниФайлов Цикл
			ЗаписьZIP.Добавить(СбисКаталог + СбисСтрока.Значение);
		КонецЦикла;
	Иначе
		Для Каждого СбисСтрока Из МассивИниФайлов Цикл
			ЗаписьZIP.Добавить(СбисКаталог + СбисСтрока.Имя);
		КонецЦикла;
	КонецЕсли;
	Попытка
		ЗаписьZIP.Записать();
		Сообщить("Создан архив настроек ("+ПолноеИмяАрхиваНастроек+")");
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,details", 772, ОписаниеОшибки());
	КонецПопытки;
	Возврат Истина;
КонецФункции

//Функция возвращает префикс из имени файла настроек	
&НаСервереБезКонтекста
Функция		НайтиПрефиксВИмениФайла(Знач Текст)Экспорт
	Префикс = Лев(Текст,Найти(Текст,"_")-1);
	Возврат Префикс;	
КонецФункции	

//Формирует структуру ошибки и добавляет ее в таблицу ошибок	
&НаСервереБезКонтекста
Процедура	ДобавитьПростуюОшибку(ТаблицаОшибок,ИмяПараметра,ТекстОшибки)
	НоваяОшибка = Новый Структура();
	НоваяОшибка.Вставить("ИмяПараметра",ИмяПараметра);
	НоваяОшибка.Вставить("ЗначениеПараметра","");
	НоваяОшибка.Вставить("ТекстОшибки",ТекстОшибки);
	НоваяОшибка.Вставить("ИнформацияПоОбъекту","");
	НоваяОшибка.Вставить("ИмяОбъекта","");
	НоваяОшибка.Вставить("ПолныйПуть","");
	ТаблицаОшибок.Добавить(НоваяОшибка);
КонецПроцедуры

//Возвращает имя настройки без префикса и расширения	
&НаСервереБезКонтекста
Функция		ИмяИниИзИмениФайла(ИмяФайла)
	ИмяИниЧистое = ИмяФайла;
	//Убираем префикс с именем конфигурации
	НачалоИмениИни = Найти(ИмяФайла,"_");
	Если НачалоИмениИни Тогда
		ИмяИниЧистое = Сред(ИмяИниЧистое, НачалоИмениИни + 1);
	КонецЕсли;
	//Убираем .sbis3. и/или расширение
	НачалоРасширения = Найти(ИмяИниЧистое, ".");
	Если НачалоРасширения Тогда
		ИмяИниЧистое = Лев(ИмяИниЧистое, НачалоРасширения - 1);
	КонецЕсли;
	//Убираем направление для Загрузка_Входящий
	НачалоПрефиксаТипа = Найти(ИмяИниЧистое, "Загрузка_Входящий_");
	Если НачалоПрефиксаТипа Тогда
		ИмяИниЧистое = Сред(ИмяИниЧистое, 19, СтрДлина(ИмяИниЧистое));
	КонецЕсли;
	Возврат ИмяИниЧистое;
КонецФункции

//Формирует структуру пользовательского файла настроек с ошибочными узлами
&НаСервереБезКонтекста
Функция		ДобавитьЗначенияСОшибкамиВСтруктуруКлиента(СлужебнаяСтруктура, СтруктураИниФайлаКлиента)
	НоваяСтруктураИниФайлаКлиента = СтруктураИниФайлаКлиента;
	Для каждого Узел из СлужебнаяСтруктура Цикл
		
		Если ЕстьОшибкаВУзлеСлужебнойСтруктуры(Узел.Значение) = Ложь Тогда //Если ошибок в узле нет, продолжаем обход узлов
			Если Узел.Ключ = "сбисПараметрыУзла" Тогда
				НоваяСтруктураИниФайлаКлиента.Вставить(Узел.Ключ, Узел.Значение);	
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(НоваяСтруктураИниФайлаКлиента) = Тип("Структура") Тогда
			Если Узел.Значение.Свойство("Ошибка") Тогда //Если в узле служебной структуры есть ошибка добавляем в новую структуру клиента
				//НоваяСтруктураИниФайлаКлиента.Вставить(Узел.Ключ, Новый Структура("Значение", Узел.Значение.Ошибка.ЗначениеПараметра));
				НоваяСтруктураИниФайлаКлиента.Вставить(Узел.Ключ, Новый Структура());
				Для Каждого Элемент Из Узел.Значение Цикл
					Если Элемент.Ключ<>"Ошибка" Тогда
						НоваяСтруктураИниФайлаКлиента[Узел.Ключ].Вставить(Элемент.Ключ, Элемент.Значение);	
					КонецЕсли;
				КонецЦикла;
				//НоваяСтруктураИниФайлаКлиента[Узел.Ключ].Вставить("Значение", Узел.Значение.Ошибка.ЗначениеПараметра);
				Продолжить;
			Иначе //Если ошибки нет, и нет такого узла - создаем узел в новой структуре клиента
				Если НоваяСтруктураИниФайлаКлиента.Свойство(Узел.Ключ) = Ложь Тогда
					НоваяСтруктураИниФайлаКлиента.Вставить(Узел.Ключ, Новый Структура);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Узел.Значение) = Тип("Структура") Тогда	
			НоваяСтруктураИниФайлаКлиента.Вставить(Узел.Ключ, ДобавитьЗначенияСОшибкамиВСтруктуруКлиента(Узел.Значение, НоваяСтруктураИниФайлаКлиента[Узел.Ключ]));
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат НоваяСтруктураИниФайлаКлиента;
	
КонецФункции	

//Рекурсивно проверяет, есть ли в узле структуры ошибка, чтобы понимать какую структуру узлов надо создавать в пользовательском файле настроек	
&НаСервереБезКонтекста
Функция		ЕстьОшибкаВУзлеСлужебнойСтруктуры(Узел)
	ЕстьОшибка = Ложь;
	Если ТипЗнч(Узел) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Узел.Свойство("Ошибка") Тогда
		Возврат Истина;
	КонецЕсли;	
	Для каждого ЭлементУзла из Узел Цикл		
		Если ТипЗнч(ЭлементУзла.Значение) = Тип("Структура") Тогда	
			Если ЭлементУзла.Значение.Свойство("Ошибка") Тогда
				Возврат Истина;
			КонецЕсли;	
			Если ЕстьОшибкаВУзлеСлужебнойСтруктуры(ЭлементУзла.Значение) Тогда //Проверяем вложенный узел
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат ЕстьОшибка;
	
КонецФункции

//Процедура сохраняет текущие файлы настроек в архив и устанавливает новые настройки	
&НаСервере
Функция		УстановитьФайлыНастроекНаСервере(МассивФайловДляУстановки, КаталогНастроек, ПараметрыНастроек, Отказ)
	ДатаВремяАрхива = Формат(ТекущаяДата(),"ДФ=""дд.ММ.гггг'_'ЧЧ.мм.сс""");
	СоздатьКаталог(КаталогНастроек+"Архив");
	ЗаписьZIP =  Новый ЗаписьZipФайла(КаталогНастроек+"Архив\"+ДатаВремяАрхива+".zip");
	Для Каждого Элемент Из МассивФайловДляУстановки Цикл
		Если Элемент.ДобавлятьВАрхив Тогда
			ЗаписьZIP.Добавить(КаталогНастроек	+ Элемент.ИмяФайлаПриемника);	
		КонецЕсли;
		КопироватьФайл(Элемент.ИмяФайлаИсточника,КаталогНастроек	+ Элемент.ИмяФайлаПриемника);
	КонецЦикла;
	ЗаписьZIP.Записать();
	
	Возврат	ПолучитьМассивУстановленныхИниФайлов(КаталогНастроек, ПараметрыНастроек);
	
КонецФункции

&НаСервере
Функция		ОтключитьФайлыНастроекНаСервере(СписокИниКОтключению, КаталогНастроек, ПараметрыНастроек, Отказ)
	
	Результат = СделатьБэкапИниФайлов(КаталогНастроек, СписокИниКОтключению, ПараметрыНастроек, Отказ);
	Для Каждого ИниФайл Из СписокИниКОтключению Цикл
		УдалитьФайлыНаСервере(КаталогНастроек, ИниФайл.Значение);
	КонецЦикла;	
	
	Возврат	ПолучитьМассивУстановленныхИниФайлов(КаталогНастроек, ПараметрыНастроек);
	
КонецФункции

//Удаляет ини с .0 в расширении, если в каталоге есть файл с таким же названием без .0
&НаСервереБезКонтекста
Функция		УдалитьДублиИни(ПараметрыОбновления, Отказ)
	
	ИниДляУдаления				= Новый Массив;
	ОтключенныеПоУмолчаниюИни	= НайтиФайлы(ПараметрыОбновления.КаталогНастроек,"ВО8*.0.sbis3.xml");
	
	Для Каждого ИниФайл Из ОтключенныеПоУмолчаниюИни Цикл
			
		ДубльПоИмени = Новый Файл(СтрЗаменить(ИниФайл.ПолноеИмя,".0.sbis3.xml",".sbis3.xml"));
			
		Если ДубльПоИмени.Существует() Тогда
			ИниДляУдаления.Добавить(ИниФайл);		
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИниДляУдаления.Количество() Тогда
		ПараметрыОбновления.Вставить("КлючАрхива","0");		
		РезультатБэкап = СделатьБэкапИниФайлов(ПараметрыОбновления.КаталогНастроек, ИниДляУдаления, ПараметрыОбновления, Отказ);
		ПараметрыОбновления.Удалить("КлючАрхива");
		Если Отказ Тогда			
			Возврат РезультатБэкап;			
		Иначе
			
			Для Каждого ИниФайл Из ИниДляУдаления Цикл
				УдалитьФайлыНаСервере(ПараметрыОбновления.КаталогНастроек, ИниФайл.Имя);
			КонецЦикла;
			
		КонецЕсли;		
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////
////////////////ВнешниеФункции_Клиент//////////////
///////////////////////////////////////////////////

&НаКлиенте
Процедура	сбисПодключитьЗаплатки(Кэш, ДопПараметрыПодключения) Экспорт
	
	// Подключает внешнюю обработку с пользовательскими функциями
	МестаПоискаОбработки = Новый Массив();
	МестаПоискаОбработки.Добавить(Новый Структура("Путь, Алгоритм", ДопПараметрыПодключения.КаталогНастроек,		"Каталог"));
	МестаПоискаОбработки.Добавить(Новый Структура("Путь, Алгоритм", "Справочники.ДополнительныеОтчетыИОбработки",	"Запрос"));
	МестаПоискаОбработки.Добавить(Новый Структура("Путь, Алгоритм", "Справочники.ВнешниеОбработки",					"Запрос"));
	
	ДопПараметры = Новый Структура("МестаПоиска", МестаПоискаОбработки);
	Кэш.ФормаНастроекОбщее.сбисПодключитьЗаплатки(Кэш, ДопПараметры);
	
КонецПроцедуры

///////////////////////////////////////////////////
///////////////////////XSLT////////////////////////
///////////////////////////////////////////////////

&НаКлиенте
Процедура	СбисСформироватьСтруктуруXSLT(Кэш, Каталог, УдалитьПослеЗавершения=Ложь, Отказ)	Экспорт
	
	КаталогКонвертеров		= Кэш.ОбщиеФункции.сбисФорматКаталога(Каталог + "xslt", Кэш.ПараметрыСистемы.Сервер);	
	//Пробуем прочитать xslt
	РезультатФормирования	= СбисПрочитатьXSLTНаСервере(КаталогКонвертеров, Отказ);
	Если Отказ Тогда
		//Нет файлов xslt/каталога с xslt
		Если РезультатФормирования.code = 777 Тогда
			Отказ = Ложь;
		Иначе
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.сбисИсключение(РезультатФормирования, "ФайлыНастроекКаталог.сбисСформироватьСтруктуруXSLT"),  Новый Структура("ФормаВладелец", Кэш.ФормаНастроекОбщее));
			Возврат;
		КонецЕсли;
		//Скачаем и распакуем архив с xslt в каталог
		РезультатФормирования = СбисРаспаковатьXSLT(Кэш, Новый Структура("КаталогРаспаковки", КаталогКонвертеров), Отказ);
		Если Отказ Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.сбисИсключение(РезультатФормирования, "ФайлыНастроекКаталог.сбисСформироватьСтруктуруXSLT"),  Новый Структура("ФормаВладелец", Кэш.ФормаНастроекОбщее));
			Возврат;
		КонецЕсли;
		//Повторно пробуем прочитать xslt
		РезультатФормирования = сбисПрочитатьXSLTНаСервере(КаталогКонвертеров, Отказ);
		Если Отказ Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.сбисИсключение(РезультатФормирования, "ФайлыНастроекКаталог.сбисСформироватьСтруктуруXSLT"),  Новый Структура("ФормаВладелец", Кэш.ФормаНастроекОбщее));
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	Кэш.Вставить("XSLT", РезультатФормирования);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция		СбисПрочитатьXSLTНаСервере(Путь, Отказ)
	
	Если Не	НайтиФайлы(Путь,"*.xslt").Количество() Тогда
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 777, "Вложения не найдены", "Отсутствуют файлы xslt в каталоге " + Путь);
	КонецЕсли;
	Попытка
		ДанныеВозврата = сбисПрочитатьXSLT(Путь);
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 770, "Ошибка XSLT", "Ошибка чтения xslt в каталоге " + Путь + ". Детально: " + ИнформацияОбОшибке().Описание);
	КонецПопытки;
	
	Возврат	ДанныеВозврата;
	
КонецФункции

&НаКлиенте
Функция		СбисРаспаковатьXSLT(Кэш, сбисПараметрыКонвертеров, Отказ)
	ПараметрыРаспаковки = СбисПараметрыАрхиваНастроек(Кэш, "XSLT");
	ПараметрыРаспаковки.Вставить("МаскиФайловУдалить",	Новый Массив);
	ПараметрыРаспаковки.Вставить("КаталогРаспаковки",	СбисПараметрыКонвертеров.КаталогРаспаковки);
	ПараметрыРаспаковки.МаскиФайловУдалить.Добавить("*.sbis3.xslt");
	РезультатРаспаковки = СбисРаспаковатьАрхивНаСервере(ПараметрыРаспаковки, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатРаспаковки, "ФайлыНастроекКаталог.сбисРаспаковатьНастройки"); 
	КонецЕсли;
	Возврат РезультатРаспаковки;
КонецФункции

// Функция формирует структуру xslt для добавоения в кэш xslt, используемые для преобразований файлов при выгрузке и загрузке документов
&НаСервереБезКонтекста
Функция		сбисПрочитатьXSLT(КаталогКонвертеров)
	ДанныеXslt		= сбисПолучитьСписокXSLT(КаталогКонвертеров);
	СтруктураXSLT	= Новый Структура;
	Для Каждого НайденныйФайл Из ДанныеXslt Цикл
		ЧтениеФайлаXSLT	= Новый ТекстовыйДокумент();
		ЧтениеФайлаXSLT.Прочитать(НайденныйФайл.ПолноеИмя,КодировкаТекста.UTF8);
		СтруктураXSLT.Вставить(НайденныйФайл.ИмяКлюч,ЧтениеФайлаXSLT.ПолучитьТекст());
	КонецЦикла;
	
	Возврат СтруктураXSLT;
	
КонецФункции

&НаСервереБезКонтекста
Функция		сбисПолучитьСписокXSLT(КаталогКонвертеров)
	
	Результат			= Новый Структура("Карта, Данные", Новый Массив, Новый Массив);
	Расширение_Типа		= ".xslt";
	Расширение_Стандарт	= ".sbis3";
	
	МассивВсехXSLT = НайтиФайлы(КаталогКонвертеров,"*" + Расширение_Типа);
	Для Каждого НайденныйФайл из МассивВсехXSLT Цикл
		ИмяФайла = НайденныйФайл.ИмяБезРасширения;
		ИмяXSLT = НайденныйФайл.ИмяБезРасширения;
		ПользовательскийXSLT = Не Булево(Найти(ИмяXSLT, Расширение_Стандарт));
		Если Не ПользовательскийXSLT Тогда//Это типовой xslt
			ИмяXSLT = СтрЗаменить(ИмяXSLT,Расширение_Стандарт,"");
		ИначеЕсли ИмяXSLT = "ЭДОНакл_3_01" Тогда// Для безболезненного перехода с 20 и ранее версий переименуем пользовательские xslt по-новому стандарту
			ИмяXSLT = "ЭДОНакл_1175004_3_01";
		ИначеЕсли ИмяXSLT = "ЭДОНакл_5_01" Тогда
			ИмяXSLT = "ЭДОНакл_1175004_5_01";
		ИначеЕсли ИмяXSLT = "АктВР_5_01" Тогда
			ИмяXSLT = "АктВР_1175006_5_01";
		ИначеЕсли ИмяXSLT = "АктВР_3_01" Тогда
			ИмяXSLT = "АктВР_1175006_3_01";
		ИначеЕсли ИмяXSLT = "СчФктр_3_01" Тогда
			ИмяXSLT = "СчФктр_1115101_3_01";
		ИначеЕсли ИмяXSLT = "СчФктр_5_01" Тогда
			ИмяXSLT = "СчФктр_1115101_5_01";
		ИначеЕсли ИмяXSLT = "СчФктр_5_02" Тогда
			ИмяXSLT = "СчФктр_1115101_5_02";
		ИначеЕсли ИмяXSLT = "счФактКор_3_01" Тогда
			ИмяXSLT = "счФактКор_1115108_3_01";
		ИначеЕсли ИмяXSLT = "Заказ_5_01" Тогда
			ИмяXSLT = "Заказ_Заказ_5_01";
		ИначеЕсли ИмяXSLT = "АктПП_1_01" Тогда
			ИмяXSLT = "АктПП__1_01";
		ИначеЕсли ИмяXSLT = "АктПП_3_01" Тогда
			ИмяXSLT = "АктПП__3_01";
		ИначеЕсли ИмяXSLT = "АктСвер_1" Тогда
			ИмяXSLT = "АктСвер__1";
		КонецЕсли;
		ИмяXSLT = СтрЗаменить(СтрЗаменить(ИмяXSLT, " ", ""),"-", "_");
		ИндексВДанных	= Результат.Карта.Найти(ИмяXSLT);
		ЗаписьРезультат	= Новый Структура("ИмяКлюч, ИмяФайла, ПолноеИмя, ЕстьИзменения", ИмяXSLT, ИмяФайла, НайденныйФайл.ПолноеИмя, ПользовательскийXSLT);
		Если ИндексВДанных = Неопределено Тогда//Добавляем xslt если его ещё нет в списке.
			Результат.Карта.Добавить(ИмяXSLT);
			Результат.Данные.Добавить(ЗаписьРезультат);
		ИначеЕсли ПользовательскийXSLT Тогда//либо если он пользовательский 
			Результат.Данные[ИндексВДанных] = ЗаписьРезультат;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Результат.Данные;
	
КонецФункции
	
///////////////////////////////////////////////////
///////////////////СБИС параметры//////////////////
///////////////////////////////////////////////////

&НаКлиенте
Функция		УстановитьПараметрыИнтеграции_ДоВключения(Кэш, ПараметрыИнтеграции, ДополнительныеПараметры, ИзмененияПараметров=Ложь) Экспорт
	Перем АдресСервера;
	ПереопределитьФормы			= Ложь;
	СтруктураСбисПараметров		= ПолучитьПараметрыСБИС(Кэш,Кэш.Парам.ИдентификаторНастроек);//Убрана привязка к реквизиту каталога настроек, для вызова процедуры из формы настройки соединения без изменения реквизита
	ПараметрыИнтеграции_Новые	= Новый Структура("СпособОбмена, СпособХраненияНастроек, СпособСопоставленияНоменклатуры");
	ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции_Новые, ПараметрыИнтеграции);
	
	//Если есть в структуре параметров, то берём оттуда по-умолчанию. Если нет, то из сохраненного значения
	Если	Не	СтруктураСбисПараметров.Свойство("АдресСервера", АдресСервера)
		И	Не	ПараметрыИнтеграции.Свойство("АдресСервера", АдресСервера) 	Тогда
			АдресСервера = Кэш.ГлавноеОкно.АдресСервера;
	КонецЕсли;
	Если Не	Кэш.СБИС.АдресСервера = АдресСервера Тогда
		Кэш.СБИС.Вставить("АдресСервера", АдресСервера);
		Кэш.Парам.Вставить("АдресСервера", АдресСервера);
		Кэш.ГлавноеОкно.АдресСервера = АдресСервера;
		ИзмененияПараметров = Истина;
	КонецЕсли;
	//Проверить в каталоге способ хранения настроек
	Если	СтруктурасбисПараметров.Свойство("СпособХраненияНастроек") Тогда//Если есть переназначение способа хранения настроек
		Попытка//На случай, если в параметрах указали фигню.
			ПараметрыИнтеграции_Новые.СпособХраненияНастроек = Число(СтруктурасбисПараметров.СпособХраненияНастроек);
		Исключение
			ПараметрыИнтеграции_Новые.СпособХраненияНастроек = ПараметрыИнтеграции.СпособХраненияНастроек;
		КонецПопытки;
	КонецЕсли;
	//Проверить в каталоге способ обмена
	Если	СтруктурасбисПараметров.Свойство("СпособОбмена") Тогда//Добавлена проверка способа обмена для исключения ситуаций с повторным вызовом процедуры с тем же способом
		Попытка//На случай, если в параметрах указали фигню.
			ПараметрыИнтеграции_Новые.СпособОбмена = Число(СтруктурасбисПараметров.СпособОбмена);
		Исключение
			ПараметрыИнтеграции_Новые.СпособОбмена = ПараметрыИнтеграции.СпособОбмена;
		КонецПопытки;
	КонецЕсли;
	//Проверим изменение и необходимость переопределения
	ЗначениеПараметра = Неопределено;
	Для Каждого КлючИЗначение Из ПараметрыИнтеграции_Новые Цикл
		Если Не ПараметрыИнтеграции.Свойство(КлючИЗначение.Ключ, ЗначениеПараметра) 
			Или ЗначениеПараметра= КлючИЗначение.Значение Тогда
			Продолжить;
		КонецЕсли;
		ИзмененияПараметров = Истина;
		Прервать;
	КонецЦикла;
	
	Если ИзмененияПараметров Тогда//Были изменения в настройках, переопределить формы интеграции.
		Если ДополнительныеПараметры.ВызыватьРекурсивно	Тогда
			ДополнительныеПараметры.ВызыватьРекурсивно = Ложь;
			Результат = Кэш.ГлавноеОкно.ОпределитьИнтеграциюРабочиеФормы(Кэш,ПараметрыИнтеграции_Новые,ДополнительныеПараметры);
			ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции, ПараметрыИнтеграции_Новые);
			Возврат Результат;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат	Истина;
	
КонецФункции

//Установка сбис параметров
&НаКлиенте
Функция		СбисУстановитьПараметры(Кэш, КаталогНастроек=Неопределено, СтруктураНастроек=Неопределено,Отказ=Ложь) Экспорт
	
	Если КаталогНастроек = Неопределено Тогда
		ИдентификаторНастроек = Кэш.Парам.ИдентификаторНастроек;
	Иначе
		ИдентификаторНастроек = КаталогНастроек;
	КонецЕсли;
	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = ПолучитьПараметрыСБИС(Кэш, КаталогНастроек, Отказ);
	КонецЕсли;
	//Проставим параметры автообновления в СБИС параметры, или возьмём оттуда.
	Если СтруктураНастроек.Свойство("НастройкиАвтообновление") Тогда
		Кэш.Парам.НастройкиАвтообновление = СтруктураНастроек.НастройкиАвтообновление;
	Иначе
		СтруктураНастроек.Вставить("НастройкиАвтообновление", Кэш.Парам.НастройкиАвтообновление);
	КонецЕсли;
	Кэш.ФормаНастроекОбщее.УстановитьсбисПараметры(Кэш, СтруктураНастроек);		
	
КонецФункции

// функция читает параметры запроса статусов из файла
&НаКлиенте
Функция		ПолучитьПараметрыСБИС(Кэш, КаталогНастроек, Отказ=Ложь) Экспорт
	
	СбисПараметры = ПолучитьПараметрыСБИСНаСервере(КаталогНастроек);
	Кэш.ФормаНастроекОбщее.ДополнитьПараметрыСбис(СбисПараметры, Кэш);
	
	Возврат СбисПараметры;
	
КонецФункции

&НаСервере
Функция		ПолучитьПараметрыСБИСНаСервере(КаталогНастроек)
	
	// функция читает параметры запроса статусов из файла	
	Попытка
		СтруктураПараметров = СбисПрочитатьXMLФайл(КаталогНастроек, "сбисПараметры").Параметры;
		ОбойтиСтруктуру(СтруктураПараметров);
		Возврат СтруктураПараметров;
	Исключение
		Возврат Новый Структура;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция	ПреобразоватьСтрокуВЗначение(Строка)
	Если Сред(Строка,3,1)="." и Сред(Строка,6,1)="." и СтрДлина(Строка)=19 Тогда //видимо это дата
		Попытка
			Возврат Дата(Сред(Строка,7,4), Сред(Строка,4,2), Лев(Строка, 2), Сред(Строка,12, 2), Сред(Строка,15, 2), Сред(Строка,18, 2));
		Исключение
			Возврат Строка;
		КонецПопытки;
	ИначеЕсли Сред(Строка,3,1)="." и Сред(Строка,6,1)="." и СтрДлина(Строка)=10 Тогда //видимо это дата
		Попытка
			Возврат Дата(Сред(Строка,7,4), Сред(Строка,4,2), Лев(Строка, 2));
		Исключение
			Возврат Строка;
		КонецПопытки;
	ИначеЕсли НРег(Строка) = "да" ИЛИ НРег(Строка) = "истина" Тогда
		Возврат Истина;
	ИначеЕсли НРег(Строка) = "нет" ИЛИ НРег(Строка) = "ложь" Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Строка;
КонецФункции

&НаСервере
Функция	ОбойтиСтруктуру(СтруктураПараметров)
	Для каждого Элемент Из СтруктураПараметров Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			ОбойтиСтруктуру(Элемент.Значение);
		Иначе
			СтруктураПараметров[Элемент.Ключ] = ПреобразоватьСтрокуВЗначение(Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
КонецФункции 

&НаКлиенте
Функция		ПрочитатьОбщуюНастройкуПодключения(ОписаниеНастройкиВходящее, Кэш) Экспорт
	Перем ИдентификаторНастроек, Результат;
	
	Если Не ОписаниеНастройкиВходящее.Свойство("Идентификатор", ИдентификаторНастроек) Тогда
		ИдентификаторНастроек = Кэш.Парам.КаталогНастроек;
	КонецЕсли;
	
	Отказ = Ложь;
	СтруктураПараметров = ПолучитьПараметрыСБИС(Кэш, ИдентификаторНастроек, Отказ);
	Если	ОписаниеНастройкиВходящее.Свойство("Ключ") Тогда
		СтруктураПараметров.Свойство(ОписаниеНастройкиВходящее.Ключ, Результат);
	Иначе
		Результат = СтруктураПараметров;
	КонецЕсли;
	Если		ОписаниеНастройкиВходящее.Свойство("КлючНастройки")
		И	Не	ОписаниеНастройкиВходящее.КлючНастройки = Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Свойство(ОписаниеНастройкиВходящее.КлючНастройки, Результат);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

&НаКлиенте
Процедура	ЗаписатьОбщуюНастройкуПодключения(ОписаниеНастройкиВходящее, Кэш) Экспорт
	
	Перем ИдентификаторНастроек, КлассПодключенияЗаписи;
	
	Если Не ОписаниеНастройкиВходящее.Свойство("Идентификатор", ИдентификаторНастроек) Тогда
		ИдентификаторНастроек = Кэш.Парам.КаталогНастроек;
	КонецЕсли;
	
	СохранитьПараметрыСБИС(Кэш, ОписаниеНастройкиВходящее.Настройка, ИдентификаторНастроек);
	
КонецПроцедуры

//функция записывает параметры запроса статусов в файл	
&НаКлиенте
Функция		СохранитьПараметрыСБИС(Кэш,СтруктураНастроек,КаталогНастроек,Отказ=Ложь) Экспорт
	СохранитьПараметрыСБИСНаСервере(СтруктураНастроек,КаталогНастроек);
КонецФункции

&НаСервере
Функция		СохранитьПараметрыСБИСНаСервере(СтруктураНастроек,КаталогНастроек) Экспорт
	// функция записывает параметры запроса статусов в файл	
	ОбщаяСтруктура = ПолучитьПараметрыСБИСНаСервере(КаталогНастроек);
	Для Каждого Элемент Из СтруктураНастроек Цикл
		ОбщаяСтруктура.Вставить(Элемент.Ключ,Элемент.Значение);
	КонецЦикла;
	Попытка
		ШаблонXML = ПолучитьXMLСПростымиЭлементами(Новый Структура("Параметры",ОбщаяСтруктура));
		ИсхФайл = Новый ТекстовыйДокумент;
		ИсхФайл.УстановитьТекст(ШаблонXML);
		ИсхФайл.Записать(КаталогНастроек+"сбисПараметры.xml", "windows-1251");		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция		ЗаписатьОбщиеНастройкиПодключения(Кэш, СтруктураНастроек, КаталогНастроек, Отказ=Ложь) Экспорт
	СохранитьПараметрыСБИС(Кэш,СтруктураНастроек,КаталогНастроек,Отказ);
КонецФункции

#Область include_core2_vo2_Настройки_СБИС_РаботаСМетками_Каталог
&НаКлиенте
Процедура	СбисСохранитьМеткиСтатусов(Кэш, МеткиСтатусов, ДопПараметры = Неопределено) Экспорт
	
	КлючМетокСатусов = "status_marks";

	Если Кэш.Парам.СпособХраненияМетокСтатусов = 2 Тогда
		МодульОбъектаКлиент().СохранитьОбщуюНастройку(КлючМетокСатусов, МеткиСтатусов);
		Возврат;
	КонецЕсли;
	
	СохраненныеМетки	= ПолучитьПараметрыСБИС(Кэш, Кэш.Парам.ИдентификаторНастроек);
	Если	Не СохраненныеМетки.Свойство(КлючМетокСатусов, СохраненныеМетки)
		Или	Не ЗначениеЗаполнено(СохраненныеМетки) Тогда
		СохраненныеМетки = Новый Структура;
	КонецЕсли;
	
	ДопПараметры		= Новый Структура("СпособХраненияМетокСтатусов", Кэш.Парам.СпособХраненияМетокСтатусов = 2);
	
	Если		Кэш.Парам.СпособХраненияМетокСтатусов = 0 Тогда
		КлючПользователя	= ПолучитьКлючПользователяСтенда(Кэш);
		КлючАккаунта		= ПолучитьКлючАккаунта(Кэш, ДопПараметры);
		Если	КлючПользователя	= Неопределено
			Или	КлючАккаунта		= Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если Не СохраненныеМетки.Свойство(КлючПользователя) Тогда
			СохраненныеМетки.Вставить(КлючПользователя, Новый Структура);
		КонецЕсли;
		
		СохраненныеМетки[КлючПользователя].Вставить(КлючАккаунта, МеткиСтатусов);
		
		Результат = Новый Структура(КлючМетокСатусов, СохраненныеМетки);	
		СохранитьПараметрыСБИС(Кэш, Результат, Кэш.Парам.ИдентификаторНастроек);
	ИначеЕсли	Кэш.Парам.СпособХраненияМетокСтатусов = 1 Тогда
		КлючАккаунта = ПолучитьКлючАккаунта(Кэш, ДопПараметры);
		Если КлючАккаунта = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СохраненныеМетки.Вставить(КлючАккаунта, МеткиСтатусов);
		
		Результат = Новый Структура(КлючМетокСатусов, СохраненныеМетки);	
		СохранитьПараметрыСБИС(Кэш, Результат, Кэш.Парам.ИдентификаторНастроек);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СбисПрочитатьМеткиСтатусов(Кэш, ДопПараметры = Неопределено, Отказ = Ложь) Экспорт
	
	СпособХраненияМетокСтатусов = Кэш.Парам.СпособХраненияМетокСтатусов;
	ДопПараметры				= Новый Структура("СпособХраненияМетокСтатусов", СпособХраненияМетокСтатусов);
	КлючМетокСатусов			= "status_marks";
	
	Если		Кэш.Парам.СпособХраненияМетокСтатусов = 2 Тогда	
		ЗначениеНастроекРезультат = МодульОбъектаКлиент().ПрочитатьОбщиеНастройки(КлючМетокСатусов);
	ИначеЕсли	Кэш.Парам.СпособХраненияМетокСтатусов = 0 Тогда
		КлючАккаунта				= ПолучитьКлючАккаунта(Кэш, ДопПараметры);
		КлючПользователя			= ПолучитьКлючПользователяСтенда(Кэш);
		Если	КлючПользователя	= Неопределено
			Или	КлючАккаунта		= Неопределено Тогда
			//Не удалось определить ключ пользователя стенда. Выставим метки по-дефолту.
			Возврат Кэш.ФормаНастроекОбщее.МеткиСтатусовПоУмолчанию();
		КонецЕсли;
		ЗначениеНастроекРезультат	= ПолучитьПараметрыСБИС(Кэш, Кэш.Парам.ИдентификаторНастроек); //по пользователю
		Если	ЗначениеНастроекРезультат.Свойство(КлючМетокСатусов,	ЗначениеНастроекРезультат)
			И	ЗначениеНастроекРезультат.Свойство(КлючПользователя,	ЗначениеНастроекРезультат)
			И	ЗначениеНастроекРезультат.Свойство(КлючАккаунта,		ЗначениеНастроекРезультат) Тогда
			Возврат ЗначениеНастроекРезультат;
		КонецЕсли;		
	ИначеЕсли	Кэш.Парам.СпособХраненияМетокСтатусов = 1 Тогда
		КлючАккаунта				= ПолучитьКлючАккаунта(Кэш, ДопПараметры);
		Если КлючАккаунта = Неопределено Тогда
			//Не удалось определить ключ пользователя стенда. Выставим метки по-дефолту.
			Возврат Кэш.ФормаНастроекОбщее.МеткиСтатусовПоУмолчанию();
		КонецЕсли;
		ЗначениеНастроекРезультат = ПолучитьПараметрыСБИС(Кэш, Кэш.Парам.ИдентификаторНастроек); //по пользователю
		Если	ЗначениеНастроекРезультат.Свойство(КлючМетокСатусов,	ЗначениеНастроекРезультат)
			И	ЗначениеНастроекРезультат.Свойство(КлючАккаунта,		ЗначениеНастроекРезультат) Тогда
			Возврат ЗначениеНастроекРезультат;
		КонецЕсли;	
	КонецЕсли;

	Если ЗначениеНастроекРезультат = Неопределено Тогда
		ЗначениеНастроекРезультат = Кэш.ФормаНастроекОбщее.МеткиСтатусовПоУмолчанию();
	КонецЕсли;

	Возврат ЗначениеНастроекРезультат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКлючПользователяСтенда(Кэш, ДопПараметры = Неопределено)
	Если	Не Кэш.СБИС.ПараметрыИнтеграции.Свойство("КодСервиса")
		Или	Не Кэш.СБИС.ПараметрыИнтеграции.Свойство("ИдПользователя") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Кэш.ОбщиеФункции.СбисФорматСтроки(Кэш.СБИС.ПараметрыИнтеграции.КодСервиса + "_" + Кэш.СБИС.ПараметрыИнтеграции.ИдПользователя);
КонецФункции

&НаКлиенте
Функция ПолучитьКлючАккаунта(Кэш, ДопПараметры)                                                                                     
	Перем СбисКлючАккаунта;
	Если 		Кэш.Парам.СпособХраненияМетокСтатусов = 1 Тогда
		СбисКлючАккаунта = Кэш.СБИС.ПараметрыИнтеграции.КодСервиса + "_acc";
	ИначеЕсли Кэш.СБИС.ПараметрыИнтеграции.Свойство("ИдАккаунта") Тогда
		СбисКлючАккаунта = "_" + Кэш.СБИС.ПараметрыИнтеграции.ИдАккаунта;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Возврат Кэш.ОбщиеФункции.СбисФорматСтроки(СбисКлючАккаунта);
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////
//////////////Вызов ини по требованию///////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция		УстановитьПараметрыИнтеграции_УстановкаНастроек(Кэш, СтруктурасбисПараметров, ДополнительныеПараметры, Отказ) Экспорт
	Возврат Кэш.ФормаНастроекОбщее.УстановитьПараметрыИнтеграции_УстановкаНастроек(Кэш, СтруктурасбисПараметров, ДополнительныеПараметры, Отказ);	
КонецФункции

&НаКлиенте
Функция		Ини(Кэш, ИмяИни, ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	Перем ЗначениеИни;
	Если		Не Кэш.Ини.Свойство(ИмяИни, ЗначениеИни)
				И НРег(ИмяИни) <> "сбисменю" Тогда
		Отказ = Истина;
		//Ини не установлена
		Возврат МодульОбъектаКлиент().НовыйСбисИсключение(779, "ФайлыНастроекКаталог.Ини",,,СтрЗаменить("Ини {ини} не установлена.", "{ини}", ИмяИни));
	ИначеЕсли	Не ЗначениеИни = Неопределено Тогда
		//Есть в кэше
		Возврат ЗначениеИни;
	КонецЕсли;
	ПараметрыФильтра = Новый Структура("ФильтрПоИменамИни, Автообновление", Новый Массив, Кэш.Парам.НастройкиАвтообновление);
	ПараметрыФильтра.ФильтрПоИменамИни.Добавить(ВРег(ИмяИни));
	УстановленныеИниФайлыКЧтению = ПолучитьМассивУстановленныхИниФайлов(Кэш.Парам.ИдентификаторНастроек, ПараметрыФильтра);
	РезультатИни = СформироватьСтруктуруИни(УстановленныеИниФайлыКЧтению, Новый Структура);
	Если Не РезультатИни.Свойство(ИмяИни, ЗначениеИни) Тогда
		Отказ = Истина;
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Новый Структура("code,message,details",772, "Ошибка работы с файловой системой", "Не удалось прочитать файл настроек " + ИмяИни + "!"),  Новый Структура("ФормаВладелец", Кэш.ФормаНастроекОбщее));
	КонецЕсли;
	Кэш.Ини.Вставить(ИмяИни, ЗначениеИни);
	
	Если НЕ ЗначениеЗаполнено(ЗначениеИни) Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(779, "ФайлыНастроекКаталог.Ини",,,СтрЗаменить("Не удалось получить данные ини ""{}"".", "{}", ИмяИни));
	КонецЕсли;
	
	Возврат ЗначениеИни;
	
КонецФункции

&НаКлиенте
Функция		Ини_Выгрузка(Кэш, ДокументСсылка, Представление="", СбисРеестр=Неопределено) Экспорт
	Возврат Кэш.ФормаНастроекОбщее.Ини_Выгрузка(Кэш, ДокументСсылка, Представление, СбисРеестр);
КонецФункции

&НаСервереБезКонтекста
Функция		сбисПолучитьСтруктуруИни(Ини, сбисОписаниеФайла)	
	ПолучитьСтруктуруИниФайла(Ини, сбисОписаниеФайла.ПутьДоИниФайла, сбисОписаниеФайла.ИмяФайла);  //получили структуру типового ини файла (.sbis.ini)
	Если сбисОписаниеФайла.ЕстьИзменения Тогда
		ПолучитьСтруктуруИниФайла(Ини, сбисОписаниеФайла.ПутьДоИниФайла, сбисОписаниеФайла.ИмяФайлаКлиента); //получили структуру ини файла клиента и заменили его элементами
	КонецЕсли;	
КонецФункции

&НаКлиенте
Функция		сбисПроверитьУстановленныеНастройки(Кэш,УстановленныеИниФайлы,СтруктураИни,СтруктураПараметров,ИдентификаторНастроек) Экспорт	
	Отказ = Ложь;
	РезультатДозапроса = сбисДополучитьНедостающиеНастройки(Кэш, Новый Структура("Данные", Новый Структура("Ини", СтруктураИни)), Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, РезультатДозапроса, Новый Структура("ФормаВладелец", Кэш.ФормаНастроекОбщее));
		Возврат Ложь;
	КонецЕсли;
	//Так, как установленные ини были сформированы без данных, то требуется их переопределить для корректной расстановки флагов
	//+++ МАИ 31.01.2024 (в 24.2100) проверил, что будет, если не переопределять настройки. Удалить в следующем релизе, если не будет ошибок. УстановленныеИниФайлы = ПолучитьМассивУстановленныхИниФайлов(ИдентификаторНастроек, Новый Структура("Автообновление", Кэш.Парам.НастройкиАвтообновление));
	Возврат Кэш.ФормаНастроекОбщее.сбисПроверитьУстановленныеНастройки(Кэш,УстановленныеИниФайлы,СтруктураИни,СтруктураПараметров,ИдентификаторНастроек);
КонецФункции

//Временное решение для обновления статусов. Не использовать в других местах! 1179408775
&НаКлиенте
Функция		СбисЗаполнитьНеполученныеНастройки(Кэш, Отказ) Экспорт
	Возврат СбисДополучитьНедостающиеНастройки(Кэш, Новый Структура("Данные", Новый Структура("Ини", Кэш.Ини)), Отказ); 
КонецФункции

//Дозапрашивает отсутствующие ини для дальнейшей работы 
&НаКлиенте
Функция		СбисДополучитьНедостающиеНастройки(Кэш, ПараметрыДозапроса, Отказ)
	СтруктураИни = ПараметрыДозапроса.Данные.Ини;
	СписокИниПолучить = Новый Массив;
	Для Каждого КлючИЗначениеИни Из СтруктураИни Цикл
		Если Не КлючИЗначениеИни.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СписокИниПолучить.Добавить(ВРег(КлючИЗначениеИни.Ключ));
	КонецЦикла;
	
	Если Не СписокИниПолучить.Количество() Тогда
		Возврат Кэш.Ини;
	КонецЕсли; 
	сбисПараметрыЧтенияФайлов = Новый Структура("ФильтрПоИменамИни, Автообновление", СписокИниПолучить, Кэш.Парам.НастройкиАвтообновление);
	НедостающиеИниФайлы = ПолучитьМассивУстановленныхИниФайлов(Кэш.Парам.ИдентификаторНастроек, сбисПараметрыЧтенияФайлов);
	Для Каждого КлючИЗначениеИни Из СформироватьСтруктуруИни(НедостающиеИниФайлы, Новый Структура) Цикл
		Кэш.Ини.Вставить(КлючИЗначениеИни.Ключ, КлючИЗначениеИни.Значение);
	КонецЦикла;
	Возврат Кэш.Ини;
	
КонецФункции

&НаКлиенте
Функция		СбисОбновитьДанныеПоНастройкам(Кэш, ДополнительныеПараметры, Отказ) Экспорт
	СтруктураНастроек = Кэш.Ини;
	РезультатОбновления = сбисДополучитьНедостающиеНастройки(Кэш, Новый Структура("Данные", Новый Структура("Ини", СтруктураНастроек)), Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбновления, "ФайлыНастроекКаталог.СбисОбновитьДанныеПоНастройкам");
	КонецЕсли;
	РезультатОбновления = СбисОбновитьСтруктуруРазделов(Кэш, ДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбновления, "ФайлыНастроекКаталог.СбисОбновитьДанныеПоНастройкам");
	КонецЕсли;
	
	РезультатОбновления = Кэш.ФормаНастроекОбщее.СбисДобавитьПечатныеФормы(Кэш, Отказ);
	Если Отказ Тогда
		СбисПараметрыСтатистики = Новый Структура("Действие, Ошибка", "Запись ошибки", РезультатОбновления);
		Кэш.ОбщиеФункции.сбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(Кэш, СбисПараметрыСтатистики, Ложь);
		//После обработки ошибки, продолжить установку настроек
		Отказ = Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//Функция обновляет структуру для формирования аккордеона и заполнения фильтров
&НаКлиенте
Функция  СбисОбновитьСтруктуруРазделов(Кэш, ДополнительныеПараметры, Отказ) Экспорт
	ПараметрыФормированияСтруктуры = Новый Структура("ОбработкаТипов",Новый Структура("Булево", Новый Структура("Формат", "БЛ=Ложь; БИ=Истина")));
	
	СтруктураМеню = Новый Структура("РазделыВнешнейОбработки", Кэш.ФормаНастроекОбщее.сбисСформироватьСтруктуруРазделов(Кэш, Кэш.Ини, ПараметрыФормированияСтруктуры));
	ИниКВыгрузке = Новый Структура("сбисМеню", Кэш.ФормаНастроекОбщее.ОчиститьСтруктуруИниОтСлужебныхЗначений(СтруктураМеню));
	Попытка
		сбисСформироватьИниФайлКлиентаНаСервере("сбисМеню", ИниКВыгрузке, Кэш.Парам.ИдентификаторНастроек, "сбисМеню", "ВыгрузкаВКаталог")
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекКаталог.сбисОбновитьСтруктуруРазделов", 773, "Неизвестная ошибка при выполнении метода", ОписаниеОшибки());
	КонецПопытки;
	Возврат Истина;
	
КонецФункции

&НаКлиенте                                  
Функция		УстановитьИниРазделов(Кэш, ДополнительныеПараметры=Неопределено, Отказ) Экспорт
	сбисСтруктураРазделов = ПолучитьСтруктуруРазделов(Кэш, ДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		Возврат сбисСтруктураРазделов;
	КонецЕсли;
	Возврат Кэш.ФормаНастроекОбщее.УстановитьИниРазделов(Кэш, сбисСтруктураРазделов, ДополнительныеПараметры, Отказ)
КонецФункции	

&НаКлиенте
Функция		ПолучитьСтруктуруРазделов(Кэш, ДополнительныеПараметры=Неопределено, Отказ) Экспорт
	
	ИниМеню				= Новый Структура;
	сбисОписаниеФайла	= Новый Структура("ПутьДоИниФайла, ИмяФайла, ЕстьИзменения", Кэш.Парам.ИдентификаторНастроек, "сбисМеню.xml", Ложь);
	СтруктураАккордеона = сбисПолучитьСтруктуруИни(ИниМеню, сбисОписаниеФайла);
	Если		ИниМеню = Неопределено
		Или Не	ИниМеню.сбисМеню.Свойство("РазделыВнешнейОбработки", СтруктураАккордеона)
		Или		СтруктураАккордеона = Неопределено Тогда
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 785, "Ошибка во входящих данных", "Отсутствует описание разделов аккордеона в выбранных настройках");
	КонецЕсли;
	Возврат ОбработатьСтруктуруРазделовАккордеона(СтруктураАккордеона);		
КонецФункции

&НаКлиенте
Функция		ОбработатьСтруктуруРазделовАккордеона(СтруктураРазделов)
	
	Результат = Неопределено;
	Если ТипЗнч(СтруктураРазделов) = Тип("Структура") Тогда
		Если СтруктураРазделов.Свойство("Значение") Тогда
			Результат = ОбработатьСтруктуруРазделовАккордеона(СтруктураРазделов.Значение);
		Иначе
			Результат = Новый Структура;
			Для Каждого КлючИЗначение Из СтруктураРазделов Цикл
				Результат.Вставить(КлючИЗначение.Ключ, ОбработатьСтруктуруРазделовАккордеона(КлючИЗначение.Значение));
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли СтруктураРазделов = "Ложь" Тогда
		Результат = Ложь;
	ИначеЕсли СтруктураРазделов = "Истина" Тогда
		Результат = Истина;
	Иначе
		Результат = СтруктураРазделов;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция		сбисПрочитатьXMLФайл(КаталогНастроек, ИмяФайла, Кодировка="windows-1251")
	ИсхФайл = Новый ТекстовыйДокумент;
	ИсхФайл.Прочитать(КаталогНастроек + ИмяФайла + ".xml", Кодировка);
	ШаблонXML = ИсхФайл.ПолучитьТекст();
	Возврат ЗаполнитьСтруктуруФайлаСПростымиЭлементами(ШаблонXML);
КонецФункции

&НаКлиенте                                  
Функция		УстановитьИниКонфигурации(Кэш, сбисДополнительныеПараметры=Неопределено, Отказ) Экспорт
	Возврат Кэш.ФормаНастроекОбщее.УстановитьИниКонфигурации(Кэш, Ини(Кэш, "Конфигурация", сбисДополнительныеПараметры, Отказ), сбисДополнительныеПараметры, Отказ);
КонецФункции	

&НаКлиенте                                  
Функция		сбисПолучитьМассивУстановленныхИниФайлов(Кэш, сбисДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	
	РезультатДозапроса = сбисДополучитьНедостающиеНастройки(Кэш, Новый Структура("Данные", Новый Структура("Ини", Кэш.Ини)), Отказ);
	Если Отказ Тогда
		Возврат РезультатДозапроса;
	КонецЕсли;
	Возврат ПолучитьМассивУстановленныхИниФайлов(Кэш.Парам.ИдентификаторНастроек, Новый Структура("Автообновление", Кэш.Парам.НастройкиАвтообновление));
	
КонецФункции

// Процедура - Заглушка для работы с каталогом
//
// Параметры:
//  Кэш						 - 	 - 
//  ДополнительныеПараметры	 - 	 - 
//  Отказ					 - 	 - 
//
&НаКлиенте                                  
Процедура	ПриЗапускеРедактораНастроек(ПараметрыЗапускаРедактораВходящие, Кэш) Экспорт
	
	СбисДополучитьНедостающиеНастройки(Кэш, Новый Структура("Данные", Новый Структура("Ини", Кэш.Ини)), Ложь);
	
КонецПроцедуры 

// Процедура - Заглушка для работы с каталогом.
//
// Параметры:
//  ПараметрыИзменения	 - 	 - 
//  Кэш					 - 	 - 
//
&НаКлиенте                                  
Процедура	ПриИзмененииНаВкладкеФайловНастроек(ПараметрыИзменения, Кэш) Экспорт
КонецПроцедуры    

#Область include_core2_vo2_Настройки_Каталог_ВнутренниеВызовы_Общие

&НаКлиенте
Функция		ПараметрыСтандартнойКонфигурации(Кэш, ПараметрыКонфигурации)
	
	ПараметрыСтандартнойКонфигурации = Новый Структура("service, subsystem, version");
	ЗаполнитьЗначенияСвойств(ПараметрыСтандартнойКонфигурации, ПараметрыКонфигурации);
	ПараметрыСтандартнойКонфигурации.service = Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис;
	Возврат ПараметрыСтандартнойКонфигурации;
	
КонецФункции

&НаКлиенте
Функция		СформироватьСписокИни(Кэш=Неопределено, ПараметрыПоиска, Отказ)
    Перем СбисМеню, Искать, Идентификатор, ТипыИни, СбисКоннекшен;
	Если 	ПараметрыПоиска.Свойство("Коннекшен", СбисКоннекшен) Тогда
		СбисМеню = СбисКоннекшен.Данные.Меню;
		Если СбисМеню = Неопределено Тогда
			Если Кэш = Неопределено Тогда//Если не передаётся меню, то кэш должен быть для возможности получить с сервера
				Отказ = Истина;
				Возврат Новый Структура("code,message,details", 100, "Невозможно определить список настроек для получения!", "Ошибка передачи параметров.");
			КонецЕсли;
			СбисМеню = КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, СбисКоннекшен, Новый Структура("БратьВКэше", Ложь), Отказ);
		КонецЕсли;
	ИначеЕсли	Не	ПараметрыПоиска.Свойство("СбисМеню", СбисМеню)
		Или		СбисМеню = Неопределено Тогда
		Если Кэш = Неопределено Тогда//Если не передаётся меню, то кэш должен быть для возможности получить с сервера
			Отказ = Истина;
			Возврат Новый Структура("code,message,details", 100, "Невозможно определить список настроек для получения!", "Ошибка передачи параметров.");
		КонецЕсли;
		Если Не ПараметрыПоиска.Свойство("Идентификатор", Идентификатор) Тогда
			Идентификатор = "";
		КонецЕсли;
		//Для Пользовательской ТИПОВОЙ конфигурации базовое меню будет пустым. Для коннекшена меню должно быть
		Если	ПустаяСтрока(Идентификатор)
			И	ПустаяСтрока(ПараметрыПоиска.ПараметрыКонфигурации.subsystem) Тогда
			СбисМеню = Новый Структура();
		Иначе
			КлассКонфиг	= НовыйIntegrationConnection(Кэш, Новый Структура("ПараметрыКонфигурации", ПараметрыПоиска.ПараметрыКонфигурации), Отказ); 
			СбисМеню	= КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, КлассКонфиг, Новый Структура, Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.СбисИсключение(СбисМеню, "ФайлыНастроекСервер.СформироватьСписокИни");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не	ПараметрыПоиска.Свойство("ДоступныеТипыИни", ТипыИни) Тогда
		Если Кэш = Неопределено Тогда//Если не передаются ТипыИни, то кэш должен быть
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		ТипыИни = Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни;
	КонецЕсли;
	Если Не	ПараметрыПоиска.Свойство("Искать", Искать) Тогда
		Искать = Новый Структура("Включено", "1")//По-умолчанию искать только включенные. 01 - ищутся все, 0 - отключенные
	КонецЕсли;
	
	Результат = СформироватьСпискиИзМеню(ТипыИни, СбисМеню, Искать);
	
	Возврат	Результат;
	
КонецФункции

//Функция формирует по меню структуру с полями "Карта" и "Данные" для дальнейшего составления запроса. 
//Карта		- список имен для быстрого поиска. 
//Данные	- массив структур "type, name" из меню для передачи в методы получения уже самих ини.
&НаКлиенте                                  
Функция		СформироватьСпискиИзМеню(ТипыИни, СбисМеню, Искать, СписокИни = Неопределено)	
	
	Если Не	ТипЗнч(СбисМеню) = Тип("Структура") Тогда
		ВызватьИсключение("Неизвестный формат меню");
	КонецЕсли;
	
	Если СписокИни = Неопределено Тогда
		СписокИни = Новый Структура("Карта, Данные",Новый СписокЗначений,Новый Массив);
	КонецЕсли;
	//Обойти меню и сформировать реестр ини.
	Для	Каждого	КлючИЗначение Из СбисМеню Цикл
		Если Не ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		enable = Неопределено;
		Если КлючИЗначение.Значение.Свойство("enable", enable) Тогда	
			ИмяИни	= КлючИЗначение.Ключ;
			ТипИни	= Неопределено;
			Если 	Не	КлючИЗначение.Значение.Свойство("type", ТипИни)
				Или		ТипыИни.Найти(ТипИни) = Неопределено Тогда//Фильтр по типу ини. Описание в инициализации кэша
				Продолжить;
			КонецЕсли;
			Карта		= СписокИни.Карта;//Карта для поиска значений без перебора
			Раздел		= СписокИни.Данные;//Данные - собственно список для передачи в запросы
			КлючКарты	= НРег(ИмяИни);
			enable		= Строка(enable);
			Фильтр		= Неопределено;
			Если		Искать.Свойство("Включено",Фильтр)
				И Не	Найти(Фильтр, enable) Тогда 
				Продолжить;
			ИначеЕсли	Искать.Свойство("Имя",Фильтр)
				И 		Фильтр.Найти(ИмяИни) = Неопределено Тогда 
				Продолжить;
			ИначеЕсли	Искать.Свойство("Тип")
				И 		Фильтр.Найти(ТипИни) = Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			Если Не	Карта.НайтиПоЗначению(КлючКарты) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Раздел.Добавить(Новый Структура("type,name", ТипИни,ИмяИни));
			Карта.Добавить(КлючКарты, ИмяИни);
		Иначе//Это подраздел
			СформироватьСпискиИзМеню(ТипыИни, КлючИЗначение.Значение,Искать,СписокИни);	
		КонецЕсли;
	КонецЦикла;
	Возврат СписокИни;
	
КонецФункции

&НаКлиенте
Функция		СбисОписаниеИни(Кэш, data_ini=Неопределено)
	Возврат Новый Структура("active,data,type,name", Истина, data_ini)
КонецФункции

//Функция переводит имена ини из шаблона онлайна в шаблон обработки и обратно
&НаКлиенте
Функция		ПолучитьИмяИни(СоответствиеНазваний, КлючИни, Направление="json_во")
	
	НаправлениеСтр	= СтрЗаменить(Направление, "_", Символы.ПС);
	КлючНаправления1= СтрПолучитьСтроку(НаправлениеСтр, 1);
	КлючНаправления2= СтрПолучитьСтроку(НаправлениеСтр, 2);
	
	ИмяИни	= КлючИни;
	Для Каждого Соответствие Из СоответствиеНазваний	Цикл
		Если Лев(ИмяИни, СтрДлина(Соответствие[КлючНаправления1])) = Соответствие[КлючНаправления1] Тогда
			Если Соответствие[КлючНаправления1] = Соответствие[КлючНаправления2] Тогда
				ИмяИниНазвание	= Сред(ИмяИни, СтрДлина(Соответствие[КлючНаправления1])+?(ПустаяСтрока(Соответствие[КлючНаправления1]), 0,  2));
				ИмяИни			= Соответствие[КлючНаправления1];//Имена инишек идентичны и в онлайн и в обработке
				Если Не ИмяИниНазвание = "" Тогда
					//Это не имя ини, а направление
					ИмяИни = ИмяИни + "_" + ИмяИниНазвание;
				КонецЕсли;
			Иначе
				ИмяИни =	Соответствие[КлючНаправления2] + ?(ПустаяСтрока(Соответствие[КлючНаправления2]), "", "_") + //переводим имена по соответствию имен, убирая старый префикс.
							Сред(ИмяИни, СтрДлина(Соответствие[КлючНаправления1])+?(ПустаяСтрока(Соответствие[КлючНаправления1]), 0,  2));
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяИни;	
	
КонецФункции

//Функция возвращает описание инишки меню для запроса методами получения данных
&НаКлиенте
Функция		СбисОписаниеИниМеню(Кэш, СбисМеню=Неопределено)
	Результат = СбисОписаниеИни(Кэш, СбисМеню);
	Результат.type = "Меню";
	Результат.name = "сбисМеню";
	Возврат Результат;
КонецФункции

//В процедуре из переданной структуры убираются отключенные узлы, которые были оставлены для их записи и отправки на сервер (для отключения при получении), но которые будут мешать нормальной работе с настройками
&НаКлиенте
Процедура	ОчиститьОтключенныеУзлы(ДанныеИни, КонтекстУзла=Неопределено)
	
	КлючиУдалить = Новый Массив;
	Если ТипЗнч(ДанныеИни) = Тип("Структура") Тогда
		Для Каждого КлючИЗначение Из ДанныеИни Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
				ПараметрыУзла = Новый Структура("ИмяУзла", КлючИЗначение.Ключ);
				ОчиститьОтключенныеУзлы(КлючИЗначение.Значение,ПараметрыУзла);
			ИначеЕсли	КлючИЗначение.Значение = "" Тогда
				Если	КонтекстУзла.Свойство("ИмяУзла")
					И	КонтекстУзла.ИмяУзла = "Отбор" Тогда
					КлючиУдалить.Добавить(КлючИЗначение.Ключ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Для Каждого КлючУдалить Из КлючиУдалить Цикл
		ДанныеИни.Удалить(КлючУдалить);
	КонецЦикла;
	
КонецПроцедуры
	
//Процедура выполняет конвертацию полученных ини после их получения
&НаКлиенте
Процедура	ЧтениеИни_ОбработатьРезультат(Кэш, Результат, ПараметрыКонвертации = Неопределено)
	Ини = Новый Структура();
	Если ПараметрыКонвертации = Неопределено Тогда
		ПараметрыКонвертации = Новый Структура("ОчищатьОтключенные", Истина);
	КонецЕсли;
	Если Не Результат.Данные.Ини = Неопределено Тогда
		Для Каждого КлючИЗначение Из Результат.Данные.Ини Цикл
			Если		КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			ИначеЕсли	КлючИЗначение.Ключ = "СбисМеню" Тогда
				Ини.Вставить("СбисМеню", КлючИЗначение.Значение);
			Иначе
				ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначение.Ключ);
	 			ЗначениеИни = ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(КлючИЗначение.Значение, ПараметрыКонвертации);
				Ини.Вставить(ИмяИни, ЗначениеИни);
			КонецЕсли;
		КонецЦикла;
		Результат.Данные.Ини = Ини;
	КонецЕсли;
	Результат.ПараметрыКонфигурации.version = Кэш.ОбщиеФункции.СериализоватьВерсию(Результат.ПараметрыКонфигурации.version);
КонецПроцедуры

//Формируем Сбис меню на основании переданного и внесенных изменений.
&НаКлиенте                                  
Функция		СформироватьМеню_Структура(Кэш, УстановленныеИни, БазовоеМеню=Неопределено, Отказ)//
	Если БазовоеМеню = Неопределено Тогда
		//Если меню отсутствует, то надо собрать его по алгоритму с нуля из инишек, которые имеются в наличии, если меню есть, то взять только отличия (то, что было переключено)
		БазовоеМеню	= Новый	Структура();
	КонецЕсли;
	СтруктураМеню = БазовоеМеню;
	Если СтруктураМеню = Неопределено Тогда
		СтруктураМеню = Новый Структура();
	КонецЕсли;

	//Сперва смотрим ини, которые есть в меню. Переставляем все флаги в базовом меню (по-идее, это меню от конфига)
	ПараметрыЗапроса= Новый Структура("СбисМеню, Искать, ДоступныеТипыИни", БазовоеМеню, Новый Структура("Включено", "1"), Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни);
	ДанныеСписка	= СформироватьСписокИни(Кэш, ПараметрыЗапроса, Отказ);
	Для	Каждого	КлючИЗначениеРаздел	Из	БазовоеМеню	Цикл//Переключить то, что установлено в типовых настройках
		Если Не ТипЗнч(КлючИЗначениеРаздел.Значение) = Тип("Структура") Тогда
			//На случай добавления в меню не структурных параметров, пропускаем их
			Продолжить;
		КонецЕсли;
		Для	Каждого	Ини	Из КлючИЗначениеРаздел.Значение Цикл
			//+++ МАИ 02.08.2021 На случай добавления в ини не структурных параметров, пропускаем их
			ИниВключена	= Неопределено;
			ИниТип		= Неопределено;
			Если	Не	ТипЗнч(Ини.Значение) = Тип("Структура")
				Или	Не	Ини.Значение.Свойство("enable", ИниВключена)
				Или	Не	Ини.Значение.Свойство("type",	ИниТип)
				Или		Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни.Найти(ИниТип) = Неопределено Тогда//Ини не из списка поддерживаемых обработкой, не трогаем 
				Продолжить;
			КонецЕсли;
			//--- МАИ 02.08.2021
			ИмяИниМеню	= Ини.Ключ;
			ИмяИниВо	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ИмяИниМеню);
			Добавить	= Ложь;
			Если		ИниВключена = "1"	Тогда
				Если	УстановленныеИни.Свойство(ИмяИниВо) Тогда
					Продолжить;//Уже включено.
				КонецЕсли;
				ИниВключена	= "0";
				Добавить	= Истина;
			ИначеЕсли	ИниВключена = "0"	Тогда
				Если Не УстановленныеИни.Свойство(ИмяИниВо) Тогда
					Продолжить;//Уже выключено.
				КонецЕсли;
				ИниВключена	= "1";
				Добавить	= Истина;
			КонецЕсли;
			Если Добавить Тогда
				Если Не	СтруктураМеню.Свойство(КлючИЗначениеРаздел.Ключ)	Тогда
					СтруктураМеню.Вставить(КлючИЗначениеРаздел.Ключ, Новый	Структура);
				КонецЕсли;
				Если Не СтруктураМеню[КлючИЗначениеРаздел.Ключ].Свойство(ИмяИниМеню)	Тогда
					СтруктураМеню[КлючИЗначениеРаздел.Ключ].Вставить(ИмяИниМеню, Новый Структура("enable", ИниВключена));
				Иначе
					СтруктураМеню[КлючИЗначениеРаздел.Ключ][ИмяИниМеню].enable = ИниВключена;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//Смотрим установленные ини - возможно, добавлена не стандартная инишка
	Для	Каждого	КлючИЗначениеИни Из УстановленныеИни Цикл
		ИмяИниВО	= КлючИЗначениеИни.Ключ;
		ИмяИниМеню	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ИмяИниВО, "во_json");
		ПунктМеню	= СформироватьМеню_Элемент(КлючИЗначениеИни.Значение, ИмяИниМеню);
		Для	шаг = 1 По СтрЧислоСтрок(ПунктМеню.КнопкиРеестров)	Цикл
			ИмяКнопки	= СтрПолучитьСтроку(ПунктМеню.КнопкиРеестров, шаг);
			Раздел		= Неопределено;
			ПодРаздел	= Неопределено;
			Если Не СтруктураМеню.Свойство(ИмяКнопки, Раздел)	Тогда
				Раздел = Новый Структура();
				СтруктураМеню.Вставить(ИмяКнопки, Раздел);
			КонецЕсли;
			Если Раздел.Свойство(ИмяИниМеню, ПодРаздел)	Тогда
				ПодРаздел.enable = ПунктМеню.ЗначениеМеню.enable;
			Иначе
				Раздел.Вставить(ИмяИниМеню, ПунктМеню.ЗначениеМеню);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СтруктураМеню.Вставить("РазделыВнешнейОбработки", Кэш.ФормаНастроекОбщее.СбисСформироватьСтруктуруРазделов(Кэш, УстановленныеИни, Новый Структура));
	
	Возврат	СтруктураМеню;
	
КонецФункции

&НаКлиенте                                  
Функция		СформироватьМеню_Элемент(ЗначениеИни, НазваниеИни)

	ИниВключена = "1";
    Если ЗначениеИни.Свойство("Реестр1С_Название")	Тогда
        ИмяРеестра = СтрЗаменить(ЗначениеИни.Реестр1С_Название.Значение,"'", "");
	Иначе	
		ИмяРеестра = НазваниеИни;
	КонецЕсли;
	КнопкиРеестров = "";
	Если ЗначениеИни.Свойство("РеестрСБИС_ИдМеню")	Тогда
        КнопкиРеестров = СтрЗаменить(СтрЗаменить(СтрЗаменить(ЗначениеИни.РеестрСБИС_ИдМеню.Значение,
						 " ", ""), 
						 "'", ""), 
						 ",", Символы.ПС);
	КонецЕсли;
	Если ЗначениеИни.Свойство("мДокумент") Тогда
		Для Каждого КлючИЗначениеМДокумент Из ЗначениеИни["мДокумент"] Цикл 
			ИмяРаздела	= Неопределено;
			РеестрИдМеню= КлючИЗначениеМДокумент.Значение;
			Если 	Не РеестрИдМеню.Свойство("Имя", ИмяРаздела)
				Или Не ИмяРаздела = "РеестрСБИС_ИдМеню" Тогда
				Продолжить;
			КонецЕсли;
			КнопкиРеестров = КнопкиРеестров 
						   + ?(ПустаяСтрока(КнопкиРеестров), "", ",") 
						   + СтрЗаменить(СтрЗаменить(СтрЗаменить(РеестрИдМеню["Значение"],
							 " ", ""), 
							 "'", ""), 
							 ",", Символы.ПС);
            Прервать;
		КонецЦикла;
	КонецЕсли;
	Если ПустаяСтрока(КнопкиРеестров) Тогда
		КнопкиРеестров = "Handling";
	КонецЕсли;
	Если ЗначениеИни.Свойство("РеестрПоУмолчанию")	Тогда
        ПоУмолчанию = СтрЗаменить(ЗначениеИни.РеестрПоУмолчанию.Значение, "'", "");
	Иначе	
        ПоУмолчанию = "0";
	КонецЕсли;
	Если		НазваниеИни = "Конфигурация"	Тогда
		ТипИни	= "Система";
	ИначеЕсли	ЗначениеИни.Свойство("ТипИни")	Тогда
		ТипИни	= СтрЗаменить(ЗначениеИни.ТипИни.Значение, "'", "");
	ИначеЕсли	НРег(Лев(НазваниеИни,8)) = "загрузка" Тогда
		МногострочнНазвание = СтрЗаменить(НазваниеИни, "_", Символы.ПС);
		ТипИни	= СтрПолучитьСтроку(МногострочнНазвание,1);
        Если НРег(СтрПолучитьСтроку(МногострочнНазвание,2)) = "исходящий" Тогда
            ТипИни = ТипИни + "Исходящих";
		КонецЕсли;
	ИначеЕсли	НРег(Лев(НазваниеИни,8)) = "выгрузка" Тогда
		МногострочнНазвание = СтрЗаменить(НазваниеИни, "_", Символы.ПС);
		ТипИни	= СтрПолучитьСтроку(МногострочнНазвание,1);
        Если НРег(СтрПолучитьСтроку(МногострочнНазвание,2)) = "входящий" Тогда
            ТипИни = ТипИни + "Входящих";
		КонецЕсли;
	ИначеЕсли	ЗначениеИни.Свойство("мДокумент")	Тогда
		ТипИни	= "Загрузка";
	Иначе
		ТипИни	= "Выгрузка";
	КонецЕсли;
	
	Возврат Новый Структура("КнопкиРеестров, ЗначениеМеню", КнопкиРеестров, Новый Структура("name,type,default,enable", ИмяРеестра, ТипИни, ПоУмолчанию, ИниВключена));

КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_ОтборРазличий
////////////////////////////////////////////////////

///////Вызов///////

&НаСервереБезКонтекста
Функция		ПолучитьРасхождениеИни(Знач СтруктураИни1,Знач СтруктураИни2, Отказ)
	
	СтруктураПользовательскихИзменений	= Новый	Структура;
	
	Если	Не ЗначениеЗаполнено(СтруктураИни1) Тогда
		Возврат СтруктураИни2;
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураИни2) Тогда
		Возврат СтруктураИни1;
	КонецЕсли;
	Для	Каждого	КлючИЗначение	Из	СтруктураИни1	Цикл
		Если	Лев(КлючИЗначение.Ключ,4)	= "Сбис"	Тогда
			Продолжить;
		КонецЕсли;
		Если	Не	СтруктураИни2.Свойство(КлючИЗначение.Ключ)	Тогда
			СтруктураПользовательскихИзменений.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			Продолжить;
		КонецЕсли;
		
		РасхождениеИни	= РасхождениеСтруктур(КлючИЗначение.Значение, СтруктураИни2[КлючИЗначение.Ключ], Отказ);
		
		//Удалить системные данные, которые при сравнении не нужны
		МассивКлючекКУдалению	= Новый	Массив;
		Для	Каждого	ПолеИни	Из	РасхождениеИни	Цикл
			Если	Лев(ПолеИни.Ключ,4)	= "Сбис"	Тогда
				МассивКлючекКУдалению.Добавить(ПолеИни.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для	Каждого	КлючКУдалению	Из	МассивКлючекКУдалению	Цикл
			РасхождениеИни.Удалить(КлючКУдалению);
		КонецЦикла;
		
		Если	РасхождениеИни.Количество()	Тогда
			СтруктураПользовательскихИзменений.Вставить(КлючИЗначение.Ключ, РасхождениеИни);
		КонецЕсли;
	КонецЦикла;
	
	Возврат	СтруктураПользовательскихИзменений;
	
КонецФункции

//Сравнивает инишки между собой. Если есть малейшее отличие, возвращает истина.
&НаКлиенте
Функция		ИниРазличаются(Кэш, СтруктураИни1, СтруктураИни2, Отказ)

	#Если ТолстыйКлиентОбычноеПриложение Тогда
		СтруктураИниДанные1 = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СтруктураИни1);
		СтруктураИниДанные2 = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СтруктураИни2);
		Возврат СравнитьИниСерверСсылка(СтруктураИни1, СтруктураИни2, Отказ);
	#Иначе 
		Возврат СравнитьИниСерверЗнач(СтруктураИни1, СтруктураИни2, Отказ);
	#КонецЕсли
	
КонецФункции

//Сравнивает инишки между собой. Если есть малейшее отличие, возвращает истина.
&НаСервереБезКонтекста
Функция		СравнитьИниСерверЗнач(Знач СтруктураИни1, Знач СтруктураИни2, Отказ)
	
	Возврат СравнитьИниСерверСсылка(СтруктураИни1, СтруктураИни2, Отказ);
	
КонецФункции

//Сравнивает инишки между собой. Если есть малейшее отличие, возвращает истина.
&НаСервереБезКонтекста
Функция		СравнитьИниСерверСсылка(СтруктураИни1, СтруктураИни2, Отказ)

	Если	Не	СтруктураИни1.Количество()	= СтруктураИни2.Количество()	Тогда
		Возврат	Истина;
	КонецЕсли;
	
	Для	Каждого	КлючИЗначение	Из	СтруктураИни1	Цикл
		Если	Лев(КлючИЗначение.Ключ,4) = "Сбис" Тогда
			Продолжить;
		КонецЕсли;
		Если Не	СтруктураИни2.Свойство(КлючИЗначение.Ключ) Тогда
			Возврат	Истина;
		КонецЕсли;
		РасхождениеИни	= РасхождениеСтруктур(КлючИЗначение.Значение,	СтруктураИни2[КлючИЗначение.Ключ], Отказ);
		
		//Удалить системные данные, которые при сравнении не нужны
		МассивКлючейКУдалению	= Новый	Массив;
		Для	Каждого	ПолеИни	Из	РасхождениеИни	Цикл
			Если	Лев(ПолеИни.Ключ,4)	= "Сбис"	Тогда
				МассивКлючейКУдалению.Добавить(ПолеИни.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для	Каждого	КлючКУдалению	Из	МассивКлючейКУдалению	Цикл
			РасхождениеИни.Удалить(КлючКУдалению);
		КонецЦикла;
		
		Если	РасхождениеИни.Количество()	Тогда
			Возврат	Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат	Ложь
	
КонецФункции

//Алгоритм поиска//

//Функция возвращает структуру с полями, которые в структуре1 отличаются от структуры2. 
&НаСервереБезКонтекста
Функция		РасхождениеСтруктур(Структура1, Структура2, Отказ)
	
	Если	Отказ	Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	Если	Не	ТипЗнч(Структура1)	= Тип("Структура")
		Или	Не	ТипЗнч(Структура1)	= ТипЗнч(Структура2)	Тогда//Это не структуры, нечего сравнивать.
			Возврат	Структура1;
	КонецЕсли;
	
	СтруктураПользовательскихИзменений	= Новый	Структура;
	КлючиСтруктуры2Проверены			= Новый	Массив;
	
	Для	Каждого	КлючИЗначение	Из	Структура1	Цикл
		Значение1	= КлючИЗначение.Значение;
		Ключ		= КлючИЗначение.Ключ;
		Если	Структура2.Свойство(Ключ)	Тогда
			Значение2	= Структура2[Ключ];
			КлючиСтруктуры2Проверены.Добавить(Ключ);
		Иначе
			Значение2	= Неопределено;
		КонецЕсли;
		Если		ТипЗнч(Значение1)	= Тип("Структура")	Тогда
			Если	ЗначениеЗаполнено(Значение2)	Тогда//Свойство есть в типовых настройках, продолжить на проверку на более низких уровнях
				Расхождение	= РасхождениеСтруктур(Значение1, Значение2, Отказ);
			Иначе//Свойства нет. Добавить расхождение.
				Расхождение	= Значение1;
			КонецЕсли;
		ИначеЕсли	ТипЗнч(Значение1)	= Тип("Массив")		Тогда
			Если	ТипЗнч(Значение2)	= Тип("Массив")	Тогда
				Расхождение	= РасхожденияМассивов(Значение1, Значение2, Отказ);
			Иначе
				Расхождение	= Значение1;
			КонецЕсли;	
		Иначе
			Если	ТипЗнч(Значение1) = "Строка" Тогда
				Значение1 = СокрЛП(Значение1);
			КонецЕсли;
			Если	ТипЗнч(Значение2) = "Строка" Тогда
				Значение2 = СокрЛП(Значение2);
			КонецЕсли;
			Если	Значение1 = Значение2	Тогда//Значения равны, переходим к следующему
				Продолжить;
			Иначе
				Расхождение	= Значение1;
			КонецЕсли;
		КонецЕсли;
		Если	ЗначениеЗаполнено(Расхождение)	Тогда
			СтруктураПользовательскихИзменений.Вставить(Ключ, Расхождение);
		КонецЕсли;
	КонецЦикла;
	
	Для	Каждого	КлючИЗначение	Из	Структура2	Цикл
		Если	Не	КлючиСтруктуры2Проверены.Найти(КлючИЗначение.Ключ)	= Неопределено	Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПользовательскихИзменений.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат	СтруктураПользовательскихИзменений;
		
КонецФункции

//Функция возвращает массив с полями, которые в массиве1 отличаются от массива2. 
&НаСервереБезКонтекста
Функция		РасхожденияМассивов(Массив1, Массив2, Отказ)
	
	Если	Отказ	Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	Если	Не	ТипЗнч(Массив1)	= Тип("Массив")
		Или	Не	ТипЗнч(Массив1)	= ТипЗнч(Массив2)	Тогда//Это не структуры, нечего сравнивать.
			Возврат	Массив1;
	КонецЕсли;
	
	МассивРасхождений		= Новый	Массив();
	ИндексыМассив2Проверено	= Новый	Массив();
	
	Для	ИндексМассив1	= 0	По	Массив1.Количество()	- 1	Цикл
		ФлагСовпадения		= Ложь;
		ЭлементСравнения1	= Массив1[ИндексМассив1];
		ЭлементСравнения2	= НайтиПохожийЭлементВМассиве(ЭлементСравнения1, Массив2, ИндексыМассив2Проверено, Отказ);
		Если		ЭлементСравнения2	= Неопределено				Тогда//Не найдено похожих элементов
			Расхождение	= ЭлементСравнения1;	
		ИначеЕсли	ТипЗнч(ЭлементСравнения1)	= Тип("Структура")	
				И	ТипЗнч(ЭлементСравнения2)	= Тип("Структура")	Тогда//элементы-структуры, сравнить их.
			Расхождение	= РасхождениеСтруктур(ЭлементСравнения1, ЭлементСравнения2, Отказ);
		ИначеЕсли	ТипЗнч(ЭлементСравнения1)	= Тип("Массив")	
				И	ТипЗнч(ЭлементСравнения2)	= Тип("Массив")		Тогда//сравнить массивы
			Расхождение	= РасхожденияМассивов(ЭлементСравнения1, ЭлементСравнения2,	Отказ);
		Иначе//разные типы значений
			Если	ТипЗнч(ЭлементСравнения1) = "Строка" Тогда
				ЭлементСравнения1 = СокрЛП(ЭлементСравнения1);
			КонецЕсли;
			Если	ТипЗнч(ЭлементСравнения2) = "Строка" Тогда
				ЭлементСравнения2 = СокрЛП(ЭлементСравнения2);
			КонецЕсли;
			Если	ЭлементСравнения1	= ЭлементСравнения2	Тогда
				Расхождение	= Неопределено;
			Иначе
				Расхождение	= ЭлементСравнения1;	
			КонецЕсли;
		КонецЕсли;
		Если	ЗначениеЗаполнено(Расхождение)	Тогда
			Если	ТипЗнч(ЭлементСравнения1)	= Тип("Структура")
				И	ЭлементСравнения1.Свойство("Имя")	Тогда
					Расхождение.Вставить("Имя",	ЭлементСравнения1["Имя"]);
			КонецЕсли;
			МассивРасхождений.Добавить(Расхождение);
		КонецЕсли;
	КонецЦикла;
	
	//То, что отсутствует в основных, сделать пустым для отключения
	Для	ИндексМассив2	= 0	По	Массив2.Количество()	- 1	Цикл
		Если	Не	ИндексыМассив2Проверено.Найти(ИндексМассив2) = Неопределено	Тогда
			Продолжить;
		КонецЕсли;
		Если	ТипЗнч(Массив2[ИндексМассив2])	= Тип("Структура")	Тогда
			Расхождение	= Новый Структура;
			Для	Каждого	КлючИЗначение	Из	Массив2[ИндексМассив2]	Цикл
				Если	КлючИЗначение.Ключ	= "Имя"	Тогда
					Расхождение.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				Иначе
					Расхождение.Вставить(КлючИЗначение.Ключ, "");
				КонецЕсли;
			КонецЦикла;
		Иначе
			Расхождение	= Массив2[ИндексМассив2];
		КонецЕсли;
		МассивРасхождений.Добавить(Расхождение);
	КонецЦикла;
	
	Возврат	МассивРасхождений;
	
КонецФункции

//Функция ищет соответствующий элемент в массиве.
//Если передана структура	- подразумевается поиск в массиве структур, по совпадению ключа элемента.
//Если передан массив		- подразумевается поиск в массиве массивов, по совпадению всех входящих (кроме структур, те - через ключ) элементов через рекурсию.
//В остальных случаях		- по совпадению.
&НаСервереБезКонтекста
Функция		НайтиПохожийЭлементВМассиве(Элемент, Массив, ИндексыПроверены, Отказ)
	
	Если		ТипЗнч(Элемент)	= Тип("Структура")	Тогда//Если это массив структур, искать по ключу
		Если	Элемент.Свойство("Имя")
			И	Элемент.Свойство("Значение")	Тогда
					ПоискПоИмени	= Истина;
		Иначе
			ПоискПоИмени	= Ложь;
		КонецЕсли;
		Для	ИндексМассива	= 0	По	Массив.Количество()	-1	Цикл
			Если	Не	ИндексыПроверены.Найти(ИндексМассива)			= Неопределено	Тогда
				Продолжить;
			КонецЕсли;
			ЭлементСравнение	= Массив[ИндексМассива];	
			Если	Не	ТипЗнч(ЭлементСравнение)	= Тип("Структура")	Тогда 
				Продолжить;
			КонецЕсли;
			
			Если	ПоискПоИмени	Тогда
				Если	Не	ЭлементСравнение.Свойство("Имя")
					Или	Не	ЭлементСравнение.Свойство("Значение")	Тогда
						Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НайденоСовпадение	= Ложь;
			Если	ПоискПоИмени
				И	Элемент.Имя	= ЭлементСравнение.Имя	Тогда
					НайденоСовпадение	= Истина;
			КонецЕсли;
			
			Если	Не	(	ПоискПоИмени
						Или	НайденоСовпадение)	Тогда
				НайденоСовпадение	= Истина;
				Для	Каждого	КлючИЗначение	Из	Элемент	Цикл
					Если	Не	ЭлементСравнение.Свойство(КлючИЗначение.Ключ)	Тогда
						НайденоСовпадение	= Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если	НайденоСовпадение	Тогда
				ИндексыПроверены.Добавить(ИндексМассива);
				Возврат	ЭлементСравнение;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли	ТипЗнч(Элемент)	= Тип("Массив")		Тогда//Если это массив массивов, сравнить все входящие элементы и вернуть тот, который равен нашему.
		Для	ИндексМассива	= 0	По	Массив.Количество()	-1	Цикл
			Если	Не	ИндексыПроверены.Найти(ИндексМассива)			= Неопределено	Тогда
				Продолжить;
			КонецЕсли;
			ЭлементСравнение		= Массив[ИндексМассива];	
			РасхождениеЭлементов	= РасхожденияМассивов(Элемент, ЭлементСравнение, Отказ);
			Если	Не	ЗначениеЗаполнено(РасхождениеЭлементов)	Тогда
				ИндексыПроверены.Добавить(ИндексМассива);
				Возврат	ЭлементСравнение;					
			КонецЕсли;
		КонецЦикла;
	Иначе//Обычный массив значений
		ИндексВМассиве	= Массив.Найти(Элемент);
		Если	ИндексВМассиве	= Неопределено	Тогда
			Возврат	Неопределено;
		КонецЕсли;
		Если	ИндексыПроверены.Найти(ИндексВМассиве)	= Неопределено	Тогда
			ИндексыПроверены.Добавить(ИндексВМассиве);
			Возврат	Массив[ИндексВМассиве];
		Иначе
			Для	ИндексМассива	= 0	По	Массив.Количество()	-1	Цикл
				Если	Не	ИндексыПроверены.Найти(ИндексМассива)		= Неопределено	Тогда
					Продолжить;
				КонецЕсли;
				ЭлементСравнение		= Массив[ИндексМассива];	
				Если	ЭлементСравнение	= Элемент	Тогда
					ИндексыПроверены.Добавить(ИндексМассива);
					Возврат	ЭлементСравнение;					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат	Неопределено;

КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_ВызовИнтеграции
////////////////////////////////////////////////////

//Записывает выбранный вариант настроек в виде JSON на сервер.
&НаКлиенте
Функция		ЗаписатьConnection(Кэш, ПараметрыЗаписи, СбисДополнительныеПараметры, Отказ)
	Перем ОбновитьИниНаСервере, ЭтоНовоеСоединение, ТипНастроек, Статус, ТихийРежим;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при записи промежуточных данных, вроде меню и параметров
	
	СбисПараметры = ПараметрыЗаписи.Данные.Параметры;
	
	Если Не ЗначениеЗаполнено(СбисПараметры) Тогда
		СбисПараметры = ПолучитьПараметрыСБИС(Кэш, "");
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура;
	Если	СбисДополнительныеПараметры.Свойство("ТолькоСбисПараметры")
		И	СбисДополнительныеПараметры.ТолькоСбисПараметры
		Или	Не	(	(	ПараметрыЗаписи.ПараметрыРаботы.Свойство("Статус", Статус)
					И	Статус = "Удален")
				Или	(		ПараметрыЗаписи.ПараметрыРаботы.Свойство("ТипНастроек", ТипНастроек)
					И Не	ТипНастроек = "Пользовательские")) Тогда
		ПараметрыОтправки.Вставить("id",		ПараметрыЗаписи.Идентификатор);
		ЭтоНовоеСоединение = Ложь;
	Иначе
		ЭтоНовоеСоединение = Истина;
		ПараметрыОтправки.Вставить("url",		Кэш.ПараметрыСистемы.Конфигурация.URL);
		ПараметрыОтправки.Вставить("service",	Кэш.КэшНастроек.ПараметрыКонфигурации.service);//service для записи берем из параметров конфигурации системы, т.к. может отличаться для работы с конфигом и коннекшеном
		ПараметрыОтправки.Вставить("subsystem",	ПараметрыЗаписи.ПараметрыКонфигурации.subsystem);
		ПараметрыОтправки.Вставить("version",	Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(ПараметрыЗаписи.ПараметрыКонфигурации.version,"СтрокуВЧисло"), "ЧРГ=; ЧН=0; ЧГ=0"));
		СбисПараметры.Вставить("Service4Config", Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
		СбисПараметры.Вставить("nameSubsystem",	Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(,ПараметрыЗаписи.ПараметрыКонфигурации.subsystem));
	КонецЕсли;
	Если ПараметрыЗаписи.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
		ПараметрыОтправки.Вставить("for_all", Истина);
		Если ЗначениеЗаполнено(ПараметрыЗаписи.Идентификатор) Тогда
			ПараметрыОтправки.Вставить("id", ПараметрыЗаписи.Идентификатор);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗаписи.ПараметрыРаботы.Шаблон) Тогда
		ПараметрыОтправки.Вставить("parent", ПараметрыЗаписи.ПараметрыРаботы.Шаблон);
	КонецЕсли;
	Если СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("СообщатьПриОшибке") Тогда
		СбисДополнительныеПараметры.Вставить("СообщатьПриОшибке", Ложь);
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ВернутьОшибку") Тогда
		СбисДополнительныеПараметры.Вставить("ВернутьОшибку", Истина);
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ЕстьОтвет") Тогда
		СбисДополнительныеПараметры.Вставить("ЕстьОтвет", Истина);
	КонецЕсли;
	ЕстьИниКЗаписи	= Булево(ПараметрыЗаписи.ПараметрыРаботы.СбисИни.СписокОтправить.Количество());
	ФормированиеМеню=	ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Обновить
					И	ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Отправлять;
	
	ВыполнитьЗапись	= ЕстьИниКЗаписи Или ЭтоНовоеСоединение;
	//Если запись параметров, то не обрабатываем коннекшен, а только запишем параметры
	Если Не	(	СбисДополнительныеПараметры.Свойство("ТолькоСбисПараметры")
			И	СбисДополнительныеПараметры.ТолькоСбисПараметры) Тогда
		//Если это не запись сбиспараметров, то проверим необходимость обновить сбисменю. Если надо, то выполним запись 	
		ini_array = Новый Массив;
		//Необязательные параметры. Если есть, то передаём
		Если ПараметрыЗаписи.Свойство("Название") Тогда
			ПараметрыОтправки.Вставить("name_connection",	Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ПараметрыЗаписи.Название));
		КонецЕсли;
		Если	ПараметрыЗаписи.ПараметрыРаботы.Свойство("ДатаИзмененияНастроек")
			И	ЗначениеЗаполнено(ПараметрыЗаписи.ПараметрыРаботы.ДатаИзмененияНастроек) Тогда
			ПараметрыОтправки.Вставить("update_date",		Формат(ПараметрыЗаписи.ПараметрыРаботы.ДатаИзмененияНастроек,"ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""));
		КонецЕсли;
		Если ПараметрыЗаписи.ПараметрыРаботы.Свойство("Автообновление") Тогда
			ПараметрыОтправки.Вставить("auto_update ",		ПараметрыЗаписи.ПараметрыРаботы.Автообновление);
		КонецЕсли;
		//Если надо апдейтнуть меню по данным, то делаем только если сразу отправим на БЛ
		Если ФормированиеМеню Тогда
			ПараметрыЗаписи.Данные.Меню = КлассIntegrationConnection_СформироватьСбисМеню(Кэш, ПараметрыЗаписи, Новый Структура, Отказ);
		КонецЕсли;
		//Конвертнём и добавим в параметры ини к обновлению на сервисе
		Если ЕстьИниКЗаписи Тогда
			ПараметрыЗапроса = Новый Структура
				("Идентификатор,				ПараметрыКонфигурации,					СбисМеню,						Искать",
				ПараметрыЗаписи.Идентификатор,	ПараметрыЗаписи.ПараметрыКонфигурации,	ПараметрыЗаписи.Данные.Меню,	Новый Структура("Включено", "01"));
			ДанныеСпискаИни		= СформироватьСписокИни(Кэш,ПараметрыЗапроса,Отказ);
			КонвертированныеИни	= Новый Структура;
			Для Каждого ИмяИниВО Из  ПараметрыЗаписи.ПараметрыРаботы.СбисИни.СписокОтправить Цикл
				Если Не ПараметрыЗаписи.Данные.Ини.Свойство(ИмяИниВО) Тогда
					Отказ = Истина;
					Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.ЗаписатьConnection", 785, "Ошибка во входящих данных", "Отсутствует файл настроек " + ИмяИниВО + " в данных к отправке!");
				КонецЕсли;
				КонвертированныеИни.Вставить(ИмяИниВО, ПараметрыЗаписи.Данные.Ини[ИмяИниВО]);
			КонецЦикла;
			КонвертированныеИни = ПреобразованиеВОИни_JSONИни_ВыполнитьПреобразование(КонвертированныеИни);
			
			Для Каждого ИмяИниВО Из ПараметрыЗаписи.ПараметрыРаботы.СбисИни.СписокОтправить Цикл
				ЗаписьИни			= СбисОписаниеИни(Кэш);
				ЗначениеИни			= КонвертированныеИни[ИмяИниВО];
				СписокКлючейОчистить= Новый Массив;
				Для Каждого КлючИЗначениеЗначениеИни Из ЗначениеИни Цикл
					Если Лев(КлючИЗначениеЗначениеИни.Ключ, 4) = "Сбис" Тогда
						СписокКлючейОчистить.Добавить(КлючИЗначениеЗначениеИни.Ключ);
					КонецЕсли;
				КонецЦикла;
				Для Каждого КлючОчистить Из СписокКлючейОчистить Цикл
					ЗначениеИни.Удалить(КлючОчистить);
				КонецЦикла;
				
				ИмяИниJson	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ИмяИниВО, "во_json");
				ЭлементКарты= ДанныеСпискаИни.Карта.НайтиПоЗначению(НРег(ИмяИниJson));
				ДанныеСписка= ДанныеСпискаИни.Данные[ДанныеСпискаИни.Карта.Индекс(ЭлементКарты)];
				ЗаполнитьЗначенияСвойств(ЗаписьИни, ДанныеСписка);
			
				ЗаписьИни.data = Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ЗначениеИни);
				ini_array.Добавить(ЗаписьИни);
			КонецЦикла;
		КонецЕсли;
		//Добавим меню в список отправляемых ини
		Если ФормированиеМеню Тогда
			ЗаписьИни = СбисОписаниеИниМеню(Кэш);
			ЗаписьИни.data = Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ПараметрыЗаписи.Данные.Меню);
			ini_array.Добавить(ЗаписьИни);
			ВыполнитьЗапись = Истина;
		КонецЕсли;
	КонецЕсли;
	//Добавим СбисПараметры в отправку		
	Если	(	(	ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Обновить
				И	ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Отправлять) 
			Или	ЭтоНовоеСоединение)
		И	СбисПараметры.Количество() Тогда
		ПараметрыОтправки.Вставить("json_connection", Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(СбисПараметры));
		ВыполнитьЗапись = Истина;
	КонецЕсли;
	
	Если ВыполнитьЗапись Тогда
		ПараметрыОтправки = Новый Структура("props, ini", ПараметрыОтправки, ini_array);
		Если Не СбисДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
			ТихийРежим = Ложь;
		КонецЕсли;
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисПоказатьСостояние("Запись настроек", Кэш.ГлавноеОкно);
		КонецЕсли;
		Результат = Кэш.Интеграция.ЗаписатьConnection(Кэш, ПараметрыОтправки, СбисДополнительныеПараметры, Отказ);
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;
	КонецЕсли;
	Если Не Отказ Тогда
		//Обновить подключение после записи
		ПараметрыЗаписи.Идентификатор =	Результат;
		Если Не ПараметрыЗаписи.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
			ПараметрыЗаписи.ПараметрыРаботы.ТипНастроек = "Пользовательские";
		КонецЕсли;
		ПараметрыЗаписи.ПараметрыРаботы.Статус = "Активен";
		ПараметрыЗаписи.ПараметрыРаботы.СбисИни.СписокОтправить.Очистить();
		Если ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Отправлять Тогда
			ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Обновить = Ложь;
		КонецЕсли;
		Если ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Отправлять Тогда
			ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Обновить = Ложь;
		КонецЕсли;
		//Здесь нужно для того, чтобы если в каталоге отключили узлы, то и в рабочих ини узлов быть не должно. После переполучения, ини очистятся в конверторе.
		Если ЕстьИниКЗаписи Тогда
			ОчиститьОтключенныеУзлы(ПараметрыЗаписи.Данные.Ини);
		КонецЕсли;
	КонецЕсли;

	Возврат	Результат;
	
КонецФункции

//Получает стуктуру СбисПараметров. 
&НаКлиенте
Функция		ПолучитьСБИСПараметрыСоединения(Кэш, Идентификатор, Отказ)
	
	Перем ШаблонПодключения;
	Если Отказ Тогда
		Возврат Неопределено;
	ИначеЕсли	Кэш.КэшНастроек.Свойство("ВыбранныеНастройки")
			И	Кэш.КэшНастроек.ВыбранныеНастройки.Идентификатор = Идентификатор
			И	(		Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.Статус = "Новый"
				Или	Не	Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Отправлять) Тогда
		//Если надо получить параметры от текущих настроек в момент мастера, либо предустановки (когда автозапись параметров отключена)
		Возврат Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Параметры;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("id", Строка(Идентификатор));
	
	Результат = ВыполнитьПолучениеИни(Кэш, "ReadConnection", Новый Структура("props, ini", ПараметрыЗапроса, Неопределено), Новый Структура("СообщатьПриОшибке,ВернутьОшибку", Ложь,Истина), Отказ);
	Если Не Отказ Тогда
		Результат = НовыйIntegrationConnection(Кэш, Новый Структура("ДанныеБЛ, ИнициироватьДанные, Перечитать, Кэшировать", Результат, Ложь, Истина, Ложь), Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Идентификатор = "";//При любой ошибке в процессе получения параметров очищается идентификатор, чтобы не спамить сообщениями об ошибках при дальнейших попытках получения.
		Если	Строка(Результат.code) = "756" Тогда//Код ошибки 756 - подключение не доступно для пользователя, либо было удалено в процессе работы. В любом случае, настройки получить не выйдет.
			Отказ = Ложь;
			Если	Кэш.Текущий.ТипДок = ""
				Или	(	ПараметрыРаботы.Свойство("ИзменениеПользователя")
					И	ПараметрыРаботы.ИзменениеПользователя)
				Или	(	ПараметрыРаботы.Свойство("ИзмененаФормаНастроек")
					И	ПараметрыРаботы.ИзмененаФормаНастроек)Тогда//Было изменение пользователя, или это первый запуск окна(до этого работали под другим пользователем).
				Возврат Неопределено;
			Иначе//Надо предложить сохранить настройки при следующем переходе. Для этого включаем кэш настроек с сохранением того, что было получено и ставим флаг на изменение.
				Кэш.КэшНастроек.ПараметрыНастроек.Вставить("КэшироватьВсеПолучаемые", Истина);
				ПриЗапускеРедактораНастроек(Новый Структура("КэшироватьВсеПолучаемые", Истина), Кэш);
				ВыбранныеНастройки = Неопределено;
				Если Кэш.КэшНастроек.Свойство("ВыбранныеНастройки",ВыбранныеНастройки) Тогда 
					ВыбранныеНастройки.ПараметрыРаботы.Статус			= "Удален";
					ВыбранныеНастройки.Идентификатор					= ПараметрыЗапроса.id;
					ВыбранныеНастройки.Название							= Кэш.ФормаНастроекОбщее.НастройкиНазвание;
					ВыбранныеНастройки.ПараметрыРаботы.Автообновление	= Кэш.ФормаНастроекОбщее.НастройкиАвтообновление;
					ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек		= "Пользовательские";
				КонецЕсли;
				ПараметрыДиалога = Новый Структура("ТекстВопроса, КнопкиДиалога", "Сохранить текущие настройки и создать подключение повторно?", РежимДиалогаВопрос.ДаНет);
				Кэш.КэшНастроек.Вставить("ИзмененияВНастройках_ПараметрыДиалога",ПараметрыДиалога);
				Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
			КонецЕсли;
		КонецЕсли;
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, Результат);
		Возврат	Неопределено;
	КонецЕсли;
	
	СбисПараметры = Неопределено;
	Если Не	ЗначениеЗаполнено(Результат.Данные.Параметры) Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	//Читаем параметры с шаблона и дополняем текущие 
	Если	Не	Результат.ПараметрыРаботы.ТипНастроек = "Шаблон"
		И		ЗначениеЗаполнено(Результат.ПараметрыРаботы.Шаблон) Тогда
		ОшибкаЧтенияШаблона	= Ложь;
		ПараметрыШаблона	= ПолучитьСБИСПараметрыСоединения(Кэш,  Результат.ПараметрыРаботы.Шаблон, Отказ);
		
		НоваяСтруктураПараметров= Новый Структура;
		Если Не ОшибкаЧтенияШаблона Тогда
			ЗначениеПараметраВПодключении = Неопределено;
			Для Каждого Элемент Из ПараметрыШаблона Цикл
				Если Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Найти(НРег(Элемент.Ключ)) = Неопределено Тогда
					Продолжить;
				ИначеЕсли Не Результат.Данные.Параметры.Свойство(Элемент.Ключ, ЗначениеПараметраВПодключении) Тогда
					Результат.Данные.Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
				ИначеЕсли	ТипЗнч(ЗначениеПараметраВПодключении)	= Тип("Структура")
						И	ТипЗнч(Элемент.Значение)				= Тип("Структура") Тогда
					//Обе структуры - накатить параметры подключения поверх шаблона.
					Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Элемент.Значение, ЗначениеПараметраВПодключении);
					Результат.Данные.Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
				Иначе
					//Приоритет = пользовательские изменения
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СбисПараметры = Результат.Данные.Параметры;
	Если ТипЗнч(СбисПараметры) = Тип("Строка") Тогда//При работе через крипто плагин здесь строка, вместо структуры. Временный костыль, потом надо разобраться, почему.
		СбисПараметры = Кэш.РаботаСJSON.СбисПрочитатьJSON(СбисПараметры);
	КонецЕсли;
	
	Возврат	Кэш.ФормаНастроекОбщее.ОбработатьСтруктуруПараметров(СбисПараметры);
	
КонецФункции

//Получает список строк IntegrationConnection.
&НаКлиенте
Функция		ПолучитьСписокConnection(Кэш, ПараметрыПолучения, Отказ)
	Перем СписокИни, ТипКоннекшена, ТихийРежим;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура("service", ПараметрыПолучения.ПараметрыКонфигурации.service);
	Если ПараметрыПолучения.ДополнительныеПараметры.Свойство("ТипКоннекшена", ТипКоннекшена) Тогда
		//account/user
		ПараметрыЗапроса.Вставить("connection_type", ТипКоннекшена);
	КонецЕсли;
	Если ПараметрыПолучения.ДополнительныеПараметры.Свойство("URL") Тогда
		//ПараметрыЗапроса.Вставить("url", ЗначениеВJSON(ПараметрыПолучения.ДополнительныеПараметры.URL));
	КонецЕсли;
	Если ПараметрыПолучения.ДополнительныеПараметры.Свойство("subsystem") Тогда
		ПараметрыЗапроса.Вставить("subsystem", ПараметрыПолучения.ДополнительныеПараметры.subsystem);
	КонецЕсли;
	ПараметрыСообщения		= Новый Структура("filter, ini", ПараметрыЗапроса, ПараметрыПолучения.СписокИни);
	ДополнительныеПараметры	= ПараметрыПолучения.ДополнительныеПараметры;
	Если Не ДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Кэш.ТихийРежим;
	КонецЕсли;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Получение списка настроек", Кэш.ГлавноеОкно);
	КонецЕсли;
	
	РезультатМетода = Кэш.Интеграция.ПолучитьСписокConnection(Кэш, ПараметрыСообщения, ПараметрыПолучения.ДополнительныеПараметры, Отказ);	
	
	Если Отказ Тогда
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;
		Возврат	РезультатМетода;
	КонецЕсли;
	
	Результат = Новый Массив;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Чтение списка настроек", Кэш.ГлавноеОкно);
	КонецЕсли;
	Для Каждого СтрокаРезультат Из РезультатМетода Цикл
		СтрокаРезультатДобавить = НовыйIntegrationConnection(Кэш, Новый Структура("ДанныеБЛ, ИнициироватьДанные, ПроверятьАктуальность", СтрокаРезультат, Ложь, Ложь), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(СтрокаРезультатДобавить, "ФайлыНастроекСервер.ПолучитьСписокConnection");
		КонецЕсли;
		Результат.Добавить(СтрокаРезультатДобавить);
	КонецЦикла;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	Возврат	Результат;
	
КонецФункции

//Получает список строк IntegrationConnection.
&НаКлиенте
Функция		ПолучитьСписокConfig(Кэш, ПараметрыПолучения, Отказ)
	Если	Отказ	Тогда
		Возврат	Неопределено
	КонецЕсли;
	
	ПараметрыСообщения		= Новый Структура("service", Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
	ДополнительныеПараметры	= ПараметрыПолучения.ДополнительныеПараметры;
	РезультатМетода			= Кэш.Интеграция.ПолучитьСписокConfig(Кэш, ПараметрыСообщения, ДополнительныеПараметры, Отказ);	
	Если Отказ Тогда
		Возврат	РезультатМетода;
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	Для Каждого СтрокаРезультат Из РезультатМетода Цикл
		КлассIntegrationConnection = НовыйIntegrationConnection(Кэш, Новый Структура("ДанныеБЛ, ИнициироватьДанные", СтрокаРезультат, Ложь), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnection, "ФайлыНастроекСервер.ПолучитьСписокConfig");
		КонецЕсли;
		Результат.Добавить(КлассIntegrationConnection, КлассIntegrationConnection.Название);
	КонецЦикла;
	Результат.СортироватьПоПредставлению();
	Возврат	Результат.ВыгрузитьЗначения();

КонецФункции

//Получает настройки по ID.
&НаКлиенте
Функция		ПолучитьConnection(Кэш, ПараметрыПолучения, Отказ)
	Если Отказ Тогда
		Возврат	Неопределено;
	КонецЕсли;
	ПараметрыКонвертации = Неопределено;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("id",		Строка(ПараметрыПолучения.Идентификатор));
	ПараметрыЗапроса.Вставить("version",Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(ПараметрыПолучения.ПараметрыКонфигурации.Version,"СтрокуВЧисло"),"ЧРГ=; ЧН=0; ЧГ=0"));
	Если	ПараметрыПолучения.ДополнительныеПараметры.Свойство("ТолькоПользовательские")
		И	ПараметрыПолучения.ДополнительныеПараметры.ТолькоПользовательские Тогда
		//Если получаем только пользовательские изменения, то при конвертации не требуется удалять отключенные узлы
		ПараметрыЗапроса.Вставить("read_config", Ложь);
		ПараметрыКонвертации = Новый Структура("ОчищатьОтключенные", Ложь);
	КонецЕсли;	
	
	ПараметрыСообщения = Новый Структура("props, ini", ПараметрыЗапроса, ПараметрыПолучения.СписокИни);		
	Результат = ПолучитьConnectionССервиса(Кэш, ПараметрыСообщения, ПараметрыПолучения.ДополнительныеПараметры, Отказ);
	Если Отказ Тогда 
		Возврат	Результат;
	КонецЕсли;

	//ЧтениеИни_ОбработатьРезультат(Кэш, Результат, ПараметрыКонвертации);

	Возврат	Результат;
	
КонецФункции	

//Получает типовые настройки по параметрам системы.
&НаКлиенте
Функция		ПолучитьConfig(Кэш, ПараметрыПолучения, Отказ)
	
	Если Отказ Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Результат				= Неопределено;
	ДополнительныеПараметры	= ПараметрыПолучения.ДополнительныеПараметры;
	ТихийРежим				= Неопределено;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при получении промежуточных данных, вроде меню и параметров
	Если Не ДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Кэш.ТихийРежим;
	КонецЕсли;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Получение стандартных настроек", Кэш.ГлавноеОкно);
	КонецЕсли;	
	
	ПараметрыКонфигурации	= ПараметрыПолучения.ПараметрыКонфигурации;
	Запрос_Фильтр			= Новый Структура("version,subsystem,service");
	Если Не ЗначениеЗаполнено(ПараметрыКонфигурации) Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.ПолучитьConfig", 600, "Неизвестная ошибка настроек", "Отсутствует описание конфигурации для получения стандартных настроек! Обратитесь в тех. поддержку.");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Запрос_Фильтр, ПараметрыКонфигурации);
	Запрос_Фильтр.Вставить("version", Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(Запрос_Фильтр.version,"СтрокуВЧисло"), "ЧРГ=; ЧН=0; ЧГ=0"));
	
	ПараметрыСообщения = Новый Структура("props, ini", Запрос_Фильтр, ПараметрыПолучения.СписокИни);
	
	Если ПустаяСтрока(ПараметрыСообщения.props.subsystem) Тогда//Это пользовательская конфигурация. Генерируем ряд обязательных параметров, всё остальное берётся по-умолчанию.
		РезультатМетода = Новый Структура(
		"name_config,					auto_update,service,							subsystem,							version", 
		"Пользовательская конфигурация",Ложь,		ПараметрыСообщения.props.service,	ПараметрыСообщения.props.subsystem,	ПараметрыСообщения.props.version);
	Иначе
		РезультатМетода	= ВыполнитьПолучениеИни(Кэш, "ReadConfig", ПараметрыСообщения, ДополнительныеПараметры, Отказ);//Получаем типовые конфиги.
		Если РезультатМетода = Неопределено Тогда
			Отказ = Истина;
			ИмяЗапрашиваемойКонфигурации = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ПараметрыСообщения.props.service, Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(ПараметрыСообщения.props));
			РезультатМетода = Новый Структура("code,message,details", 765, "Значение не найдено в таблице настроек", СтрЗаменить("Настройки %CF% не найдены!", "%CF%", ИмяЗапрашиваемойКонфигурации));
		КонецЕсли;
	КонецЕсли;
	Если	Отказ Тогда
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;	
		Возврат	РезультатМетода;
	КонецЕсли;
	
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Чтение стандартных настроек", Кэш.ГлавноеОкно);
	КонецЕсли;
	Результат = НовыйIntegrationConnection(Кэш, Новый Структура("ДанныеБЛ", РезультатМетода), Отказ);
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат	Результат;
	КонецЕсли;
	
	ЧтениеИни_ОбработатьРезультат(Кэш, Результат);
	
	Возврат	Результат;
	
КонецФункции

//Функция выполняет разбивку получения ини по пакетно, для ускорения разбора данных.
&НаКлиенте
Функция		ВыполнитьПолучениеИни(Кэш,Метод,ПараметрыМетода,ДопПараметры,Отказ)
	Перем СписокКЗапросу, Результат, ПолучатьИни;
	
	Если ПараметрыМетода.Свойство("ini", СписокКЗапросу) Тогда
		ПолучатьИни = Не СписокКЗапросу = Неопределено;
	Иначе
		ПолучатьИни = Ложь;
	КонецЕсли;
	
	Если ПолучатьИни Тогда
		ЧислоИниЗаРаз = Кэш.КэшНастроек.ПараметрыНастроек.ПолучатьИниЗаРаз;
		СписокРазовоеЧтение = Новый Массив;
		Если СписокКЗапросу.Количество() > ЧислоИниЗаРаз Тогда
			Для Каждого ИниПолучить Из СписокКЗапросу Цикл
				Если СписокРазовоеЧтение.Количество() = ЧислоИниЗаРаз Тогда
					ПараметрыМетода.Вставить("ini", СписокРазовоеЧтение);
					РезультатПолучения = Кэш.Интеграция.ПолучитьИни(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
					Если Отказ Тогда
						Возврат РезультатПолучения;
					КонецЕсли;
					ВыполнитьПолучениеИни_ДобавитьВРезультат(Кэш,Результат,РезультатПолучения,Отказ);
					СписокРазовоеЧтение = Новый Массив
				КонецЕсли;
				СписокРазовоеЧтение.Добавить(ИниПолучить);
			КонецЦикла;
			Если СписокРазовоеЧтение.Количество() Тогда
				ПараметрыМетода.Вставить("ini", СписокРазовоеЧтение);
				РезультатПолучения = Кэш.Интеграция.ПолучитьИни(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
				Если Отказ Тогда
					Возврат РезультатПолучения;
				КонецЕсли;
				ВыполнитьПолучениеИни_ДобавитьВРезультат(Кэш,Результат,РезультатПолучения,Отказ);
			КонецЕсли;
		Иначе//Список пустой, или нужно инишек меньше, чем разбивка.
			ПараметрыМетода.Вставить("ini", СписокКЗапросу);
			Результат = Кэш.Интеграция.ПолучитьИни(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
		КонецЕсли;
	Иначе
		Результат = Кэш.Интеграция.ПолучитьИни(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура	ВыполнитьПолучениеИни_ДобавитьВРезультат(Кэш,Результат,РезультатЗапроса,Отказ)
	ДанныеРезультат = Неопределено;
	ДанныеЗапроса	= Неопределено;
	Если Результат = Неопределено Тогда
		Результат = РезультатЗапроса;
	ИначеЕсли	Результат.Свойство("data",			ДанныеРезультат)
			И	РезультатЗапроса.Свойство("data",	ДанныеЗапроса) Тогда
		Если ТипЗнч(ДанныеРезультат) = Тип("Строка") Тогда
			data = Новый Массив;
			data.Добавить(ДанныеРезультат);
			Результат.data = data;	
		КонецЕсли;
		Результат.data.Добавить(ДанныеЗапроса);
	КонецЕсли;
КонецПроцедуры

//Получает настройки по ID.
&НаКлиенте
Функция		ПолучитьConnectionССервиса(Кэш, ПараметрыСообщения, ДополнительныеПараметры, Отказ) Экспорт
	
	ТихийРежим	= Неопределено;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при получении промежуточных данных, вроде меню и параметров
	ИмяМетода	= "ReadConnection";
	Если Не ДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Кэш.ТихийРежим;
	КонецЕсли;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Получение сохраненных настроек", Кэш.ГлавноеОкно);
	КонецЕсли;	
	
	РезультатМетода = ВыполнитьПолучениеИни(Кэш, ИмяМетода, ПараметрыСообщения, ДополнительныеПараметры, Отказ);
	
	Если Отказ Тогда
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;	
		Возврат	РезультатМетода;
	КонецЕсли;
	
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Чтение сохраненных настроек", Кэш.ГлавноеОкно);
	КонецЕсли;	
	Результат = НовыйIntegrationConnection(Кэш, Новый Структура("ДанныеБЛ", РезультатМетода), Отказ);
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	
	Возврат	Результат;
	
КонецФункции	

&НаКлиенте
Функция		ДоступныеТипыКоннекшена()
	МассивТипов = Новый Массив;
	МассивТипов.Добавить("Шаблон");
	МассивТипов.Добавить("Пользовательские");
	МассивТипов.Добавить("Стандартные");
	Возврат МассивТипов;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_КлассIntegrationConnection_Области
//Описание и методы псевдокласса для работы с настройками в СБИС

#Область include_core2_vo2_Настройки_СБИС_КлассIntegrationConnection_Конструктор

// Функция формирует новый "класс" IC.
//
// Параметры:
//  Кэш			 - Структура - Экземпляр ЛокальныйКэш
//  ДопПараметры - Структура -
//		БазовыйКласс			- Экземпляр IntegrationConnection		- на основе которого требуется получить новый эксзепляр
//		Идентификатор			- УИД в формате строка					- ИД коннекшена для чтения
//		ПараметрыКонфигурации	- Структура: service subsystem version	- Описание конфигурации. Без идентификатора, либо базового класса будет сформирован класс IntegrationConfig
//		Перечитать				- Булево(Ложь)							- Необходимость прочитать данные с БЛ, а не брать от кэша
//		ИнициироватьДанные		- Булево(Истина)						- Необходимость прочитать данные ини (список активных, конфигурация)
//		ПроверятьАктуальность	- Булево(Истина)						- Необходимость проверить статус существующего класса, сделав минимальный запрос
//		Кэшировать				- Булево(Истина)						- Необходмиость запомнить полученные данные класса в кэше для дальнейшего использования
//		ИнитКоннекшен			- Булево(Ложь)							- Это не прямое чтение, даже если указан Идентификатор, а подбор коннекшена происходит на стороне БЛ.
//		Тип						- Строка								- Тип для нового класса (Шаблон/Пользовательский)
//  Отказ		 - Булево	 - флаг ошибки
// 
// Возвращаемое значение:
//  Структура - Экземпляр класса IntegrationConnection
//
&НаКлиенте
Функция		НовыйIntegrationConnection(Кэш, ДопПараметры, Отказ)
	Перем СбисДанныеБЛ, СбисПараметрыКонфигурации, КлассIntegrationConnection, ID, Перечитать, ИнитКоннекшен;
	
	////Статус - возможные значнения "Активен", "Удален"
	//ПараметрыРаботы = Новый Структура("Статус, ТипНастроек, Автообновление, Изменен, Шаблон, Пользователь", "Новый", "Стандартные", Истина, Ложь);
	////Определяет работу со Сбис параметрами:
	////Отправлять- если нет необходимости записывать на сервис, то флаг переключить в ложь. Тогда изменения будут кэшироваться в выбранном подключении
	////Обновить	- флаг изменения в параметрах. Если переключен в истину, то будет проведена отправка на сервис.
	
	//ПараметрыРаботы.Вставить("СбисПараметры",	Новый Структура("Обновить, Отправлять", Ложь, Истина));
	//ПараметрыРаботы.Вставить("СбисМеню",		Новый Структура("Обновить, Отправлять", Ложь, Истина));
	//ПараметрыРаботы.Вставить("СбисИни",			Новый Структура("СписокОтправить", Новый Массив));
	//Результат = Новый Структура(
	//"ПараметрыРаботы,	Данные,									Ошибки,				Название,	ДатаИзмененияНастроек,	ПараметрыКонфигурации,	Идентификатор, Шаблон"
	//,ПараметрыРаботы,	Новый Структура("Ини, Меню, Параметры"),Новый Соответствие, "",			ТекущаяДата(),			ПараметрыСтандартнойКонфигурации(Кэш, Кэш.КэшНастроек.ПараметрыКонфигурации));
	
	СуществующийКоннекшен = Истина;
	Если	Не ДопПараметры.Свойство("ИнитКоннекшен", ИнитКоннекшен) Тогда
		ИнитКоннекшен = Ложь;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("БазовыйКласс") Тогда
		
		Возврат _НовыйIntegrationConnection_НаОсновеКласса(Кэш, ДопПараметры, Отказ);
		
	ИначеЕсли	ДопПараметры.Свойство("Идентификатор")
			И	ЗначениеЗаполнено(ДопПараметры.Идентификатор) Тогда	
			
		ID = ДопПараметры.Идентификатор;
		
	ИначеЕсли	ДопПараметры.Свойство("ПараметрыКонфигурации", СбисПараметрыКонфигурации) Тогда
		
		ID = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(ПараметрыСтандартнойКонфигурации(Кэш, СбисПараметрыКонфигурации));
		СуществующийКоннекшен = Ложь;
		
	КонецЕсли;
	
	Если Не ДопПараметры.Свойство("Перечитать", Перечитать) Тогда
		
		Перечитать = Ложь;
		
	КонецЕсли;
	
	
	Если		ЗначениеЗаполнено(ID)
		И	Не	Перечитать Тогда
		
		КлассIntegrationConnection = Кэш.КэшНастроек.КэшIntegrationConnection.Получить(ID);
		
	КонецЕсли;
	
	Если КлассIntegrationConnection = Неопределено Тогда
		
		Если ИнитКоннекшен Тогда
			
			//Если это вызов через InitCOnnection то пробросить идентификатор справочно для уточнения подбора подключения
			ДопПараметрыИнит = Новый Структура;
			Если СуществующийКоннекшен Тогда
				ДопПараметрыИнит.Вставить("Идентификатор", ID);
			КонецЕсли;
			
			Попытка
				
				РезультатКоннешен = _КлассIntegrationConnection_ИнитКоннекшен(Кэш, ДопПараметрыИнит);
				
			Исключение
				
				Отказ = Истина;
				Возврат	МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), "ФайлыНастроекСервер.НовыйIntegrationConnection");
				
			КонецПопытки;
			
			КлассIntegrationConnection	= НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, Перечитать, ИнициироватьДанные", РезультатКоннешен.ConnectionId, Истина, Ложь), Отказ);
			
		Иначе
			
			КлассIntegrationConnection = КлассIntegrationConnection_Инициализировать(Кэш, ДопПараметры, Отказ);
			Если Отказ Тогда
				Возврат	Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnection, "ФайлыНастроекСервер.НовыйIntegrationConnection");
			КонецЕсли;
				
		КонецЕсли;
		
	ИначеЕсли	Не КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные
		И	(Не 	ДопПараметры.Свойство("ИнициироватьДанные")
			Или		ДопПараметры.ИнициироватьДанные) Тогда
			
		//Если у класса не проиничены ини, то инитим, если только не отключено специально.
		КлассIntegrationConnection = КлассIntegrationConnection_Инициализировать(Кэш, Новый Структура("КлассIntegrationConnection", КлассIntegrationConnection), Отказ);
		
		Если Отказ Тогда 
			
			Возврат	Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnection, "ФайлыНастроекСервер.НовыйIntegrationConnection");
			
		КонецЕсли;
		
	ИначеЕсли	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Активен"
		И	(	Не	ДопПараметры.Свойство("ПроверятьАктуальность")
			Или		ДопПараметры.ПроверятьАктуальность) Тогда
			
		//Проверим актуальность класса. Могли удалить
		ДанныеБЛ = _КлассIntegrationConnection_ВыполнитьЧтениеСБЛ(Кэш, КлассIntegrationConnection, Новый Структура("СписокИни"), Отказ);
		
		Если Отказ Тогда
			
			Если ДанныеБЛ.code = 756 Тогда
				
				Отказ = Ложь;
				КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Определим, название создано по шаблону, или это ручное изменение.
	Если Не ЗначениеЗаполнено(КлассIntegrationConnection.Название) Тогда
		
		КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		НазваниеСгенерировано = Истина;
		
	Иначе
		
		НазваниеСгенерировано = (КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура, Отказ));
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ID) Тогда
		
		ID = КлассIntegrationConnection_Идентификатор(Кэш, КлассIntegrationConnection);
		
	КонецЕсли;
	
	Если	Не	ДопПараметры.Свойство("Кэшировать")
		Или		ДопПараметры.Кэшировать Тогда
		Кэш.КэшНастроек.КэшIntegrationConnection.Вставить(ID, КлассIntegrationConnection);
	КонецЕсли;

	ПараметрыКопирования = Новый Структура;
	Если	КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные
		И		ДопПараметры.Свойство("ИнициироватьДанные")
		И Не	ДопПараметры.ИнициироватьДанные Тогда
		
		ПараметрыКопирования.Вставить("Ини", Ложь);
		ПараметрыКопирования.Вставить("Меню", Ложь);
		
	КонецЕсли;
	
	КлассIntegrationConnectionРезультат = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, ПараметрыКопирования, Отказ);
	Если	ДопПараметры.Свойство("Тип") Тогда
		
		КлассIntegrationConnection_ИзменитьТип(Кэш, КлассIntegrationConnectionРезультат, ДопПараметры, Отказ);
		Если НазваниеСгенерировано Тогда
			
			КлассIntegrationConnectionРезультат.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnectionРезультат, Новый Структура, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат КлассIntegrationConnectionРезультат;
	
КонецФункции

//Возвращает экземпляр класса на основе другого класса
&НаКлиенте
Функция		_НовыйIntegrationConnection_НаОсновеКласса(Кэш, ПараметрыКонструктора, Отказ)
	Перем ИниСравнения, ДанныеИни, ПараметрыКонфигурации;
	КлассIntegrationConnection	= КлассIntegrationConnection_Скопировать(Кэш, ПараметрыКонструктора.БазовыйКласс, Новый Структура, Отказ);
	
	//Меняется конфигурация у нового класса. Сабсистем должны совпадать с версией шаблона.
	Если ПараметрыКонструктора.Свойство("ПараметрыКонфигурации", ПараметрыКонфигурации) Тогда
		Если КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
			Если КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
				//С новым шаблоном можно делать что угодно
			ИначеЕсли	Не КлассIntegrationConnection.ПараметрыКонфигурации.subsystem = ПараметрыКонфигурации.subsystem Тогда
					//Или	Не КлассIntegrationConnection.ПараметрыКонфигурации.version = ПараметрыКонфигурации.version Тогда
				Отказ = Истина;
				Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.НовыйIntegrationConnection.НаОсновеКласса",773,,"Не допускается изменение параметров системы для существующего шаблона!");
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(КлассIntegrationConnection.ПараметрыРаботы.Шаблон) Тогда
			КлассШаблонаДляПроверки = НовыйIntegrationConnection(Кэш,  Новый Структура("Идентификатор, ИнициироватьДанные", КлассIntegrationConnection.ПараметрыРаботы.Шаблон, Ложь), Отказ);
			Если	КлассШаблонаДляПроверки.ПараметрыРаботы.Статус = "Активен"
				И	(	Не	КлассШаблонаДляПроверки.ПараметрыКонфигурации.subsystem = ПараметрыКонфигурации.subsystem) Тогда
					//Или	Не	КлассШаблонаДляПроверки.ПараметрыКонфигурации.version = ПараметрыКонфигурации.version) Тогда
				Отказ = Истина;
				Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.НовыйIntegrationConnection.НаОсновеКласса",773,,"Не допускается расхождение параметров системы у подключения, созданного по шаблону!");
			КонецЕсли;
		КонецЕсли;
		КлассIntegrationConnection.ПараметрыКонфигурации = ПараметрыКонфигурации;
	КонецЕсли;
	Если ПараметрыКонструктора.Свойство("Ини", ДанныеИни) Тогда
		Если КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
			КлассIntegrationConnection.Данные.Ини = Новый Структура;
		Иначе
			//Дозапросим ини, если не все получены.
			КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		КонецЕсли;
		Для Каждого КлючИЗначениеИни Из ДанныеИни Цикл
			Если КлючИЗначениеИни.Значение = Неопределено Тогда
				Отказ = Истина;
				Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.НовыйIntegrationConnection.НаОсновеКласса",773,,"Не допускается создание подключения при пустой ини!");
			КонецЕсли;
			КлассIntegrationConnection.Данные.Ини.Вставить(КлючИЗначениеИни.Ключ, КлючИЗначениеИни.Значение);
		КонецЦикла;
		КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные = Истина;
		
		//Переформируем меню у класса
		РезультатУстановки = КлассIntegrationConnection_СформироватьСбисМеню(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатУстановки, "ФайлыНастроекСервер.НовыйIntegrationConnection.НаОсновеКласса");
		КонецЕсли;	
		
		//Чистим структуру ини от возможного "мусора"
		ЧистыеИни	= Кэш.ФормаНастроекОбщее.ОчиститьСтруктуруИниОтСлужебныхЗначений(КлассIntegrationConnection.Данные.Ини);
		СписокИни	= КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		
		//Для сравнения дозапрашиваем только те ини, что установлены.
		КлассДляСравнения = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ПараметрыКонфигурации", КлассIntegrationConnection.ПараметрыРаботы.Шаблон, ПараметрыСтандартнойКонфигурации(Кэш, КлассIntegrationConnection.ПараметрыКонфигурации)), Отказ);
		РезультатУстановки = КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассДляСравнения, Новый Структура("СписокИни_ВО", КлассIntegrationConnection.Данные.Ини), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатУстановки, "ФайлыНастроекСервер.НовыйIntegrationConnection.НаОсновеКласса");
		КонецЕсли;
		//1190111968
		РасхожденияИни = ПолучитьРасхождениеИни(ЧистыеИни, Кэш.ФормаНастроекОбщее.ОчиститьСтруктуруИниОтСлужебныхЗначений(КлассДляСравнения.Данные.Ини), Отказ);
		//Помимо заполнения параметров для кэширования настроек, надо дополнить уже готовые данные в кэше
		Для Каждого УстановленныйИни Из ЧистыеИни Цикл
			ИмяИни = УстановленныйИни.Ключ;
			
			Если КлассДляСравнения.Данные.Ини.Свойство(ИмяИни, ИниСравнения) Тогда
				ЕстьТиповая = ИниСравнения.СбисЕстьТиповая;
			Иначе
				ЕстьТиповая = Ложь;
			КонецЕсли;
			ЕстьИзменение	= Не ЕстьТиповая Или РасхожденияИни.Свойство(ИмяИни); 
			Автообновление	= КлассIntegrationConnection.ПараметрыРаботы.Автообновление И ЕстьТиповая;
			
			//Дополнить данные в ини кэша при контроле изменений
			КлассIntegrationConnection.Данные.Ини[ИмяИни].Вставить("СбисЕстьИзменения",		ЕстьИзменение);
			КлассIntegrationConnection.Данные.Ини[ИмяИни].Вставить("СбисЕстьТиповая",		ЕстьТиповая);
			КлассIntegrationConnection.Данные.Ини[ИмяИни].Вставить("СбисАвтообновление",	Автообновление);
			КлассIntegrationConnection.Данные.Ини[ИмяИни].Вставить("СбисСтандартная",			ЕстьТиповая);
			КлассIntegrationConnection.Данные.Ини[ИмяИни].Вставить("СбисПользовательская",		НЕ ЕстьТиповая ИЛИ ЕстьИзменение);
			КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Добавить(ИмяИни);
		КонецЦикла;
	КонецЕсли;
	Возврат КлассIntegrationConnection;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_КлассIntegrationConnection_private

	
//Функция Сохраняет класс IC, возвращает измененный вариант.
&НаКлиенте
Функция		_КлассIntegrationConnection_Записать(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем ОбновитьИниНаСервере, ТихийРежим;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при записи промежуточных данных, вроде меню и параметров
	
	СбисДополнительныеПараметры = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ДопПараметры,,Ложь);
	//Доп.Параметры по-умолчанию
	Если Не СбисДополнительныеПараметры.Свойство("СообщатьПриОшибке") Тогда
		СбисДополнительныеПараметры.Вставить("СообщатьПриОшибке", Ложь);
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ВернутьОшибку") Тогда
		СбисДополнительныеПараметры.Вставить("ВернутьОшибку", Истина);
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ЕстьОтвет") Тогда
		СбисДополнительныеПараметры.Вставить("ЕстьОтвет", Истина);
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Ложь;
	КонецЕсли;	
	ЗаписьНовогоСоединения	= Ложь;
	ЗаписьСбисПараметров	= Истина;
	ПараметрыОтправки = Новый Структура;
	Если	Не КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален"
		И	Не КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
		ПараметрыОтправки.Вставить("id",		КлассIntegrationConnection.Идентификатор);
	Иначе
		ЗаписьНовогоСоединения = Истина;
		ПараметрыОтправки.Вставить("url",		Кэш.ПараметрыСистемы.Конфигурация.URL);
		ПараметрыОтправки.Вставить("service",	Кэш.КэшНастроек.ПараметрыКонфигурации.service);//service для записи берем из параметров конфигурации системы, т.к. может отличаться для работы с конфигом и коннекшеном
		ПараметрыОтправки.Вставить("subsystem",	КлассIntegrationConnection.ПараметрыКонфигурации.subsystem);
		ПараметрыОтправки.Вставить("version",	Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(КлассIntegrationConnection.ПараметрыКонфигурации.version,"СтрокуВЧисло"), "ЧРГ=; ЧН=0; ЧГ=0"));
		КлассIntegrationConnection.Данные.Параметры.Вставить("Service4Config",	Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
		КлассIntegrationConnection.Данные.Параметры.Вставить("nameSubsystem",	Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(,КлассIntegrationConnection.ПараметрыКонфигурации.subsystem));
		Если Не КлассIntegrationConnection.Данные.Параметры.Свойство("comment") Тогда
			КлассIntegrationConnection.Данные.Параметры.Вставить("comment", "Создано обработкой");
		КонецЕсли;
		Если ЗначениеЗаполнено(КлассIntegrationConnection.Идентификатор) Тогда
			//Если требуется создать подключение с конкретным ИД
			ПараметрыОтправки.Вставить("id", КлассIntegrationConnection.Идентификатор);
		КонецЕсли;
	КонецЕсли;
	Если КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
		ПараметрыОтправки.Вставить("for_all", Истина);
	ИначеЕсли ЗначениеЗаполнено(КлассIntegrationConnection.ПараметрыРаботы.Шаблон) Тогда
		ПараметрыОтправки.Вставить("parent", КлассIntegrationConnection.ПараметрыРаботы.Шаблон);
	КонецЕсли;
	ЕстьИниКЗаписи	= Булево(КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Количество());
	ФормированиеМеню=		КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить
						И	КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Отправлять;
	ВыполнитьЗапись	=		ЕстьИниКЗаписи
						Или ЗаписьНовогоСоединения
						Или КлассIntegrationConnection.ПараметрыРаботы.Изменен;
	
	КлассIntegrationConnection.ПараметрыРаботы.Изменен = Ложь;
	//Если это не запись сбиспараметров, то проверим необходимость обновить сбисменю. Если надо, то выполним запись 	
	ini_array = Новый Массив;
	//Необязательные параметры. Если есть, то передаём
	//ПараметрыОтправки.Вставить("name_connection",	Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(КлассIntegrationConnection.Название));
	ПараметрыОтправки.Вставить("name_connection",	КлассIntegrationConnection.Название);
	ПараметрыОтправки.Вставить("auto_update",		КлассIntegrationConnection.ПараметрыРаботы.Автообновление);
	Если	ЗначениеЗаполнено(КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек) Тогда
		ПараметрыОтправки.Вставить("update_date",	Формат(КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек,"ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""));
	КонецЕсли;
	//Если надо апдейтнуть меню по данным, то делаем только если сразу отправим на БЛ
	Если ФормированиеМеню Тогда
		РезультатГенерацииМеню = КлассIntegrationConnection_СформироватьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатГенерацииМеню, "ФайлыНастроекСервер.КлассIntegrationConnection.Записать");
		КонецЕсли;
	КонецЕсли;
	//Конвертнём и добавим в параметры ини к обновлению на сервисе
	Если ЕстьИниКЗаписи Тогда
		ДанныеСпискаИни = КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection,  Новый Структура("Включено", "01"), Отказ);
		КонвертированныеИни	= Новый Структура;
		Для Каждого ИмяИниВО Из  КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить Цикл
			Если Не КлассIntegrationConnection.Данные.Ини.Свойство(ИмяИниВО) Тогда
				Отказ = Истина;
				Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.ЗаписатьConnection", 785, "Ошибка во входящих данных", "Отсутствует файл настроек " + ИмяИниВО + " в данных к отправке!");
			КонецЕсли;
			КонвертированныеИни.Вставить(ИмяИниВО, КлассIntegrationConnection.Данные.Ини[ИмяИниВО]);
		КонецЦикла;
		КонвертированныеИни = ПреобразованиеВОИни_JSONИни_ВыполнитьПреобразование(КонвертированныеИни);
		
		Для Каждого ИмяИниВО Из КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить Цикл
			ЗаписьИни			= СбисОписаниеИни(Кэш);
			ЗначениеИни			= КонвертированныеИни[ИмяИниВО];
			СписокКлючейОчистить= Новый Массив;
			Для Каждого КлючИЗначениеЗначениеИни Из ЗначениеИни Цикл
				Если Лев(КлючИЗначениеЗначениеИни.Ключ, 4) = "Сбис" Тогда
					СписокКлючейОчистить.Добавить(КлючИЗначениеЗначениеИни.Ключ);
				КонецЕсли;
			КонецЦикла;
			Для Каждого КлючОчистить Из СписокКлючейОчистить Цикл
				ЗначениеИни.Удалить(КлючОчистить);
			КонецЦикла;
			
			ИмяИниJson	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ИмяИниВО, "во_json");
			ЭлементКарты= ДанныеСпискаИни.Карта.НайтиПоЗначению(НРег(ИмяИниJson));
			Если ЭлементКарты = Неопределено Тогда
				//Нет такой ини в карте. Неизвестно, что это. Пропускаем.
				Продолжить;
			КонецЕсли;
			ДанныеСписка= ДанныеСпискаИни.Данные[ДанныеСпискаИни.Карта.Индекс(ЭлементКарты)];
			ЗаполнитьЗначенияСвойств(ЗаписьИни, ДанныеСписка);
		
			ЗаписьИни.data = Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ЗначениеИни);
			ini_array.Добавить(ЗаписьИни);
		КонецЦикла;
	КонецЕсли;
	//Добавим меню в список отправляемых ини
	Если ФормированиеМеню Тогда
		ЗаписьИни = СбисОписаниеИниМеню(Кэш);
		ЗаписьИни.data = Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(КлассIntegrationConnection.Данные.Меню);
		ini_array.Добавить(ЗаписьИни);
		ВыполнитьЗапись = Истина;
	КонецЕсли;
	//Добавим СбисПараметры в отправку		
	Если	КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Обновить
		И	КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять
		И	КлассIntegrationConnection.Данные.Параметры.Количество() Тогда
		ПараметрыОтправки.Вставить("json_connection", Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(КлассIntegrationConnection.Данные.Параметры));
		ВыполнитьЗапись = Истина;
	ИначеЕсли КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
		ОбязательныеПараметрыДляПодсключения = Новый Структура("Service4Config, nameSubsystem, comment");
		ЗаполнитьЗначенияСвойств(ОбязательныеПараметрыДляПодсключения, КлассIntegrationConnection.Данные.Параметры);
		ПараметрыОтправки.Вставить("json_connection", Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ОбязательныеПараметрыДляПодсключения));
		ВыполнитьЗапись = Истина;
	КонецЕсли;
	
	Если ВыполнитьЗапись Тогда
		ПараметрыОтправки = Новый Структура("props, ini", ПараметрыОтправки, ini_array);
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисПоказатьСостояние("Запись настроек", Кэш.ГлавноеОкно);
		КонецЕсли;
		Результат = Кэш.Интеграция.ЗаписатьConnection(Кэш, ПараметрыОтправки, СбисДополнительныеПараметры, Отказ);
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;
	КонецЕсли;
	Если Не Отказ Тогда
		//Обновить подключение после записи
		КлассIntegrationConnection.Идентификатор = Результат;
		КлассIntegrationConnection.ПараметрыРаботы.Изменен = Ложь;
		Если Не КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
			КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Пользовательские";
		КонецЕсли;
		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Активен";
		КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Очистить();
		Если КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять Тогда
			КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Обновить = Ложь;
		КонецЕсли;
		Если КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Отправлять Тогда
			КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить = Ложь;
		КонецЕсли;
		//Здесь нужно для того, чтобы если в каталоге отключили узлы, то и в рабочих ини узлов быть не должно. После переполучения, ини очистятся в конверторе.
		Если ЕстьИниКЗаписи Тогда
			ОчиститьОтключенныеУзлы(КлассIntegrationConnection.Данные.Ини);
		КонецЕсли;
	КонецЕсли;

	Возврат	Результат;
КонецФункции

&НаКлиенте
Функция		_КлассIntegrationConnection_ОсновныеПоля(Кэш)
	//Статус				- возможные значнения: "Новый"(по-умолч), "Активен"(актуален), "Удален"(был удалён в процессе работы с БЛ)
	//ТипНастроек			- возможные значнения: "Стандартные"(по-умолч), "Пользовательские", "Шаблон", "Неизвестно"("Пользовательские"/"Шаблон", при чтении)
	//Автообновление		- возможные значнения: True/False - признак автооподбора config под текущую версию
	//Изменен				- возможные значнения: True/False - признак того, менялся ли класс из интерфейса
	//Инициирован			- возможные значнения: True/False - признак того, инитился ли класс по его слепку с БЛ
	//ДатаИзмененияНастроек - Дата. Последнее изменение настроек
	//Шаблон				- УИД шаблона коннекшена, если есть.
	//Пользователь			- ИД пользователя, которому принадлежит коннекшен.
	//ВерсияКонфиг			- Номер версии конфига, из которого был создан коннешен. При отключенном автообновлении берётся версия отсюда.
	

	ПараметрыРаботыIntegrationConnection = Новый Структура	
	("Статус,	ТипНастроек,	Автообновление,	Изменен,ИнициированаШапка,	ИнициированыДанные,	ДатаИзмененияНастроек, Шаблон, Пользователь, ВерсияКонфиг, Демо"
	,"Новый",	"Стандартные",	Истина,			Ложь,	Ложь,				Ложь,				ТекущаяДата());
	//Определяет работу с настройкой:
	//Отправлять- если нет необходимости записывать на сервис, то флаг переключить в ложь. Тогда изменения будут кэшироваться в выбранном подключении
	//Обновить	- флаг изменения в параметрах. Если переключен в истину, то будет проведена отправка на сервис.
	ПараметрыРаботыIntegrationConnection.Вставить("СбисПараметры",	Новый Структура("Обновить, Отправлять", Ложь, Истина));
	ПараметрыРаботыIntegrationConnection.Вставить("СбисМеню",		Новый Структура("Обновить, Отправлять", Ложь, Истина));
	//Список ини, которые требуется отправить на БЛ при записи.
	ПараметрыРаботыIntegrationConnection.Вставить("СбисИни",			Новый Структура("СписокОтправить", Новый Массив));
	Результат = Новый Структура(
	"ПараметрыРаботы,						Данные,									Название,	ПараметрыКонфигурации,	Идентификатор"
	,ПараметрыРаботыIntegrationConnection,	Новый Структура("Ини, Прочие, Меню, Параметры"),"");	
	Возврат Результат;
КонецФункции

//Функция заполняет класс по данным БЛ
&НаКлиенте
Функция		_КлассIntegrationConnection_ЗаполнитьПоДанным(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем ДанныеИниНаЧтение, СтрокаJson, СписокНаКонтроль, ТипИни;
	СбисДанныеБЛ	= ДопПараметры.ДанныеБЛ;
	//Если указано, какие ини читали, то проконтролировать, что всё получено в полном объеме.
	КонтролироватьЧтениеИни = ДопПараметры.Свойство("КонтрольИни", СписокНаКонтроль);
	
	Если Не КлассIntegrationConnection.ПараметрыРаботы.ИнициированаШапка Тогда
		КлассIntegrationConnection.ПараметрыРаботы.ИнициированаШапка = Истина;
		Если СбисДанныеБЛ.Свойство("ID", КлассIntegrationConnection.Идентификатор) Тогда
			КлассIntegrationConnection.Идентификатор = Строка(КлассIntegrationConnection.Идентификатор);
			КлассIntegrationConnection.ПараметрыРаботы.Статус		= "Активен";
			КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек	= "Шаблон";
		Иначе
			КлассIntegrationConnection.Идентификатор = "";
		КонецЕсли;
		ПараметрыКонфигурации	= Новый Структура("service,subsystem,url", СбисДанныеБЛ.service, СбисДанныеБЛ.subsystem);											
		ВерсияКонфига			=  ?(СбисДанныеБЛ.Свойство("version_config"), СбисДанныеБЛ.version_config, СбисДанныеБЛ.version);
		ПараметрыКонфигурации.Вставить("version", ВерсияКонфига);
		КлассIntegrationConnection.ПараметрыКонфигурации = ПараметрыКонфигурации;
		КлассIntegrationConnection.ПараметрыКонфигурации.version = Кэш.ОбщиеФункции.СериализоватьВерсию(КлассIntegrationConnection.ПараметрыКонфигурации.version);
		Если	Не ДопПараметры.Свойство("Перечитать")
			Или	Не ДопПараметры.Перечитать Тогда
			КлассIntegrationConnectionСуществующий = Кэш.КэшНастроек.КэшIntegrationConnection.Получить(КлассIntegrationConnection_Идентификатор(Кэш, КлассIntegrationConnection));
			Если Не КлассIntegrationConnectionСуществующий = Неопределено Тогда
				КлассIntegrationConnection = КлассIntegrationConnectionСуществующий;
				Возврат _КлассIntegrationConnection_ЗаполнитьПоДанным(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
			КонецЕсли;
		КонецЕсли;
		
		Если Не СбисДанныеБЛ.Свойство("auto_update", КлассIntegrationConnection.ПараметрыРаботы.Автообновление) Тогда
			КлассIntegrationConnection.ПараметрыРаботы.Автообновление = Истина;
		ИначеЕсли ТипЗнч(КлассIntegrationConnection.ПараметрыРаботы.Автообновление) = Тип("Строка") Тогда
			КлассIntegrationConnection.ПараметрыРаботы.Автообновление = Кэш.РаботаСJSON.СбисПрочитатьJSON(КлассIntegrationConnection.ПараметрыРаботы.Автообновление);
		КонецЕсли;
		Если СбисДанныеБЛ.Свойство("user", КлассIntegrationConnection.ПараметрыРаботы.Пользователь) Тогда
			КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек	= "Пользовательские";
		Иначе
			КлассIntegrationConnection.ПараметрыРаботы.Пользователь	= "";
		КонецЕсли;
		КлассIntegrationConnection.ПараметрыРаботы.ВерсияКонфиг = Кэш.ОбщиеФункции.СериализоватьВерсию(ВерсияКонфига);
		Если Не СбисДанныеБЛ.Свойство("name_connection", КлассIntegrationConnection.Название) Тогда
			КлассIntegrationConnection.Название	= СбисДанныеБЛ.name_config;
		Иначе//Так, как для полей в JSON идёт двойное экранирование, снимаем его для названия
			Попытка
				КлассIntegrationConnection.Название	= Кэш.РаботаСJSON.СбисПрочитатьJSON("""" + КлассIntegrationConnection.Название + """");
			Исключение
				//Некорректное название. Оставляем как есть?
			КонецПопытки;
		КонецЕсли;
		СбисДанныеБЛ.Свойство("parent", КлассIntegrationConnection.ПараметрыРаботы.Шаблон);
		
		Если СбисДанныеБЛ.Свойство("update_date", КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек) Тогда//Дата последней правки настроек
			КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек =	Дата(Лев(СтрЗаменить(СтрЗаменить(СтрЗаменить(КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек,
													"-",""),
													" ",""),
													":", ""),
													14));
		Иначе
			КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек = ТекущаяДата();
		КонецЕсли;
		
		Если Не ПустаяСтрока(КлассIntegrationConnection.Идентификатор) Тогда
			КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = ?(ПустаяСтрока(КлассIntegrationConnection.ПараметрыРаботы.Пользователь), "Шаблон", "Пользовательские");
		КонецЕсли;
		
		Если Не СбисДанныеБЛ.Свойство("url", ПараметрыКонфигурации.url) Тогда
			ПараметрыКонфигурации.Удалить("url");
		КонецЕсли;
		КлассIntegrationConnection.Данные.Параметры = Новый Структура;
	КонецЕсли;
	//Разбор и обновление сбисПараметров, в кэше всегда актуальные, не пересекаются с установленными
	Если	СбисДанныеБЛ.Свойство("json_connection", СтрокаJson)
		И	ЗначениеЗаполнено(СтрокаJson) Тогда
		СбисСтрокаJson = Кэш.РаботаСJSON.СбисПрочитатьJSON(СтрокаJson);
		Если Не ТипЗнч(СбисСтрокаJson) = Тип("Структура") Тогда
			Отказ = Истина;
			Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.КлассIntegrationConnection.ЗаполнитьПоДанным", 785, "Ошибка во входящих данных", "Неизвестная структура параметров json_connection", СбисСтрокаJson);
		КонецЕсли;
		Если КлассIntegrationConnection.Данные.Параметры = Неопределено Тогда
			КлассIntegrationConnection.Данные.Параметры = Новый Структура;
		КонецЕсли;
		СтруктураРазобранныхПараметров = Кэш.ФормаНастроекОбщее.ОбработатьСтруктуруПараметров(СбисСтрокаJson); 
		Для Каждого ЭлементПараметра Из СтруктураРазобранныхПараметров Цикл
			КлассIntegrationConnection.Данные.Параметры.Вставить(ЭлементПараметра.Ключ, ЭлементПараметра.Значение);
		КонецЦикла;
	КонецЕсли;
	
	//Обработаем данные ини, если имеются
	Если	СбисДанныеБЛ.Свойство("data", ДанныеИниНаЧтение)
		И	ЗначениеЗаполнено(ДанныеИниНаЧтение) Тогда//При пакетном чтении ини, в data будет массив строк.
		Если Не ТипЗнч(ДанныеИниНаЧтение) = Тип("Массив") Тогда
			Списокdata = Новый Массив;
			Списокdata.Добавить(ДанныеИниНаЧтение);
			ДанныеИниНаЧтение = Списокdata;
		Иначе
			Списокdata = ДанныеИниНаЧтение;
		КонецЕсли;
		ДанныеИниНаЧтение = Новый Структура;
		Для Каждого Строкаdata Из Списокdata Цикл
			Попытка
				Соединениеdata = Кэш.РаботаСJSON.СбисПрочитатьJSON(Строкаdata);
				Для	Каждого КлючИЗначение Из Соединениеdata Цикл
					ИмяИни = КлючИЗначение.Ключ;
					Если	КонтролироватьЧтениеИни Тогда
						КлючКонтроля	= НРег(ИмяИни);
						ЗначениеКонтроля= СписокНаКонтроль.Получить(КлючКонтроля);
						Если ЗначениеКонтроля = Неопределено Тогда
							Отказ = Истина;
							Возврат	Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.ЗаполнитьПоДанным", 100, "Ошибка разбора файлов настроек.", КлассIntegrationConnection.Название + СтрЗаменить(": Неизвестная ини {0} в ответе.", "{0}", ИмяИни));
						КонецЕсли;
						СписокНаКонтроль.Удалить(КлючКонтроля);
					КонецЕсли;
					ЗначениеИни = Неопределено;
					Если Не КлючИЗначение.Значение.Свойство("data", ЗначениеИни) Тогда
						ЗначениеИни = КлючИЗначение.Значение;
					КонецЕсли;
					//В меню флаги не нужны
					Если ИмяИни = "сбисМеню" Тогда
						КлассIntegrationConnection.Данные.Меню = ЗначениеИни;
						Продолжить;
					КонецЕсли;
					ДанныеИниНаЧтение.Вставить(ИмяИни, ЗначениеИни);
					//Флаг типовой ини. Если свойства нет, подразумевается, что это и так типовая
					Если КлючИЗначение.Значение.Свойство("standart") Тогда
						ДанныеИниНаЧтение[ИмяИни].Вставить("СбисЕстьТиповая",(КлючИЗначение.Значение.standart = 1));
					Иначе
						ДанныеИниНаЧтение[ИмяИни].Вставить("СбисЕстьТиповая",Истина);
					КонецЕсли;
					Если Не ДанныеИниНаЧтение[ИмяИни].Свойство("ТипИни") И КонтролироватьЧтениеИни Тогда
						ДанныеИниНаЧтение[ИмяИни].Вставить("ТипИни", Новый Структура("Значение", ЗначениеКонтроля.type));
					КонецЕсли;
					//Флаг пользовательской ини. Если свойства нет, подразумевается, что пользовательской тоже нет.
					ДанныеИниНаЧтение[ИмяИни].Вставить("СбисЕстьИзменения",	(КлючИЗначение.Значение.Свойство("custom") И КлючИЗначение.Значение.custom = 1));
					//Флаг автообновления ини. Если включено и есть типовая.
					ДанныеИниНаЧтение[ИмяИни].Вставить("СбисАвтообновление", (КлассIntegrationConnection.ПараметрыРаботы.Автообновление И ДанныеИниНаЧтение[ИмяИни].СбисЕстьТиповая));
					//Флаг указывает на то, есть ли вообще стандартная настрока
					ДанныеИниНаЧтение[ИмяИни].Вставить("СбисСтандартная", ДанныеИниНаЧтение[ИмяИни].СбисЕстьТиповая);
					//Флаг присутсвия доработок, либо полностью пользовательская настройка
					ДанныеИниНаЧтение[ИмяИни].Вставить("СбисПользовательская", НЕ ДанныеИниНаЧтение[ИмяИни].СбисЕстьТиповая ИЛИ ДанныеИниНаЧтение[ИмяИни].СбисЕстьИзменения);
				КонецЦикла;
			Исключение
				Отказ = Истина;
				Возврат	Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.ЗаполнитьПоДанным", 100, "Ошибка разбора файлов настроек.", КлассIntegrationConnection.Название + ": " + ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		Если ЗначениеЗаполнено(ДанныеИниНаЧтение) Тогда
			ПараметрыКонвертации = Новый Структура("ОчищатьОтключенные", Истина);
			ДанныеИни = _КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_Клиент(ДанныеИниНаЧтение, ПараметрыКонвертации);
			Для Каждого КлючИЗначениеИни Из ДанныеИни Цикл
				ИмяИни	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначениеИни.Ключ);
				Если		КлючИЗначениеИни.Значение.Свойство("ТипИни", ТипИни)
					И	Не	Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни.Найти(ТипИни.Значение) = Неопределено Тогда
					Если КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
						КлассIntegrationConnection.Данные.Ини = Новый Структура;
					КонецЕсли;
					КлассIntegrationConnection.Данные.Ини.Вставить(ИмяИни, КлючИЗначениеИни.Значение);
				Иначе
					Если КлассIntegrationConnection.Данные.Прочие = Неопределено Тогда
						КлассIntegrationConnection.Данные.Прочие = Новый Структура;
					КонецЕсли;
					КлассIntegrationConnection.Данные.Прочие.Вставить(ИмяИни, КлючИЗначениеИни.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если	КонтролироватьЧтениеИни
		И	СписокНаКонтроль.Количество() Тогда
		СтрокаОшибки = "";
		Для Каждого  ЭлементНаКонтроль Из СписокНаКонтроль Цикл
			СтрокаОшибки = СтрокаОшибки + ЭлементНаКонтроль.Значение.name + ", ";
		КонецЦикла;
		СтрокаОшибки = Лев(СтрокаОшибки, СтрДлина(СтрокаОшибки) - 2);
		Отказ = Истина;
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.ЗаполнитьПоДанным", 100, "Ошибка разбора файлов настроек.", КлассIntegrationConnection.Название + СтрЗаменить(": не получены файлы настроек {0}.", "{0}", СтрокаОшибки));
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

//Функция возвращает ини "от класса"
&НаКлиенте
Функция		_КлассIntegrationConnection_ВыполнитьЧтениеСБЛ(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем СписокИниПолучить, ЗначениеИни, ДопПараметрыЧтения;
	Если Не	ДопПараметры.Свойство("ДополнительныеПараметры", ДопПараметрыЧтения) Тогда
		ДопПараметрыЧтения = Новый Структура("ЕстьРезультат", Истина);
	КонецЕсли;
	ДопПараметры.Свойство("СписокИни", СписокИниПолучить);
	Если СписокИниПолучить = "все" Тогда
		СписокИниПолучить = Новый Массив;
	КонецЕсли;
	
	ПараметрыСообщения = Новый Структура();
	МетодЧтения = "ReadConnection";
	Если	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Стандартные"
		Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
		МетодЧтения = "ReadConfig";
	КонецЕсли;
		
	Если МетодЧтения = "ReadConfig" Тогда
		Запрос_Фильтр = ПараметрыСтандартнойКонфигурации(Кэш, КлассIntegrationConnection.ПараметрыКонфигурации);
		Запрос_Фильтр.Вставить("version", Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(Запрос_Фильтр.version, "СтрокуВЧисло"), "ЧРГ=; ЧН=0; ЧГ=0"));
		
		ПараметрыСообщения = Новый Структура("props, ini", Запрос_Фильтр, СписокИниПолучить);
		
		Если ПустаяСтрока(ПараметрыСообщения.props.subsystem) Тогда//Это пользовательская конфигурация. Генерируем ряд обязательных параметров, всё остальное берётся по-умолчанию.
			ДанныеБЛ = Новый Структура
			("name_config,						auto_update,service,							subsystem,							version"
			,"Пользовательская конфигурация",	Ложь,		ПараметрыСообщения.props.service,	ПараметрыСообщения.props.subsystem,	ПараметрыСообщения.props.version);
		Иначе
			ДанныеБЛ = ВыполнитьПолучениеИни(Кэш, МетодЧтения, ПараметрыСообщения, ДопПараметрыЧтения, Отказ);//Получаем типовые конфиги.
			Если ДанныеБЛ = Неопределено Тогда
				Отказ = Истина;
				ИмяЗапрашиваемойКонфигурации = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(Запрос_Фильтр.service, Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(Запрос_Фильтр));
				Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.ВыполнитьЧтениеИни", 765, "Значение не найдено в таблице настроек", СтрЗаменить("Настройки {0} не найдены!", "{0}", ИмяЗапрашиваемойКонфигурации));
			КонецЕсли;
		КонецЕсли;
	Иначе
		Запрос_Фильтр = Новый Структура;
		Запрос_Фильтр.Вставить("id",		Строка(КлассIntegrationConnection_Идентификатор(Кэш, КлассIntegrationConnection, "Чтение")));
		Запрос_Фильтр.Вставить("version",	Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(КлассIntegrationConnection.ПараметрыКонфигурации.Version,"СтрокуВЧисло"),"ЧРГ=; ЧН=0; ЧГ=0"));
		Если	ДопПараметры.Свойство("ТолькоПользовательские")
			И	ДопПараметры.ТолькоПользовательские Тогда
			//Если получаем только пользовательские изменения
			Запрос_Фильтр.Вставить("read_config", Ложь);
		КонецЕсли;	
		ПараметрыСообщения = Новый Структура("props, ini", Запрос_Фильтр, СписокИниПолучить);		
		ДанныеБЛ = ВыполнитьПолучениеИни(Кэш, МетодЧтения, ПараметрыСообщения, ДопПараметрыЧтения, Отказ);
	КонецЕсли;
	Если Отказ Тогда 
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеБЛ, "ФайлыНастроекСервер.КлассIntegrationConnection.ВыполнитьЧтениеСБЛ");
	КонецЕсли;
	Возврат ДанныеБЛ;
КонецФункции

&НаКлиенте                                  
Функция		_КлассIntegrationConnection_ИнитКоннекшен(Кэш, ДопПараметры) Экспорт
	
	ПараметрыВызова1 = Новый Структура(
	"ExtSysType,Connector, ExtSysSubtype, ExtSysSubtypeTitle, ExtSysSubtypeVersion, ProductId, ProductVersion, ExtSysUid, ConnectionId",
	"1С",		"Dom1C");
	ПараметрыВызова1.ExtSysSubtype			= Кэш.ПараметрыСистемы.Конфигурация.Имя;
	ПараметрыВызова1.ExtSysSubtypeTitle		= Кэш.ПараметрыСистемы.Конфигурация.ПодробнаяИнформация;
	ПараметрыВызова1.ExtSysSubtypeVersion	= Кэш.ПараметрыСистемы.Конфигурация.Версия;
	ПараметрыВызова1.ExtSysUid				= Кэш.ПараметрыСистемы.Конфигурация.УИДИнтеграции;
	ПараметрыВызова1.ProductVersion			= Кэш.ПараметрыСистемы.Обработка.Версия;
	ПараметрыВызова1.ProductId				= Кэш.ПараметрыСистемы.Обработка.ИмяПродукта;
	Если ДопПараметры.Свойство("Идентификатор") Тогда
		ПараметрыВызова1.ConnectionId		= ДопПараметры.Идентификатор;
	КонецЕсли;
	
	ПараметрыВызова2	= Новый Структура("Format, Type", Кэш.КэшНастроек.ПараметрыКонфигурации.service, "Меню");
	ПараметрыИнит		= Новый Структура("Params, ExtSysSettings", ПараметрыВызова1, ПараметрыВызова2);
	ДопПараметрыВызова	= Новый Структура("Кэш, Отказ", Кэш, Ложь);
	РезультатВызова		= Кэш.Интеграция.АПИ3_ИнитКоннекшен(ПараметрыИнит, ДопПараметрыВызова);
	Если ДопПараметрыВызова.Отказ Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение(РезультатВызова, "ФайлыНастроекОбщее.Вызов_ИнитКоннекшен");
	КонецЕсли;
	
	Возврат РезультатВызова;
КонецФункции

//Процедура выполняет конвертацию полученных ини после их получения
&НаКлиенте
Функция		_КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_Клиент(ДанныеИни, ПараметрыКонвертации)
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат _КлассIntegrationConnection_ПреобразованиеJSONИниВОИни(ДанныеИни, ПараметрыКонвертации);
	//#Иначе
	//	Возврат _КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_Сервер(ДанныеИни, ПараметрыКонвертации);
	//#КонецЕсли	
КонецФункции

//Процедура выполняет конвертацию полученных ини после их получения
&НаКлиенте
Функция		_КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_Сервер(Знач ДанныеИни, Знач ПараметрыКонвертации)
	Возврат _КлассIntegrationConnection_ПреобразованиеJSONИниВОИни(ДанныеИни, ПараметрыКонвертации)
КонецФункции

//Процедура выполняет конвертацию полученных ини после их получения
&НаКлиенте
Функция		_КлассIntegrationConnection_ПреобразованиеJSONИниВОИни(ДанныеИни, ПараметрыКонвертации)
	Ини = Новый Структура();
	Для Каждого КлючИЗначение Из ДанныеИни Цикл
		Если КлючИЗначение.Ключ = "СбисМеню" Тогда
			ЗначениеИни = КлючИЗначение.Значение;
		Иначе
 			ЗначениеИни = _КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_ВыполнитьПреобразование(КлючИЗначение.Значение, ПараметрыКонвертации);
			Ини.Вставить(КлючИЗначение.Ключ , ЗначениеИни);
		КонецЕсли;
	КонецЦикла;
	Возврат Ини;
КонецФункции

//Функция преобразует структуру файлов настроек к "привычному" для обработки виду.
&НаКлиенте
Функция		_КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_ВыполнитьПреобразование(КэшИни, ДопПараметры) Экспорт
	
	СтруктураНастроек	= Новый	Структура;//
	КонтекстКонвертации	= Новый Структура;
	Если Не ДопПараметры.Свойство("Уровень") Тогда
		КонтекстКонвертации.Вставить("Уровень", 0);
	КонецЕсли;
		Для Каждого КлючЗначениеПараметра Из ДопПараметры	Цикл 
			КонтекстКонвертации.Вставить(КлючЗначениеПараметра.Ключ, КлючЗначениеПараметра.Значение);
		КонецЦикла;
	КонтекстКонвертации.Уровень = КонтекстКонвертации.Уровень + 1;
	Для Каждого Элемент Из КэшИни Цикл
		Если	Элемент.Ключ="СписокДокументов" Тогда
			Продолжить;
		КонецЕсли;
		Если	ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			ЭлементЗначение = Неопределено;
			Если	Элемент.Значение.Свойство("Значение",ЭлементЗначение)
				И	ТипЗнч(ЭлементЗначение) = Тип("Структура") Тогда
				СтруктураВставки = Новый Структура;
				ЭлементИни = Элемент.Значение;
				Для Каждого ЭлементСтруктуры Из ЭлементЗначение Цикл
					СтруктураВставки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);//	
				КонецЦикла;
				СтруктураНастроек.Вставить(Элемент.Ключ, _КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_ВыполнитьПреобразование(СтруктураВставки,КонтекстКонвертации));//					
			Иначе
				СтруктураНастроек.Вставить(Элемент.Ключ, _КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_ВыполнитьПреобразование(Элемент.Значение,КонтекстКонвертации));//
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ПодСтруктура = Новый Структура;
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				СтруктураЭлемента = Новый Структура;
				Для Каждого Поле Из ЭлементМассива Цикл
					Если Поле.Ключ<>"Имя" Тогда
						СтруктураЭлемента.Вставить(Поле.Ключ, Поле.Значение);	
					КонецЕсли;
				КонецЦикла;
				КлючПодструктуры = ЭлементМассива.Имя;
				ПодСтруктура.Вставить(КлючПодструктуры,СтруктураЭлемента);	
			КонецЦикла;
			КонтекстКонвертации.Вставить("УровеньМассив", КонтекстКонвертации.Уровень);
			КлючВставить	= Элемент.Ключ;
			ЗначениеВставить= _КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_ВыполнитьПреобразование(ПодСтруктура,КонтекстКонвертации);//
			Если	КлючВставить = "Значение"
				И	КэшИни.Количество() = 1
				И	ДопПараметры.Свойство("УровеньМассив")
				И	КонтекстКонвертации.Уровень - ДопПараметры.УровеньМассив = 2 Тогда
				//На 2 уровеня выше был массив, значит это может быть структура с удаленным дублирующимся именем . Пример: <Сотрудник Имя="Сотрудник"><Элемент/></Сотрудник> Превращается в {"Сотрудник": {"Элемент"}}
				СтруктураНастроек = ЗначениеВставить;//
			Иначе
				СтруктураНастроек.Вставить(Элемент.Ключ, ЗначениеВставить);//
			КонецЕсли;
			КонтекстКонвертации.Удалить("УровеньМассив");
		ИначеЕсли Лев(Элемент.Ключ,6)="Отбор_" Тогда
			ИмяОтбора = Сред(Элемент.Ключ, 7);
			Если	Элемент.Значение = ""
				И	КонтекстКонвертации.Свойство("ОчищатьОтключенные")
				И	КонтекстКонвертации.ОчищатьОтключенные Тогда
				Продолжить;//Отключенные узлы отбора не попадают в итоговую инишку.
			КонецЕсли;
			Если Не СтруктураНастроек.Свойство("Отбор") Тогда
				СтруктураНастроек.Вставить("Отбор", Новый Структура(ИмяОтбора,Элемент.Значение));//			
			Иначе
				СтруктураНастроек.Отбор.Вставить(ИмяОтбора,Элемент.Значение);
			КонецЕсли;
		Иначе
			ЗначениеКонтекста = Неопределено;
			Если КонтекстКонвертации.Свойство("Удалять",ЗначениеКонтекста)
				И ЗначениеКонтекста = Элемент.Ключ Тогда
				Продолжить;
			ИначеЕсли	КонтекстКонвертации.Свойство("ОбернутьЗначение", ЗначениеКонтекста)
				И	Не	ЗначениеКонтекста = Элемент.Ключ Тогда
				СтруктураНастроек.Вставить(Элемент.Ключ, Новый Структура(ЗначениеКонтекста, Элемент.Значение));
			Иначе
				СтруктураНастроек.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураНастроек
	
КонецФункции

//Функция преобразует структуру файлов настроек к "привычному" для обработки виду.
&НаКлиенте
Функция		_КлассIntegrationConnection_СтрукутраСБИСПараметровПоУмолчанию()
	Возврат Новый Структура("ДатаПоследнегоЗапросаСтатусов, ИдентификаторПоследнегоСобытия, ДатНачЧтенияСтатусов, ДатКнцЧтенияСтатусов", "", "", "", "");
КонецФункции


#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_КлассIntegrationConnection_public

&НаКлиенте
Функция		КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем ТипНастроекДляНазвания;
	Если Не ДопПараметры.Свойство("Тип", ТипНастроекДляНазвания) Тогда
		ТипНастроекДляНазвания = КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек;
	КонецЕсли;
	//Если есть шаблон, то название генерируем по шаблону.
	Если	Не  ТипНастроекДляНазвания = "Стандартные"
		И		ЗначениеЗаполнено(КлассIntegrationConnection.ПараметрыРаботы.Шаблон) Тогда
		КлассIntegrationШаблон = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ИнициироватьДанные", КлассIntegrationConnection.ПараметрыРаботы.Шаблон, Ложь), Отказ);
		КлассIntegrationConnectionНазвание = КлассIntegrationШаблон.Название;
	Иначе	
		ПрефиксНастроек = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(КлассIntegrationConnection.ПараметрыКонфигурации);
		КлассIntegrationConnectionНазвание = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(КлассIntegrationConnection.ПараметрыКонфигурации.service,ПрефиксНастроек);
	КонецЕсли;
	Если		ТипНастроекДляНазвания = "Шаблон" Тогда
		КлассIntegrationConnectionНазвание = "Шаблон для " + КлассIntegrationConnectionНазвание;
	ИначеЕсли   ТипНастроекДляНазвания = "Создание по шаблону" Тогда
		КлассIntegrationConnectionНазвание = "Создание по шаблону " + КлассIntegrationConnectionНазвание;
	КонецЕсли;
	Возврат КлассIntegrationConnectionНазвание;
КонецФункции

&НаКлиенте
Функция		КлассIntegrationConnection_ИзменитьТип(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	ТекущийТипКласс = КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек;
	Если ДопПараметры.Тип = "Создание по шаблону" Тогда
		Если		Не	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
			Отказ = Истина;
			Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.ИзменитьТип", 773, "Ошибка при изменении типа настроек", СтрЗаменить("Класс настроек  {0} не шаблон!", "{0}", КлассIntegrationConnection.Название));
		ИначеЕсли		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
					Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален" Тогда
			Отказ = Истина;
			Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.ИзменитьТип", 773, "Ошибка при изменении типа настроек", СтрЗаменить("Класс настроек  {0} не записан!", "{0}", КлассIntegrationConnection.Название));
		КонецЕсли;
		НовыйКлассIntegrationConnection = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура, Отказ) Тогда
			НовыйКлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		КонецЕсли;
		НовыйКлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый";
		НовыйКлассIntegrationConnection.ПараметрыРаботы.Шаблон = КлассIntegrationConnection.Идентификатор;
		НовыйКлассIntegrationConnection.Идентификатор = "";
		КлассIntegrationConnection = НовыйКлассIntegrationConnection;
	КонецЕсли;
	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = ДопПараметры.Тип;
	Если ТекущийТипКласс = "Стандартные" Тогда
		//Меняется со стандартного конфига на что-то иное
		КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если ДопПараметры.Тип = "Пользовательские" Тогда
			КлассIntegrationConnection.ПараметрыРаботы.Пользователь = Кэш.ГлавноеОкно.Пользователь;
		КонецЕсли;
	КонецЕсли;
	Возврат КлассIntegrationConnection;
КонецФункции

&НаКлиенте
Процедура	КлассIntegrationConnection_Изменить(КлассIntegrationConnection, ПараметрыИзменить)
	Кэш		= ПараметрыИзменить.Кэш;
	Отказ	= Ложь;
	НовыйКлассIntegrationConnection = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
	Если Отказ Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение(НовыйКлассIntegrationConnection, "ФайлыНастроекСервер.КлассIntegrationConnection.Изменить");
	КонецЕсли;
	Если ПараметрыИзменить.Свойство("Тип") Тогда
		ТекущийТипКласс = КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек;
		Если ПараметрыИзменить.Тип = "Создание по шаблону" Тогда
			Если		Не	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
				МодульОбъектаКлиент().ВызватьСбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.Изменить", 773, "Ошибка при изменении типа настроек", СтрЗаменить("Класс настроек  {0} не шаблон!", "{0}", КлассIntegrationConnection.Название));
			ИначеЕсли		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
						Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален" Тогда
				МодульОбъектаКлиент().ВызватьСбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.Изменить", 773, "Ошибка при изменении типа настроек", СтрЗаменить("Класс настроек  {0} не записан!", "{0}", КлассIntegrationConnection.Название));
			КонецЕсли;
			Если КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура, Отказ) Тогда
				НовыйКлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ПараметрыИзменить, Отказ);
			КонецЕсли;
			НовыйКлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый";
			НовыйКлассIntegrationConnection.ПараметрыРаботы.Шаблон = КлассIntegrationConnection.Идентификатор;
			НовыйКлассIntegrationConnection.Идентификатор = "";
		КонецЕсли;
		НовыйКлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = ПараметрыИзменить.Тип;
		Если ТекущийТипКласс = "Стандартные" Тогда
			//Меняется со стандартного конфига на что-то иное
			НовыйКлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, НовыйКлассIntegrationConnection, ПараметрыИзменить, Отказ);
			Если ПараметрыИзменить.Тип = "Пользовательские" Тогда
				НовыйКлассIntegrationConnection.ПараметрыРаботы.Пользователь = Кэш.ГлавноеОкно.Пользователь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыИзменить.Свойство("ПараметрыКонфигурации") Тогда
		ПараметрыИнит = Новый Структура("ПараметрыКонфигурации, ИнициироватьДанные", ПараметрыИзменить.ПараметрыКонфигурации, КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные);
		НовыйКлассIntegrationConnection = НовыйIntegrationConnection(Кэш, ПараметрыИнит, Отказ);
		Если Отказ Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(НовыйКлассIntegrationConnection, "ФайлыНастроекСервер.КлассIntegrationConnection.Изменить");
		КонецЕсли;

		НовыйКлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить = Истина;
		Если	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон"
			И	НовыйКлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
			КлассIntegrationConnection_Изменить(НовыйКлассIntegrationConnection, Новый Структура("Тип, Кэш", "Шаблон", Кэш));
			НовыйКлассIntegrationConnection.Идентификатор = КлассIntegrationConnection.Идентификатор;
		КонецЕсли;
	КонецЕсли;

	КлассIntegrationConnection = НовыйКлассIntegrationConnection;
	
КонецПроцедуры

//Функция дозаполняет класс ини недостающими данными
&НаКлиенте
Функция		КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем СписокИниПоиска, ДанныеСпискаДляЧтения;
	ПараметрыЗапросаИни	= Новый Структура;
	Если Не ДопПараметры.Свойство("ДанныеСписка", ДанныеСпискаДляЧтения) Тогда
		//Если требуется получить список, идентичный установленным ини
		Если ДопПараметры.Свойство("СписокИни_ВО", СписокИниПоиска) Тогда
			СтруктураИскать = Новый Структура("Включено, Имя", "01", Новый Массив);
			Если ТипЗнч(СписокИниПоиска) = Тип("Структура") Тогда
				Для Каждого УстановленныйФайл Из СписокИниПоиска Цикл
					СтруктураИскать.Имя.Добавить(ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, УстановленныйФайл.Ключ, "во_json"));
				КонецЦикла;
			Иначе	
				Для Каждого УстановленныйФайл Из ДопПараметры.СписокИни_ВО Цикл
					СтруктураИскать.Имя.Добавить(ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, УстановленныйФайл, "во_json"));
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
            //Ини не определены, берём все включенные
            СтруктураИскать = Новый Структура("Включено", "1");
		Иначе
			//Ищем ини те, что установлены в структуре но не определены
			СтруктураИскать = Новый Структура("Включено, Имя", "01", Новый Массив);
			Для Каждого КлючИЗначениеИни Из КлассIntegrationConnection.Данные.Ини Цикл
				Если Не КлючИЗначениеИни.Значение = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтруктураИскать.Имя.Добавить(ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначениеИни.Ключ, "во_json"));
			КонецЦикла;
			Если Не СтруктураИскать.Имя.Количество() Тогда
				Возврат КлассIntegrationConnection.Данные.Ини;
			КонецЕсли;	
		КонецЕсли;
		ПараметрыСборкаСписка = Новый Структура("Искать", СтруктураИскать);
		Если ДопПараметры.Свойство("ДоступныеТипыИни") Тогда
			ПараметрыСборкаСписка.Вставить("ДоступныеТипыИни", ДопПараметры.ДоступныеТипыИни);
		КонецЕсли;
		//Пропустим требуемый список через сбисМеню подключения на предмет того, а есть ли там вообще такая ини
		ДанныеСписка = КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, ПараметрыСборкаСписка, Отказ);
		Если Отказ Тогда
			Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеСписка, "ФайлыНастроекСервер.КлассIntegrationConnection.ДозапроситьИни");
		КонецЕсли;
		ДанныеСпискаДляЧтения = ДанныеСписка["Данные"];
	КонецЕсли;
	ПараметрыЗапросаИни.Вставить("СписокИни", ДанныеСпискаДляЧтения);
	Если	ДопПараметры.Свойство("ТолькоПользовательские") Тогда
		ПараметрыЗапросаИни.Вставить("ТолькоПользовательские", ДопПараметры.ТолькоПользовательские);
	КонецЕсли;

	//Лутаем ини по списку
	РезультатДозапроса = КлассIntegrationConnection_ПолучитьИни(Кэш, КлассIntegrationConnection, ПараметрыЗапросаИни, Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(РезультатДозапроса, "ФайлыНастроекСервер.КлассIntegrationConnection.ДозапроситьИни");
	КонецЕсли;
	ПолучитьТолькоПользовательскиеИзменения = ДопПараметры.Свойство("ТолькоПользовательские") И ДопПараметры.ТолькоПользовательские;
	
	Результат = Новый Структура;
	Для Каждого ЭлементСписка Из ДанныеСпискаДляЧтения Цикл
		КлючИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементСписка.name);
		Если Не		РезультатДозапроса.Свойство(КлючИни)
				И	ПолучитьТолькоПользовательскиеИзменения Тогда
			Продолжить;
		КонецЕсли;
		Результат.Вставить(КлючИни, РезультатДозапроса[КлючИни]);
	КонецЦикла;
	Возврат Результат;
КонецФункции

//Функция определяет наличие изменений в выбранных настройках. осущствлённых пользователем
&НаКлиенте                                  
Функция		КлассIntegrationConnection_ЕстьИзменения(Кэш, КлассIntegrationConnection, Отказ)
	//Оценка по шапке
	Если	КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Количество()
		Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален"
		Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
		Или	КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить
		Или	КлассIntegrationConnection.ПараметрыРаботы.Изменен Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДопПараметрыЧтения = Новый Структура("ТихийРежим",Истина);
	КлассIntegrationConnectionДоИзменений = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ПараметрыКонфигурации, ДополнительныеПараметры", КлассIntegrationConnection.Идентификатор, КлассIntegrationConnection.ПараметрыКонфигурации, ДопПараметрыЧтения), Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnectionДоИзменений, "ФайлыНастроекСервер.КлассIntegrationConnection.ЕстьИзменения");
	КонецЕсли;

	Если	Не	КлассIntegrationConnection.ПараметрыРаботы.Автообновление	= КлассIntegrationConnectionДоИзменений.ПараметрыРаботы.Автообновление
		Или	Не	КлассIntegrationConnection.Название							= КлассIntegrationConnectionДоИзменений.Название Тогда
		Возврат Истина;
	КонецЕсли;
	ДанныеСписка = КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, ДопПараметрыЧтения, Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnectionДоИзменений, "ФайлыНастроекСервер.КлассIntegrationConnection.ЕстьИзменения");
	КонецЕсли;
	//Сравним состав ини
	МассивПроверено = Новый Массив;
	Для Каждого ЭлементКарты Из ДанныеСписка.Карта Цикл
		ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементКарты.Представление);
		
		Если КлассIntegrationConnectionДоИзменений.Данные.Ини.Свойство(ИмяИни) Тогда
			МассивПроверено.Добавить(ИмяИни);
			Продолжить;
		КонецЕсли;
		Возврат Истина;
	КонецЦикла;
	Если Не КлассIntegrationConnectionДоИзменений.Данные.Ини.Количество() = МассивПроверено.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;//Пока инишки не сравниваем, слишком тяжёлый механизм.
		
	//Сравним значения ини.
	РезультатДозапроса = КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnectionДоИзменений, Новый Структура, Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(РезультатДозапроса, "ФайлыНастроекСервер.КлассIntegrationConnection.ЕстьИзменения");
	КонецЕсли;
	Если ИниРазличаются(Кэш, КлассIntegrationConnection.Данные.Ини, КлассIntegrationConnectionДоИзменений.Данные.Ини, Отказ) Тогда
		Для Каждого КлючИЗначениеИни Из Кэш.Ини Цикл
			КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Добавить(КлючИЗначениеИни.Ключ)
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;	
	Возврат Ложь;
	
КонецФункции

//Возвращает идентификатор класса 
&НаКлиенте
Функция		КлассIntegrationConnection_Идентификатор(Кэш, КлассIntegrationConnection, Режим="Общий") 
	Если ЗначениеЗаполнено(КлассIntegrationConnection.Идентификатор) Тогда
		Возврат КлассIntegrationConnection.Идентификатор;
	ИначеЕсли Режим = "Общий" Тогда
		Возврат Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(КлассIntegrationConnection.ПараметрыКонфигурации)
	ИначеЕсли Режим = "Чтение" Тогда
		Если		ЗначениеЗаполнено(КлассIntegrationConnection.ПараметрыРаботы.Шаблон) Тогда
			Возврат КлассIntegrationConnection.ПараметрыРаботы.Шаблон;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

//Инициализирует класс IC по идентификатору, либо по данным конфигурации
&НаКлиенте
Функция		КлассIntegrationConnection_Инициализировать(Кэш, ДопПараметры, Отказ)
	Перем КлассIntegrationConnection, ПарметрыКонфигурации, СписокИниПолучить, ДанныеБЛ;
	//Если есть класс, то проинитим его. Если класса нет, то поднимем экземпляр и отправим его в инит.
	Если Не ДопПараметры.Свойство("КлассIntegrationConnection", КлассIntegrationConnection) Тогда
		КлассIntegrationConnection = _КлассIntegrationConnection_ОсновныеПоля(Кэш);
		Если Не ДопПараметры.Свойство("ПараметрыКонфигурации", ПарметрыКонфигурации) Тогда
			ПарметрыКонфигурации = Кэш.КэшНастроек.ПараметрыКонфигурации;
		КонецЕсли;
		КлассIntegrationConnection.ПараметрыКонфигурации = ПарметрыКонфигурации;
		Если	ДопПараметры.Свойство("Идентификатор", КлассIntegrationConnection.Идентификатор)
			И	ЗначениеЗаполнено(КлассIntegrationConnection.Идентификатор) Тогда
			КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Неизвестно";
			КлассIntegrationConnection.ПараметрыРаботы.Статус = "Активен";
		Иначе
			КлассIntegrationConnection.ПараметрыКонфигурации = ПараметрыСтандартнойКонфигурации(Кэш, КлассIntegrationConnection.ПараметрыКонфигурации);
		КонецЕсли;
	КонецЕсли;
	ИнициироватьДанные =	Не 	ДопПараметры.Свойство("ИнициироватьДанные")
						Или		ДопПараметры.ИнициироватьДанные;
	
	//Либо передаём данные БЛ извне (списочные методы), либо формируем по классу
	Если Не ДопПараметры.Свойство("ДанныеБЛ", ДанныеБЛ) Тогда
		Если ИнициироватьДанные Тогда
			СписокИниПолучить = Новый Массив;
			Если КлассIntegrationConnection.Данные.Меню = Неопределено Тогда
				СписокИниПолучить.Добавить(СбисОписаниеИниМеню(Кэш));
			КонецЕсли;
			Если		КлассIntegrationConnection.Данные.Ини = Неопределено
				Или	Не	КлассIntegrationConnection.Данные.Ини.Свойство("Конфигурация")
				Или		КлассIntegrationConnection.Данные.Ини.Конфигурация = Неопределено Тогда
				СписокИниПолучить.Добавить(Новый Структура("name, type, active, data", "Конфигурация", "Система", Истина));
			КонецЕсли;
			Если Не СписокИниПолучить.Количество() Тогда
				СписокИниПолучить = Неопределено;//Иначе придут все ини
			КонецЕсли;
			ПараметрыЧтенияИни = Новый Структура("СписокИни", СписокИниПолучить);
		Иначе
			ПараметрыЧтенияИни = Новый Структура("СписокИни", СписокИниПолучить);
		КонецЕсли;
		ДанныеБЛ = _КлассIntegrationConnection_ВыполнитьЧтениеСБЛ(Кэш, КлассIntegrationConnection, ПараметрыЧтенияИни, Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеБЛ, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
	КонецЕсли;
	ПараметрыОбработки = Новый Структура("ДанныеБЛ", ДанныеБЛ);
	Если ДопПараметры.Свойство("Перечитать") Тогда
		ПараметрыОбработки.Вставить("Перечитать", ДопПараметры.Перечитать);
	КонецЕсли;
	Если ЗначениеЗаполнено(СписокИниПолучить) Тогда
		СписокНаКонтроль = Новый Соответствие;
		Для Каждого ЭлементСпискаПолучить Из СписокИниПолучить Цикл
			СписокНаКонтроль.Вставить(НРег(ЭлементСпискаПолучить.name), ЭлементСпискаПолучить);
		КонецЦикла;
		ПараметрыОбработки.Вставить("КонтрольИни", СписокНаКонтроль);
	КонецЕсли;
	//При инициализации не требуется проверять шаблон. Либо есть данные по ИД, либо это конфиг, либо ошибка - нет подключения
	РезультатОбработки = _КлассIntegrationConnection_ЗаполнитьПоДанным(Кэш, КлассIntegrationConnection, ПараметрыОбработки, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
	ИначеЕсли ИнициироватьДанные Тогда
		//Инициируем структуру ини пустыми значениями
		ДанныеСписка = КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
		КонецЕсли;
		Если КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
			КлассIntegrationConnection.Данные.Ини = Новый Структура;
		КонецЕсли;
		Для Каждого ЭлементСписка Из ДанныеСписка.Данные Цикл
			ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементСписка.name);
			Если КлассIntegrationConnection.Данные.Ини.Свойство(ИмяИни) Тогда
				Продолжить;
			КонецЕсли;
			КлассIntegrationConnection.Данные.Ини.Вставить(ИмяИни, Неопределено);
		КонецЦикла;
		КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные = Истина;
	КонецЕсли;
	//Если КлассIntegrationConnection.ПараметрыРаботы.ВерсияКонфиг = Неопределено Тогда
	//	ПараметрыСтандартнойКонфигурации = НайтиТиповойКонфигСервиса(Кэш, КлассIntegrationConnection.ПараметрыКонфигурации);
	//	КлассIntegrationConnection.ПараметрыРаботы.ВерсияКонфиг = ПараметрыСтандартнойКонфигурации.version;
	//КонецЕсли;

	Если	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Стандартные"
		И	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
		//Для конфигов установим своё название
		КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		КлассIntegrationConnection.Данные.Параметры = КлассIntegrationConnection_ПолучитьПараметрыСБИС(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
		КонецЕсли;
	КонецЕсли;
	
	Возврат КлассIntegrationConnection;
КонецФункции

//Функция дозапрашивает меню при необходимости и возвращает список ини по меню с параметрами
&НаКлиенте
Функция		КлассIntegrationConnection_Очистить(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ=Ложь)
	Если	ДопПараметры.Свойство("Ини")
		И	ДопПараметры.Ини Тогда
		КлассIntegrationConnection.Данные.Ини = Неопределено;
		КлассIntegrationConnection.Данные.Меню = Неопределено;
		КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные = Ложь;
		КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить = Ложь;
		КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Очистить();
	КонецЕсли;
КонецФункции
	
//Функция возвращает ини "от класса"
&НаКлиенте
Функция		КлассIntegrationConnection_ПолучитьИни(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем МассивИниКЗапросу, ЗначениеИни, ДопПараметрыЧтения, СтруктураИниРезультат;
	
	РекурсивныйВызов = Ложь;
	ИдКласса = КлассIntegrationConnection_Идентификатор(Кэш, КлассIntegrationConnection);
	//Чтобы изменениями класса не сломать полученное, создаём отдельный экземпляр для чтения ини
	Если		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
		И	Не	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда
		//Если новый класс, то либо конфиг, либо шаблон
		КлассДляЧтения = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ПараметрыКонфигурации, ИнициироватьДанные", КлассIntegrationConnection.ПараметрыРаботы.Шаблон, КлассIntegrationConnection.ПараметрыКонфигурации, Ложь), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(КлассДляЧтения, "ФайлыНастроекСервер.КлассIntegrationConnection.ПолучитьИни");
		КонецЕсли;
		РекурсивныйВызов = Истина;
	ИначеЕсли 	ДопПараметры.Свойство("ТолькоПользовательские")
			И	ДопПараметры.ТолькоПользовательские Тогда
		//Создадим абсолютно новый экземпляр, который потом нигде не сохранится
		КлассДляЧтения = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, Новый Структура("Ини", Ложь), Отказ);
	Иначе
		КлассДляЧтения = Кэш.КэшНастроек.КэшIntegrationConnection.Получить(ИдКласса);
	КонецЕсли;
	
	Если КлассДляЧтения = Неопределено Тогда
		//Если не новый класс, то закэшируем сам класс.
		КлассДляЧтения = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		Кэш.КэшНастроек.КэшIntegrationConnection.Вставить(ИдКласса, КлассДляЧтения);
	КонецЕсли;

	Если Не ДопПараметры.Свойство("Результат", СтруктураИниРезультат) Тогда
		СтруктураИниРезультат = Новый Структура;
		ДопПараметры.Вставить("Результат", СтруктураИниРезультат)
	КонецЕсли;
	
	Если Не	ДопПараметры.Свойство("СписокИни", МассивИниКЗапросу) Тогда
		Если	КлассIntegrationConnection.ПараметрыКонфигурации.subsystem = ""
			И	(	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Пользовательские"
				Или	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон")	Тогда
			МассивИниКЗапросу = Неопределено;
		Иначе
			ДопПараметрыЧтения = Новый Структура();
			//Если не указан список ини для запроса, то берём по-умолчанию (включенные-"1" в меню)
			РезультатЗапроса = КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, ДопПараметрыЧтения, Отказ);
			Если Отказ Тогда
				Возврат	Кэш.ОбщиеФункции.СбисИсключение(РезультатЗапроса, "ФайлыНастроекСервер.КлассIntegrationConnection.ПолучитьИни");
			КонецЕсли;
			МассивИниКЗапросу = РезультатЗапроса["Данные"];	
		КонецЕсли;
	КонецЕсли;
	Если Не МассивИниКЗапросу.Количество() Тогда
		Возврат СтруктураИниРезультат;
	КонецЕсли;
	Если Не	ДопПараметры.Свойство("ДополнительныеПараметры", ДопПараметрыЧтения) Тогда
		ДопПараметрыЧтения = Новый Структура;
	КонецЕсли;
	
	ОписаниеСбисМеню = СбисОписаниеИниМеню(Кэш);
	ЕстьЗапросДанные = Ложь;
	Если РекурсивныйВызов Тогда
		МассивПолучитьИтого = МассивИниКЗапросу;
	Иначе		
		МассивПолучитьИтого = Новый Массив;
		//Проверим, что ини уже есть в полученных данных
		Для Каждого ЭлементСписка Из МассивИниКЗапросу Цикл
			Если ЭлементСписка.name = ОписаниеСбисМеню.name Тогда
				//Меню живёт в отдельном поле
				Если Не КлассДляЧтения.Данные.Меню = Неопределено Тогда
					//Меню в процессе может сильно меняться. Копируем целиком.
					КлассIntegrationConnection.Данные.Меню = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(КлассДляЧтения.Данные.Меню);
					Продолжить;
				КонецЕсли;
			Иначе
				ЕстьЗапросДанные = Истина;
				ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементСписка.name);
				Если	Не	КлассДляЧтения.Данные.Ини = Неопределено
					И		КлассДляЧтения.Данные.Ини.Свойство(ИмяИни, ЗначениеИни)
					И	Не	ЗначениеИни = Неопределено Тогда
					Если КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
						//Инитим Данные.Ини только если есть ини, которые должны быть добавлены в класс
						КлассIntegrationConnection.Данные.Ини = Новый Структура;
					КонецЕсли;
					СтруктураИниРезультат.Вставить(ИмяИни, ЗначениеИни);
					КлассIntegrationConnection.Данные.Ини.Вставить(ИмяИни, ЗначениеИни);
					Продолжить;
				ИначеЕсли 	Не	КлассДляЧтения.Данные.Прочие = Неопределено
						И		КлассДляЧтения.Данные.Прочие.Свойство(ИмяИни, ЗначениеИни)
						И	Не	ЗначениеИни = Неопределено Тогда
					//Не ЭДО инишки хранятся отдельно
					Если КлассIntegrationConnection.Данные.Прочие = Неопределено Тогда
						//Инитим Данные.Прочие только если есть ини, которые должны быть добавлены в класс
						КлассIntegrationConnection.Данные.Прочие = Новый Структура;
					КонецЕсли;
					СтруктураИниРезультат.Вставить(ИмяИни, ЗначениеИни);
					КлассIntegrationConnection.Данные.Прочие.Вставить(ИмяИни, ЗначениеИни);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			МассивПолучитьИтого.Добавить(ЭлементСписка);
		КонецЦикла;
	КонецЕсли;
	Если РекурсивныйВызов Тогда
		ПараметрыПолучения = Новый Структура("СписокИни, Результат, ДополнительныеПараметры", МассивПолучитьИтого, СтруктураИниРезультат, ДопПараметрыЧтения);
		РезультатОбработки = КлассIntegrationConnection_ПолучитьИни(Кэш, КлассДляЧтения, ПараметрыПолучения, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
		КонецЕсли;
		Для Каждого ЭлементСписка Из МассивПолучитьИтого Цикл
			Если ЭлементСписка.name = ОписаниеСбисМеню.name Тогда
				//Меню живёт в отдельном поле
				КлассIntegrationConnection.Данные.Меню = КлассДляЧтения.Данные.Меню;
				Продолжить;
			ИначеЕсли КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
				//Инитим Данные.Ини только если есть ини, которые должны быть добавлены в класс
				КлассIntegrationConnection.Данные.Ини = Новый Структура;
			КонецЕсли;
			ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементСписка.name);
			//Заполняем из класса чтения в класс основной настройки
			КлассIntegrationConnection.Данные.Ини.Вставить(ИмяИни, КлассДляЧтения.Данные.Ини[ИмяИни]);
		КонецЦикла;
		Возврат РезультатОбработки;
	ИначеЕсли МассивПолучитьИтого.Количество() Тогда
		ПолучитьТолькоПользовательскиеИзменения = ДопПараметры.Свойство("ТолькоПользовательские") И ДопПараметры.ТолькоПользовательские;
		
		//Что-то дозаправишваем
		ДанныеБЛ = _КлассIntegrationConnection_ВыполнитьЧтениеСБЛ(Кэш, КлассДляЧтения, Новый Структура("СписокИни, ТолькоПользовательские", МассивПолучитьИтого, ПолучитьТолькоПользовательскиеИзменения), Отказ);
		Если Отказ Тогда
			Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеБЛ, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура("ДанныеБЛ", ДанныеБЛ);
		Если Не ПолучитьТолькоПользовательскиеИзменения Тогда			
			//Если получаем пользовательские изменения для выгрузки, то контроль чтения не происходит, т.к. не известно, что есть в изменениях инишек.
			СписокНаКонтроль = Новый Соответствие;
			Для Каждого ЭлементСпискаПолучить Из МассивПолучитьИтого Цикл
				СписокНаКонтроль.Вставить(НРег(ЭлементСпискаПолучить.name), ЭлементСпискаПолучить);
			КонецЦикла;
			ПараметрыЗаполнения.Вставить("КонтрольИни", СписокНаКонтроль);
		КонецЕсли;
		РезультатОбработки = _КлассIntegrationConnection_ЗаполнитьПоДанным(Кэш, КлассДляЧтения, ПараметрыЗаполнения, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
		КонецЕсли;
		Если ПолучитьТолькоПользовательскиеИзменения Тогда
			Если ЗначениеЗаполнено(КлассДляЧтения.Данные.Ини) Тогда 
				СтруктураИниРезультат					= КлассДляЧтения.Данные.Ини;
				КлассIntegrationConnection.Данные.Ини	= КлассДляЧтения.Данные.Ини;
			Иначе 
				СтруктураИниРезультат					= КлассДляЧтения.Данные.Прочие;
				КлассIntegrationConnection.Данные.Ини	= КлассДляЧтения.Данные.Прочие; 
			КонецЕсли;
		Иначе
			ОписаниеСбисМеню = СбисОписаниеИниМеню(Кэш);
			Для Каждого ЭлементСписка Из МассивПолучитьИтого Цикл
				Если		ЭлементСписка.name = ОписаниеСбисМеню.name Тогда
					//Меню живёт в отдельном поле
					КлассIntegrationConnection.Данные.Меню = КлассДляЧтения.Данные.Меню;
					Продолжить;
				КонецЕсли;
				
				ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементСписка.name);
				Если	Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни.Найти(ЭлементСписка.type) = Неопределено Тогда
					Если КлассIntegrationConnection.Данные.Прочие = Неопределено Тогда
						//Инитим Данные только если есть ини, которые должны быть добавлены в класс
						КлассIntegrationConnection.Данные.Прочие = Новый Структура;
					КонецЕсли;
					ЗначениеВставить = КлассДляЧтения.Данные.Прочие[ИмяИни];
					КлассIntegrationConnection.Данные.Прочие.Вставить(ИмяИни, ЗначениеВставить);
				Иначе
					Если КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
						//Инитим Данные только если есть ини, которые должны быть добавлены в класс
						КлассIntegrationConnection.Данные.Ини = Новый Структура;
					КонецЕсли;
					ЗначениеВставить = КлассДляЧтения.Данные.Ини[ИмяИни];
					КлассIntegrationConnection.Данные.Ини.Вставить(ИмяИни, ЗначениеВставить);
				КонецЕсли;
				СтруктураИниРезультат.Вставить(ИмяИни, ЗначениеВставить);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураИниРезультат;	
КонецФункции

//Возвращает СБИС параметры "от класса"
&НаКлиенте
Функция		КлассIntegrationConnection_ПолучитьПараметрыСБИС(Кэш, КлассIntegrationConnection, ДопПараметры,Отказ) Экспорт
	
	Если		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
		И	Не	ЗначениеЗаполнено(КлассIntegrationConnection.Данные.Параметры) Тогда
		КлассIntegrationConnection.Данные.Параметры = _КлассIntegrationConnection_СтрукутраСБИСПараметровПоУмолчанию();
	КонецЕсли;
	//По умочанию возвращаем параметры "от self"
	Если	Не	(	ДопПараметры.Свойство("ПрочитатьСБЛ")
				И	ДопПараметры.ПрочитатьСБЛ)
			Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
			Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален"
			Или	Не ЗначениеЗаполнено(КлассIntegrationConnection.Идентификатор) Тогда
		Возврат КлассIntegrationConnection.Данные.Параметры;
	КонецЕсли;
	
	//Чтение СБИС параметров ТОЛЬКО по ИД от класса, без переадресаций на шаблон и конфиг.
	ДанныеБЛ = _КлассIntegrationConnection_ВыполнитьЧтениеСБЛ(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеБЛ, "ФайлыНастроекСервер.КлассIntegrationConnection.ПолучитьПараметрыСБИС");
	КонецЕсли;
	
	РезультатОбработки = _КлассIntegrationConnection_ЗаполнитьПоДанным(Кэш, КлассIntegrationConnection, Новый Структура("ДанныеБЛ", ДанныеБЛ), Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеБЛ, "ФайлыНастроекСервер.КлассIntegrationConnection.ПолучитьПараметрыСБИС");
	КонецЕсли;
	
	Возврат	КлассIntegrationConnection.Данные.Параметры;
КонецФункции

//Функция возвращает сбисМеню "от класса"
&НаКлиенте
Функция		КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	//Помимо получения данных, тут идёт проверка доступности соединения. Получаем меню, чтобы были актуальные данные и в случае недоступности соединения, ругаемся	
	Если ЗначениеЗаполнено(КлассIntegrationConnection.Данные.Меню) Тогда
		Возврат КлассIntegrationConnection.Данные.Меню;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;	
	ПараметрыЗапроса.Вставить("ДополнительныеПараметры",Новый Структура("ТихийРежим, ЕстьРезультат", Истина, Истина));
	ПараметрыЗапроса.Вставить("СписокИни",				Новый Массив);
	ПараметрыЗапроса.СписокИни.Добавить(СбисОписаниеИниМеню(Кэш));
	РезультатОбработки = КлассIntegrationConnection_ПолучитьИни(Кэш, КлассIntegrationConnection, ПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.ПолучитьСбисМеню");
	КонецЕсли;
	Возврат КлассIntegrationConnection.Данные.Меню;
КонецФункции

//Функция возвращает копию класса шаблона подключения
&НаКлиенте
Функция		КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ=Ложь)
	//Поверхностная копия узлов
	НовыйКлассIntegrationConnection = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(КлассIntegrationConnection,,Ложь);
	НовыйКлассIntegrationConnection.ПараметрыРаботы = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(НовыйКлассIntegrationConnection.ПараметрыРаботы);
	НовыйКлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Очистить();
	
	//Меню и параметры копируем целиком. Ини - поверхностная копия 
	НовыйКлассIntegrationConnection.Данные			=  Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(НовыйКлассIntegrationConnection.Данные,,Ложь);
	НовыйКлассIntegrationConnection.Данные.Параметры=  Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(НовыйКлассIntegrationConnection.Данные.Параметры);
	Если Не ДопПараметры.Свойство("Ини")
		Или	ДопПараметры.Ини Тогда
		НовыйКлассIntegrationConnection.Данные.Ини = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(НовыйКлассIntegrationConnection.Данные.Ини,,Ложь);
	Иначе
		НовыйКлассIntegrationConnection.Данные.Ини = Неопределено;
		НовыйКлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные = Ложь;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("Меню")
		Или	ДопПараметры.Меню Тогда
		НовыйКлассIntegrationConnection.Данные.Меню =  Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(НовыйКлассIntegrationConnection.Данные.Меню);
	Иначе
		НовыйКлассIntegrationConnection.Данные.Меню = Неопределено;
	КонецЕсли;
	
	Возврат НовыйКлассIntegrationConnection;
КонецФункции

//Функция Сохраняет класс IC, возвращает измененный вариант.
&НаКлиенте
Функция		КлассIntegrationConnection_СохранитьПодключение(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ) Экспорт
	
	//Если настройки не пользовательские, то запись обязана быть проведена для создания нового пользовательского соединения
	Результат = Новый Структура("ЗаписьВыполнялась, Идентификатор", Ложь, КлассIntegrationConnection.Идентификатор);
	ПропуститьЗапись = Ложь;
	Если КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда
		КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Обновить = Истина;//Для создания нового подключения с стандартными настройками обязательно нужно передать СбисПараметры с service4config
		КлассIntegrationConnection.ПараметрыКонфигурации = Кэш.ФормаНастроекОбщее.НайтиВыбраннуюКонфигурациюНастроек(КлассIntegrationConnection.ПараметрыКонфигурации);	
		//Для пользовательской конфигурации(с пустым subsystem) ставим отправку всех ини, так как иначе данных на сервере не появится!
		Если КлассIntegrationConnection.ПараметрыКонфигурации.subsystem = "" Тогда
			Для Каждого КлючИЗначениИни Из КлассIntegrationConnection.Данные.Ини Цикл
				КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Добавить(КлючИЗначениИни.Ключ);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
		СтруктураПараметров = КлассIntegrationConnection.Данные.Параметры;
		Если КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
			//Запишем шаблон
			КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить = Истина;
			КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Отправлять = Истина;
			КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять = Ложь;
			РезультатЗаписиШаблона = _КлассIntegrationConnection_Записать(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
			Если Отказ Тогда 
				Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатЗаписиШаблона, "ФайлыНастроекСервер.КлассIntegrationConnection.СохранитьПодключение");
			КонецЕсли;
		КонецЕсли;
		РезультатИзменения = КлассIntegrationConnection_ИзменитьТип(Кэш, КлассIntegrationConnection, Новый Структура("Тип", "Создание по шаблону"), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатИзменения, "ФайлыНастроекСервер.КлассIntegrationConnection.СохранитьПодключение");
		КонецЕсли;
	ИначеЕсли КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Пользовательские" Тогда
		//Если взяты готовые настройки без изменений, просто запишем их ID в обработке, во всех прочих случаях, нужно записать JSON на сервер
		ЕстьИзменения = КлассIntegrationConnection_ЕстьИзменения(Кэш, КлассIntegrationConnection, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(ЕстьИзменения, "ФайлыНастроекСервер.КлассIntegrationConnection.СохранитьПодключение");
		КонецЕсли;
		ПропуститьЗапись = Не ЕстьИзменения;
	КонецЕсли;
	
	Если Не ПропуститьЗапись Тогда
		КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять = Истина;
		КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Отправлять		= Истина;
		
		РезультатЗаписи = _КлассIntegrationConnection_Записать(Кэш, КлассIntegrationConnection, Новый Структура("ТихийРежим", Кэш.ТихийРежим), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатЗаписи, "ФайлыНастроекСервер.КлассIntegrationConnection.СохранитьПодключение");
		КонецЕсли;
		
		Результат.ЗаписьВыполнялась = Истина;
		Результат.Идентификатор = РезультатЗаписи;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Функция Сохраняет класс IC, возвращает измененный вариант.
&НаКлиенте
Функция		КлассIntegrationConnection_СохранитьСбисПараметры(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем ОбновитьИниНаСервере, ТихийРежим, ЗначениеСвойства, ШаблонПодключения;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при записи промежуточных данных, вроде меню и параметров
	
	Если	Не	ЗначениеЗаполнено(КлассIntegrationConnection.Данные.Параметры)
		Или	Не	КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять
		Или		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален"
		Или		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"	Тогда
		//Новый коннекшен мы не записываем через сбис параметры
		Возврат Ложь;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ПараметрыДописать") Тогда
		Для Каждого Элемент Из ДопПараметры.ПараметрыДописать Цикл
			// Параметры для шаблона добавляем только на шаблон
			Если НЕ КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон"
					И НЕ Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Найти(НРег(Элемент.Ключ)) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			//Сразу проверим необходимость записи параметров - если такого узла ещё нет, либо он менялся
			Если	Не КлассIntegrationConnection.Данные.Параметры.Свойство(Элемент.Ключ, ЗначениеСвойства)
				Или	Не ЗначениеСвойства = Элемент.Значение Тогда
				КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Обновить = Истина;
				КлассIntegrationConnection.Данные.Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыКлассСкопировать	= Новый Структура("Меню, Ини", Ложь, Ложь);
	КлассПараметрыДляЗаписи		= КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, ПараметрыКлассСкопировать, Ложь);
	
	//Удалить лишние ключи - для шаблона остаётся только то, что пишется на шаблон, для остальных - всё, что не пишется на шаблон.
	СписокКлючейУдалить = Новый Массив;
	Для Каждого Элемент Из КлассПараметрыДляЗаписи.Данные.Параметры Цикл
		Если КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
			Если Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Найти(НРег(Элемент.Ключ)) = Неопределено Тогда
				СписокКлючейУдалить.Добавить(Элемент.Ключ);
			КонецЕсли;
		ИначеЕсли НЕ Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Найти(НРег(Элемент.Ключ)) = Неопределено	Тогда
			КлассПараметрыДляЗаписи.Данные.Параметры.Вставить(Элемент.Ключ, Неопределено);
		Иначе
			// Нормальный ключ пишется как обычный
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючУдалить Из СписокКлючейУдалить Цикл
		КлассПараметрыДляЗаписи.Данные.Параметры.Удалить(КлючУдалить);
	КонецЦикла;
	
	СбисПараметры = КлассIntegrationConnection_ПодготовитьСБИСПараметрКЗаписи(Кэш, КлассПараметрыДляЗаписи, КлассПараметрыДляЗаписи.Данные.Параметры);
		
	ПараметрыОтправки = Новый Структура("id, update_date", КлассIntegrationConnection.Идентификатор, Формат(КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек,"ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""));
	//Добавим СбисПараметры в отправку		
	Если	КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Обновить
		И	КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять
		И	СбисПараметры.Количество() Тогда
		ПараметрыОтправки.Вставить("json_connection", Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(СбисПараметры));
	Иначе
		Возврат КлассIntegrationConnection.Идентификатор
	КонецЕсли;
	ПараметрыОтправки = Новый Структура("props, ini", ПараметрыОтправки, Новый Массив);
	Если КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
		ПараметрыОтправки.props.Вставить("for_all", Истина);
	КонецЕсли;
	Результат = Кэш.Интеграция.ЗаписатьConnection(Кэш, ПараметрыОтправки, Новый Структура("ВернутьОшибку, ЕстьОтвет, СообщатьПриОшибке, ТихийРежим", Истина, Истина, Ложь, Истина), Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(Результат, "ФайлыНастроекСервер.КлассIntegrationConnection.СохранитьСбисПараметры");
	КонецЕсли;

	Возврат	Результат;
	
КонецФункции

&НаКлиенте
Функция	КлассIntegrationConnection_ПодготовитьСБИСПараметрКЗаписи(Кэш, КлассIntegrationConnection, ВходяшийПараметр)
	
	Если ТипЗнч(ВходяшийПараметр) = Тип("Структура") Тогда
		Результат = Новый Структура;
		Для Каждого Элемент Из ВходяшийПараметр Цикл
			Результат.Вставить(Элемент.Ключ, КлассIntegrationConnection_ПодготовитьСБИСПараметрКЗаписи(Кэш, КлассIntegrationConnection, Элемент.Значение));
		КонецЦикла;
	ИначеЕсли ТипЗнч(ВходяшийПараметр) = Тип("Дата") Тогда
		Результат = Формат(ВходяшийПараметр,"ДФ=""дд.ММ.гггг ЧЧ:мм:сс""");
	ИначеЕсли ТипЗнч(ВходяшийПараметр) = Тип("Строка") Тогда
		Результат = ВходяшийПараметр;
	Иначе
		Результат = Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(ВходяшийПараметр);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Функция дозапрашивает меню при необходимости и возвращает список ини по меню с параметрами
&НаКлиенте
Функция		КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
    Перем Искать, ТипыИни;
	Если КлассIntegrationConnection.Данные.Меню = Неопределено Тогда
		РезультатЧтения = КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатЧтения, "ФайлыНастроекСервер.КлассIntegrationConnection.СписокИни");
		КонецЕсли;
	КонецЕсли;
	//Позволяет определить типы к получению. Если не указано, берутся стандартные из настроек.
	Если Не	ДопПараметры.Свойство("ДоступныеТипыИни", ТипыИни) Тогда
		ТипыИни = Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни;
	КонецЕсли;
	//Позволяет определить какие ини требуется полчить. 01 - ищутся все, 0 - отключенные 1 - включенные
	Если Не	ДопПараметры.Свойство("Искать", Искать) Тогда
		Искать = Новый Структура("Включено", "1")//По-умолчанию искать только включенные.
	КонецЕсли;
	
	Возврат	СформироватьСпискиИзМеню(ТипыИни, КлассIntegrationConnection.Данные.Меню, Искать);
	
КонецФункции

&НаКлиенте
Функция		КлассIntegrationConnection_СформироватьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Если ПустаяСтрока(КлассIntegrationConnection.ПараметрыКонфигурации.subsystem) Тогда
		СбисМеню = Новый Структура;
	Иначе
		СбисМеню = КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(СбисМеню, "ФайлыНастроекСервер.КлассIntegrationConnection.СформироватьСбисМеню");
		КонецЕсли;
	КонецЕсли;
	ПараметрыМеню = СбисОписаниеИниМеню(Кэш);
	ПараметрыМеню.Вставить("active", Истина);
	
	//Для обновления меню нужны все настройки. Дополучим отсутствующие, если надо.
	РезультатДополучения = КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатДополучения, "ФайлыНастроекСервер.КлассIntegrationConnection.СформироватьСбисМеню");
	КонецЕсли;
	
	Попытка
		СбисМеню = СформироватьМеню_Структура(Кэш, КлассIntegrationConnection.Данные.Ини, СбисМеню, Отказ);//Меням данные меню по записываемым ини.
		КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить = Истина;
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.СформироватьСбисМеню",,,ОписаниеОшибки());
	КонецПопытки;
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(СбисМеню, "ФайлыНастроекСервер.КлассIntegrationConnection.СформироватьСбисМеню");
	КонецЕсли;
	КлассIntegrationConnection.Данные.Меню = СбисМеню;
	Возврат	СбисМеню;
КонецФункции

//Устанавливает выбранный класс настроек на ГО
&НаКлиенте
Функция		КлассIntegrationConnection_Установить(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ) Экспорт
	Перем	ТихийРежим,				//Флаг управления выводом статуса установки
			СписокИниУстановить,	//Определяет список ини к получению и установке.
			ПолучитьДанныеИни,		//Определяет необходимость получения и установки ини.
	        ПрименитьXSLT,			//Необходимость получения и применения xslt. Необходимо для возможности установить пользовательскую конфу, если при получении что-то пошло не так и с сервера ничего не возвращается
			СтруктураКонфигураций, СписокТиповНастроек;
			
	ГлавноеОкно = Кэш.ГлавноеОкно;
	ПараметрыДозапросаИни = Новый Структура;
	
	Если Не ДопПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Кэш.ТихийРежим;
	КонецЕсли;
	Если	ДопПараметры.Свойство("СписокИни", СписокИниУстановить)
		И	СписокИниУстановить.Количество() Тогда
		//Если требуется установить конкретный набор ини, иначе ставятся включенные из меню
		ПараметрыДозапросаИни.Вставить("СписокИни", СписокИниУстановить);
	КонецЕсли;
	Если Не ДопПараметры.Свойство("ПрименитьXSLT", ПрименитьXSLT) Тогда
		ПрименитьXSLT = Истина;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("ПолучитьДанныеИни", ПолучитьДанныеИни) Тогда
		ПолучитьДанныеИни = Истина;
	КонецЕсли;
	
	Если ПрименитьXSLT Тогда
		Кэш.ФормаНастроек.СбисСформироватьСтруктуруXSLT(Кэш, КлассIntegrationConnection, Отказ);
	КонецЕсли;
	
	Если Не	ТихийРежим Тогда
		ГлавноеОкно.СбисПоказатьСостояние("Формирование структуры настроек", ГлавноеОкно);
	КонецЕсли;
	
	Если ПолучитьДанныеИни Тогда
		РезультатДозапроса = КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnection, ПараметрыДозапросаИни, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатДозапроса, "ФайлыНастроекСервер.КлассIntegrationConnection.Установить");
		КонецЕсли;
	ИначеЕсли Не КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные Тогда
		РезультатИнициализации = КлассIntegrationConnection_Инициализировать(Кэш, Новый Структура("КлассIntegrationConnection", КлассIntegrationConnection), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатИнициализации, "ФайлыНастроекСервер.КлассIntegrationConnection.Установить");
		КонецЕсли;
	КонецЕсли;
	Если КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
		//Обновим меню для нового коннекшена, чтобы заполнились разделы обработки.
		РезультатИнициализации = КлассIntegrationConnection_СформироватьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатИнициализации, "ФайлыНастроекСервер.КлассIntegrationConnection.Установить");
		КонецЕсли;
	КонецЕсли;
	
	УстановленныеИни = КлассIntegrationConnection_СписокИниДляИнтерфейса(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
	Кэш.Вставить("Ини", КлассIntegrationConnection.Данные.Ини);
	
	ПараметрыКонфигурации = ПараметрыСтандартнойКонфигурации(Кэш, КлассIntegrationConnection.ПараметрыКонфигурации);
	Если Не ТихийРежим Тогда
		ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	ПараметрыКонфигурации.Удалить("service");
	//Обновим сервис для статистики
	Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксУстановленныхНастроек = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(ПараметрыКонфигурации);
	Кэш.СБИС.ПараметрыИнтеграции.Демо = Неопределено;
	Если Не КлассIntegrationConnection.ПараметрыРаботы.Демо = Неопределено Тогда
		Кэш.СБИС.ПараметрыИнтеграции.Демо = КлассIntegrationConnection.ПараметрыРаботы.Демо;
	КонецЕсли;
	
	Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", КлассIntegrationConnection);
	Кэш.Парам.ИдентификаторНастроек = КлассIntegrationConnection.Идентификатор;
	
	Если Кэш.ФормаНастроекОбщее.Открыта() Тогда
		Попытка
			КлассIntegrationConnection_ЗаполнитьРедакторИниПоКлассу(Кэш, КлассIntegrationConnection, Новый Структура);
		Исключение
			Отказ = Истина;
			Возврат МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), "ФайлыНастроекСервер.КлассIntegrationConnection.Установить");
		КонецПопытки;
	КонецЕсли;
	Возврат	Новый Структура("СписокФайлов", УстановленныеИни);
	
КонецФункции

&НаКлиенте
Функция		КлассIntegrationConnection_НастроитьШаблон(Кэш, КлассIntegrationConnection, КлассIntegrationШаблон, ДопПараметры, Отказ)
	Если Не ЗначениеЗаполнено(КлассIntegrationШаблон) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если	КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура("Тип", "Стандартные"), Ложь)
		Или	КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура("Тип", "Создание по шаблону"), Ложь) Тогда
		КлассIntegrationConnection.ПараметрыРаботы.Шаблон	= КлассIntegrationШаблон.Идентификатор;
		КлассIntegrationConnection.ПараметрыКонфигурации	= КлассIntegrationШаблон.ПараметрыКонфигурации;
	
		КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Иначе
		КлассIntegrationConnection.ПараметрыРаботы.Шаблон	= КлассIntegrationШаблон.Идентификатор;
		КлассIntegrationConnection.ПараметрыКонфигурации	= КлассIntegrationШаблон.ПараметрыКонфигурации;
	КонецЕсли;
КонецФункции

#Область include_core2_vo2_Настройки_СБИС_КлассIntegrationConnection_public_ВзаимодействиеСИнтерфейсом

&НаКлиенте
Функция		КлассIntegrationConnection_СписокИниДляИнтерфейса(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем ПрефиксИни;
	МассивУстановленныхИниФайлов = Новый Массив;
	КэшИни = КлассIntegrationConnection.Данные.Ини;
	
	ДатаНастроек		= КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек;
	АвтообновлениеДефолт= КлассIntegrationConnection.ПараметрыРаботы.Автообновление;
	Если Не ДопПараметры.Свойство("ПрефиксИни", ПрефиксИни) Тогда
		ПрефиксИни = "";
	КонецЕсли;
	
	КлючиСтрок	= "Имяфайла,ИмяфайлаБезРасширения,ПутьДоИниФайла,ЕстьИзменения,Автообновление,Стандартная,Пользовательская,ДатаФайла,ДатаФайлаКлиент,Ини_ИмяИни,Ини_ИмяБезРасширения";
	СписокСтрок	= Новый	СписокЗначений();
	Для Каждого КлючИЗначениеИни Из КэшИни	Цикл
		ИмяИни		= КлючИЗначениеИни.Ключ;
		ЗначениеИни	= КлючИЗначениеИни.Значение;
		Если		ИмяИни	= "Конфигурация"	Тогда//Конфигурация вверху.
			ПолеСортировки = "а";
		ИначеЕсли Лев(ИмяИни, 8) = "Загрузка" Тогда
			ПолеСортировки = "я";
		Иначе
			ПолеСортировки = "б";
		КонецЕсли;
		СбисЕстьТиповая		= Ложь;
		СбисЕстьИзменения	= Ложь;
		СбисАвтообновление	= АвтообновлениеДефолт;
		Если ЗначениеЗаполнено(ЗначениеИни) Тогда				
			ЗначениеИни.Вставить("СбисОшибки",			Новый Массив());
			ЗначениеИни.Вставить("СбисПолноеИмяФайла",	СтрЗаменить(ИмяИни,"""",""));
			ЗначениеИни.Вставить("СбисИмяФайла",		СтрЗаменить(ИмяИни,"""",""));
			
			Если ЗначениеИни.Свойство("СбисЕстьТиповая")	Тогда
				СбисЕстьТиповая = ЗначениеИни.СбисЕстьТиповая;
			КонецЕсли;
			Если ЗначениеИни.Свойство("СбисЕстьИзменения")	Тогда
				СбисЕстьИзменения = ЗначениеИни.СбисЕстьИзменения;
			КонецЕсли;
			Если ЗначениеИни.Свойство("СбисАвтообновление")	Тогда
				СбисАвтообновление = ЗначениеИни.СбисАвтообновление; 
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока = Новый	Структура(КлючиСтрок);
		НоваяСтрока.ПутьДоИниФайла			= "";
		НоваяСтрока.ЕстьИзменения			= СбисЕстьИзменения;
		НоваяСтрока.Автообновление			= СбисАвтообновление;
		НоваяСтрока.Стандартная				= СбисЕстьТиповая;
		НоваяСтрока.Пользовательская		= НЕ СбисЕстьТиповая ИЛИ СбисЕстьИзменения;
		НоваяСтрока.Имяфайла				= ПрефиксИни + СтрЗаменить(ИмяИни + ?(СбисЕстьТиповая, ".sbis3", ""),"""","");
		НоваяСтрока.ИмяфайлаБезРасширения	= ПрефиксИни + СтрЗаменить(ИмяИни, """", "");
		НоваяСтрока.ДатаФайла				= ?(СбисЕстьТиповая,	ДатаНастроек, Неопределено);
		НоваяСтрока.ДатаФайлаКлиент			= ?(СбисЕстьИзменения,	ДатаНастроек, Неопределено);
		НоваяСтрока.Ини_ИмяИни				= СтрЗаменить(ИмяИни,"""","");
		НоваяСтрока.Ини_ИмяБезРасширения	= Сред(НоваяСтрока.ИмяФайла,1,Найти(НоваяСтрока.ИмяФайла,".")-1);
		
		СписокСтрок.Добавить(НоваяСтрока,  ПолеСортировки + НоваяСтрока.ИмяФайла);
	КонецЦикла;
	СписокСтрок.СортироватьПоПредставлению();
	Возврат	СписокСтрок.ВыгрузитьЗначения();
КонецФункции

&НаКлиенте
Процедура	КлассIntegrationConnection_ЗаполнитьРедакторИниПоКлассу(Кэш, КлассIntegrationConnection, ДопПараметры) Экспорт
	
	//Выберем базовую, для установленных настроек, конфигурацию и заполним список доступных конфигураций
	Кэш.Парам.НастройкиАвтообновление				= КлассIntegrationConnection.ПараметрыРаботы.Автообновление;
	Кэш.ФормаНастроекОбщее.НастройкиАвтообновление	= КлассIntegrationConnection.ПараметрыРаботы.Автообновление;
	Кэш.ФормаНастроекОбщее.НастройкиНазвание		= КлассIntegrationConnection.Название;
	
	Если Не Кэш.Свойство("Конфигурация") Тогда
		СписокТиповНастроек = СбисПолучитьСписокДоступныхНастроек(Кэш);
		Если СписокТиповНастроек = Неопределено Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.ЗаполнитьРедакторИниПоКлассу", 773,,"Отсутствует список доступных конфигураций");
		КонецЕсли;
		ДанныеКонфигураций = Кэш.ФормаНастроекОбщее.СформироватьСтруктуруКонфигураций(Кэш, СписокТиповНастроек);
		Кэш.Вставить("Конфигурация", ДанныеКонфигураций.СтруктураКонфигураций);
		Кэш.ГлавноеОкно.СбисЭлементФормы(Кэш.ФормаНастроекОбщее,"Конфигурация").СписокВыбора.ЗагрузитьЗначения(ДанныеКонфигураций.СписокВыбора);
	КонецЕсли;
	
	НашаКонфигурация = Кэш.ФормаНастроекОбщее.НайтиСтандартнуюКонфигурациюНастроек(КлассIntegrationConnection.ПараметрыКонфигурации);
	Кэш.ФормаНастроекОбщее.Конфигурация = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(НашаКонфигурация.service, Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(НашаКонфигурация));
	
	//Флаг ставится если есть изменения в настройках, либо изменился коннекшен для пользователя в сохранённых.
	Кэш.КэшНастроек.ИзмененияВНастройках = Кэш.КэшНастроек.ИзмененияВНастройках Или Не СбисПолучитьИдентификаторНастроек(Кэш) = КлассIntegrationConnection.Идентификатор;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_Конвертеры_ОбработкаВJSON
////////////////////////////////////////////////////

//Функция преобразует структуру файлов настроек из "привычного" для обработки вида в формат JSON.
&НаКлиенте
Функция		ПреобразованиеВОИни_JSONИни_ВыполнитьПреобразование(КэшИни) Экспорт
	
	Результат = Новый Структура();
	//В качестве значения идёт уровень узла, где встречается. Если что, можно расширить.
	НеобратаываемыеУзлы = Новый Структура;
	НеобратаываемыеУзлы.Вставить("СписокДокументов",		0);
	НеобратаываемыеУзлы.Вставить("СБИС_Столбцы",			0);
	НеобратаываемыеУзлы.Вставить("СБИС_СписокВыбораФильтр",	0);
	ГлобальныеПараметрыКонвертации = Новый Структура("НеобрабатываемыеУзлы", НеобратаываемыеУзлы);
	Для	Каждого	КлючИЗначение Из КэшИни Цикл
		//Результат.Вставить(КлючИЗначение.Ключ, ПреобразованиеИниСтВJSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение));
		ЛокальныеПараметрыКонвертации = Новый Структура("Уровень_Текущий, Уровень_ВложенныйМассив, РежимМассива, ОпределятьТипМассив", 0, 0, Ложь, Истина);
		Результат.Вставить(КлючИЗначение.Ключ, ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение, ЛокальныеПараметрыКонвертации, ГлобальныеПараметрыКонвертации));
	КонецЦикла;
	Возврат	Результат;
		
КонецФункции

//Флаг режим массив определяет форму возвращаемого значения, флаг ОпределятьТипМассив определяет необходимости проверки текущего элемента на то, является ли он массивом
&НаКлиенте
Функция		ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КэшИни, ПараметрыКонвертации, ГлобальныеПараметрыКонвертации)
	
	Результат	= ?(ПараметрыКонвертации.РежимМассива, Новый Массив(), Новый Структура());
	
	Для	Каждого	КлючИЗначение Из КэшИни Цикл
		Если		ГлобальныеПараметрыКонвертации.НеобрабатываемыеУзлы.Свойство(КлючИЗначение.Ключ)
			И	ГлобальныеПараметрыКонвертации.НеобрабатываемыеУзлы[КлючИЗначение.Ключ] = ПараметрыКонвертации.Уровень_Текущий Тогда
			//Некоторые узлы не обрабатываем вообще, т.к. они не используются обработкой.
			Продолжить;
		КонецЕсли;

		КонтекстКонвертации = Новый Структура;
		//Пробросим контекст в подузлы
		Для Каждого КлючИЗначениеПараметр Из ПараметрыКонвертации Цикл
			КонтекстКонвертации.Вставить(КлючИЗначениеПараметр.Ключ, КлючИЗначениеПараметр.Значение);
		КонецЦикла;
		КонтекстКонвертации.Уровень_ВложенныйМассив = 0;
		Если   КлючИЗначение.Ключ	= "Вложения" Тогда
			Если КонтекстКонвертации.Свойство("ИмяУзла") Тогда
				КонтекстКонвертации.Удалить("ИмяУзла");
			КонецЕсли;
			КонтекстКонвертации.Вставить("Сократить", "Значение");//В значение по ключу узла, в значении ини которого будет сокращаемый ключ, будет добавлен сразу сокращаемый узел.
			КонтекстКонвертации.Уровень_Текущий = КонтекстКонвертации.Уровень_Текущий + 1;
			Результат.Вставить(КлючИЗначение.Ключ, Новый Структура("Имя, Значение", КлючИЗначение.Ключ, ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение, КонтекстКонвертации, ГлобальныеПараметрыКонвертации)));
			Продолжить;
		ИначеЕсли	КлючИЗначение.Ключ = "мФайл"
				Или	КлючИЗначение.Ключ = "мДокумент" Тогда
			//Если встречается структура в которой в мФайле идёт затем мДокумент, то это массив. Нужно поймать имя и проверять дальше
			КонтекстКонвертации.Вставить("СистемныйКлюч", КлючИЗначение.Ключ);
		КонецЕсли;
				
		//Проверим текущий элемент: не массивом ли он должен быть
		КонтекстКонвертации.РежимМассива = ?(КонтекстКонвертации.ОпределятьТипМассив, ПреобразованиеВОИни_JSONИни_ЭтоМассив(КлючИЗначение.Ключ, КлючИЗначение.Значение, КонтекстКонвертации), Ложь);
		
		Если	ПараметрыКонвертации.РежимМассива	Тогда
			Если	КонтекстКонвертации.РежимМассива
				И	КлючИЗначение.Значение.Свойство("Значение") Тогда
				//Это массив в массиве
				ЭлементДобавить	= ПреобразованиеВОИни_JSONИни_СформироватьЭлементСОтбором(КлючИЗначение.Значение);
				ЭлементДобавить.Вставить("Имя",	КлючИЗначение.Ключ);
			Иначе
				КонтекстКонвертации.Уровень_Текущий = КонтекстКонвертации.Уровень_Текущий + 1;
				ЭлементДобавить	= Новый	Структура("Имя, Значение", КлючИЗначение.Ключ, ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение, КонтекстКонвертации, ГлобальныеПараметрыКонвертации));
			КонецЕсли;
			Результат.Добавить(ЭлементДобавить);
		Иначе
			Если	(Не	ТипЗнч(КлючИЗначение.Значение) = Тип("Структура"))	Тогда
				Если КонтекстКонвертации.Свойство("ИмяУзла") Тогда
					Результат.Вставить("Имя", КонтекстКонвертации.ИмяУзла);
				КонецЕсли;
				Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			ИначеЕсли	(	КлючИЗначение.Значение.Свойство("Отбор")		)	Тогда
				Результат.Вставить(КлючИЗначение.Ключ, ПреобразованиеВОИни_JSONИни_СформироватьЭлементСОтбором(КлючИЗначение.Значение));
			ИначеЕсли 	(	КлючИЗначение.Значение.Свойство("Значение")		)	Тогда
				Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура")	Тогда
					Если	КонтекстКонвертации.Свойство("Сократить")
						И	КлючИЗначение.Значение.Свойство(КонтекстКонвертации.Сократить) Тогда
						Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение[КонтекстКонвертации.Сократить]);
					Иначе	
						КонтекстКонвертации.Вставить("РежимМассива", Ложь);
						Если КонтекстКонвертации.Свойство("ИмяУзла") Тогда
							КонтекстКонвертации.ИмяУзла = КлючИЗначение.Ключ;
						КонецЕсли;
						КонтекстКонвертации.Уровень_Текущий = КонтекстКонвертации.Уровень_Текущий + 1;
						Результат.Вставить(КлючИЗначение.Ключ, ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение, КонтекстКонвертации, ГлобальныеПараметрыКонвертации));
					КонецЕсли;
				Иначе
					Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЕсли;
			Иначе
				Если КонтекстКонвертации.Свойство("ИмяУзла") Тогда
					КонтекстКонвертации.ИмяУзла = КлючИЗначение.Ключ;
				КонецЕсли;
				КонтекстКонвертации.Уровень_Текущий = КонтекстКонвертации.Уровень_Текущий + 1;
				ПромежуточныйРезультат = ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение, КонтекстКонвертации, ГлобальныеПараметрыКонвертации);
				Результат.Вставить(КлючИЗначение.Ключ, ПромежуточныйРезультат);
			КонецЕсли;
			Если КонтекстКонвертации.РежимМассива Тогда
				//Первый встречный вложенный массив будет нашим мерилом для вложенности.
				//TODO39 добавить анализ уровней, если в одном элементе будет массив и структура с массивом
				Если ПараметрыКонвертации.Уровень_ВложенныйМассив = 0 Тогда
					ПараметрыКонвертации.Уровень_ВложенныйМассив = КонтекстКонвертации.Уровень_Текущий
				КонецЕсли;
			ИначеЕсли Не КонтекстКонвертации.Уровень_ВложенныйМассив = 0 Тогда
				ПараметрыКонвертации.Уровень_ВложенныйМассив = КонтекстКонвертации.Уровень_ВложенныйМассив;
			КонецЕсли;
		КонецЕсли
	КонецЦикла;
	Если ПараметрыКонвертации.РежимМассива Тогда
		ПараметрыКонвертации.Уровень_ВложенныйМассив = ПараметрыКонвертации.Уровень_Текущий;
	ИначеЕсли Не ПараметрыКонвертации.Уровень_Текущий = 0 Тогда
		//Если был вложенный массив, то проверим на предмет нашего текущего уровня. Если 2 и более, то текущий элемент тоже должен быть массивом
		Если ПараметрыКонвертации.Уровень_ВложенныйМассив - ПараметрыКонвертации.Уровень_Текущий = 2 Тогда
			//Переформатируем результат
			НовыйРезультат = Новый Массив;
			ПараметрыКонвертации.РежимМассива = Истина;
			//ПараметрыКонвертации.Уровень_ВложенныйМассив = КонтекстКонвертации.Уровень_Текущий - 1;
			Для Каждого ЭлементРезультата Из Результат Цикл
				 НовыйРезультат.Добавить(Новый Структура("Имя, Значение", ЭлементРезультата.Ключ, ЭлементРезультата.Значение));
			КонецЦикла;
			Результат = НовыйРезультат; 
		КонецЕсли;
	КонецЕсли;	
	
	Возврат	Результат;
	
КонецФункции

//Функция формирует новый элемент при наличии в нём отборов.
&НаКлиенте
Функция		ПреобразованиеВОИни_JSONИни_СформироватьЭлементСОтбором(Значение)
	
	Результат	= Новый	Структура();
	
	Для	Каждого	УзелДобавить	Из Значение	Цикл
		Если	УзелДобавить.Ключ	= "Отбор"
			И	ТипЗнч(УзелДобавить.Значение)	= Тип("Структура")	Тогда
				Для	Каждого	ЭлементОтбора	Из	УзелДобавить.Значение	Цикл
					Результат.Вставить(УзелДобавить.Ключ	+ "_"	+ ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				КонецЦикла;
		Иначе
			Результат.Вставить(УзелДобавить.Ключ, УзелДобавить.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат	Результат;

КонецФункции

//Функция определяет, должен ли переданный элемент быть массивом, или нет
&НаКлиенте
Функция		ПреобразованиеВОИни_JSONИни_ЭтоМассив(Ключ, Значение, КонтекстУзла)
	
	ЭтоМассив	= Ложь;
	Если		Ключ	= "Данные"					Тогда
	ИначеЕсли	ТипЗнч(Значение) = Тип("Структура")	Тогда
		ЭтоМассив	= Значение.Свойство("Значение");
		Если	Не	ЭтоМассив	Тогда//Проверим подэлементы. Если в одном из есть "значение", то делаем массив
			Для	Каждого	ПодЭлемент	Из	Значение	Цикл
				Если(	(	ТипЗнч(ПодЭлемент.Значение)	= Тип("Структура")
						И	ПодЭлемент.Значение.Свойство("Значение")))
					//Или если уровнем выше был системный ключ и в узле встречается другой системный ключ, то тоже делаем
					Или	(		(	ПодЭлемент.Ключ = "мФайл"
								Или ПодЭлемент.Ключ = "мДокумент")
						И		КонтекстУзла.Свойство("СистемныйКлюч")
						И	Не	ПодЭлемент.Ключ = КонтекстУзла.СистемныйКлюч) Тогда
					ЭтоМассив = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат	ЭтоМассив;

КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_Конвертеры_JSONВОбработку
////////////////////////////////////////////////////

//Функция преобразует структуру файлов настроек к "привычному" для обработки виду.
&НаСервереБезКонтекста
Функция		ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(Знач КэшИни, ДопПараметры) Экспорт
	
	СтруктураНастроек	= Новый	Структура;//
	КонтекстКонвертации	= Новый Структура;
	Если Не ДопПараметры.Свойство("Уровень") Тогда
		КонтекстКонвертации.Вставить("Уровень", 0);
	КонецЕсли;
		Для Каждого КлючЗначениеПараметра Из ДопПараметры	Цикл 
			КонтекстКонвертации.Вставить(КлючЗначениеПараметра.Ключ, КлючЗначениеПараметра.Значение);
		КонецЦикла;
	КонтекстКонвертации.Уровень = КонтекстКонвертации.Уровень + 1;
	Для Каждого Элемент Из КэшИни Цикл
		Если	Элемент.Ключ="СписокДокументов" Тогда
			Продолжить;
		КонецЕсли;
		Если	ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			ЭлементЗначение = Неопределено;
			Если	Элемент.Значение.Свойство("Значение",ЭлементЗначение)
				И	ТипЗнч(ЭлементЗначение) = Тип("Структура") Тогда
				СтруктураВставки = Новый Структура;
				ЭлементИни = Элемент.Значение;
				Для Каждого ЭлементСтруктуры Из ЭлементЗначение Цикл
					СтруктураВставки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);//	
				КонецЦикла;
				СтруктураНастроек.Вставить(Элемент.Ключ, ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(СтруктураВставки,КонтекстКонвертации));//					
			Иначе
				СтруктураНастроек.Вставить(Элемент.Ключ, ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(Элемент.Значение,КонтекстКонвертации));//
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ПодСтруктура = Новый Структура;
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				СтруктураЭлемента = Новый Структура;
				Для Каждого Поле Из ЭлементМассива Цикл
					Если Поле.Ключ<>"Имя" Тогда
						СтруктураЭлемента.Вставить(Поле.Ключ, Поле.Значение);	
					КонецЕсли;
				КонецЦикла;
				КлючПодструктуры = ЭлементМассива.Имя;
				ПодСтруктура.Вставить(КлючПодструктуры,СтруктураЭлемента);	
			КонецЦикла;
			КонтекстКонвертации.Вставить("УровеньМассив", КонтекстКонвертации.Уровень);
			КлючВставить	= Элемент.Ключ;
			ЗначениеВставить= ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(ПодСтруктура,КонтекстКонвертации);//
			Если	КлючВставить = "Значение"
				И	КэшИни.Количество() = 1
				И	ДопПараметры.Свойство("УровеньМассив")
				И	КонтекстКонвертации.Уровень - ДопПараметры.УровеньМассив = 2 Тогда
				//На 2 уровеня выше был массив, значит это может быть структура с удаленным дублирующимся именем . Пример: <Сотрудник Имя="Сотрудник"><Элемент/></Сотрудник> Превращается в {"Сотрудник": {"Элемент"}}
				СтруктураНастроек = ЗначениеВставить;//
			Иначе
				СтруктураНастроек.Вставить(Элемент.Ключ, ЗначениеВставить);//
			КонецЕсли;
			КонтекстКонвертации.Удалить("УровеньМассив");
		ИначеЕсли Лев(Элемент.Ключ,6)="Отбор_" Тогда
			ИмяОтбора = Сред(Элемент.Ключ, 7);
			Если	Элемент.Значение = ""
				И	КонтекстКонвертации.Свойство("ОчищатьОтключенные")
				И	КонтекстКонвертации.ОчищатьОтключенные Тогда
				Продолжить;//Отключенные узлы отбора не попадают в итоговую инишку.
			КонецЕсли;
			Если Не СтруктураНастроек.Свойство("Отбор") Тогда
				СтруктураНастроек.Вставить("Отбор", Новый Структура(ИмяОтбора,Элемент.Значение));//			
			Иначе
				СтруктураНастроек.Отбор.Вставить(ИмяОтбора,Элемент.Значение);
			КонецЕсли;
		Иначе
			ЗначениеКонтекста = Неопределено;
			Если КонтекстКонвертации.Свойство("Удалять",ЗначениеКонтекста)
				И ЗначениеКонтекста = Элемент.Ключ Тогда
				Продолжить;
			ИначеЕсли	КонтекстКонвертации.Свойство("ОбернутьЗначение", ЗначениеКонтекста)
				И	Не	ЗначениеКонтекста = Элемент.Ключ Тогда
				СтруктураНастроек.Вставить(Элемент.Ключ, Новый Структура(ЗначениеКонтекста, Элемент.Значение));
			Иначе
				СтруктураНастроек.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураНастроек
	
КонецФункции

#КонецОбласти
