
&НаКлиенте
Перем МестныйКэш Экспорт;
&НаКлиенте
Перем СбисПараметрыМетода Экспорт;

#Область include_local_ПолучитьМодульОбъекта

&НаСервере
Функция МодульОбъектаСервер()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция МодульОбъектаСерверБезКонтекста()
	Возврат Новый (Тип("ВнешняяОбработкаОбъект.СБИС"));
КонецФункции

&НаКлиенте
Функция МодульОбъектаКлиент() Экспорт
	Возврат ВладелецФормы.Кэш.СБИС.МодульОбъектаКлиент;
КонецФункции

#КонецОбласти

#Область include_local_ДокументШаблон_ОтправитьДокументы
//Старая логика отправки

// Процедура формирует и отправляет пакеты документов по отмеченным строкам в реестре	
&НаКлиенте
Процедура ОтправитьДокументы(Кэш,МассивСтрок) Экспорт
	Перем РезультатОтправки;

	ГлавноеОкно		= Кэш.ГлавноеОкно;
	УжеАктивированы	= Новый СписокЗначений;
	ИННОтправителей	= Новый СписокЗначений;
	МассивПакетов	= Новый Массив;  // Массив пакетов для одной отправки (если в настройках указано отправлять пакеты по n штук)
	Кэш.СписокНоменклатуры.Очистить();
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если	Не	Кэш.Свойство("РезультатОтправки", РезультатОтправки)
		Или	(		РезультатОтправки.Свойство("Новый")
			И Не	РезультатОтправки.Новый) Тогда
		РезультатОтправки = Новый Структура("ТипыОшибок,Отправлено,НеОтправлено,НеСформировано,Ошибок,ДетализацияОшибок,ВсегоПакетов,ОшибкиДоОтправки,ДанныеПоСтатусам,ПорНомер,КоличествоСвободныхПотоков,ОтправленоСообщений,ПолученоОтветов,ВремяНачала,ВремяФормирования,ВремяОтправки,ДетализацияОтправки,ВремяЗаписиСтатусов,ВремяПолученияДанных,ВремяОжиданияОтвета, СформированныеПакеты", Новый СписокЗначений,0,0,0,0, Новый Соответствие,0,0,Новый Массив,0,Кэш.КоличествоПотоковОтправки,0,0,ВремяНачала,0,0, Новый Соответствие,0,0,0, Новый Соответствие);
		РезультатОтправки.Вставить("НаЗаписьСтатусов", Новый Структура("Ошибки, Ответы", Новый Соответствие, Новый Соответствие));
		Кэш.Вставить("РезультатОтправки",РезультатОтправки);
	КонецЕсли;
	Кэш.РезультатОтправки.Вставить("Новый", Ложь);

	//Кэш.Интеграция.ЗакрытьСессию(Кэш);
	
	РезультатОтправки = ОтправитьДокументыПоМассивуСтрок(Кэш,МассивСтрок,0,МассивПакетов,ИННОтправителей, УжеАктивированы);
	Если ТипЗнч(РезультатОтправки) = Тип("Структура") Тогда  // если необходимо активировать сертификаты перед отправкой
		СчетчикВведенныхПинкодов = 0;
		счСертификатов = 0;
		Для Каждого Элемент Из РезультатОтправки.СписокСертификатов Цикл
			Сертификат = Элемент.Значение;
			Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
				Кэш.Интеграция.ПолучитьКодАктивацииСертификата(Кэш, Сертификат);				
			КонецЕсли;
			СертификатИмя = "Введите код активации сертификата " + Кэш.ОбщиеФункции.ПолучитьПредставлениеСертификата(Сертификат, "[ФИО].([Должность])., [Название].(ИНН [ИНН])", Истина);
			ОткрытьФорму(Кэш.ГлавноеОкно.СбисПутьКФормамОбработки() + "ФормаВводаПинкода",Новый Структура("СертификатИмя,счСертификатов",СертификатИмя,счСертификатов),ЭтаФорма,счСертификатов,,,Новый ОписаниеОповещения("АктивироватьСертификатыЗавершение",ЭтаФорма,Новый Структура("Кэш,РезультатОтправки",Кэш,РезультатОтправки)));	
			счСертификатов = счСертификатов+1;
		КонецЦикла;
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
КонецПроцедуры

// Функция формирует и отправляет пакеты документов по отмеченным строкам в реестре, начиная с счСтрок	
&НаКлиенте
Функция ОтправитьДокументыПоМассивуСтрок(Кэш,МассивСтрок,счСтрок,МассивПакетов,ИННОтправителей, УжеАктивированы) Экспорт
	Перем МассивПодготовленныхПакетов;
	
	ГлавноеОкно = Кэш.ГлавноеОкно;
	
	//ПолныйМассивПакетов = Новый Массив;  // Полный массив пакетов для отправки
	Всего = МассивСтрок.Количество();
	ПоследняяПартия = Ложь;
	
	ПодключитьОбработчикОжидания("ПрерываниеПользователемФормированияДокументов",0.1,Истина);
	Пока счСтрок<Всего Цикл //Отправляемые пакеты
		Строка = МассивСтрок[счСтрок];
		Если Не ТипЗнч(МассивСтрок) = Тип("Массив") Тогда
			Строка = Строка.Значение;
		КонецЕсли;
		Если Кэш.Свойство("ПрерватьОтправку") и Кэш.ПрерватьОтправку = Истина Тогда
			Прервать;
		КонецЕсли;
		счСтрок = счСтрок+1;
		Если счСтрок = Всего Тогда
			ПоследняяПартия = Истина;
		КонецЕсли;  
		
		Если Не Строка.Свойство("МассивПодготовленныхПакетов", МассивПодготовленныхПакетов) Тогда
			
			сбисПоказатьСостояние("Формирование электронных документов",ГлавноеОкно,Мин(100,Окр(счСтрок*100/Всего)));
			ДатаНач = ТекущаяУниверсальнаяДатаВМиллисекундах();
			МассивПодготовленныхПакетов = Кэш.Текущий.Форма.ПодготовитьСтруктуруДокумента(Строка, Кэш);
			ДатаКнц = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Кэш.РезультатОтправки.ВремяФормирования = Кэш.РезультатОтправки.ВремяФормирования+(ДатаКнц-ДатаНач)/1000;
			
		КонецЕсли;
		РезультатОтправки = ОтправитьПодготовленныеДокументы(Кэш, МассивПодготовленныхПакетов,0,МассивСтрок,счСтрок, МассивПакетов, ИННОтправителей, УжеАктивированы, ПоследняяПартия);
		Если РезультатОтправки = Ложь Тогда
			сбисСпрятатьСостояние(ГлавноеОкно);
			Возврат Ложь;
		КонецЕсли;
		Если ТипЗнч(РезультатОтправки) = Тип("Структура") Тогда
			Возврат РезультатОтправки;
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	ОтключитьОбработчикОжидания("ПрерываниеПользователемФормированияДокументов");
	сбисСпрятатьСостояние(ГлавноеОкно);
КонецФункции

// Функция отправляет подготовленные пакеты документов. Вызывается из форм просмотра, пересылки и отправки корреспонденции
&НаКлиенте
Функция ОтправитьПодготовленныеПакетыДокументы(Кэш, МассивПодготовленныхПакетов) Экспорт
	УжеАктивированы = Новый СписокЗначений;
	ИННОтправителей = Новый СписокЗначений;
	МассивПакетов = Новый Массив;
	ПоследняяПартия = Истина;
	РезультатОтправки = ОтправитьПодготовленныеДокументы(Кэш, МассивПодготовленныхПакетов,0,Новый Массив,0, МассивПакетов, ИННОтправителей, УжеАктивированы, ПоследняяПартия);
	Если ТипЗнч(РезультатОтправки) = Тип("Структура") Тогда  // если необходимо активировать сертификаты перед отправкой
		СчетчикВведенныхПинкодов = 0;
		счСертификатов = 0;
		Для Каждого Элемент Из РезультатОтправки.СписокСертификатов Цикл
			Сертификат = Элемент.Значение;
			Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
				Кэш.Интеграция.ПолучитьКодАктивацииСертификата(Кэш, Сертификат);				
			КонецЕсли;
			СертификатИмя = "Введите код активации сертификата "+Кэш.ОбщиеФункции.СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")", "")+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","");
			ОткрытьФорму(Кэш.ГлавноеОкно.СбисПутьКФормамОбработки() + "ФормаВводаПинкода",Новый Структура("СертификатИмя,счСертификатов",СертификатИмя,счСертификатов),ЭтаФорма,,,,Новый ОписаниеОповещения("АктивироватьСертификатыЗавершение",ЭтаФорма,Новый Структура("Кэш,РезультатОтправки",Кэш,РезультатОтправки)));	
			счСертификатов = счСертификатов+1;
		КонецЦикла;
	КонецЕсли;	
КонецФункции

// Функция отправляет подготовленный пакеты. 	
&НаКлиенте
Функция ОтправитьПодготовленныеДокументы(Кэш, МассивПодготовленныхПакетов,счПодготовленныхПакетов,МассивСтрок,счСтрок, МассивПакетов, ИННОтправителей, УжеАктивированы, ПоследняяПартия) Экспорт
	Если Кэш.РезультатОтправки.Свойство("ПрерватьОтправку") и Кэш.РезультатОтправки.ПрерватьОтправку<>Истина Тогда    // при отправке были проблемы со связью
		Сообщить("Отправка была прервана."+Символы.ПС + Кэш.РезультатОтправки.ПрерватьОтправку );
		Кэш.ФормаОтправки.сбисПолучитьОтветыПоОтправке(Кэш);
		Кэш.ГлавноеОкно.ОбновитьКонтент();
		
		Возврат Ложь;
	КонецЕсли;
	
	КолПакетов = МассивПодготовленныхПакетов.Количество();
	Пока счПодготовленныхПакетов<КолПакетов Цикл
		Пакет = МассивПодготовленныхПакетов[счПодготовленныхПакетов];
					
		счПодготовленныхПакетов = счПодготовленныхПакетов+1;
		ПолныйСоставПакета = Пакет;
		
		//++ Бухов А. Точка входа при отправке пакетов документов
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеФормированияПакетаДокументов","Документ_"+Кэш.Текущий.ТипДок,"Документ_Шаблон", Кэш);
		Если фрм<>Ложь Тогда
			ПолныйСоставПакета = фрм.сбисПослеФормированияПакетаДокументов(ПолныйСоставПакета, Кэш);	
		КонецЕсли;
		//-- Бухов А. Точка входа при отправке пакетов документов
		
		Если ПолныйСоставПакета.Свойство("Ошибка") Тогда
			Кэш.РезультатОтправки.ОшибкиДоОтправки = Кэш.РезультатОтправки.ОшибкиДоОтправки + 1;
			Если ПолныйСоставПакета.Свойство("Вложение") и ПолныйСоставПакета.Вложение.Количество()>0 и ПолныйСоставПакета.Вложение[0].Свойство("Документы1С") Тогда
				ОсновнойДокумент1С = ПолныйСоставПакета.Вложение[0].Документы1С[0].Значение;
			Иначе
				ОсновнойДокумент1С = Неопределено;
			КонецЕсли;
			Кэш.ОбщиеФункции.ДобавитьОшибкуВРезультатОтправки(Кэш, ПолныйСоставПакета.Ошибка, ПолныйСоставПакета.Ошибка, ОсновнойДокумент1С);
		Иначе
			ИННОтправителя = ?(ПолныйСоставПакета.НашаОрганизация.Свойство("СвФЛ"),ПолныйСоставПакета.НашаОрганизация.СвФЛ.ИНН,ПолныйСоставПакета.НашаОрганизация.СвЮЛ.ИНН);
			Если ИННОтправителей.НайтиПоЗначению(ИННОтправителя)=Неопределено и УжеАктивированы.НайтиПоЗначению(ИННОтправителя)=Неопределено Тогда 
				ИННОтправителей.Добавить(ИННОтправителя);
			КонецЕсли;
			Если ПолныйСоставПакета.Свойство("Вложение") Тогда
				МассивПакетов.Добавить(ПолныйСоставПакета);
				Если МассивПакетов.Количество() = Кэш.КоличествоВОтправке Тогда
					// если надо активировать сертификаты
					Если ИННОтправителей.Количество()>0 Тогда
						СписокСертификатов = Кэш.Интеграция.ПолучитьСертификатыДляАктивации(Кэш, ИННОтправителей);
						Если СписокСертификатов.Количество()>0 Тогда
							Возврат Новый Структура("МассивПакетов, СписокСертификатов, МассивПодготовленныхПакетов, счПодготовленныхПакетов,МассивСтрок,счСтрок, ИННОтправителей, УжеАктивированы, ПоследняяПартия", МассивПакетов, СписокСертификатов, МассивПодготовленныхПакетов, счПодготовленныхПакетов,МассивСтрок,счСтрок, ИННОтправителей, УжеАктивированы, ПоследняяПартия);
						КонецЕсли;
						Для Каждого Элемент Из ИННОтправителей Цикл
							УжеАктивированы.Добавить(Элемент.Значение);
						КонецЦикла;
						ИННОтправителей.Очистить();
					КонецЕсли;
					// если ничего не надо активировать, то отправляем партию пакетов
					ОтправитьПартиюПакетов(Кэш, МассивПакетов);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ПоследняяПартия Тогда
		
		Если ИННОтправителей.Количество()>0 Тогда
			СписокСертификатов = Кэш.Интеграция.ПолучитьСертификатыДляАктивации(Кэш, ИННОтправителей);
			Если СписокСертификатов.Количество()>0 Тогда
				Возврат Новый Структура("МассивПакетов, СписокСертификатов, МассивПодготовленныхПакетов, счПодготовленныхПакетов,МассивСтрок,счСтрок, ИННОтправителей, УжеАктивированы, ПоследняяПартия", МассивПакетов, СписокСертификатов, МассивПодготовленныхПакетов, счПодготовленныхПакетов,МассивСтрок,счСтрок, ИННОтправителей, УжеАктивированы, ПоследняяПартия);
			КонецЕсли;
			Для Каждого Элемент Из ИННОтправителей Цикл
				УжеАктивированы.Добавить(Элемент.Значение);
			КонецЦикла;
			ИННОтправителей.Очистить();
		КонецЕсли;
		
		ОтправитьПартиюПакетов(Кэш, МассивПакетов);
		
		Кэш.ФормаОтправки.сбисПолучитьОтветыПоОтправке(Кэш);
		Кэш.РезультатОтправки.НеОтправлено = Кэш.РезультатОтправки.ВсегоПакетов-Кэш.РезультатОтправки.Отправлено+Кэш.РезультатОтправки.ОшибкиДоОтправки;
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеОтправкиПакетов","РаботаСДокументами1С","", Кэш);
		Если фрм<>Ложь Тогда
			фрм.сбисПослеОтправкиПакетов(Кэш);	
		КонецЕсли;
		Если Не Кэш.ТихийРежим Тогда
			Если		Кэш.РезультатОтправки.Свойство("ОбработчикРезультата")
				И	Не	Кэш.РезультатОтправки.ОбработчикРезультата = Неопределено Тогда
				ОбработчикРезультат = Кэш.РезультатОтправки.ОбработчикРезультата;
				Кэш.РезультатОтправки.Удалить("ОбработчикРезультата");
				МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(Кэш.РезультатОтправки, ОбработчикРезультат);
			ИначеЕсли	Кэш.РезультатОтправки.Свойство("ФормаОтправки") Тогда
				Кэш.ГлавноеОкно.сбисПолучитьФорму(Кэш.РезультатОтправки.ФормаОтправки).ПослеОтправки(Кэш);
			Иначе
				фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПоказатьРезультатОтправки","ФормаРезультатОтправки","", Кэш);
				фрм.ПоказатьРезультатОтправки(Кэш);
				Если Кэш.РезультатОтправки.Свойство("ОтправкаИзПересылки") Тогда
					сбисПолучитьФорму("ФормаПересылкаПакетов").ПослеОтправки(Кэш);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

// Функция выполняет отправку партии подготовленных пакетов документов через форму интеграции. Так же отправляет каталог номенклатуры.
&НаКлиенте
Функция ОтправитьПартиюПакетов(Кэш, МассивПакетов) Экспорт
	Кэш.ФормаОтправки.ОтправитьПакетыДокументов(Кэш, МассивПакетов);
	Если Кэш.РезультатОтправки.Свойство("ПереотправитьПартию") Тогда
		МассивНеотправленныхПакетов = Новый Массив;
		Для Каждого Пакет Из МассивПакетов Цикл
			Если НЕ Пакет.Свойство("Отправлен") Тогда
				МассивНеотправленныхПакетов.Добавить(Пакет);
			КонецЕсли;
		КонецЦикла;
		Кэш.ФормаОтправки.ОтправитьПакетыДокументов(Кэш, МассивНеотправленныхПакетов);
		Кэш.РезультатОтправки.Удалить("ПереотправитьПартию");
	КонецЕсли;
	Кэш.РезультатОтправки.ВсегоПакетов = Кэш.РезультатОтправки.ВсегоПакетов+МассивПакетов.Количество();
	МассивПакетов.Очистить();
	СтруктураИниФайла = Кэш.Ини;
	//Если	Кэш.Парам.ОтправлятьНоменклатуруСДокументами = Истина
	//	И	СтруктураИниФайла.Свойство("Номенклатура",СтруктураИниФайла)
	//	И	СтруктураИниФайла.Свойство("мФайл",СтруктураИниФайла)
	//	И	СтруктураИниФайла.Свойство("Номенклатура",СтруктураИниФайла) Тогда
	//	ИниНоменклатура = Новый Структура;
	//	Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(ИниНоменклатура, СтруктураИниФайла);
	//	КаталогОтправлен = Кэш.ОбщиеФункции.сбисСформироватьОтправитьКаталогТоваров(Кэш, Новый Структура("СписокНоменклатуры, Организация",Кэш.СписокНоменклатуры),ИниНоменклатура,Новый Структура("РеквизитСопоставленияНоменклатуры", Кэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры));
	//	Кэш.СписокНоменклатуры.Очистить();
	//КонецЕсли;
КонецФункции

// Функция вызывается после ввода пин-кода (если требовалось активировать серверные сертификаты). 
// Отправляет сформированную партию пакетов и если есть еще несформированные, вызывает дальнейшее формирование.
&НаКлиенте
Функция АктивироватьСертификатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Кэш = ДополнительныеПараметры.Кэш;
	РезультатОтправки = ДополнительныеПараметры.РезультатОтправки;
	Если Результат = Неопределено Тогда   // не ввели пин-код
		ТекстОшибки = "Не активирован сертификат для подписания документов.";
		Сообщить(ТекстОшибки);
		//ЭлементСписка = Кэш.РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);
		//Если ЭлементСписка=Неопределено Тогда
		//	Кэш.РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, КоличествоПакетов);
		//Иначе
		//	ЭлементСписка.Представление = Число(ЭлементСписка.Представление)+КоличествоПакетов;
		//КонецЕсли;
		сбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Возврат Ложь;
	Иначе
		ТекущийСертификат = РезультатОтправки.СписокСертификатов[Результат.счСертификатов].Значение;
		ТекущийСертификат.Вставить("КодАктивации",Результат.ПинКод);
		СчетчикВведенныхПинкодов = СчетчикВведенныхПинкодов+1;
		Если СчетчикВведенныхПинкодов = РезультатОтправки.СписокСертификатов.Количество() Тогда   // если ввели все пин-коды
			Если Кэш.Интеграция.АктивироватьСерверныеСертификаты(Кэш, РезультатОтправки.СписокСертификатов) = Ложь Тогда
				Возврат Ложь;
			КонецЕсли;
			Для Каждого Элемент Из РезультатОтправки.ИННОтправителей Цикл
				РезультатОтправки.УжеАктивированы.Добавить(Элемент.Значение);
			КонецЦикла;
			ИННОтправителей = Новый СписокЗначений;
			ОтправитьПартиюПакетов(Кэш, РезультатОтправки.МассивПакетов); // отправляем уже готовую партию
			МассивПакетов = Новый Массив;
			// отправляем остальные подготовленные пакеты (или выводим результат, если уже все отправили)
			ПромежуточныйРезультатОтправки = ОтправитьПодготовленныеДокументы(Кэш, РезультатОтправки.МассивПодготовленныхПакетов,РезультатОтправки.счПодготовленныхПакетов,РезультатОтправки.МассивСтрок,РезультатОтправки.счСтрок, МассивПакетов, ИННОтправителей, РезультатОтправки.УжеАктивированы, РезультатОтправки.ПоследняяПартия);	
			Если ТипЗнч(ПромежуточныйРезультатОтправки) = Тип("Структура") Тогда
				СчетчикВведенныхПинкодов = 0;
				счСертификатов = 0;
				Для Каждого Элемент Из ПромежуточныйРезультатОтправки.СписокСертификатов Цикл
					Сертификат = Элемент.Значение;
					Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
						Кэш.Интеграция.ПолучитьКодАктивацииСертификата(Кэш, Сертификат);				
					КонецЕсли;
					СертификатИмя = "Введите код активации сертификата "+Кэш.ОбщиеФункции.СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")", "")+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","");
					ОткрытьФорму(Кэш.ГлавноеОкно.СбисПутьКФормамОбработки() + "ФормаВводаПинкода",Новый Структура("СертификатИмя,счСертификатов",СертификатИмя,счСертификатов),ЭтаФорма,,,,Новый ОписаниеОповещения("АктивироватьСертификатыЗавершение",ЭтаФорма,Новый Структура("Кэш,РезультатОтправки",Кэш,ПромежуточныйРезультатОтправки)));	
					счСертификатов = счСертификатов+1;
				КонецЦикла;
				Возврат Истина;
			КонецЕсли;
			//Формируем остальные пакеты и отправляем их
			Если РезультатОтправки.Свойство("счСтрок") и РезультатОтправки.счСтрок<РезультатОтправки.МассивСтрок.Количество() Тогда
				РезультатОтправки = ОтправитьДокументыПоМассивуСтрок(Кэш,РезультатОтправки.МассивСтрок,РезультатОтправки.счСтрок,МассивПакетов, ИННОтправителей, РезультатОтправки.УжеАктивированы);
				Если ТипЗнч(РезультатОтправки) = Тип("Структура") Тогда
					СчетчикВведенныхПинкодов = 0;
					счСертификатов = 0;
					Для Каждого Элемент Из РезультатОтправки.СписокСертификатов Цикл
						Сертификат = Элемент.Значение;
						Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
							Кэш.Интеграция.ПолучитьКодАктивацииСертификата(Кэш, Сертификат);				
						КонецЕсли;
						СертификатИмя = "Введите код активации сертификата "+Кэш.ОбщиеФункции.СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")", "")+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","");
						ОткрытьФорму(Кэш.ГлавноеОкно.СбисПутьКФормамОбработки() + "ФормаВводаПинкода",Новый Структура("СертификатИмя,счСертификатов",СертификатИмя,счСертификатов),ЭтаФорма,,,,Новый ОписаниеОповещения("АктивироватьСертификатыЗавершение",ЭтаФорма,Новый Структура("Кэш,РезультатОтправки",Кэш,РезультатОтправки)));	
						счСертификатов = счСертификатов+1;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

#КонецОбласти


#Область include_core2_vo2_Документ_Шаблон_Совместимость

&НаКлиенте
Функция сбисПолучитьФорму(СбисИмяФормы)
	Возврат ВладелецФормы.сбисПолучитьФорму(СбисИмяФормы);
КонецФункции

&НаКлиенте
Процедура сбисПоказатьСостояние(ТекстСостояния, Форма = Неопределено, Индикатор = Неопределено, Пояснение = "")
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Состояние(ТекстСостояния,Индикатор,Пояснение);
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Истина;
		Форма.НадписьОжидания = Символы.ПС + ТекстСостояния;
		Форма.НадписьПояснение = Пояснение;
		Если Индикатор<>Неопределено Тогда
			Форма.ЭлементыФормы.Индикатор.Видимость = Истина;
			Форма.ЭлементыФормы.Индикатор.Значение = Индикатор;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура сбисСпрятатьСостояние(Форма = Неопределено)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
		Форма.ЭлементыФормы.Индикатор.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Документ_Шаблон_ВнешнийВызов

//Процедура длительной операции формирования и загрузки пакетов отчетности
&НаКлиенте
Процедура ЗагрузитьОтчетность(Кэш, ПараметрыЗагрузки) Экспорт
	ГлавноеОкно = Кэш.ГлавноеОкно;
	
	МассивПакетов = Новый Массив;  // Массив пакетов для одной отправки (если в настройках указано отправлять пакеты по n штук)
	
	МестныйКэш = Кэш;
	СбисПараметрыМетода = ПараметрыЗагрузки;
	Если ПараметрыЗагрузки.СписокДокументов.Количество() Тогда 
		ГлавноеОкно.СбисПоказатьСостояние("Формирование комплектов отчентности", ГлавноеОкно,, "(прервать -  Ctrl+Break)");
		ПодключитьОбработчикОжидания("ЗагрузитьСледующийКомплект", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

// Функция формирует и загружает комплекты отчетности по отмеченным строкам
&НаКлиенте
Процедура ЗагрузитьСледующийКомплект() Экспорт
	Перем ВсегоКомплектов, ИндексКомплекта;
	ЭтаФорма.ОтключитьОбработчикОжидания("ПрерываниеПользователемФормированияДокументов");
	
	ПараметрыЗагрузки	= СбисПараметрыМетода;
	Кэш					= МестныйКэш;
	ГлавноеОкно			= Кэш.ГлавноеОкно;
	ГлавноеОкно.СбисОбработкаПрерывания();
	Отказ = Ложь;
	Если Не ПараметрыЗагрузки.Свойство("Всего", ВсегоКомплектов) Тогда
		ВсегоКомплектов = ПараметрыЗагрузки.СписокДокументов.Количество();
		ПараметрыЗагрузки.Вставить("Всего", ВсегоКомплектов);
	КонецЕсли;
	Если Не ПараметрыЗагрузки.Свойство("Индекс", ИндексКомплекта) Тогда
		ИндексКомплекта = 0;
		ПараметрыЗагрузки.Вставить("Индекс", ИндексКомплекта);
	КонецЕсли;
	ГлавноеОкно.СбисПоказатьСостояние("Формирование комплектов отчентности", ГлавноеОкно, Мин(100, Окр((ИндексКомплекта+1)*100/ВсегоКомплектов)), "(прервать -  Ctrl+Break)");
	
	СтрокаДетализации = Кэш.ОбщиеФункции.РезультатДействия_СформироватьСтрокуДетализации(Кэш);
	СтрокаКомплект = ПараметрыЗагрузки.СписокДокументов[ИндексКомплекта];
	ПолныйКомплект = Кэш.Текущий.Форма.ПодготовитьСтруктуруДокумента(СтрокаКомплект.Значение, Кэш);
	СтрокаДетализации.Название = ПолныйКомплект.Название;
	Если ПолныйКомплект.Свойство("Ошибка") Тогда		
		Кэш.ОбщиеФункции.РезультатДействия_ДобавитьОшибку(Кэш, ПараметрыЗагрузки.РезультатДействия, СтрокаДетализации, ПолныйКомплект.Ошибка);
	Иначе
		РезультатЗагрузки = Кэш.Интеграция.Интеграция_ЗагрузитьКомплект(Кэш, ПолныйКомплект, Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь), Отказ);
		Если Отказ Тогда
			Кэш.ОбщиеФункции.РезультатДействия_ДобавитьОшибку(Кэш, ПараметрыЗагрузки.РезультатДействия, СтрокаДетализации, РезультатЗагрузки);
		Иначе
			Кэш.ОбщиеФункции.РезультатДействия_ДобавитьСтатусВРезультатПоПакету();
			Кэш.ОбщиеФункции.РезультатДействия_ДобавитьРезультат(Кэш, ПараметрыЗагрузки.РезультатДействия, СтрокаДетализации, РезультатЗагрузки);
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.ПодключитьОбработчикОжидания("ПрерываниеПользователемФормированияДокументов", 0.2, Истина);
	Если ПараметрыЗагрузки.Индекс < ВсегоКомплектов - 1 Тогда
		ПараметрыЗагрузки.Индекс = ПараметрыЗагрузки.Индекс + 1;
		ЭтаФорма.ПодключитьОбработчикОжидания("ЗагрузитьСледующийКомплект", 0.1, Истина);
	Иначе
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, ПараметрыЗагрузки.РезультатДействия, ПараметрыЗагрузки.ОбработчикРезультата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьДокумент(Кэш,Контекст) Экспорт
	// Функция перебирает мФайлы в файле настроек и для каждого вызывает функцию формирования структуры документа из соответствующей формы Файл_...	
	// Все вложения из состава пакета добавляем в первый пакет, сформированный по строке документов
	// на случай, если по одному из вложений формируется сразу несколько пакетов
	Если Контекст.МассивПакетов.Количество()>0 Тогда
		Контекст.СоставПакета = Контекст.МассивПакетов[0];
	Иначе
		Контекст.Вставить("СоставПакета",Новый Структура);
		Контекст.СоставПакета.Вставить("Вложение",Новый Массив);
	КонецЕсли;
	Контекст.Вставить("ФайлДанные", Новый Структура);
	ВсеВыгрузилось = Истина;     
	Для Каждого Файл Из Контекст.ДокументДанные.мФайл Цикл
		Файл = Файл.Значение;
		Контекст.ФайлДанные = Файл;
		Файл.Файл_Формат = Кэш.ОбщиеФункции.РассчитатьЗначение("Файл_Формат", Файл, Кэш);
		Файл_Формат = Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Файл.Файл_Формат);
		Файл_ВерсияФормата = Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Файл.Файл_ВерсияФормата);
		Если Файл_Формат = "Конверт" И Контекст.СоставПакета.Свойство("Конверт") Тогда     // если конверт уже есть, переходим к следующему мФайлу
			Продолжить;
		КонецЕсли;
		Если Файл.Свойство("ФормаФормирования") Тогда
			ФормаФормирования = Файл.ФормаФормирования;
		Иначе
			ФормаФормирования = "Файл_"+Файл_Формат+"_"+Файл_ВерсияФормата;
		КонецЕсли;
		// << alo 3.03
		ОсновнаяФормаФормирования = "Файл_Шаблон" + ?(Файл_ВерсияФормата = "3_01", "", "_" + Файл_ВерсияФормата);
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьДанныеИзДокумента1С",ФормаФормирования,ОсновнаяФормаФормирования,Кэш);
		Если фрм = Ложь Тогда
			Если Кэш.Свойство("РезультатОтправки") Тогда
				Кэш.РезультатОтправки.НеСформировано = Кэш.РезультатОтправки.НеСформировано+1;
				Кэш.РезультатОтправки.ОшибкиДоОтправки = Кэш.РезультатОтправки.ОшибкиДоОтправки + 1;
				Кэш.ОбщиеФункции.ДобавитьОшибкуВРезультатОтправки(Кэш, "Документ не сформирован", "Для документа "+строка(Контекст.Документ)+" не найдена форма формирования электронного документа в формате "+Файл_Формат+", версии "+Файл.Файл_ВерсияФормата, Контекст.Документ, 726)
			Иначе
				Сообщить("Для документа "+строка(Контекст.Документ)+" не найдена форма формирования электронного документа в формате "+Файл_Формат+", версии "+Файл.Файл_ВерсияФормата);
			КонецЕсли;	
			Возврат Ложь;
		КонецЕсли;
		Если Не фрм.ПолучитьДанныеИзДокумента1С(Кэш,Контекст) Тогда //если хотябы что-то не выгрузилось - отбой
			ВсеВыгрузилось = Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	Если Контекст.МассивПакетов.Количество()>0 Тогда
		Контекст.МассивПакетов[0] = Контекст.СоставПакета;
	Иначе
		Контекст.МассивПакетов.Вставить(0, Контекст.СоставПакета);
	КонецЕсли;
	
	Возврат ВсеВыгрузилось;
КонецФункции

&НаКлиенте
Функция ПрочитатьТабличнуюЧасть(Кэш,Контекст) Экспорт
	// Функция формирует табличную часть документа
	// Используется при формировании таб части СФ из документов-оснований
	Контекст.Вставить("СписокТЧ", Новый СписокЗначений);  // список ТЧ, чтобы одна и та же таб. часть дважды не попадала в документ
	Для Каждого Файл Из Контекст.ДокументДанные.мФайл Цикл
		Файл = Файл.Значение;
		Контекст.ФайлДанные = Файл;
		Файл.Файл_Формат = Кэш.ОбщиеФункции.РассчитатьЗначение("Файл_Формат", Файл, Кэш);
		Файл_Формат = Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Файл.Файл_Формат);
		Файл_ВерсияФормата = Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Файл.Файл_ВерсияФормата);
		Если Файл_Формат = "Конверт" Тогда     // Конверт пропускаем
			Продолжить;
		КонецЕсли;
		Если Файл.Свойство("ФормаФормирования") Тогда
			ФормаФормирования = Файл.ФормаФормирования;
		Иначе
			ФормаФормирования = "Файл_"+Файл_Формат+"_"+Файл_ВерсияФормата;
		КонецЕсли;    
		
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТабличнуюЧастьДокумента1С",ФормаФормирования,"Файл_Шаблон",Кэш);	
		фрм.ПолучитьТабличнуюЧастьДокумента1С(Кэш,Контекст)
	КонецЦикла;
	Контекст.Удалить("СписокТЧ");
	Возврат Истина;
КонецФункции		

// Загрузка документов
&НаКлиенте
Функция ЗагрузитьДокументыВ1С(Кэш, СписокОтмеченныхДокументов, ДополнительныеПараметры=Неопределено) Экспорт
	// Загружает отмеченные пакеты документов в 1С	
	
	//Режим 0 Перезаполнить
	//Режим 1 Создать новые
	//Режим 2 Отменить
	//Режим 3 Загружать ещё не загруженные
	РежимДокументов = 3;
	//Режим 0 Документ не загружается, если нет сопоставления.
	//Режим 1 Для несопоставленных позиций создавать карточки номенклатуры и контрагента.
	//Режим 2 В табличную часть загружать только сопоставленную номенклатуру.                             
	РежимНоменклатуры = 1;
	Если Не ДополнительныеПараметры = Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("РежимДокументов") Тогда
			РежимДокументов = ДополнительныеПараметры.РежимДокументов;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("РежимНоменклатуры") Тогда
			РежимНоменклатуры = ДополнительныеПараметры.РежимНоменклатуры;
		КонецЕсли;
	КонецЕсли;
	
	Обновлять = Ложь;
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	Всего = СписокОтмеченныхДокументов.Количество();
	Загружено = 0;
	сч = 0;
	
	РезультатДействия = МестныйКэш.ОбщиеФункции.РезультатДействия_Получить(МестныйКэш, Новый Структура("ПредставлениеОперации, ФормаВызова", "ЗагрузкаДокумента", "Документ_Шаблон"));
	МестныйКэш.Вставить("РезультатДействия", РезультатДействия);
	ПараметрыЗагрузки = Новый Структура("РежимДокументов, РежимНоменклатуры", РежимДокументов, РежимНоменклатуры);
	//Если необходимо внести какие-то изменения, ответив на вопрос, то массово не делаем. Только на форме просмотра.
	ДополнительныеПараметрыЗагрузки = Новый Структура("ОтветНаИзмененияВИсходныйДокумент, ФормаВызова", КодВозвратаДиалога.Отмена, "Документ_Шаблон");
	Для Каждого Строка из СписокОтмеченныхДокументов Цикл
		сч = сч + 1;
		сбисПоказатьСостояние("Загрузка документов",ГлавноеОкно,Мин(100,Окр(сч*100/Всего)));
		МассивПакетов = Кэш.Текущий.Форма.ПодготовитьСтруктуруДокумента(Строка.Значение, Кэш);
		МестныйКэш.ОбщиеФункции.РезультатДействия_ДобавитьВремя(Кэш, РезультатДействия, "ПолучениеДанных");
		Для Каждого Пакет Из МассивПакетов Цикл
			ПолныйСоставПакета = МестныйКэш.ОбщиеФункции.РазобратьСтруктуруДокументаСбис(Пакет, Кэш);
			ПолныйСоставПакета = МестныйКэш.ОбщиеФункции.ЗаполнитьРеквизитыОснованийПакета(ПолныйСоставПакета, МестныйКэш); // пока SDK не возвращает дату, номер док. основания
			МестныйКэш.ОбщиеФункции.РезультатДействия_ДобавитьВремя(Кэш, РезультатДействия, "Подготовка");
			ПолныйСоставПакета.Вставить("НоменклатураСопоставлена",Истина);
			СписокВложений = Новый Массив;
			Для Каждого Вложение Из ПолныйСоставПакета.Вложение Цикл
				ДанныеДляЗагрузки = МестныйКэш.ОбщиеФункции.ЗаполнитьДанныеДляЗагрузкиПоУмолчанию(Кэш,ПолныйСоставПакета,Вложение,ДополнительныеПараметрыЗагрузки);
				ВложениеДобавить = Новый СписокЗначений;
				ВложениеДобавить.Добавить(Вложение);
				ДанныеДляЗагрузки.Вставить("Вложение", ВложениеДобавить);
				ДанныеДляЗагрузки.Вставить("Отмечен", Истина);
				СписокВложений.Добавить(ДанныеДляЗагрузки);
			КонецЦикла;
			Если Не СписокВложений.Количество() Тогда 
				Продолжить; 
			КонецЕсли;
			//Здесь не используем возвращаемый результат, так как он в созданном результате действия. Его и возвращаем в конце.
			МестныйКэш.ОбщиеФункции.СоздатьПерезаполнитьДокументы(Кэш,ПолныйСоставПакета,СписокВложений,ПараметрыЗагрузки,ДополнительныеПараметрыЗагрузки);
		КонецЦикла;
	КонецЦикла;
	сбисСпрятатьСостояние(ГлавноеОкно);
	Возврат	РезультатДействия;	
КонецФункции

// Функция заполняет документ 1С данными из файла, проставляет идентификаторы и статус документа СБИС	
&НаКлиенте
Функция СоздатьДокумент(Кэш, Вложение, Ини, СоставПакета, МассивОснований, Документ1С = Неопределено) Экспорт
	
	МестныйКэш		= Кэш;
	ГлавноеОкно		= Кэш.ГлавноеОкно;
	СтруктураФайла	= Вложение.СтруктураФайла;
	
	Если КэшДляСервера = Неопределено Тогда
		КэшДляСервера = Кэш.ОбщиеФункции.КэшДляСервера(Кэш);
	КонецЕсли;
	
	СписокДокументов			= Новый СписокЗначений;
	СтруктураДанныхДокумента	= Новый Структура;
	
	//AU таким костыльным способом передаём строку детализации внуть метода.
	ДанныеДетализации = Кэш.ОбщиеФункции.РезультатДействия_ИзвлечьВременныеДанные(Кэш);
	Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(СтруктураДанныхДокумента, Ини);
	ТипДокумента = СообщитьИмяРеквизита(Ини.Документ.Значение);
	
	Если Документ1С = Неопределено И Кэш.парам.СопоставлятьПередЗагрузкой Тогда
		
		РеквизитыДляПоиска = Новый Структура;
		РеквизитыДляПоиска.Вставить("НашаОрганизация",	СоставПакета.НашаОрганизация);
		РеквизитыДляПоиска.Вставить("Контрагент",		?(СоставПакета.Свойство("Контрагент"), СоставПакета.Контрагент, Неопределено));
		РеквизитыДляПоиска.Вставить("Дата",				МодульОбъектаКлиент().ДатаИзСтроки(Вложение.Дата));
		РеквизитыДляПоиска.Вставить("Номер",			Вложение.Номер);
		
		ФормаНайтиДок = ГлавноеОкно.сбисНайтиФормуФункции("НайтиПодходящиеДокументыОпределенногоТипа", "РаботаСДокументами1С",, Кэш);
		ФормаНайтиДок.НайтиПодходящиеДокументыОпределенногоТипа(СписокДокументов, Ини, Кэш.Ини, Кэш.Парам, РеквизитыДляПоиска);
		
	КонецЕсли;
	
	Если СписокДокументов.Количество() = 1 Тогда
		
		Документ1С = СписокДокументов[0].Значение; 
		
		// Если документ уже загружен в рамках текущего пакета, то надо дополнить его данными текущего вложения
		// (например, загружаем акт и накладную в одно поступление)
		ДокументНайденВМассивеОснований = Ложь;
		
		Для каждого ОснованиеСтруктура Из МассивОснований Цикл
			
			Если ТипЗнч(ОснованиеСтруктура) = Тип("Структура") Тогда
				ДокОснование = ОснованиеСтруктура.ДокОснование;
			Иначе
				ДокОснование = ОснованиеСтруктура;
			КонецЕсли;
			
			Если ДокОснование = Документ1С Тогда
				
				ДокументНайденВМассивеОснований = Истина;
				Прервать;    
				
			КонецЕсли;  
			
		КонецЦикла;
		
		Если ДокументНайденВМассивеОснований Тогда
			Документ1С = ЗаполнитьДанныеДокумента1С(Кэш,
													СтруктураДанныхДокумента,
													СтруктураФайла,
													МассивОснований,
													СоставПакета,
													Вложение,
													Документ1С,
													ДанныеДетализации);	
		Иначе
													
			СтрокаСообщения	= "Найден соответствующий документ 1С " + строка(Документ1С);
			
			// AU если нет результата действия, то всё остаётся работать по старому алгоритму.
			// Если есть, то анализ и демонстрация сообщений будет проводиться на уровне вызова.
			Если ДанныеДетализации.ЗаполнитьДетализацию Тогда
				
				ПараметыЗаполнения = Новый Структура("Ссылка, Тип, Состояние, Сообщение", Документ1С, "Документ." + ТипДокумента, "Найден.", СтрокаСообщения);
				Кэш.ОбщиеФункции.РезультатДействия_ДобавитьВРасшифровку(Кэш, "ЗагрузкаДокумента", ДанныеДетализации.СтрокаДетализации, ПараметыЗаполнения);
				
			Иначе
				Сообщить("Для документа " + Вложение.Название + " н" + Сред(СтрокаСообщения, 1));
			КонецЕсли; 
			
		КонецЕсли;
		
	Иначе
		Документ1С = ЗаполнитьДанныеДокумента1С(Кэш,
												СтруктураДанныхДокумента,
												СтруктураФайла,
												МассивОснований,
												СоставПакета,
												Вложение,
												Документ1С,
												ДанныеДетализации);
	КонецЕсли;
	
	//Проверим наличие рассчитанных свойств
	СбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "ДокументШаблон.СтруктураСвойств", Вложение.Идентификатор);
	СтруктураСвойств = Кэш.ОбщиеФункции.СбисПолучитьЗначениеРассчитанногоОбъекта(Кэш, СбисОписаниеОбъекта);
	Кэш.ОбщиеФункции.СбисОчиститьЗначениеРассчитанногоОбъекта(Кэш, СбисОписаниеОбъекта);	
	
	Если Документ1С = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураСвойств = Неопределено Тогда 
		СтруктураСвойств = Новый Структура;
	КонецЕсли;
	
	//Дополним данными пакета и вложения
	СтруктураСвойств.Вставить("ДокументСБИС_Ид",			СоставПакета.Идентификатор);
	СтруктураСвойств.Вставить("ДокументСБИС_Статус",		СоставПакета.Состояние.Название);
	СтруктураСвойств.Вставить("ДокументСБИС_ИдВложения",	Вложение.Идентификатор);
	
	ДокументНайденВМассивеОснований = Ложь; 
	
	Для Каждого ОснованиеСтруктура Из МассивОснований Цикл
		
		Если ТипЗнч(ОснованиеСтруктура) = Тип("Структура") Тогда
			ДокОснование = ОснованиеСтруктура.ДокОснование;
		Иначе
			ДокОснование = ОснованиеСтруктура;
		КонецЕсли; 
		
		Если ДокОснование = Документ1С Тогда
			
			ДокументНайденВМассивеОснований = Истина;
			Прервать; 
			
		КонецЕсли; 
		
	КонецЦикла;   
	
	// Если документ уже загружен по текущему пакету, то не перепривязываем его к новому вложению
	// (иначе будут проблемы при повторной загрузке)
	Если НЕ ДокументНайденВМассивеОснований Тогда 
		
		ДопПараметрыАккаунта = Новый Структура("ИдАккаунта", Кэш.Интеграция.ПолучитьИдТекущегоАккаунта(Кэш));
		ФормаЗаписи = ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьПараметрыДокументаСБИС", Кэш.ФормаРаботыСоСтатусами, "", Кэш);
		ФормаЗаписи.ЗаписатьПараметрыДокументаСБИС(СтруктураСвойств,
												   Документ1С,
												   Кэш.Ини.Конфигурация,
												   Кэш.Парам.КаталогНастроек,
												   ДопПараметрыАккаунта); 
		
		Если Кэш.Парам.СостояниеЭД Тогда
													   
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("ИмяФункции",	"ДублироватьСостояние");
			ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
			ФормаЭД = Кэш.ОбщиеФункции.сбисНайтиФормуФункцииПодсистемы(Кэш, ПараметрыПоиска); 
			
			Если Не ФормаЭД = Ложь Тогда
				ФормаЭД.ДублироватьСостояние(СоставПакета, Документ1С, Вложение.XMLДокумента, СтруктураФайла);  // alo Загрузка маркировки 
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	// ВААл. Записываем в прикладную статистику факт создания/перезаписи документа 1С.
	СоставСтатистики = Новый Структура;
	СоставСтатистики.Вставить("Контекст", "Загрузка документов");
	СоставСтатистики.Вставить("Действие", Вложение.Тип + " - " + ТипДокумента);
	ПараметрыСтатистики = Новый Структура("Действие, Сообщения", "ПрикладнаяСтатистика", СоставСтатистики);
	Попытка
		МодульОбъектаКлиент().СбисСтатистика_СформироватьИЗаписать(ПараметрыСтатистики);
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "Документ_Шаблон.СоздатьДокумент");
	КонецПопытки;
	
	Возврат Документ1С;
	
КонецФункции

// Функция заполняет структуру объекта 1С по файлу настроек
//ДопПараметры - структура, может содержать соответствие обработчика, который будет вызываться для определенного узла
&НаКлиенте
Функция СбисЗаполнитьСтруктуруОбъекта(ОписаниеОбъекта, ПараметрыЗаполнения) Экспорт
	Перем Обработчики, ИниОбхода;
	Кэш			= ПараметрыЗаполнения.Кэш;
	СбисКонтекст= ПараметрыЗаполнения.Контекст;
	
	КонтекстДляКлиента = Новый Структура("Переменные, Ини, ДанныеИсточник", Новый Структура);
	ЗаполнитьЗначенияСвойств(КонтекстДляКлиента, СбисКонтекст);
	КонтекстДляКлиента.Вставить("ИмяОбъекта",		ОписаниеОбъекта.Ключ);
	КонтекстДляКлиента.Вставить("ДанныеРезультат",	ОписаниеОбъекта.Значение);
	Если СбисКонтекст.Свойство("ДанныеИсточникЛокальные") Тогда
		КонтекстДляКлиента.Вставить("ДанныеИсточникЛокальные", СбисКонтекст.ДанныеИсточникЛокальные);
	КонецЕсли;
	
	АргументыВызова = Новый Структура("Кэш, Контекст, Обработчики, ДополнительныеПараметры", Кэш, КонтекстДляКлиента);
	//Обработчики для возможности выноса особенностей обработки определенных узлов в другие формы.
	//Вынос обработчика в ВФК на свой страх и риск! Стабильное АПИ не гарантируется!
	Если Не ПараметрыЗаполнения.Свойство("Обработчики", АргументыВызова.Обработчики) Тогда
		АргументыВызова.Обработчики = Новый Структура;
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("ДополнительныеПараметры", АргументыВызова.ДополнительныеПараметры) Тогда
		АргументыВызова.ПараметрыЗаполнения = Новый Структура;
	КонецЕсли;
	
	//Если не указана ини с объектом, по которой считаем, то считаем ини контекста. 
	//Для необходимости заполнения по конкретным узлам из ини, минуя прочие.
	Если Не ОписаниеОбъекта.Свойство("Ини", ИниОбхода) Тогда
		ИниОбхода = КонтекстДляКлиента.Ини;
	КонецЕсли;
	
	//Обработка узлов
	Для Каждого Элемент Из ИниОбхода Цикл
		Обработчик_УзелИни(Новый Структура("Ключ, Значение", Элемент.Ключ, КонтекстДляКлиента.Ини[Элемент.Ключ]), АргументыВызова);
	КонецЦикла;
	
	//Дорасчёт на сервере
	КонтекстДляСервера = Новый Структура("Переменные, Ини", КонтекстДляКлиента.Переменные);
	ЗаполнитьЗначенияСвойств(КонтекстДляСервера, КонтекстДляКлиента);
	
	АргументыРассчитать = Новый Структура("Контекст, ИниОбхода", КонтекстДляСервера, ИниОбхода);
	
	РезультатЗаполнить = Новый Структура("Ключ, Значение", КонтекстДляКлиента.ИмяОбъекта, КонтекстДляКлиента.ДанныеРезультат, ИниОбхода);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ЗаполнитьСтруктуруОбъектаНаСервере(РезультатЗаполнить, АргументыРассчитать);
	#Иначе
		ЗаполнитьСтруктуруОбъектаДляВызоваСервера(РезультатЗаполнить, АргументыРассчитать);
	#КонецЕсли
	Возврат РезультатЗаполнить;
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруОбъектаНаСервере(ОписаниеОбъекта, Знач ПараметрыЗаполнения) Экспорт
	КонтекстСервера = ПараметрыЗаполнения.Контекст;
	КонтекстСервера.Вставить("ДанныеРезультат",	Новый Структура(ОписаниеОбъекта.Ключ, ОписаниеОбъекта.Значение));
	Если Не КонтекстСервера.Свойство("ДополнительныеПараметры") Тогда
		КонтекстСервера.Вставить("ДополнительныеПараметры", Новый Структура);
	КонецЕсли;
	АргументыРассчитать = Новый Структура("Контекст", КонтекстСервера);
	Для Каждого Элемент Из ПараметрыЗаполнения.ИниОбхода Цикл
		Обработчик_УзелИниСервер(Новый Структура("Ключ, Значение", Элемент.Ключ, КонтекстСервера.Ини[Элемент.Ключ]), АргументыРассчитать);
	КонецЦикла;
КонецПроцедуры

//Для того, чтобы для УФ параметры передавались по значению, чтобы ускорить вызов сервера
Процедура ЗаполнитьСтруктуруОбъектаДляВызоваСервера(ОписаниеОбъекта, Знач ПараметрыЗаполнения) Экспорт
	ЗаполнитьСтруктуруОбъектаНаСервере(ОписаниеОбъекта, ПараметрыЗаполнения); 
КонецПроцедуры

// Функция заполняет структуру документа 1С по файлу настроек
//ДопПараметры - структура, может содержать соответствие обработчика, который будет вызываться для определенного узла
&НаКлиенте
Функция ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокумента(Кэш, СтруктураФайла, Ини, ДокОбъект, МассивОснований, СоставПакета, Вложение, ДопПараметры=Неопределено) Экспорт
	Перем Обработчики;
	МестныйКэш = Кэш;
	Если КэшДляСервера = Неопределено Тогда
		КэшДляСервера = Кэш.ОбщиеФункции.КэшДляСервера(Кэш);
	КонецЕсли;                 
	
	Если Вложение.Свойство("ВходящийКонтекст") Тогда 
		
		Ини.Вставить("ВходящийКонтекст", Вложение.ВходящийКонтекст);  
		
	КонецЕсли;
	
	//Для быстрого копирования строк соберём ключи шапки.
	КлючиИниВерхнегоУровня = "";									
	Для Каждого Элемент Из Ини Цикл
		Если Элемент.Ключ = "мТаблДок" Тогда
			Продолжить;
		КонецЕсли;
		КлючиИниВерхнегоУровня = КлючиИниВерхнегоУровня + Элемент.Ключ + ",";
	КонецЦикла;
	КлючиИниВерхнегоУровня = СтрЗаменить(КлючиИниВерхнегоУровня, "мТаблДок,", "");
	Если Прав(КлючиИниВерхнегоУровня, 1) = "," Тогда
		КлючиИниВерхнегоУровня = Сред(КлючиИниВерхнегоУровня, 0, СтрДлина(КлючиИниВерхнегоУровня) - 1);
	КонецЕсли;
	
	//рефактор
	КонтекстДляКлиента	= Новый Структура(
	"Ини,	ДанныеИсточник, ДанныеРезультат,ИмяОбъекта, Переменные,		Вложение,	СоставПакета,	ИниКонфигурация,		МассивОснований, Ключи",
	Ини,	СтруктураФайла, ДокОбъект,		"Документ",	Новый Структура("СоздаватьШтрихкодыНоменклатуры", Кэш.Парам.СоздаватьШтрихкодыНоменклатуры),Вложение,	СоставПакета,	Кэш.Ини.Конфигурация,	МассивОснований, Новый Структура("Шапка", КлючиИниВерхнегоУровня));
	//Структура "особых" обработчиков для узлов на клиенте для возможности выноса определенных узлов в другие формы по типу документа.
	//Вынос обработчика в ВФК на свой страх и риск! Стабильное АПИ не гарантируется!
	Если ДопПараметры = Неопределено Тогда
		СтруктураДопПараметров = Новый Структура;
	Иначе
		СтруктураДопПараметров = ДопПараметры;
	КонецЕсли;
	
	Если Не СтруктураДопПараметров.Свойство("Режим") Тогда
		СтруктураДопПараметров.Вставить("Режим", "Полный");
	КонецЕсли;
	Если Не СтруктураДопПараметров.Свойство("Обработчики", Обработчики) Тогда
		Обработчики = Новый Структура;
	КонецЕсли;
	Обработчики.Вставить("мСторона",			Новый Структура("Метод, Модуль",	"Обработчик_мСторона",				ЭтаФорма));
	Обработчики.Вставить("мТаблДок", 			Новый Структура("Метод, Модуль",	"Обработчик_мТаблДок",				ЭтаФорма));
	Обработчики.Вставить("мОснование",			Новый Структура("Метод, Модуль",	"Обработчик_мОснование",			ЭтаФорма));
	Обработчики.Вставить("мПараметрыДокумента",	Новый Структура("Метод, Модуль",	"Обработчик_мПараметрыДокумента",	ЭтаФорма));
	
	АргументыВызова = Новый Структура("Кэш, Контекст, Обработчики, ДополнительныеПараметры", Кэш, КонтекстДляКлиента, Обработчики, СтруктураДопПараметров);
	Для Каждого Элемент Из Ини Цикл
		Обработчик_УзелИни(Элемент, АргументыВызова);
	КонецЦикла;	
	КонтекстДляСервера = Новый Структура("СтруктураФайла, ТаблДок, Ини, Переменные", КонтекстДляКлиента.ДанныеИсточник);
	ЗаполнитьЗначенияСвойств(КонтекстДляСервера, КонтекстДляКлиента);
	
	РезультатЗаполнить = Новый Структура("Ключ, Значение", "Документ", КонтекстДляКлиента.ДанныеРезультат);
	ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокументаНаСервере(РезультатЗаполнить, КонтекстДляСервера);
	//После всех пертрубаций восстановим связь с переменными
	ДокОбъект		= РезультатЗаполнить.Значение;
	МассивОснований	= КонтекстДляКлиента.МассивОснований;
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Документ_Шаблон_РасчетИни

////////////////////////////////////////////////////
////////////////Расчет по ини документа/////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция сбисЗаполнитьПараметрыДокумента(СтруктураСвойств, Ини, РазделИниПараметры, Документ1С, СтруктураФайла, СоставПакета, Кэш)
	Для Каждого Элемент из РазделИниПараметры.мПараметрыДокумента Цикл
		Переменные = Новый Структура;
		мПараметры = Новый Структура;
		
		Если Элемент.Значение.Параметр_Значение.Свойство("Данные") Тогда
			Параметр_Значение = ЗаполнитьЗначениеРеквизитаИзФайла(Элемент.Значение.Параметр_Значение, СтруктураФайла, мПараметры, МестныйКэш);						
		КонецЕсли;
		Если Элемент.Значение.Параметр_Имя.Свойство("Вычислить") и (Найти(Элемент.Значение.Параметр_Имя.Вычислить,"'")>0 или Найти(Элемент.Значение.Параметр_Имя.Вычислить,"{")>0) Тогда
			Контекст = Новый Структура("Ини, Документ, Переменные, СтруктураФайла,СоставПакета,ИниКонфигурация", Ини, Документ1С, Переменные, СтруктураФайла,СоставПакета,МестныйКэш.Ини.Конфигурация);
			Параметр_Имя = РассчитатьЗначение(Элемент.Значение.Параметр_Имя.Вычислить,Контекст,МестныйКэш);
		КонецЕсли;	
		Если ЗначениеЗаполнено(Параметр_Значение) и ЗначениеЗаполнено(Параметр_Имя) Тогда
			СтруктураСвойств.Вставить(Параметр_Имя, Параметр_Значение);
		КонецЕсли;
	КонецЦикла;	
КонецФункции

//Функция заполняет структуру документа 1С по файлу настроек
&НаСервере
Процедура ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокументаНаСервере(ОбъектЗаполнить, Знач ПараметрыОбработчика)
	СбисКонтекст = Новый Структура("ДанныеИсточник, ДанныеРезультат, ДополнительныеПараметры, Переменные, Ини", Новый Структура, Новый Структура, Новый Структура);
	СбисКонтекст.ДанныеРезультат.Вставить(ОбъектЗаполнить.Ключ, ОбъектЗаполнить.Значение);
	СбисКонтекст.ДанныеИсточник.Вставить("СтруктураФайла",	ПараметрыОбработчика.СтруктураФайла);
	Если Не ПараметрыОбработчика.ТаблДок = Неопределено Тогда
		СбисКонтекст.ДанныеИсточник.Вставить("ТаблДок", ПараметрыОбработчика.ТаблДок);
	КонецЕсли;
	
	СбисКонтекст.Вставить("ИмяОбъекта", ОбъектЗаполнить.Ключ);
	ЗаполнитьЗначенияСвойств(СбисКонтекст, ПараметрыОбработчика);
	АргументыРассчитать = Новый Структура("Контекст", СбисКонтекст);
	Для Каждого КлючИЗначение Из СбисКонтекст.Ини Цикл
		Обработчик_УзелИниСервер(КлючИЗначение, АргументыРассчитать);
	КонецЦикла;
КонецПроцедуры

//Функция возвращает результат с учетом применения фильтра
&НаКлиенте
Функция ВычислитьОтборНаКлиенте(Аргумент, ПараметрыОбработчика)
	Перем СбисВыбрать, ПараметрПроверить, СбисИндексСтроки;
	
	Кэш					= ПараметрыОбработчика.Кэш;
	СбисКонтекст		= ПараметрыОбработчика.Контекст;
	ПараметрыРасчета	= ПараметрыОбработчика.ДополнительныеПараметры;
	СбисПоле			= Аргумент.Значение;
	РасчитанноеЗначение	= Аргумент.РассчитанноеЗначение;
	Если Не ЗначениеЗаполнено(РасчитанноеЗначение) Тогда
		Возврат РасчитанноеЗначение;
	КонецЕсли;
	
	СписокОтборов = Новый Структура;
	Для Каждого ЭлементОтбора Из СбисПоле.Отбор Цикл
		СписокОтборов.Вставить(ЭлементОтбора.Ключ, РассчитатьПараметрИни(Кэш, ЭлементОтбора.Значение, , СбисКонтекст, ПараметрыРасчета));
	КонецЦикла;
	Если Не СбисПоле.Свойство("Выбрать", СбисВыбрать) Тогда
		СбисВыбрать = "все";
	Иначе
		СбисВыбрать = НРег(СбисВыбрать);
		Если Не СбисВыбрать = "все" Тогда
			Попытка
				СбисВыбрать = Число(СбисВыбрать);
			Исключение
				Сообщить("Не верно указан размер выборки. Допустимые значения: число; ""Все""");
				Возврат РасчитанноеЗначение;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	//Отбор по номеру строки
	Если		СписокОтборов.Свойство("НомерСтроки", СбисИндексСтроки) Тогда
		СписокОтборов.Удалить("НомерСтроки");
		СбисИндексСтроки = Число(СбисИндексСтроки);
	ИначеЕсли	СписокОтборов.Свойство("ИндексСтроки", СбисИндексСтроки) Тогда
		СписокОтборов.Удалить("ИндексСтроки");
		СбисИндексСтроки = Число(СбисИндексСтроки);
	КонецЕсли;
	Результат = РасчитанноеЗначение;
	ТипЗначенияСтрокой = Строка(ТипЗнч(РасчитанноеЗначение));
	//Выполним отбор
	Если	Не СбисИндексСтроки = Неопределено Тогда
		Попытка
			РезультатОтбора = РасчитанноеЗначение[СбисИндексСтроки];
			Если ВычислитьОтборНаКлиенте_СтрокаСоответствуетОтбору(РезультатОтбора, СписокОтборов) Тогда
				Результат = РезультатОтбора;
			КонецЕсли;
		Исключение
			//Добавить обработку ошибок
			//ВызватьИсключение(СтрЗаменить(СтрЗаменить("Ошибка отбора по индексу строки в узле {0}. Подробно: {1}",	"{0}",	СбисКонтекст.ТекущееПолеКлюч),
			//																										"{1}",	ОписаниеОшибки()));
		КонецПопытки;
	#Если ТолстыйКлиентОбычноеПриложение Тогда	
	ИначеЕсли	ТипЗнч(РасчитанноеЗначение) = Тип("ТаблицаЗначений") Или Найти(НРег(ТипЗначенияСтрокой), "табличная часть") Тогда
		Если СбисИндексСтроки = Неопределено Тогда
			РезультатОтбора = РасчитанноеЗначение.НайтиСтроки(СписокОтборов);
			Результат = Новый Массив;
			Если	СбисВыбрать = "все" Тогда
				Результат = РезультатОтбора;
			ИначеЕсли РезультатОтбора.Количество() Тогда
				Если СбисВыбрать = 1 Тогда
					Возврат РезультатОтбора[0];
				ИначеЕсли СбисВыбрать >= РезультатОтбора.Количество() Тогда
					Для ЧислоСтрокВыборки = 1 По СбисВыбрать Цикл
						Результат.Добавить(РезультатОтбора[ЧислоСтрокВыборки-1]);
					КонецЦикла;
				Иначе
					Результат = РезультатОтбора;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли 	
	ИначеЕсли	ТипЗнч(РасчитанноеЗначение) = Тип("Массив") Тогда
		Результат = Новый Массив;
		Для Каждого СтрокаРасчитанноеЗначение Из РасчитанноеЗначение Цикл
			Если Не ВычислитьОтборНаКлиенте_СтрокаСоответствуетОтбору(СтрокаРасчитанноеЗначение, СписокОтборов) Тогда
				Продолжить;
			КонецЕсли;
			Результат.Добавить(СтрокаРасчитанноеЗначение);
			Если СбисВыбрать = 1 Тогда
				Результат = СтрокаРасчитанноеЗначение;
				Прервать;
			ИначеЕсли Не СбисВыбрать = "все" Тогда
				Если Результат.Количество() = СбисВыбрать Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;				
		КонецЦикла;
	КонецЕсли;
	ПараметрыРасчета.Посчитано = Истина;
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = "";
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Проверяет, соответствует ли строка установленному отбору.
&НаКлиенте
Функция ВычислитьОтборНаКлиенте_СтрокаСоответствуетОтбору(СтрокаЗначениеПроверить, СписокОтборов)
	Попытка
		Для Каждого КлючИЗначениеОтбор Из СписокОтборов Цикл
			Если Не СтрокаЗначениеПроверить[КлючИЗначениеОтбор.Ключ] = КлючИЗначениеОтбор.Значение Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина
КонецФункции

&НаСервере
Функция ВычислитьОтборНаСервере(Аргумент, АргументыРассчитать)
	Перем СбисВыбрать, ПараметрПроверить;
	СбисПоле = АРгумент.Значение;
	РасчитанноеЗначение = Аргумент.РассчитанноеЗначение;
	Результат = РасчитанноеЗначение;
	Если Не ЗначениеЗаполнено(РасчитанноеЗначение) Тогда
		Возврат Результат;
	КонецЕсли;
	СписокОтборов = Новый Структура;
	Для Каждого ЭлементОтбора Из СбисПоле.Отбор Цикл
		СписокОтборов.Вставить(ЭлементОтбора.Ключ, РассчитатьЗначениеСервер(ЭлементОтбора.Значение, АргументыРассчитать.Контекст));
	КонецЦикла;
	Если Не СбисПоле.Свойство("Выбрать", СбисВыбрать) Тогда
		СбисВыбрать = "все";
	Иначе
		СбисВыбрать = НРег(СбисВыбрать);
		Если Не СбисВыбрать = "все" Тогда
			Попытка
				СбисВыбрать = Число(СбисВыбрать);
			Исключение
				Сообщить("Не верно указан размер выборки. Допустимые значения: число; ""Все""");
				Возврат Результат;
			КонецПопытки;
		КонецЕсли;                          
	КонецЕсли;
	ТипЗначенияСтрокой = Строка(ТипЗнч(РасчитанноеЗначение));
	Если ТипЗнч(РасчитанноеЗначение) = Тип("ТаблицаЗначений") Или Найти(НРег(ТипЗначенияСтрокой), "табличная часть") Тогда
		РезультатОтбора = РасчитанноеЗначение.НайтиСтроки(СписокОтборов);
		Результат = Новый Массив;
		Если	СбисВыбрать = "все" Тогда
			Результат = РезультатОтбора;
		ИначеЕсли РезультатОтбора.Количество() Тогда
			Если СбисВыбрать = 1 Тогда
				Возврат РезультатОтбора[0];
			ИначеЕсли СбисВыбрать >= РезультатОтбора.Количество() Тогда
				Для ЧислоСтрокВыборки = 1 По СбисВыбрать Цикл
					Результат.Добавить(РезультатОтбора[ЧислоСтрокВыборки-1]);
				КонецЦикла;
			Иначе  
				Результат = РезультатОтбора;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(РасчитанноеЗначение) = Тип("Массив") Тогда
		Результат = Новый Массив;
		Для Каждого СтрокаРасчитанноеЗначение Из РасчитанноеЗначение Цикл
			ДобавитьСтроку = Истина;
			Для Каждого КлючИЗначениеОтбор Из СписокОтборов Цикл
				Если	Не СтрокаРасчитанноеЗначение.Свойство(КлючИЗначениеОтбор.Ключ, ПараметрПроверить)
					Или	Не ПараметрПроверить = КлючИЗначениеОтбор.Значение Тогда
					ДобавитьСтроку = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ДобавитьСтроку Тогда
				Результат.Добавить(СтрокаРасчитанноеЗначение);
				Если СбисВыбрать = 1 Тогда
					Возврат СтрокаРасчитанноеЗначение;
				ИначеЕсли Не СбисВыбрать = "все" Тогда
					Если Результат.Количество() = СбисВыбрать Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = "";
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Процедура проставляет связи документов, загруженных из одного пакета	
Процедура ЗаполнитьСвязанныеДокументы(ТипДок, ИмяРеквизита, знач РазделИни, ДокОбъект, МассивОснований)
	Если Метаданные.Документы[ТипДок].Реквизиты.Найти(ИмяРеквизита)<>Неопределено Тогда
		ТипыОснований = Новый ОписаниеТипов(РазделИни.Основание.Тип);
		Для Каждого ОснованиеСтруктура Из МассивОснований Цикл
			Если ТипЗнч(ОснованиеСтруктура) = Тип("Структура") Тогда
				ДокОснование = ОснованиеСтруктура.ДокОснование;
			Иначе
				ДокОснование = ОснованиеСтруктура;
			КонецЕсли;
			Если ТипыОснований.СодержитТип(ТипЗнч(ДокОснование)) Тогда	
				ДокОбъект.Вставить(ИмяРеквизита, ДокОснование);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Метаданные.Документы[ТипДок].ТабличныеЧасти.Найти(ИмяРеквизита)<>Неопределено Тогда
		ИмяРеквизитаВТЧ = Сред(РазделИни.Основание_Документ.Значение, Найти(РазделИни.Основание_Документ.Значение,".")+1);
		ТипыОснований = Новый ОписаниеТипов(РазделИни.Основание_Документ.Тип);
		Для Каждого ОснованиеСтруктура Из МассивОснований Цикл
			Если ТипЗнч(ОснованиеСтруктура) = Тип("Структура") Тогда
				ДокОснование = ОснованиеСтруктура.ДокОснование;
			Иначе
				ДокОснование = ОснованиеСтруктура;
			КонецЕсли;
			Если ТипыОснований.СодержитТип(ТипЗнч(ДокОснование)) Тогда	
				Если Не ДокОбъект.Свойство(ИмяРеквизита) Тогда
					ДокОбъект.Вставить(ИмяРеквизита, Новый массив);
				КонецЕсли;
				ДокОбъект[ИмяРеквизита].Добавить(Новый Структура(ИмяРеквизитаВТЧ, ДокОснование));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьДанныеДокумента1С(Кэш, ини, СтруктураФайла, МассивОснований,СоставПакета, Вложение, Документ1С = Неопределено, ДополнительныеДанные = Неопределено) Экспорт
	// Функция заполняет структуру документа 1С, создает документ и заполняет его из структуры	
	ЗаполнитьДетализацию= Ложь;
	Отказ				= Ложь;
	Если Не ДополнительныеДанные = Неопределено Тогда
		Если Не ДополнительныеДанные.Свойство("ЗаполнитьДетализацию", ЗаполнитьДетализацию) Тогда
			ЗаполнитьДетализацию = Ложь;
		КонецЕсли;
		ДополнительныеДанные.Свойство("Отказ", Отказ);
	КонецЕсли;  

	ДополнятьТабЧасть = Ложь;
	ЗаполняемыеТабЧасти = Новый Массив;
	// если документ загружен в рамках текущего пакета, то нужно дополнить его данными текущего вложения, а не очищать и перезаполнять
	// например при загрузке акта и накладной в одно поступление
	Для каждого ОснованиеСтруктура Из МассивОснований Цикл
		Если ТипЗнч(ОснованиеСтруктура) = Тип("Структура") Тогда
			ДокОснование = ОснованиеСтруктура.ДокОснование;
			МассивТабЧастей = ОснованиеСтруктура.МассивТабЧастей;
		Иначе
			ДокОснование = ОснованиеСтруктура;
			МассивТабЧастей = Новый Массив;
		КонецЕсли;
		Если ДокОснование = Документ1С Тогда
			ЗаполняемыеТабЧасти = МассивТабЧастей;
			ДополнятьТабЧасть = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДокОбъект = Новый Структура; // Структура с названиями полей, как у создаваемого документа 1С
	Если Документ1С<>Неопределено Тогда
		МестныйКэш.ОбщиеФункции.ЗаполнитьСтруктуруИзШапкиДокумента1С(СтруктураДокОбъект,Документ1С);
	КонецЕсли;
	// Вносим ручные изменения перед расчетом, чтобы правильно рассчитались зависимые от них реквизиты (например, валюта из договора)
	ЗаполнитьРучныеИзмененияДокумента1С(Кэш, Вложение, СтруктураДокОбъект);
	фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункции("ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокумента", "Документ_"+Вложение.ТипДокумента, "Документ_Шаблон");
	фрм.ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокумента(Кэш, СтруктураФайла, ини, СтруктураДокОбъект, МассивОснований,СоставПакета, Вложение);
	// И после расчета заменяем значения, на выбранные вручную
	ЗаполнитьРучныеИзмененияДокумента1С(Кэш, Вложение, СтруктураДокОбъект);	
	Вложение.Вставить("СтруктураДокумента1С", СтруктураДокОбъект);
	//По 1176019292	
	ТипОбъекта = СтрПолучитьСтроку(СтрЗаменить(Кэш.ОбщиеФункции.РассчитатьЗначение("Документ", Ини), ".", Символы.ПС), 1);
	РедактироватьТабЧасть = Кэш.ОбщиеФункции.РассчитатьЗначение("РедактироватьТабЧасть", Ини);   // вносить изменения в существующую таб часть документа (не очищать и не заполнять с нуля)
	сбисДополнительныеПараметры = Новый Структура("ОбъектПерезаполнитьСсылка, ТипОбъекта, ПодТипОбъекта, ДополнятьТабЧасть, РедактироватьТабЧасть, Ини, ПерезаполнятьТолькоНепроведенные, ЗаполняемыеТабЧасти",
													Документ1С, ТипОбъекта, ТипДокумента, ДополнятьТабЧасть, РедактироватьТабЧасть, ини, Кэш.Парам.ПерезаполнятьТолькоНепроведенные, ЗаполняемыеТабЧасти);
	РезультатЗагрузки = СоздатьОбъектИзСтруктуры(СтруктураДокОбъект, сбисДополнительныеПараметры, Отказ);
	РезультатЗагрузки.Вставить("СтруктураДокумента1С", СтруктураДокОбъект);//Для дальнейшей обработки и чтобы не тянуть с сервера на клиента добавляем в результат структуру документа 1С тут.
	Если ЗаполнитьДетализацию Тогда
		РезультатЗагрузки.Вставить("Ошибки", Отказ);
		Кэш.ОбщиеФункции.РезультатДействия_ДобавитьВРасшифровку(Кэш, "ЗагрузкаДокумента", ДополнительныеДанные.СтрокаДетализации, РезультатЗагрузки);
		ДополнительныеДанные.Отказ = Отказ;
	Иначе                      
		Сообщить(РезультатЗагрузки.Сообщение);
	КонецЕсли;
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ДопРасчетыПриЗагрузке","Документ_"+ТипДокумента,"Документ_Шаблон",МестныйКэш);			
	Если фрм<>Ложь Тогда
		Попытка
			// ▼ ayan#bitrix#4387 Исправление внешней обработки СБИС (цена НДС) КирилловПС  2023.12.08  ▼ Начало
			фрм.ДопРасчетыПриЗагрузке(РезультатЗагрузки.Ссылка, Новый Структура("СтруктураФайла, СоставПакета, Кэш",СтруктураФайла,СоставПакета,МестныйКэш));
			// ▲ ayan#bitrix#4387 Исправление внешней обработки СБИС (цена НДС) КирилловПС  2023.12.08  ▲ Конец 
		Исключение
			фрм.ДопРасчетыПриЗагрузке(РезультатЗагрузки.Ссылка);//Вставлено исключение для совместимости со старой версией
		КонецПопытки
	КонецЕсли;
	
	Возврат РезультатЗагрузки.Ссылка;
КонецФункции

&НаКлиенте
Функция ЗаполнитьРучныеИзмененияДокумента1С(Кэш, Вложение, СтруктураДокОбъект) Экспорт
	// Если реквизиты были изменены вручную на форме просмотра (контрагент, договор, дата), то заменяем их в сформированной структуре документа
	Если Вложение.Свойство("РучноеИзменение") И Вложение.РучноеИзменение = Истина Тогда
		Попытка
			Если Вложение.СтруктураИниФайла.Свойство("Договор") и Вложение.СтруктураИниФайла.Договор.Свойство("Значение") и Вложение.Свойство("Договор1С") Тогда
				ИмяРеквизита = Сред(Вложение.СтруктураИниФайла.Договор.Значение, Найти(Вложение.СтруктураИниФайла.Договор.Значение,".")+1);
				СтруктураДокОбъект.Вставить(ИмяРеквизита, Вложение.Договор1С);
			КонецЕсли;
			Если Вложение.СтруктураИниФайла.Свойство("Документ_Дата") и Вложение.СтруктураИниФайла.Документ_Дата.Свойство("Значение") и Вложение.Свойство("Дата1С") Тогда
				ИмяРеквизита = Сред(Вложение.СтруктураИниФайла.Документ_Дата.Значение, Найти(Вложение.СтруктураИниФайла.Документ_Дата.Значение,".")+1);
				СтруктураДокОбъект.Вставить(ИмяРеквизита, Вложение.Дата1С);
			КонецЕсли;
			Если Вложение.СтруктураИниФайла.Свойство("Контрагент_Роль") и Вложение.СтруктураИниФайла.Контрагент_Роль.Свойство("Значение") и Вложение.Свойство("Контрагент1С") Тогда
				КонтрагентРоль=МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Контрагент_Роль", Вложение.СтруктураИниФайла, МестныйКэш);
				ИмяРеквизита = Сред(Вложение.СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Значение, Найти(Вложение.СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Значение,".")+1);
				СтруктураДокОбъект.Вставить(ИмяРеквизита, Вложение.Контрагент1С);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецФункции

//Функция заполняет реквизит в структуре документа 1С значением из файла
&НаКлиенте
Функция ЗаполнитьЗначениеРеквизитаИзФайла(ЭлементИни, СтруктураФайла, Контекст, МестныйКэш) Экспорт
	ЗнПер = ЭлементИни.Значение;
	ЗначениеРеквизита = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ЭлементИни.Данные, СтруктураФайла);
	
	Если ЭлементИни.Свойство("Тип") Тогда//AU вынесена проверка наличия атрибута типа для всех значений для корректного обсчета формул.
		Если ЭлементИни.Тип="Дата" и ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ЗначениеРеквизита = Дата(Сред(ЗначениеРеквизита,7,4),Сред(ЗначениеРеквизита,4,2),Лев(ЗначениеРеквизита,2));
		КонецЕсли;
	КонецЕсли;
	Если ЭлементИни.Свойство("Отбор") И ЭлементИни.Отбор.Свойство("НомерСтроки") И ТипЗнч(ЗначениеРеквизита) = Тип("Массив") Тогда
		Попытка
			НомерСтроки = Число(ЭлементИни.Отбор.НомерСтроки);
			ЗначениеРеквизита = ЗначениеРеквизита[НомерСтроки];
			ЭлементИни.Значение = ЗначениеРеквизита;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если Найти(ЗнПер,"[")=1 Тогда  // ссылка на реквизит
		ИмяРеквизита=сред(ЗнПер,Найти(ЗнПер,".")+1);
		Контекст.Вставить(ИмяРеквизита, ЗначениеРеквизита);
	Иначе // если нет ссылка на реквизит, кладем значение в саму структуру ини, чтобы потом это значение можно было использовать при расчете других 
		ЭлементИни.Значение = ЗначениеРеквизита;
	КонецЕсли;
	Возврат ЗначениеРеквизита;
КонецФункции

//Функция заполняет реквизит в структуре документа 1С значением	
&НаКлиенте
Процедура ЗаполнитьЗначениеРеквизита(ЗначениеРеквизита, СбисПоле, Контекст, ДопПараметры) Экспорт
	Перем ЗаполнитьКуда, ПутьРеквизита;
	Если Не СбисПоле.Свойство("Значение", ПутьРеквизита) Тогда 
		Возврат;
	ИначеЕсли Найти(ПутьРеквизита,"[") = 1 Тогда  // ссылка на реквизит
		Если	Не		ДопПараметры.Свойство("ЗаполнитьДанные")
			Или	ДопПараметры.ЗаполнитьДанные Тогда
			ИмяРеквизита = Сред(ПутьРеквизита, Найти(ПутьРеквизита,".")+1);
			Если Не Контекст.Свойство("ДанныеРезультатЛокальные", ЗаполнитьКуда) Тогда
				ЗаполнитьКуда = Контекст.ДанныеРезультат;
			КонецЕсли;
			ЗаполнитьКуда.Вставить(ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
	ИначеЕсли	Не Найти(ПутьРеквизита,"'")
		И	Не Найти(ПутьРеквизита,".") Тогда
		Попытка
			Контекст.Переменные.Вставить(СтрЗаменить(ПутьРеквизита, ".", "_"), ЗначениеРеквизита);
		Исключение
			//На случай, если в качестве переменной пришло значение из документа
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

//Функция заполняет реквизит в структуре документа 1С значением	
&НаСервере
Процедура ЗаполнитьЗначениеРеквизита_Сервер(ЗначениеРеквизита, СбисПоле, СбисКонтекст, ДопПараметры) Экспорт
	Перем ЗаполнитьКуда, ПутьРеквизита;
	Если Не СбисПоле.Свойство("Значение", ПутьРеквизита) Тогда 
		Возврат;
	ИначеЕсли Найти(ПутьРеквизита,"[") = 1 Тогда  // ссылка на реквизит
		Если	(	СбисПоле.Свойство("Тип")
			И	НРег(СбисПоле.Тип) = "табличнаячасть")
			Или	(		ДопПараметры.Свойство("ЗаполнитьДанные")
			И	Не	ДопПараметры.ЗаполнитьДанные) Тогда
			//Не заполняем в документ узлы, у которых в типе "ТабличнаяЧасть", т.к. это описание таб.части, которое не должно попадать в итог
			//Или если для узла указано не заполнять
			Возврат;
		КонецЕсли;
		СтрПутьРеквизита = СтрЗаменить(СтрЗаменить(СтрЗаменить(ПутьРеквизита, "[", ""), "]", ""), ".", Символы.ПС);
		Если Не СтрЧислоСтрок(СтрПутьРеквизита) = 2 Тогда
			Возврат;
		КонецЕсли;
		СтрИмяОбъектаКуда = СтрПолучитьСтроку(СтрПутьРеквизита, 1);
		Если СбисКонтекст.ДанныеРезультат.Свойство(СтрИмяОбъектаКуда, ЗаполнитьКуда) Тогда 
			ЗаполнитьКуда.Вставить(СтрПолучитьСтроку(СтрПутьРеквизита, 2), ЗначениеРеквизита);
		КонецЕсли;
	ИначеЕсли	Не Найти(ПутьРеквизита,"'")
		И	Не Найти(ПутьРеквизита,".") Тогда
		Попытка
			СбисКонтекст.Переменные.Вставить(СтрЗаменить(ПутьРеквизита, ".", "_"), ЗначениеРеквизита);
		Исключение
			//На случай, если в качестве переменной пришло значение из документа
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

//Возвращает имя реквизита из значения в файле настроек	
Функция СообщитьИмяРеквизита(ЗначениеРеквизита)Экспорт
	Возврат Сред(ЗначениеРеквизита,Найти(ЗначениеРеквизита,".")+1,СтрДлина(ЗначениеРеквизита)-Найти(ЗначениеРеквизита,"."));	
КонецФункции

//Функция разбивает строку по определенному разделителю и формирует массив из получившихся элементов		
&НаСервере
функция РазбитьСтрокуВМассив(знач Строка, Разделитель) Экспорт
	МассивЭлементов = Новый Массив();
	Если Строка<>"" Тогда
		ЕстьРазделитель = Истина;
		Пока ЕстьРазделитель И Строка<>"" И Разделитель<>"" Цикл
			Если Найти(Строка,Разделитель)=0 Тогда
				Прервать;
			КонецЕсли;
			Элемент = Сред(Строка,1,Найти(Строка,Разделитель)-1);
			МассивЭлементов.Добавить(Элемент);
			Строка = Сред(Строка,Найти(Строка,Разделитель)+1);
		КонецЦикла;
		МассивЭлементов.Добавить(Строка);
	КонецЕсли;
	Возврат МассивЭлементов;
КонецФункции

//OLD! Использовать РассчитатьПараметрИни Функция рассчитывает	значение параметра из файла настроек
//Для функций и строк возвращает результат, для других значений вызывает расчет на сервере
//Контекст{ини,Документ,СтрТабл}
&НаКлиенте
Функция РассчитатьЗначение(Параметр, Контекст, ВходящийКэш = "") Экспорт 
	
	Если ВходящийКэш = "" Тогда
		Кэш = МодульОбъектаКлиент().ПолучитьТекущийЛокальныйКэш();
	Иначе
		Кэш = ВходящийКэш;
	КонецЕсли;
	
	ИмяПеременнойВПараметре = Ложь;
	Если	Найти(Параметр,"'")
		Или	Найти(Параметр,"{")
		Или Найти(Параметр,"^") Тогда  // в случае, если в качестве параметра функции используется, не имя, а значение параметра
		ЗнПер = СокрЛП(Параметр);
	ИначеЕсли Найти(Параметр,"[") Тогда
		ЗнПер = СокрЛП(Параметр);
		Если Найти(ЗнПер, "]") = СтрДлина(ЗнПер) Тогда
			//Обращение к узлу напрямую, но через ["Узел"]
			ЗнПер = Сред(ЗнПер, 2, СтрДлина(ЗнПер) - 2);//Обрезаем лишние скобки
			РасчитанноеЗначение = Неопределено;
			Если	Контекст.Ини.Свойство(ЗнПер, РасчитанноеЗначение)
				И	РасчитанноеЗначение.Свойство("РассчитанноеЗначение", РасчитанноеЗначение) Тогда
				Возврат РасчитанноеЗначение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗнПер = Параметр;
		ИмяПеременнойВПараметре = Истина;
	КонецЕсли;
	Если ИмяПеременнойВПараметре Тогда
		Попытка
			ЗнПер = Контекст.Ини[ЗнПер].Значение;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Найти(ЗнПер,"{")=1 Тогда // функция
		Возврат СбисВычислитьФункциюНаКлиенте(Кэш, ЗнПер, Контекст, Новый Структура);
	ИначеЕсли Найти(ЗнПер,"'")=1 Тогда	 // строка
		Если ЗнПер="'Истина'" Тогда
			Возврат Истина;               
		ИначеЕсли ЗнПер="'Ложь'" Тогда
			Возврат Ложь;
		Иначе
			Возврат Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
		КонецЕсли;
	ИначеЕсли Найти(ЗнПер,"^")=1 Тогда  // формула, которую необходимо вычислить
		Возврат СбисВычислитьФормулуНаКлиенте(Кэш, ЗнПер,Параметр,Контекст,Новый Структура);
	Иначе
		Возврат РассчитатьЗначениеНаСервере(Параметр,Контекст);
	КонецЕсли	
КонецФункции

//Функция рассчитывает	значение параметра из файла настроек на сервере	
&НаСервере
Функция РассчитатьЗначениеСервер(Параметр, Контекст) Экспорт
	ПервыйСимвол = Лев(СокрЛП(Параметр),1);
	Если ПервыйСимвол="[" или ПервыйСимвол="'" или ПервыйСимвол="{" или ПервыйСимвол="^" Тогда  // в случае, если в качестве параметра функции используется, не имя, а значение параметра
		ЗнПер=Параметр;
		ИмяПеременнойВПараметре = Ложь;
	Иначе
		ИмяПеременнойВПараметре = Истина;
		Попытка
			ПараметрИни = Неопределено;
			ЗнПер = Неопределено;
			Если		Не	Контекст.Ини.Свойство(Параметр, ПараметрИни) Тогда
				Возврат Неопределено;
			ИначеЕсли	ПараметрИни.Свойство("РассчитанноеЗначение", ЗнПер) Тогда
				Возврат ЗнПер;
			ИначеЕсли	ПараметрИни.Свойство("ВычислитьНаСервере", ЗнПер)
				И	ЗначениеЗаполнено(ЗнПер) Тогда
				//Вычислить на сервере
			ИначеЕсли	Не	ПараметрИни.Свойство("Значение", ЗнПер) Тогда
				Возврат Неопределено;
				//	//Берём сам узел как результат
				//	Возврат ПараметрИни;
			КонецЕсли;
		Исключение
			возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	ПозТочки = Найти(ЗнПер, ".");
	ПервыйСимвол = Лев(ЗнПер,1);
	Если ПервыйСимвол="{" Тогда   // функции из глобальных серверных модулей 1С
		Возврат СбисВычислитьФункциюНаСервере(Контекст, ЗнПер);
	ИначеЕсли ПервыйСимвол="[" Тогда  // ссылка на объект (другую переменную)
		СтрОбъекта=Сред(ЗнПер,2,Найти(ЗнПер,"]")-2);
		Если СтрОбъекта = "Переменные" Тогда
			Объект1С = Контекст.Переменные;
		Иначе
			Объект1С = РассчитатьЗначениеСервер(СтрОбъекта,Контекст);
		КонецЕсли;
		Если Найти(ЗнПер,".")>0 Тогда
			ИмяРек=сред(ЗнПер,Найти(ЗнПер,".")+1);
		Иначе
			ИмяРек = "";
		КонецЕсли;
		
		Попытка
			Если Найти(строка(Объект1С),"Массив")>0 Тогда //это строка табличной части
				Объект1С = Контекст.ДанныеРезультат.Получить(Контекст.ИмяОбъектаЛокальное)[ИмяРек];
			Иначе
				Если ЗначениеЗаполнено(ИмяРек) Тогда
					Объект1С = Объект1С[ИмяРек];
				КонецЕсли;
				Если Найти(строка(Объект1С),"ТабличнаяЧасть")>0 Тогда //это сама табличная часть
					Если ИмяПеременнойВПараметре и Контекст.Ини[Параметр].Свойство("Отбор") Тогда
						Отбор = Новый Структура;
						Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
							Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеСервер(Элемент.Значение, Контекст));
						КонецЦикла;
						Если Лев(строка(Объект1С),10) = "Справочник" Тогда
							ТипМетаданных = "Справочники";
						Иначе
							ТипМетаданных = "Документы";
						КонецЕсли;
						ИмяОбъектаИТЧ = РазбитьСтрокуВМассив(строка(Объект1С), ".");
						Реквизиты = Метаданные[ТипМетаданных][ИмяОбъектаИТЧ[1]].ТабличныеЧасти[ИмяОбъектаИТЧ[2]].Реквизиты;
						СтрокиТЧ = Объект1С.НайтиСтроки(Отбор);
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл 
							СтруктураСтрокиТЧ = Новый Структура();
							Для Каждого Реквизит Из Реквизиты Цикл 
								СтруктураСтрокиТЧ.Вставить(Реквизит.Имя, СтрокаТЧ[Реквизит.Имя]);
							КонецЦикла;
							Возврат СтруктураСтрокиТЧ;
						КонецЦикла;
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			Если ИмяПеременнойВПараметре и Контекст.Ини[Параметр].Свойство("Формат") Тогда // Надо установить отбор
				Объект1С = Формат(Объект1С,	Контекст.Ини[Параметр].Формат);
			КонецЕсли;
			
			Возврат Объект1С;
			
		Исключение
			ошибка = ОписаниеОшибки();
		КонецПопытки;	
	ИначеЕсли ПервыйСимвол="^" Тогда	// формула
		Возврат сбисВычислитьФормулуНаСервере(ЗнПер, Параметр, Контекст);
	ИначеЕсли ПервыйСимвол="'" Тогда	 // строка
		Если ЗнПер="'Истина'" Тогда
			Возврат Истина;
		ИначеЕсли ЗнПер="'Ложь'" Тогда
			Возврат Ложь;
		ИначеЕсли ИмяПеременнойВПараметре и ПараметрИни.Свойство("Тип") и ПараметрИни.Тип = "Число" Тогда
			возврат Число(Сред(ЗнПер,2,СтрДлина(ЗнПер)-2));
		ИначеЕсли ИмяПеременнойВПараметре и ПараметрИни.Свойство("Тип") и ПараметрИни.Тип = "Запрос" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст=Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
			Если ПараметрИни.Свойство("Отбор") Тогда
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Запрос.УстановитьПараметр(Элемент.Ключ, РассчитатьЗначениеСервер(Элемент.Значение, Контекст));
				КонецЦикла;
			КонецЕсли;
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если ПараметрИни.Свойство("Выбрать") и нрег(ПараметрИни.Выбрать) = "все" Тогда
				РезультатМассив = Новый Массив;
				Пока Выборка.Следующий() Цикл
					РезультатСтруктура = Новый Структура;
					Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
						РезультатСтруктура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
					КонецЦикла;
					РезультатМассив.Добавить(РезультатСтруктура);
				КонецЦикла;
				Возврат РезультатМассив;
			Иначе
				Если Выборка.Количество()=0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				РезультатСтруктура = Новый Структура;
				Выборка.Следующий();
				Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
					РезультатСтруктура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
				КонецЦикла;
				Возврат РезультатСтруктура;
			КонецЕсли;
		Иначе
			возврат Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
		КонецЕсли;
	ИначеЕсли ПозТочки>0 Тогда
		ПервыйСимвол = Лев(ЗнПер, ПозТочки-1);
		
		Если ПервыйСимвол = "Справочник" Тогда	// ссылка на справочник
			ИмяРек=сред(ЗнПер,12);
			Если Контекст.Ини[Параметр].Свойство("Отбор") Тогда
				Возврат РасчитатьОтборНаСервере(Контекст, Контекст.Ини[Параметр], Новый Структура("Тип, Объект", ПервыйСимвол, ИмяРек));				
			Иначе
				возврат Справочники[ИмяРек];
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "Документ" Тогда // ссылка на документ	
			ИмяРек=сред(ЗнПер,10);
			Возврат Контекст.ДанныеРезультат["Документ"];
		ИначеЕсли ПервыйСимвол = "Константа" Тогда	// константа
			ИмяРек=сред(ЗнПер,11);
			возврат Константы[ИмяРек].Получить();
		ИначеЕсли ПервыйСимвол = "Перечисление" Тогда	// значение перечисления
			ИмяРек=сред(ЗнПер,14);
			возврат Перечисления[ИмяРек];
		ИначеЕсли ПервыйСимвол = "РегистрыСведений" Тогда	// ссылка на регистр сведений
			ИмяРек=сред(ЗнПер,18);
			Если Не Контекст.Ини[Параметр].Свойство("Отбор") Тогда
				Возврат Неопределено;
			КонецЕсли;
			Отбор = Новый Структура;
			Если Контекст.Ини[Параметр].Свойство("СрезПоследних") Тогда
				
				Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
					Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеСервер(Элемент.Значение, Контекст));
				КонецЦикла;
				ДатаСреза = РассчитатьЗначениеСервер(Контекст.Ини[Параметр].СрезПоследних, Контекст);
				НаборЗаписей = РегистрыСведений[ИмяРек].СрезПоследних(ДатаСреза,Отбор);
			Иначе
				НаборЗаписей = РегистрыСведений[ИмяРек].СоздатьНаборЗаписей();
				
				Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
					
					НаборЗаписей.Отбор[Элемент.Ключ].Установить(РассчитатьЗначениеСервер(Элемент.Значение, Контекст));
				КонецЦикла;
				НаборЗаписей.Прочитать();
			КонецЕсли;
			Если НаборЗаписей.Количество()=0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			Запись = НаборЗаписей.Получить(0);
			Результат = Новый Структура();
			Ресурсы = Метаданные.РегистрыСведений[ИмяРек].Ресурсы;	
			Для Каждого Ресурс Из Ресурсы Цикл 
				Результат.Вставить(Ресурс.Имя, Запись[Ресурс.Имя]);
			КонецЦикла;
			возврат Результат; 
		ИначеЕсли ПервыйСимвол = "РегистрыНакопления" Тогда
			
			ИмяРек = Сред(ЗнПер,20);
			
			Если Не Контекст.Ини[Параметр].Свойство("Отбор") Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Отбор = Новый Структура; 
			
			Если Контекст.Ини[Параметр].Свойство("СрезОстатка") Тогда
				
				Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
					Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеСервер(Элемент.Значение, Контекст));
				КонецЦикла;
				
				ДатаСреза		= РассчитатьЗначениеСервер(Контекст.Ини[Параметр].СрезОстатка, Контекст);
				НаборЗаписей	= РегистрыНакопления[ИмяРек].Остатки(ДатаСреза,Отбор);
				
			Иначе
				
				НаборЗаписей	= РегистрыНакопления[ИмяРек].СоздатьНаборЗаписей();
				
				Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл					
					НаборЗаписей.Отбор[Элемент.Ключ].Установить(РассчитатьЗначениеСервер(Элемент.Значение, Контекст));
				КонецЦикла;
				
				НаборЗаписей.Прочитать(); 
				
			КонецЕсли;
			
			Если НаборЗаписей.Количество()=0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Запись		= НаборЗаписей.Получить(0);
			Результат	= Новый Структура();
			Ресурсы		= Метаданные.РегистрыНакопления[ИмяРек].Ресурсы;
			
			Для Каждого Ресурс Из Ресурсы Цикл 
				Результат.Вставить(Ресурс.Имя, Запись[Ресурс.Имя]);
			КонецЦикла;
			
			Возврат Результат;
			
		ИначеЕсли ПервыйСимвол = "ПланыСчетов" Тогда	// alo ПланыСчетов
			ИмяРек=сред(ЗнПер,13);
			Если Контекст.Ини[Параметр].Свойство("Отбор") Тогда
				Отбор = Новый Структура;
				Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
					Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеСервер(Элемент.Значение, Контекст));
				КонецЦикла;
				Выборка = ПланыСчетов[ИмяРек].Выбрать(,Отбор);
				Если Выборка.Следующий() Тогда
					Возврат Выборка.Ссылка;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
			Иначе
				возврат ПланыСчетов[ИмяРек];
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(ЗнПер,"'") = 0 и ПозТочки = 0 и ЗначениеЗаполнено(ЗнПер) и Контекст.Переменные.Свойство(ЗнПер) Тогда
		возврат Контекст.Переменные[ЗнПер];
	Иначе
		возврат Неопределено;
	КонецЕсли	
КонецФункции

//Универсальная функция для расчета отбора запросом
&НаСервере
Функция РасчитатьОтборНаСервере(Контекст, ПараметрИни, ОписаниеОбъектаОтбора)
	Отбор = Новый Структура;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбъектОтбора.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	{0}.{1} КАК ОбъектОтбора
	                      |ГДЕ
						  |	");
	Запрос.Текст = СтрЗаменить(СтрЗаменить(Запрос.Текст,"{0}",ОписаниеОбъектаОтбора.Тип),"{1}",ОписаниеОбъектаОтбора.Объект);					  
	Для Каждого Элемент Из ПараметрИни.Отбор Цикл
		РасчитатьОтборНаСервере_ДобавитьОтбор(Контекст, Запрос, Элемент)
	КонецЦикла;
	Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-4);
	Попытка
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если Не РезультатЗапроса.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Возврат РезультатЗапроса.Ссылка;
КонецФункции

//Заполняет отбор в запросе
&НаСервере
Процедура РасчитатьОтборНаСервере_ДобавитьОтбор(Контекст, Запрос, Элемент)
	Запрос.Параметры.Вставить(Элемент.Ключ, РассчитатьЗначениеСервер(Элемент.Значение, Контекст));
	Запрос.Текст = Запрос.Текст + СтрЗаменить(	"ОбъектОтбора.{0} = &{0}
												|	И	", "{0}", Элемент.Ключ);
КонецПроцедуры

&НаКлиенте
Функция СбисВычислитьФункциюНаКлиенте(Кэш, ЗнПер, СбисКонтекст, ДопПараметры)
	Перем Документ, СтрТабл, Переменные;
	НовыйФормат = Истина;
	ИмяФункции = Сред(ЗнПер, 2, Найти(ЗнПер, "(") - 2);
	//Поддержка старых функций
	Если		СбисКонтекст.Свойство("Документ", Документ) Тогда
		СбисКонтекст.Свойство("СтрТабл", СтрТабл);
		Контекст = СбисКонтекст;
		НовыйФормат = Ложь;
	Иначе
		//Делаем поверхностную копию контекста и отдаём в функцию в старом виде.
		СбисКонтекст.Свойство("ДанныеРезультат", Документ);
		Контекст = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст,"Вложение,СоставПакета,Ини,ИниКонфигурация,МассивОснований,ТекущееПолеИни,Переменные",Ложь);
		Контекст.Вставить("Документ",		Документ);
		Контекст.Вставить("СтруктураФайла",	СбисКонтекст.ДанныеИсточник);
		//Если требуется пробросить какие-то свои аргументы в функцию, то передаём в доп. параметрах
		Если ДопПараметры.Свойство("ДопАргументыДляФункции") Тогда
			Для Каждого КлючИЗначениеАргумент Из ДопПараметры.ДопАргументыДляФункции Цикл
				Контекст.Вставить(КлючИЗначениеАргумент.Ключ, КлючИЗначениеАргумент.Значение);
			КонецЦикла;
		КонецЕсли;
		Контекст.Свойство("СтрТабл", СтрТабл);
	КонецЕсли;
	СбисКонтекст.Свойство("Переменные", Переменные);
	Попытка
		Если Найти(ИмяФункции, ".") Тогда
			Результат = Вычислить(Сред(ЗнПер, 2, СтрДлина(ЗнПер) - 2));
		Иначе
			фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункции(ИмяФункции, "РаботаСДокументами1С", "", Кэш);
			Результат = Вычислить("фрм." + ИмяФункции + "(Контекст)");
		КонецЕсли;	
	Исключение
		Ошибка = ОписаниеОшибки();
		Сообщить(Ошибка+ "(ошибка при вычислении функции """ + Сред(ЗнПер, 2, СтрДлина(ЗнПер) - 2) + """)");
	КонецПопытки;
	Если НовыйФормат Тогда
		//Если СбисКонтекст.Свойство("ДанныеРезультатЛокальные") Тогда
		//	СбисКонтекст.ДанныеРезультатЛокальные = Контекст.СтрТабл;
		//КонецЕсли;
		СбисКонтекст.ДанныеРезультат = Контекст.Документ;
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

&НаСервере
Функция СбисВычислитьФункциюНаСервере(Контекст, СбисПараметр)
	Перем Документ, СтрТабл, Переменные;
	Если Контекст.Свойство("ИмяОбъекта") Тогда
		Контекст.ДанныеРезультат.Свойство(Контекст.ИмяОбъекта, Документ);
	КонецЕсли;	
	Если Контекст.Свойство("ИмяОбъектаЛокальное") Тогда
		Контекст.ДанныеРезультат.Свойство(Контекст.ИмяОбъектаЛокальное, СтрТабл);
	КонецЕсли;
	Контекст.Свойство("Переменные", Переменные);
	Попытка
		Если Сред(СбисПараметр, 2, 14)="МодульОбъекта." Тогда
			#Если Клиент Тогда   
				Результат = Вычислить(Сред(СбисПараметр, 16, СтрДлина(СбисПараметр)-16));
			#Иначе  
				Результат = Вычислить("РеквизитФормыВЗначение(""Объект"")."+Сред(СбисПараметр, 16, СтрДлина(СбисПараметр)-16));
			#КонецЕсли				
		Иначе	
			Результат = Вычислить(Сред(СбисПараметр, 2, СтрДлина(СбисПараметр)-2));  
		КонецЕсли
	Исключение
		Ошибка = ОписаниеОшибки();
		Если Найти(Ошибка, "Обращение к процедуре объекта как к функции") Тогда
			Попытка
				Выполнить(Сред(СбисПараметр, 2, СтрДлина(СбисПараметр)-2));
			Исключение 
				Ошибка = ОписаниеОшибки();
				Сообщить(Ошибка+ "(ошибка при выполнении процедуры """+Сред(СбисПараметр, 2, СтрДлина(СбисПараметр)-2)+""")");
			КонецПопытки;
		ИначеЕсли	Найти(Ошибка, "Ошибка компиляции при вычислении выражения")
					И КэшДляСервера.ПараметрыСистемы.Клиент.РежимЗапускаПриложения = "ТолстыйКлиентУправляемоеПриложение" Тогда
			Сообщить("Вы запустили 1С:Предприятие в режиме ""Толстый клиент"". Установите режим запуска ""Тонкий клиент"" или обратитесь к администратору. " + "(ошибка при выполнении процедуры или вычисления функции """+Сред(СбисПараметр, 2, СтрДлина(СбисПараметр)-2)+""")");
		Иначе
			Сообщить(Ошибка+ "(ошибка при вычислении функции """+Сред(СбисПараметр, 2, СтрДлина(СбисПараметр)-2)+""")");
		КонецЕсли;
	КонецПопытки;
	Возврат Результат;
КонецФункции

//Функция для рассчета значения по имени узла
//Сперва смотрим само значение ПараметрИмя - может быть три варианта:
//1. Это может быть строка, которую надо посчитать - начинается на '^{[
//1.1. Это может быть ссылка на узел, пример [Узел]
//2. Это может быть имя параметра из ини, в котором ищем что конкретно считать. 
//		В таком случае, лучше передать только Узел Ини (СбисПоле), чтобы не проверять лишний раз ключ, либо отдавать только ПараметрИмя для удобства записи.
//Кэш			- структура кэша обработки
//ПараметрИмя	- имя параметра из ини контекста, либо строка, которую требуется рассчитать
//СбисПоле		- поле из ини для расчета и заполнения "рассчитанного значения". Если не передано, то после проверки параметра (если это не строка, требующая расчета) определяется из ини контекста.
//СбисКонтекст	- Контекст расчета.
//ДопПараметры	- дополнительные параметры для расширения. 
//		ВызовСервера -	булево(Ложь). Так, как поле "Вычислить", или общение к данным через [] может потребовать вызова сервера, 
//						то при общем алгоритме должно считаться после того, как весь расчет уйдёт на сервер. Но если ОЧЕНЬ надо (но нежелательно) на клиенте сделать полный расчет узла, 
//						то можно передать признак и тогда значение не будет дожидаться общего вызова сервера.
//		БратьПосчитанное - булево(Истина). Для возможности расчета, не применяя расчитанное значение в ини.
&НаКлиенте
Функция РассчитатьПараметрИни(Кэш, ПараметрИмя="", СбисПоле=Неопределено, СбисКонтекст, ДопПараметры) Экспорт
	Перем ПараметрыРасчета, ЗначениеРеквизита, СбисПараметрРасчет;
	БратьПосчитанное= Не ДопПараметры.Свойство("БратьПосчитанное") Или ДопПараметры.БратьПосчитанное;
	
	СбисПолеРасчет	= СбисПоле;
	Если	Не	СбисПолеРасчет = Неопределено
		И		СбисПолеРасчет.Свойство("РассчитанноеЗначение", ЗначениеРеквизита)
		И	БратьПосчитанное Тогда
		Возврат ЗначениеРеквизита;
	КонецЕсли;
	
	ПараметрыРасчета = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ДопПараметры,,Ложь);
	Если Не ПараметрыРасчета.Свойство("ВызовСервера") Тогда
		ПараметрыРасчета.Вставить("ВызовСервера", Ложь);
	КонецЕсли;
	Если Не ПараметрыРасчета.Свойство("Источник") Тогда
		ПараметрыРасчета.Вставить("Источник",	"Имя");
	КонецЕсли;
	ПараметрыРасчета.Вставить("Посчитано",	Ложь);
	
	Если	Не ПустаяСтрока(ПараметрИмя)
		И	Не ПараметрыРасчета.Источник = "ПоСсылкеНаУзел" Тогда
		СбисПараметр	= СокрЛП(ПараметрИмя);
		
		//Сперва проверим имя узла на предмет необходимости расчета (Формулы)
		ЗначениеРеквизита = РассчитатьПоЗначениюПараметра_Клиент(Кэш, СбисПараметр, СбисПолеРасчет, СбисКонтекст, ПараметрыРасчета);
		Если ПараметрыРасчета.Посчитано Тогда
			Если Не СбисПоле = Неопределено Тогда
				СбисПоле.Вставить("РассчитанноеЗначение", ЗначениеРеквизита);
				ЗаполнитьЗначениеРеквизита(ЗначениеРеквизита, СбисПоле, СбисКонтекст, ПараметрыРасчета);
			КонецЕсли;
			Возврат ЗначениеРеквизита;
		КонецЕсли;
		
		//Далее точно понадобится узел ини для рассчета
		Если СбисПолеРасчет = Неопределено Тогда
			Если Не ЭтоСсылкаНаУзелИни(Кэш, СбисПараметр, СбисПолеРасчет, СбисКонтекст, ДопПараметры) Тогда
					Возврат Неопределено;
			ИначеЕсли	СбисПолеРасчет.Свойство("РассчитанноеЗначение", ЗначениеРеквизита)
				И	БратьПосчитанное Тогда
				//Проверим ини на то, что посчитано
				Возврат ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СбисПолеРасчет = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Значение
	Если СбисПолеРасчет.Свойство("Значение", СбисПараметрРасчет) Тогда
		ПараметрыРасчета.Источник = "Значение";
		ЗначениеРеквизита = РассчитатьПоЗначениюПараметра_Клиент(Кэш, СбисПараметрРасчет, СбисПолеРасчет, СбисКонтекст, ПараметрыРасчета);
		Если ЗначениеРеквизита = Неопределено
			И Не СбисПолеРасчет.Свойство("Данные")
			И Не СбисПолеРасчет.Свойство("Вычислить")
			И Не СбисПолеРасчет.Свойство("ВычислитьНаСервере")
			И Не СбисПолеРасчет.Свойство("ВычислитьНаКлиенте") Тогда
			//Старая логика: если есть значение, но там не что-то, что надо рассчитывать, то берём его как значение. Если есть Данные, Вычислить то заменится.
			//В рассчитанное значение попадать не должно
			ЗначениеРеквизита = СбисПараметрРасчет;
		КонецЕсли;
	КонецЕсли;
	
	//Данные
	Если СбисПолеРасчет.Свойство("Данные", СбисПараметрРасчет) Тогда
		ПараметрыРасчета.Источник = "Данные";
		ЗначениеРеквизита = РассчитатьПоДаннымПараметра(Кэш, СбисПараметрРасчет, СбисПолеРасчет, СбисКонтекст, ПараметрыРасчета);
	КонецЕсли;
	
	//Вычислить
	//Атрибут на Вычислить является приоритетным, потому даже если ранее уже было что-то посчитано (Данные), но при этом есть параметр Вычислить, либо Вычислить с контекстом то считаем, что ещё не считали.
	Если СбисПолеРасчет.Свойство("Вычислить", СбисПараметрРасчет) Тогда
		//Универсальный вычислить с вызовом сервера, если необходимо
		ПараметрыРасчета.Источник		= "Вычислить";
		ПараметрыРасчета.Посчитано		= Ложь;
		ПараметрыРасчета.ВызовСервера	= Истина;
		ЗначениеРеквизита = РассчитатьПоЗначениюПараметра_Клиент(Кэш, СбисПараметрРасчет, СбисПолеРасчет, СбисКонтекст, ПараметрыРасчета);
	ИначеЕсли  СбисПолеРасчет.Свойство("ВычислитьНаКлиенте", СбисПараметрРасчет) Тогда
		ПараметрыРасчета.Источник		= "ВычислитьНаКлиенте";
		ПараметрыРасчета.Посчитано		= Ложь;
		ПараметрыРасчета.ВызовСервера	= Ложь;
		ЗначениеРеквизита = РассчитатьПоЗначениюПараметра_Клиент(Кэш, СбисПараметрРасчет, СбисПолеРасчет, СбисКонтекст, ПараметрыРасчета);
	ИначеЕсли	ПараметрыРасчета.ВызовСервера Тогда
		//Если включен вызов сервера, то выполним основные расчеты.
		Если		СбисПолеРасчет.Свойство("ВычислитьНаСервере", СбисПараметрРасчет) Тогда
			//Если вызов сервера активен, то отправляем узел на расчет.
			ПараметрыРасчета.Источник		= "ВычислитьНаСервере";
			ПараметрыРасчета.Посчитано		= Ложь;
			ЗначениеРеквизита = РассчитатьПоЗначениюПараметра_ДляСервера(Кэш, СбисПараметрРасчет, СбисПолеРасчет, СбисКонтекст, ПараметрыРасчета);
		ИначеЕсли	СбисПолеРасчет.Свойство("Отбор", СбисПараметрРасчет)
				И	СтрЧислоСтрок(СтрЗаменить(ЗначениеРеквизита, ".", Символы.ПС)) = 2 Тогда 
			//Есть значение и в нём точка, это отбор к регистру/справочнику/докумету и пр. 	
			ПараметрыРасчета.Посчитано		= Ложь;
			ПараметрыРасчета.Источник		= "ОтборНаСервере";
			ЗначениеРеквизита = РассчитатьПоЗначениюПараметра_ДляСервера(Кэш, ПараметрИмя, СбисПолеРасчет, СбисКонтекст, ПараметрыРасчета);
		КонецЕсли;
	КонецЕсли;
	
	//Если источник не данные, то поставим отбор и приведем тип
	Если Не ПараметрыРасчета.Источник = "Данные" Тогда
		//Сделаем отбор, если есть что отбирать
		Если	СбисПолеРасчет.Свойство("Отбор")
			И	ПараметрыРасчета.Посчитано Тогда
			ПараметрыРасчета.Источник = "Отбор";
			ПараметрыРасчета.Посчитано = Ложь;
			АргументРасчитать = Новый Структура("Значение, РассчитанноеЗначение", СбисПолеРасчет, ЗначениеРеквизита);
			ПараметрыОтбора = Новый Структура("Кэш, Контекст, ДополнительныеПараметры", Кэш, СбисКонтекст, ПараметрыРасчета);
			ЗначениеРеквизита = ВычислитьОтборНаКлиенте(АргументРасчитать, ПараметрыОтбора);
		КонецЕсли;
		
		//Приведем получившееся значение к типу, если указано.
		Если СбисПолеРасчет.Свойство("Тип") Тогда
			Если		СбисПолеРасчет.Тип = "Дата" Тогда
				Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ЗначениеРеквизита = Дата(Сред(ЗначениеРеквизита,7,4), Сред(ЗначениеРеквизита,4,2), Лев(ЗначениеРеквизита,2));
				КонецЕсли;
			ИначеЕсли	СбисПолеРасчет.Тип = "Булево" Тогда
				ЗначениеРеквизита = Булево(ЗначениеРеквизита);
			ИначеЕсли	СбисПолеРасчет.Тип = "Число" Тогда
				ЗначениеРеквизита = Число(ЗначениеРеквизита);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыРасчета.Посчитано Тогда
		СбисПолеРасчет.Вставить("РассчитанноеЗначение", ЗначениеРеквизита);
		ЗаполнитьЗначениеРеквизита(ЗначениеРеквизита, СбисПолеРасчет, СбисКонтекст, ПараметрыРасчета);
	КонецЕсли;
	Возврат ЗначениеРеквизита;
КонецФункции

//Функция формирует контекст и делает вызов сервера с клиента, если ОЧЕНЬ надо
&НаКлиенте
Функция РассчитатьПоЗначениюПараметра_ДляСервера(Кэш, СбисПараметр, СбисПоле, СбисКонтекст, ДопПараметры)
	КонтекстДляСервера = Новый Структура("ДанныеИсточник, ДанныеРезультат, Переменные, Ини, ИмяОбъекта", Новый Структура, Новый Структура, СбисКонтекст.Переменные, СбисКонтекст.Ини, СбисКонтекст.ИмяОбъекта);
	КонтекстДляСервера.ДанныеРезультат.Вставить(СбисКонтекст.ИмяОбъекта,СбисКонтекст.ДанныеРезультат);
	КонтекстДляСервера.ДанныеИсточник.Вставить("СтруктураФайла",		СбисКонтекст.ДанныеИсточник);
	Если СбисКонтекст.Свойство("ИмяОбъектаЛокальное") И СбисКонтекст.Свойство("ДанныеИсточникЛокальные") Тогда
		КонтекстДляСервера.ДанныеРезультат.Вставить(СбисКонтекст.ИмяОбъектаЛокальное, СбисКонтекст.ДанныеИсточникЛокальные);
		КонтекстДляСервера.Вставить("ИмяОбъектаЛокальное", СбисКонтекст.ИмяОбъектаЛокальное);
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ЗначениеРеквизита = РассчитатьЗначениеСервер(СбисПараметр, КонтекстДляСервера);
	#Иначе
		ЗначениеРеквизита = РассчитатьПоЗначениюПараметра_ДляСервераВызов(СбисПараметр, КонтекстДляСервера);
	#КонецЕсли
	ДопПараметры.Вставить("Посчитано", Истина);
	
	Возврат ЗначениеРеквизита;
КонецФункции

//Обёртка для УФ, где передаём по значению, чтобы не ломать ссылки и ускорить вызов сервера
&НаСервере
Функция РассчитатьПоЗначениюПараметра_ДляСервераВызов(СбисПараметр, Знач СбисКонтекст)
	Возврат РассчитатьЗначениеСервер(СбисПараметр, СбисКонтекст);
КонецФункции

//Функция делает рассчет по описанию в поле "Значение", либо по значению в формуле
&НаКлиенте
Функция РассчитатьПоЗначениюПараметра_Клиент(Кэш, СбисПараметр, СбисПоле, СбисКонтекст, ДопПараметры)
	Перем ЗначениеПосчитано, УзелИниЗначение;
	СбисПервыйСимвол = Лев(СбисПараметр, 1);
	
	Попытка
		Если		СбисПервыйСимвол = "'"	Тогда
			//' - булево, строка
			Если		СбисПараметр = "'Истина'" Тогда
				ЗначениеПосчитано = Истина;               
			ИначеЕсли	СбисПараметр = "'Ложь'" Тогда
				ЗначениеПосчитано = Ложь;
			ИначеЕсли	Сред(СбисПараметр, 2, 1) = СбисПервыйСимвол
				И	ДопПараметры.Источник = "Значение" Тогда
				//Если это '' в значении, то не запоминаем
				Возврат "";
			Иначе
				ЗначениеПосчитано = Сред(СбисПараметр, 2, СтрДлина(СбисПараметр)-2);
			КонецЕсли;
			ДопПараметры.Вставить("Посчитано", Истина);
		ИначеЕсли	СбисПервыйСимвол = "{"	Тогда
			//{ - функция
			ЗначениеПосчитано = СбисВычислитьФункциюНаКлиенте(Кэш, СбисПараметр, СбисКонтекст, ДопПараметры);
			ДопПараметры.Вставить("Посчитано", Истина);
		ИначеЕсли	СбисПервыйСимвол = "^"	Тогда
			//^ - формула
			ЗначениеПосчитано = СбисВычислитьФормулуНаКлиенте(Кэш, СбисПараметр, СбисПоле, СбисКонтекст, ДопПараметры);
			ДопПараметры.Вставить("Посчитано", Истина);
		ИначеЕсли	ДопПараметры.Источник = "Значение" Тогда 	
			//Обращение к данным в значении это параметры для заполнения, не рассчета
		ИначеЕсли	СбисПервыйСимвол = "[" Тогда
			ЗначениеПосчитано = СбисВычислитьОбращениеКДаннымНаКлиенте(Кэш, СбисПараметр, СбисПоле, СбисКонтекст, ДопПараметры);
		ИначеЕсли	ЭтоСсылкаНаУзелИни(Кэш, СбисПараметр, УзелИниЗначение, СбисКонтекст, ДопПараметры) Тогда
			ДопПараметры.Источник = "ПоСсылкеНаУзел";
			ЗначениеПосчитано = РассчитатьПараметрИни(Кэш, СбисПараметр, УзелИниЗначение, СбисКонтекст, ДопПараметры);
			ДопПараметры.Вставить("Посчитано", Истина);
		Иначе
			//Прочий расчет сперва идёт через поле ини и там определяется, что это - данные, либо вычислить либо что-то ещё.
		КонецЕсли;
	Исключение
		//Добавить обработку ошибок. Пока игнор.
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	Возврат ЗначениеПосчитано;
	
КонецФункции

&НаКлиенте
Функция РассчитатьПоДаннымПараметра(Кэш, СбисПараметр, СбисПоле, СбисКонтекст, ДопПараметры)
	Перем ИндексДляОтбора;
	РезультатРасчета = РассчитатьДанныеИзСтруктуры(Кэш, СбисПараметр, СбисКонтекст);
	//Пока что оставить старые костыли с приведением типов до расчета в вычислить. Используеся в функциях.
	Если СбисПоле.Свойство("Тип") Тогда
		Если		СбисПоле.Тип = "Дата" Тогда
			Если ЗначениеЗаполнено(РезультатРасчета) Тогда
				РезультатРасчета = Дата(Сред(РезультатРасчета,7,4),Сред(РезультатРасчета,4,2),Лев(РезультатРасчета,2));
			КонецЕсли;
		ИначеЕсли	СбисПоле.Тип = "Булево" Тогда
			РезультатРасчета = Булево(РезультатРасчета);
		ИначеЕсли	СбисПоле.Тип = "Число" Тогда
			РезультатРасчета = Число(РезультатРасчета);
		КонецЕсли;
	ИначеЕсли	СбисПоле.Свойство("Отбор")//Какой-то костыль для отбора из данных. Переделать на нормальную обработку отборов.
		И	(	СбисПоле.Отбор.Свойство("НомерСтроки",	ИндексДляОтбора)
		Или	СбисПоле.Отбор.Свойство("ИндексСтроки",	ИндексДляОтбора))
		И	ТипЗнч(РезультатРасчета) = Тип("Массив") Тогда
		Попытка
			СбисИндексСтроки = Число(ИндексДляОтбора);
			РезультатРасчета = РезультатРасчета[СбисИндексСтроки];
		Исключение
			//Добавить обработку ошибок
			//ВызватьИсключение(СтрЗаменить(СтрЗаменить("Ошибка отбора по индексу строки в узле {0}. Подробно: {1}",	"{0}",	СбисКонтекст.ТекущееПолеКлюч),
			//																										"{1}",	ОписаниеОшибки()));
		КонецПопытки;
	КонецЕсли;
	ДопПараметры.Вставить("Посчитано", Истина);
	СбисПоле.Вставить("РассчитанноеЗначение", РезультатРасчета);
	ЗаполнитьЗначениеРеквизита(РезультатРасчета, СбисПоле, СбисКонтекст, ДопПараметры);
	Возврат РезультатРасчета;
КонецФункции

//Рассчитывает данные из стукрутры в контексте сперва в локальных данных, потом в глобальных
&НаКлиенте
Функция РассчитатьДанныеИзСтруктуры(Кэш, ПараметрДанныеРассчитать, СбисКонтекст)
	Перем ДанныеИсточникЛокальные, Результат;
	МодульРасчета = Кэш.ГлавноеОкно.МодульОбъектаКлиент();
	Если		СбисКонтекст.Свойство("ДанныеИсточникЛокальные", ДанныеИсточникЛокальные) Тогда
		//Результат = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПараметрДанныеРассчитать, ДанныеИсточникЛокальные);
		Результат = МодульРасчета.ПолучитьДанныеПоПути(Новый Структура("Путь, Данные", ПараметрДанныеРассчитать, ДанныеИсточникЛокальные));
	ИначеЕсли	СбисКонтекст.Свойство("СтекДанныеИсточник", ДанныеИсточникЛокальные) Тогда
		//Проброска данных с учетом их пути, чтобы не менять структуру данных
		Для Каждого СтрокаСтека Из ДанныеИсточникЛокальные Цикл
			//Результат = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПараметрДанныеРассчитать, СтрокаСтека);
			Результат = МодульРасчета.ПолучитьДанныеПоПути(Новый Структура("Путь, Данные", ПараметрДанныеРассчитать, СтрокаСтека));
			Если Результат = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Если Результат = Неопределено Тогда
		//Результат = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПараметрДанныеРассчитать, СбисКонтекст.ДанныеИсточник);
		Результат = МодульРасчета.ПолучитьДанныеПоПути(Новый Структура("Путь, Данные", ПараметрДанныеРассчитать, СбисКонтекст.ДанныеИсточник));
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СбисВычислитьФормулуНаКлиенте(Кэш, ЗнПер, ПараметрИни, Контекст, ДопПараметры)
	Попытка
		ВычисляемаяСтрока = СокрЛП(Сред(ЗнПер, 2));
		ПозСкобки = Найти(ВычисляемаяСтрока, "(");
		ИмяФормулы = нрег(СокрЛП(Лев(ВычисляемаяСтрока, ПозСкобки-1)));
		СтрокаПараметров = Сред(ВычисляемаяСтрока,ПозСкобки+1, СтрДлина(ВычисляемаяСтрока)-ПозСкобки-1);
		МассивПараметров = Кэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(СтрокаПараметров, ",");
		ТекущееПолеИни = Новый Структура;
		Если ТипЗнч(ПараметрИни)=Тип("Структура") Тогда
			ТекущееПолеИни = ПараметрИни;
		ИначеЕсли Контекст.Свойство("ТекущееПолеИни") Тогда
			ТекущееПолеИни = Контекст.ТекущееПолеИни;
		КонецЕсли;
		Если ИмяФормулы = ">" Тогда
			Если МассивПараметров.Количество()<>4 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров[0]>МассивПараметров[1] Тогда
				Возврат МассивПараметров[2];
			Иначе
				Возврат МассивПараметров[3];
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "<" Тогда
			Если МассивПараметров.Количество()<>4 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров[0]<МассивПараметров[1] Тогда
				Возврат МассивПараметров[2];
			Иначе
				Возврат МассивПараметров[3];
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "=" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=3 или КолПараметров=4) Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров = 3 Тогда
				Если ЗначениеЗаполнено(МассивПараметров[0]) Тогда
					Возврат МассивПараметров[1];
				Иначе
					Возврат МассивПараметров[2];
				КонецЕсли;
			Иначе
				Если МассивПараметров[0]=МассивПараметров[1] Тогда
					Возврат МассивПараметров[2];
				Иначе
					Возврат МассивПараметров[3];
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "!=" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=3 или КолПараметров=4) Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров = 3 Тогда
				Если НЕ ЗначениеЗаполнено(МассивПараметров[0]) Тогда
					Возврат МассивПараметров[1];
				Иначе
					Возврат МассивПараметров[2];
				КонецЕсли;
			Иначе
				Если МассивПараметров[0]<>МассивПараметров[1] Тогда
					Возврат МассивПараметров[2];
				Иначе
					Возврат МассивПараметров[3];
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "+" Тогда
			Если ТекущееПолеИни.Свойство("Тип") и ТекущееПолеИни.Тип = "Число" Тогда
				Результат = 0;
			Иначе
				Результат = "";
			КонецЕсли;
			Для Каждого Элемент Из МассивПараметров Цикл
				Элемент = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				Если ТекущееПолеИни.Свойство("Тип") и ТекущееПолеИни.Тип = "Число" Тогда
					Результат = Результат + Число(Элемент);
				Иначе
					Результат = Результат + Элемент;
				КонецЕсли;	
			КонецЦикла;
			Если ТекущееПолеИни.Свойство("Формат") Тогда
				Результат = Формат(Результат,ТекущееПолеИни.Формат);
			КонецЕсли;
			Возврат Результат;
		ИначеЕсли ИмяФормулы = "*" Тогда
			Результат = 1;
			Для Каждого Элемент Из МассивПараметров Цикл
				Элемент = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				Результат = Результат * Число(Элемент);
			КонецЦикла;
			Если ТекущееПолеИни.Свойство("Формат") Тогда
				Результат = Формат(Результат,ТекущееПолеИни.Формат);
			КонецЕсли;
			Возврат Результат;
		ИначеЕсли ИмяФормулы = "сред" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=2 или КолПараметров=3) Тогда
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров=2 Тогда
				Возврат Сред(МассивПараметров[0],МассивПараметров[1]);
			Иначе
				Возврат Сред(МассивПараметров[0],МассивПараметров[1],МассивПараметров[2]);	
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "найти" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если КолПараметров<>2 Тогда
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				сч = сч+1;
			КонецЦикла;
			Возврат Найти(МассивПараметров[0],МассивПараметров[1]);	
		ИначеЕсли ИмяФормулы = "или" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<3 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[КолПараметров-1] = РассчитатьПараметрИни(Кэш, МассивПараметров[КолПараметров-1], , Контекст, ДопПараметры);
			МассивПараметров[КолПараметров-2] = РассчитатьПараметрИни(Кэш, МассивПараметров[КолПараметров-2], , Контекст, ДопПараметры);
			Для сч = 0 По КолПараметров-3 Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, МассивПараметров[сч], , Контекст, ДопПараметры);
				Если МассивПараметров[сч] = Истина Тогда
					Возврат МассивПараметров[КолПараметров-2];
				КонецЕсли;
			КонецЦикла;
			Возврат МассивПараметров[КолПараметров-1];
		ИначеЕсли ИмяФормулы = "и" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<3 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[КолПараметров-1] = РассчитатьПараметрИни(Кэш, МассивПараметров[КолПараметров-1], , Контекст, ДопПараметры);
			МассивПараметров[КолПараметров-2] = РассчитатьПараметрИни(Кэш, МассивПараметров[КолПараметров-2], , Контекст, ДопПараметры);
			Для сч = 0 По КолПараметров-3 Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, МассивПараметров[сч], , Контекст, ДопПараметры);
				Если МассивПараметров[сч] = Ложь Тогда
					Возврат МассивПараметров[КолПараметров-1];
				КонецЕсли;
			КонецЦикла;
			Возврат МассивПараметров[КолПараметров-2];
		ИначеЕсли ИмяФормулы = "окрбольше" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<>1 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[0] = РассчитатьПараметрИни(Кэш, МассивПараметров[0], , Контекст, ДопПараметры);
			Если Цел(МассивПараметров[0]) = МассивПараметров[0] Тогда
				Возврат МассивПараметров[0];
			Иначе
				Возврат Цел(МассивПараметров[0])+1;
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "окр" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<2 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров.Количество() = 2 Тогда
				Возврат Окр(Число(МассивПараметров[0]), Число(МассивПараметров[1]));
			Иначе
				Возврат Окр(Число(МассивПараметров[0]), Число(МассивПараметров[1]), РежимОкругления.Окр15как10);
			КонецЕсли;
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
		Возврат Неопределено
	КонецПопытки
	
КонецФункции

//Функция делает расчет обращения к данным
&НаКлиенте
Функция СбисВычислитьОбращениеКДаннымНаКлиенте(Кэш, СбисПараметр, СбисПоле, СбисКонтекст, ДопПараметры)
	Перем ЗначениеПосчитано, УзелИниЗначение;
	СтрПараметрРазбит	= СтрЗаменить(СбисПараметр, ".", Символы.ПС);
	СтрОбъекта			= Сред(СбисПараметр, 2, СтрДлина(СтрПолучитьСтроку(СтрПараметрРазбит, 1)) - 2);
	Если ЭтоСсылкаНаУзелИни(Кэш, СтрОбъекта, УзелИниЗначение, СбисКонтекст, ДопПараметры) Тогда
		УзелИниЗначение.Свойство("РассчитанноеЗначение", ЗначениеПосчитано);
		Если	ЗначениеЗаполнено(ЗначениеПосчитано) Тогда
			Если Прав(СбисПараметр, 1) = "]" Тогда
				ДопПараметры.Вставить("Посчитано", Истина);
			ИначеЕсли ТипЗнч(ЗначениеПосчитано) = Тип("Структура") Тогда
				//Если от узла берётся значение, то пробуем взять.
				СтрокаКлючПараметра = СокрЛП(СтрПолучитьСтроку(СтрПараметрРазбит, 2));
				Попытка
					ЗначениеПосчитано = ЗначениеПосчитано[СтрокаКлючПараметра];
					ДопПараметры.Вставить("Посчитано", Истина);
				Исключение
					СбисОшибка = Кэш.ОбщиеФункции.СбисИсключение(, "Документ_Шаблон.РассчитатьПоЗначениюПараметра_Клиент",600,"Ошибка при расчете", "Параметр """ + СтрокаКлючПараметра + """ отсутствует в значении");
					Возврат Неопределено;
				КонецПопытки
			КонецЕсли;
		КонецЕсли;
		Если		ДопПараметры.Посчитано Тогда
			//Всё кончено
		ИначеЕсли	ДопПараметры.ВызовСервера Тогда
			ЗначениеПосчитано = РассчитатьПоЗначениюПараметра_ДляСервера(Кэш, СбисПараметр, СбисПоле, СбисКонтекст, ДопПараметры);
		ИначеЕсли	ДопПараметры.Источник = "ВычислитьНаКлиенте" Тогда
			//Для вычислить на клиенте вызываем расчет. В противном случае, уже должно быть рассчитанное значение.
			ЗначениеПосчитано = РассчитатьПараметрИни(Кэш,, УзелИниЗначение, СбисКонтекст, ДопПараметры);
			ДопПараметры.Вставить("Посчитано", Истина);
		КонецЕсли;
	ИначеЕсли СтрОбъекта = "Переменные" Тогда
		СтрПараметрРазбит = СтрЗаменить(СбисПараметр, ".", Символы.ПС);
		СтрокаКлючПеременной = СокрЛП(СтрПолучитьСтроку(СтрПараметрРазбит, 2));
		Попытка
			Если Не СбисКонтекст.Переменные.Свойство(СтрокаКлючПеременной, ЗначениеПосчитано) Тогда
				СбисОшибка = Кэш.ОбщиеФункции.СбисИсключение(, "Документ_Шаблон.РассчитатьПоЗначениюПараметра_Клиент",600,"Ошибка при расчете", "Переменная """ + СтрокаКлючПеременной + """ отсутствует в расчитанных данных");
				Возврат Неопределено;
			КонецЕсли;
		Исключение
			СбисОшибка = Кэш.ОбщиеФункции.СбисИсключение(, "Документ_Шаблон.РассчитатьПоЗначениюПараметра_Клиент",600,"Ошибка при расчете", "Не поддерживаемая строка " + СтрокаКлючПеременной);
			Возврат Неопределено;
		КонецПопытки;
		ДопПараметры.Вставить("Посчитано", Истина);
	КонецЕсли;
	Возврат ЗначениеПосчитано;
КонецФункции
	
&НаСервере
Функция СбисВычислитьФормулуНаСервере(ЗнПер, ПараметрИни, Контекст)
	
	Попытка
		ВычисляемаяСтрока = СокрЛП(Сред(ЗнПер, 2));
		ПозСкобки = Найти(ВычисляемаяСтрока, "(");
		ИмяФормулы = нрег(СокрЛП(Лев(ВычисляемаяСтрока, ПозСкобки-1)));
		СтрокаПараметров = Сред(ВычисляемаяСтрока,ПозСкобки+1, СтрДлина(ВычисляемаяСтрока)-ПозСкобки-1);
		МассивПараметров = РазбитьСтрокуВМассив(СтрокаПараметров, ",");
		ТекущееПолеИни = Новый Структура;
		Если ТипЗнч(ПараметрИни)=Тип("Структура") Тогда
			ТекущееПолеИни = ПараметрИни;
		ИначеЕсли Контекст.Свойство("ТекущееПолеИни") Тогда
			ТекущееПолеИни = Контекст.ТекущееПолеИни;
		КонецЕсли;
		Если ИмяФормулы = ">" Тогда
			Если МассивПараметров.Количество()<>4 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеСервер(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров[0]>МассивПараметров[1] Тогда
				Возврат МассивПараметров[2];
			Иначе
				Возврат МассивПараметров[3];
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "<" Тогда
			Если МассивПараметров.Количество()<>4 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеСервер(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров[0]<МассивПараметров[1] Тогда
				Возврат МассивПараметров[2];
			Иначе
				Возврат МассивПараметров[3];
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "=" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=3 или КолПараметров=4) Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеСервер(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров = 3 Тогда
				Если ЗначениеЗаполнено(МассивПараметров[0]) Тогда
					Возврат МассивПараметров[1];
				Иначе
					Возврат МассивПараметров[2];
				КонецЕсли;
			Иначе
				Если МассивПараметров[0]=МассивПараметров[1] Тогда
					Возврат МассивПараметров[2];
				Иначе
					Возврат МассивПараметров[3];
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "!=" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=3 или КолПараметров=4) Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеСервер(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров = 3 Тогда
				Если НЕ ЗначениеЗаполнено(МассивПараметров[0]) Тогда
					Возврат МассивПараметров[1];
				Иначе
					Возврат МассивПараметров[2];
				КонецЕсли;
			Иначе
				Если МассивПараметров[0]<>МассивПараметров[1] Тогда
					Возврат МассивПараметров[2];
				Иначе
					Возврат МассивПараметров[3];
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "+" Тогда
			Если ТекущееПолеИни.Свойство("Тип") и ТекущееПолеИни.Тип = "Число" Тогда
				Результат = 0;
			Иначе
				Результат = "";
			КонецЕсли;
			Для Каждого Элемент Из МассивПараметров Цикл
				Элемент = РассчитатьЗначениеСервер(Элемент, Контекст);
				Если ТекущееПолеИни.Свойство("Тип") и ТекущееПолеИни.Тип = "Число" Тогда
					Результат = Результат + Число(Элемент);
				Иначе
					Результат = Результат + Элемент;
				КонецЕсли;	
			КонецЦикла;
			Если ТекущееПолеИни.Свойство("Формат") Тогда
				Результат = Формат(Результат,ТекущееПолеИни.Формат);
			КонецЕсли;
			Возврат Результат;
		ИначеЕсли ИмяФормулы = "*" Тогда
			Результат = 1;
			Для Каждого Элемент Из МассивПараметров Цикл
				Элемент = РассчитатьЗначениеСервер(Элемент, Контекст);
				Результат = Результат * Число(Элемент);
			КонецЦикла;
			Если ТекущееПолеИни.Свойство("Формат") Тогда
				Результат = Формат(Результат,ТекущееПолеИни.Формат);
			КонецЕсли;
			Возврат Результат;
		ИначеЕсли ИмяФормулы = "сред" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=2 или КолПараметров=3) Тогда
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеСервер(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров=2 Тогда
				Возврат Сред(МассивПараметров[0],МассивПараметров[1]);
			Иначе
				Возврат Сред(МассивПараметров[0],МассивПараметров[1],МассивПараметров[2]);	
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "найти" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если КолПараметров<>2 Тогда
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеСервер(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Возврат Найти(МассивПараметров[0],МассивПараметров[1]);	
		ИначеЕсли ИмяФормулы = "или" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<3 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[КолПараметров-1] = РассчитатьЗначениеСервер(МассивПараметров[КолПараметров-1], Контекст);
			МассивПараметров[КолПараметров-2] = РассчитатьЗначениеСервер(МассивПараметров[КолПараметров-2], Контекст);
			Для сч = 0 По КолПараметров-3 Цикл
				МассивПараметров[сч] = РассчитатьЗначениеСервер(МассивПараметров[сч], Контекст);
				Если МассивПараметров[сч] = Истина Тогда
					Возврат МассивПараметров[КолПараметров-2];
				КонецЕсли;
			КонецЦикла;
			Возврат МассивПараметров[КолПараметров-1];
		ИначеЕсли ИмяФормулы = "и" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<3 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[КолПараметров-1] = РассчитатьЗначениеСервер(МассивПараметров[КолПараметров-1], Контекст);
			МассивПараметров[КолПараметров-2] = РассчитатьЗначениеСервер(МассивПараметров[КолПараметров-2], Контекст);
			Для сч = 0 По КолПараметров-3 Цикл
				МассивПараметров[сч] = РассчитатьЗначениеСервер(МассивПараметров[сч], Контекст);
				Если МассивПараметров[сч] = Ложь Тогда
					Возврат МассивПараметров[КолПараметров-1];
				КонецЕсли;
			КонецЦикла;
			Возврат МассивПараметров[КолПараметров-2];
		ИначеЕсли ИмяФормулы = "окрбольше" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<>1 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[0] = РассчитатьЗначениеСервер(МассивПараметров[0], Контекст);
			Если Цел(МассивПараметров[0]) = МассивПараметров[0] Тогда
				Возврат МассивПараметров[0];
			Иначе
				Возврат Цел(МассивПараметров[0])+1;
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "окр" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<2 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеСервер(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров.Количество() = 2 Тогда
				Возврат Окр(Число(МассивПараметров[0]), Число(МассивПараметров[1]));
			Иначе
				Возврат Окр(Число(МассивПараметров[0]), Число(МассивПараметров[1]), РежимОкругления.Окр15как10);
			КонецЕсли;
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
		Возврат Неопределено
	КонецПопытки
	
КонецФункции

//OLD! использовать РассчитатьЗначениеСервер Функция рассчитывает значение параметра из файла настроек на сервере	
&НаКлиенте
Функция РассчитатьЗначениеНаСервере(СбисПараметр, СбисКонтекст) Экспорт
	КонтекстДляСервера = Новый Структура("ДанныеИсточник, ДанныеРезультат, Переменные, Ини, ИмяОбъекта", Новый Структура, Новый Структура, СбисКонтекст.Переменные, СбисКонтекст.Ини, "Документ");
	КонтекстДляСервера.ДанныеРезультат.Вставить(КонтекстДляСервера.ИмяОбъекта, СбисКонтекст.Документ);
	КонтекстДляСервера.ДанныеИсточник.Вставить("СтруктураФайла", СбисКонтекст.СтруктураФайла);
	Если СбисКонтекст.Свойство("СтрокаФайла") Тогда
		КонтекстДляСервера.ДанныеРезультат.Вставить("ТаблДок", СбисКонтекст.СтрокаФайла);
		КонтекстДляСервера.Вставить("ИмяОбъектаЛокальное", "ТаблДок");
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат РассчитатьЗначениеСервер(СбисПараметр, КонтекстДляСервера);
	#Иначе
		Возврат РассчитатьПоЗначениюПараметра_ДляСервераВызов(СбисПараметр, КонтекстДляСервера);
	#КонецЕсли
КонецФункции

//Процедура копирует структуру на сервере	
&НаСервере
Процедура СбисСкопироватьСтруктуру(СтруктураКуда, знач СтруктураОткуда)  Экспорт
	Для Каждого Элемент Из СтруктураОткуда Цикл	
		Если ТипЗнч(СтруктураОткуда) = Тип("Массив") Тогда
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			//Если Не СтруктураКуда.Свойство(Элемент.Ключ) или СтруктураКуда[Элемент.Ключ] = Неопределено или ТипЗнч(СтруктураКуда[Элемент.Ключ])<>Тип("Структура") Тогда
			СтруктураКуда.Вставить(Элемент.Ключ, Новый Структура);
			//КонецЕсли;
			сбисСкопироватьСтруктуру(СтруктураКуда[Элемент.Ключ], Элемент.Значение);				
		ИначеЕсли Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
			СтруктураКуда.Вставить(Элемент.Ключ,Элемент.Значение);
		Иначе
			СтруктураКуда[Элемент.Ключ] = Элемент.Значение;			
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

//Создание дополнительных свойств
&НаСервере
Функция СоздатьНаборСвойствПоМассиву(РассчитанныйНаборСвойств, МассивКлючей, ИниКонфигурация, Отказ) Экспорт
	
	ИмяПланаВидовХарактеристикСвойствОбъектов = ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация);
	ИмяНаборыДополнительныхРеквизитовИСведений = ИмяНаборыДополнительныхРеквизитовИСведений(ИниКонфигурация);
	ИмяЗначенияСвойствОбъектов = ИмяЗначенияСвойствОбъектов(ИниКонфигурация);
	
	Если ИмяПланаВидовХарактеристикСвойствОбъектов = Неопределено Тогда
		Возврат "Не известно, где хранить дополнительные сведения.";	
	КонецЕсли;
	
	Для Каждого Ключ ИЗ МассивКлючей Цикл
		
		СтруктураОбъекта = РассчитанныйНаборСвойств[Ключ.ИмяНабора].мФайл[Ключ.ИмяСвойства];
		
		ДопСведение = НайтиДопСведение(СтруктураОбъекта, ИмяПланаВидовХарактеристикСвойствОбъектов, Отказ);
		
		Если Отказ Тогда
			Возврат ДопСведение;	
		КонецЕсли;
		
		ЭтоНовоеСвойство = ЛОжь;
		
		Если НЕ ЗначениеЗаполнено(ДопСведение) Тогда
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ОбъектПерезаполнитьСсылка", Неопределено);
			ДополнительныеПараметры.Вставить("ТипОбъекта", "ПланВидовХарактеристик");
			ДополнительныеПараметры.Вставить("ПодТипОбъекта", ИмяПланаВидовХарактеристикСвойствОбъектов);
			
			Результат = СоздатьОбъектИзСтруктуры(СтруктураОбъекта, ДополнительныеПараметры, Отказ);
			
			Если Отказ Тогда
				Возврат Результат.Сообщение;	
			КонецЕсли;
			
			ДопСведение = Результат.Ссылка;
			ЭтоНовоеСвойство = Истина;
			
		КонецЕсли;
		
		НаборСвойств = Неопределено;
		СтруктураОбъекта.Свойство("НаборСвойств", НаборСвойств);
		
		Если ИмяНаборыДополнительныхРеквизитовИСведений <> Неопределено 
			И ЗначениеЗаполнено(НаборСвойств) Тогда
			
			НаборДопСведений = НайтиНаборыДополнительныхРеквизитовИСведений(НаборСвойств, ИмяНаборыДополнительныхРеквизитовИСведений, ДопСведение);
			
			Если НЕ ЗначениеЗаполнено(НаборДопСведений) Тогда
				
				ЭтоДополнительноеСведение = Ложь;
				Если СтруктураОбъекта.Свойство("ЭтоДополнительноеСведение") Тогда
					ЭтоДополнительноеСведение = СтруктураОбъекта.ЭтоДополнительноеСведение;	
				КонецЕсли;
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("ОбъектПерезаполнитьСсылка", НаборСвойств);
				ДополнительныеПараметры.Вставить("ТипОбъекта", "Справочник");
				ДополнительныеПараметры.Вставить("ПодТипОбъекта", ИмяНаборыДополнительныхРеквизитовИСведений);
				
				СтруктураСправочника = Новый Структура();
				
				Если ЭтоДополнительноеСведение Тогда
					ИмяРеквизита = "ДополнительныеСведения";	
				Иначе
					ИмяРеквизита = "ДополнительныеРеквизиты";
				КонецЕсли;
				
				СтруктураСправочника.Вставить(ИмяРеквизита, Новый Массив);
				
				Попытка
					Для Каждого ТекСтрока ИЗ НаборСвойств[ИмяРеквизита]Цикл
						СтруктураСтроки = Новый Структура();
						СтруктураСтроки.Вставить("Свойство", ТекСтрока.Свойство);
						СтруктураСтроки.Вставить("ПометкаУдаления", ТекСтрока.ПометкаУдаления);
						СтруктураСтроки.Вставить("ИмяПредопределенногоНабора", ТекСтрока.ИмяПредопределенногоНабора);
						СтруктураСправочника[ИмяРеквизита].Добавить(СтруктураСтроки)		
					КонецЦикла;
					СтруктураСтроки = Новый Структура();
					СтруктураСтроки.Вставить("Свойство", ДопСведение);
					СтруктураСправочника[ИмяРеквизита].Добавить(СтруктураСтроки);		
				Исключение
					Возврат ОписаниеОшибки();
				КонецПопытки;
				
				Результат = СоздатьОбъектИзСтруктуры(СтруктураСправочника, ДополнительныеПараметры, Отказ);
				
				Если Отказ Тогда
					Сообщить(Результат.Сообщение);	
				КонецЕсли;
				
			Конецесли;
		КонецЕсли;
		
		Если ИмяЗначенияСвойствОбъектов <> Неопределено 
			И ЭтоНовоеСвойство
			И СтруктураОбъекта.Свойство("ДополнительныеЗначение") Тогда
			
			Для Каждого ТекСтрока ИЗ СтруктураОбъекта.ДополнительныеЗначение Цикл
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("ОбъектПерезаполнитьСсылка", Неопределено);
				ДополнительныеПараметры.Вставить("ТипОбъекта", "Справочник");
				ДополнительныеПараметры.Вставить("ПодТипОбъекта", ИмяЗначенияСвойствОбъектов);
				
				СтруктураСправочника = Новый Структура();
				СтруктураСправочника.Вставить("Владелец", ДопСведение);
				СтруктураСправочника.Вставить("Наименование", ТекСтрока);
				
				Результат = СоздатьОбъектИзСтруктуры(СтруктураСправочника, ДополнительныеПараметры, Отказ);
				
				Если Отказ Тогда
					Сообщить(Результат.Сообщение);	
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация) Экспорт
	
	Если ИниКонфигурация.Свойство("ИмяПланаВидовХарактеристикСвойствОбъектов") 
		И ИниКонфигурация.ИмяПланаВидовХарактеристикСвойствОбъектов <> Неопределено Тогда
		Возврат СтрЗаменить(ИниКонфигурация.ИмяПланаВидовХарактеристикСвойствОбъектов.Значение, "'", "");
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("ДополнительныеРеквизитыИСведения") <> Неопределено Тогда
		Возврат "ДополнительныеРеквизитыИСведения";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("СвойстваОбъектов") <> Неопределено Тогда
		Возврат "СвойстваОбъектов";
	Иначе
		Возврат Неопределено;
	КонецЕсли
	
КонецФункции

&НаСервере
Функция ИмяНаборыДополнительныхРеквизитовИСведений(ИниКонфигурация)
	
	Если ИниКонфигурация.Свойство("ИмяНаборыДополнительныхРеквизитовИСведений") 
		И ИниКонфигурация.ИмяНаборыДополнительныхРеквизитовИСведений <> Неопределено Тогда
		Возврат СтрЗаменить(ИниКонфигурация.ИмяНаборыДополнительныхРеквизитовИСведений.Значение, "'", "");
	ИначеЕсли Метаданные.Справочники.Найти("НаборыДополнительныхРеквизитовИСведений") <> Неопределено Тогда
		Возврат "НаборыДополнительныхРеквизитовИСведений";
	Иначе
		Возврат Неопределено;
	КонецЕсли
	
КонецФункции

&НаСервере
Функция ИмяЗначенияСвойствОбъектов(ИниКонфигурация)
	
	Если ИниКонфигурация.Свойство("ИмяЗначенияСвойствОбъектов") 
		И ИниКонфигурация.ИмяЗначенияСвойствОбъектов <> Неопределено Тогда
		Возврат СтрЗаменить(ИниКонфигурация.ИмяЗначенияСвойствОбъектов.Значение, "'", "");
	ИначеЕсли Метаданные.Справочники.Найти("ЗначенияСвойствОбъектов") <> Неопределено Тогда
		Возврат "ЗначенияСвойствОбъектов";
	Иначе
		Возврат Неопределено;
	КонецЕсли
	
КонецФункции

&НаСервере
Функция НайтиДопСведение(СтруктураОбъекта, ИмяПланаВидовХарактеристикСвойствОбъектов, Отказ)
	
	ОбщееДляНесколькихНаборов = СтруктураОбъекта.Свойство("ОбщееДляНесколькихНаборов") И СтруктураОбъекта.ОбщееДляНесколькихНаборов;
	
	НаборСвойств = Неопределено;
	СтруктураОбъекта.Свойство("НаборСвойств", НаборСвойств);
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.Наименование = &Наименование
		|	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Наименование", СтруктураОбъекта.Наименование);
		
		Если НаборСвойств <> Неопределено Тогда    
			Если НЕ ОбщееДляНесколькихНаборов Тогда
				Запрос.Текст =	Запрос.Текст + "
				|	И ДополнительныеРеквизитыИСведения.НаборСвойств = &НаборСвойств";
				
				Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
			КонецЕсли;
		Иначе
			Если СтруктураОбъекта.Свойство("НазначениеСвойства") Тогда 
				Запрос.Текст =	Запрос.Текст + "
				|	И ДополнительныеРеквизитыИСведения.НазначениеСвойства = &НазначениеСвойства";
				
				Запрос.УстановитьПараметр("НазначениеСвойства", СтруктураОбъекта.НазначениеСвойства);
			КонецЕсли;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДополнительныеРеквизитыИСведения", ИмяПланаВидовХарактеристикСвойствОбъектов); 
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
	Исключение
		Отказ = Истина;
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция НайтиНаборыДополнительныхРеквизитовИСведений(НаборСвойств, ИмяНаборыДополнительныхРеквизитовИСведений, Свойство)
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство = &Свойство
		|	И НЕ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка.ПометкаУдаления
		|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = &НаборСвойств
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство = &Свойство
		|	И НЕ НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка.ПометкаУдаления
		|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = &НаборСвойств";
		
		Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
		Запрос.УстановитьПараметр("Свойство", Свойство);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НаборыДополнительныхРеквизитовИСведений", ИмяНаборыДополнительныхРеквизитовИСведений);  
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;	
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	Возврат Неопределено;	
	
КонецФункции

//Функция заполняет реквизиты объекта 1С из одноименных полей структуры. Поддерживаемые типы: Документ, Справочник	
&НаСервере
// ▼ ayan#bitrix#4397_02 Создавать документ Поступление в тек дате КирилловПС  2023.12.08 ▼ Начало
//Функция СоздатьОбъектИзСтруктуры(Знач СтруктураДокОбъект, Знач ДополнительныеПараметры, Отказ)
Функция СоздатьОбъектИзСтруктуры(СтруктураДокОбъект, ДополнительныеПараметры, Отказ)
// ▲ ayan#bitrix#4397_02 Создавать документ Поступление в тек дате КирилловПС  2023.12.08 ▲ Конец 
	
	ОбъектСсылка	= ДополнительныеПараметры.ОбъектПерезаполнитьСсылка;
	ОбъектПодТип	= ДополнительныеПараметры.ПодТипОбъекта;
	ОбъектТип		= ДополнительныеПараметры.ТипОбъекта;
	ДополнятьТабЧасть = ?(ДополнительныеПараметры.Свойство("ДополнятьТабЧасть"), ДополнительныеПараметры.ДополнятьТабЧасть, Ложь);
	РедактироватьТабЧасть = ?(ДополнительныеПараметры.Свойство("РедактироватьТабЧасть"), ДополнительныеПараметры.РедактироватьТабЧасть, Ложь);
	ПерезаполнятьТолькоНепроведенные = ?(ДополнительныеПараметры.Свойство("ПерезаполнятьТолькоНепроведенные"), ДополнительныеПараметры.ПерезаполнятьТолькоНепроведенные, Ложь); 
	ЗаполняемыеТабЧасти = ?(ДополнительныеПараметры.Свойство("ЗаполняемыеТабЧасти"), ДополнительныеПараметры.ЗаполняемыеТабЧасти, Новый Массив);
	
	ЭтоНовый		= Не ЗначениеЗаполнено(ОбъектСсылка);
	Объект1СЗначение= Неопределено;
	
	Результат	= Новый Структура("Тип, Ссылка, Состояние, Сообщение");
	ТекстТип	= НРег(Лев(ОбъектТип, 1)) + Сред(ОбъектТип, 2);
	ТекстОшибки	= "";
	//Получаем объект для редактирования и записи
	Если ЭтоНовый Тогда
		Если ОбъектТип = "Справочник" Тогда
			Попытка	
				ТекстТип = "справочника";
				Объект1СЗначение = Справочники[ОбъектПодТип].СоздатьЭлемент();
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Отказ = Истина;
			КонецПопытки;
			
		ИначеЕсли ОбъектТип = "ПланВидовХарактеристик" Тогда
			Попытка	
				ТекстТип = "плана видов характеристик";
				Объект1СЗначение = ПланыВидовХарактеристик[ОбъектПодТип].СоздатьЭлемент();
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Отказ = Истина;
			КонецПопытки;
			
		ИначеЕсли ОбъектТип = "Документ" Тогда
			Попытка	
				ТекстТип = "документа";
				Объект1СЗначение = Документы[ОбъектПодТип].СоздатьДокумент();
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Отказ = Истина;
			КонецПопытки;
			
		ИначеЕсли ОбъектТип = "РегистрыСведений" Тогда
			Попытка
				ТекстТип = "регистра сведений";
				Объект1СЗначение = РегистрыСведений[ОбъектПодТип].СоздатьМенеджерЗаписи();
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Отказ = Истина;
			КонецПопытки;
			
		Иначе
			ТекстОшибки = "Не поддерживаемый тип.";
			Отказ = Истина;
		КонецЕсли;
		Результат.Тип = ОбъектТип + "." + ОбъектПодТип;
	Иначе
		Попытка
			Если ОбъектТип = "Документ" И ОбъектСсылка.Проведен И ПерезаполнятьТолькоНепроведенные Тогда
				Результат.Состояние = "Ошибка перезаполнения документа.";	    
				Результат.Сообщение = "Документ " + Строка(ОбъектСсылка) + " не перезаполнен, так как проведен. Включить возможность перезаполнения проведенных документов можно на вкладке ""Настройки"" в разделе ""Загрузка документов"".";
				Возврат Результат;
			КонецЕсли;
			Результат.Тип	= ОбъектТип + "." + ОбъектСсылка.Метаданные().Имя;
			Объект1СЗначение= ОбъектСсылка.ПолучитьОбъект();
		Исключение
			Результат.Тип = ОбъектТип + "." + ОбъектПодТип;
			ТекстОшибки = ОписаниеОшибки();
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	Если Отказ Тогда
		Результат.Состояние = "Ошибка формирования " + ТекстТип;
		Если ЭтоНовый Тогда
			Результат.Сообщение = "Не удалось создать " + ?(ОбъектТип = "Документ", "новый документ",  "новую запись " + ТекстТип) + ". " + ТекстОшибки;
		Иначе
			Результат.Сообщение = "Не удалось прочитать объект " + Строка(ОбъектСсылка) + ". " + ТекстОшибки;		
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	//Заполняем объект данными		
	Для Каждого Элемент Из СтруктураДокОбъект Цикл
		Попытка
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				Если РедактироватьТабЧасть = Истина Тогда
					КлючиПоиска = РассчитатьЗначениеСервер("КлючСтроки", Новый Структура("ини", ДополнительныеПараметры.Ини.мТаблДок[Элемент.Ключ]));		
					Если ЗначениеЗаполнено(КлючиПоиска) Тогда
						сбисДозаполнитьТабличнуюЧасть(Объект1СЗначение, Элемент, КлючиПоиска, ДополнительныеПараметры.Ини);	
					КонецЕсли;
				Иначе
					Если Не ДополнятьТабЧасть ИЛИ ЗаполняемыеТабЧасти.Найти(Элемент.Ключ) = Неопределено Тогда
						Объект1СЗначение[Элемент.Ключ].Очистить();
					КонецЕсли;
					Для Каждого Строка Из Элемент.Значение Цикл
						НоваяСтрока = Объект1СЗначение[Элемент.Ключ].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					КонецЦикла;
				КонецЕсли;
			Иначе
				Объект1СЗначение[Элемент.Ключ] = Элемент.Значение;
			КонецЕсли;
		Исключение
			Ошибка = ОписаниеОшибки();
		Конецпопытки;
	КонецЦикла;
	
	Попытка
		// Выполняем обработчики по строкам табличных частей документа
		Если ДополнительныеПараметры.Ини.Свойство("мТаблДок") Тогда
			ТабличныеЧастиДокумента = Объект1СЗначение.Метаданные().ТабличныеЧасти;
			Для каждого ТабЧасть Из ТабличныеЧастиДокумента Цикл
				Если	ДополнительныеПараметры.Ини.мТаблДок.Свойство(ТабЧасть.Имя)
						И ДополнительныеПараметры.Ини.мТаблДок[ТабЧасть.Имя].Свойство("мОбработчикПередЗаписьюНаСервере") Тогда
					Для каждого СтрокаТЧ Из Объект1СЗначение[ТабЧасть.Имя] Цикл
						ДополнительныеПараметрыОбработчика = Новый Структура;
						ДополнительныеПараметрыОбработчика.Вставить("ПересчитыватьНДСПоДанным1С", ?(ДополнительныеПараметры.Ини.Свойство("ПересчитыватьНДСПоДанным1С"), ДополнительныеПараметры.Ини.ПересчитыватьНДСПоДанным1С.РассчитанноеЗначение, 2));	
						ДополнительныеПараметрыОбработчика.Вставить("ПересчитыватьЦеныПоДанным1С", ?(ДополнительныеПараметры.Ини.Свойство("ПересчитыватьЦеныПоДанным1С"), ДополнительныеПараметры.Ини.ПересчитыватьЦеныПоДанным1С.РассчитанноеЗначение, 2));
						сбисВыполнитьОбработчикиПоСтрокеТЧ(ДополнительныеПараметры.Ини.мТаблДок[ТабЧасть.Имя].мОбработчикПередЗаписьюНаСервере, Объект1СЗначение, ТабЧасть.Имя,	СтрокаТЧ, ДополнительныеПараметрыОбработчика);
					КонецЦикла;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	//Выполняем обработчики по документу
	Попытка
		Если ДополнительныеПараметры.Ини.Свойство("мОбработчикПередЗаписьюНаСервере") Тогда
			ДополнительныеПараметрыОбработчика = Новый Структура;
			ДополнительныеПараметрыОбработчика.Вставить("ПересчитыватьНДСПоДанным1С", ?(ДополнительныеПараметры.Ини.Свойство("ПересчитыватьНДСПоДанным1С"), ДополнительныеПараметры.Ини.ПересчитыватьНДСПоДанным1С.РассчитанноеЗначение, 2));
			ДополнительныеПараметрыОбработчика.Вставить("ПересчитыватьЦеныПоДанным1С", ?(ДополнительныеПараметры.Ини.Свойство("ПересчитыватьЦеныПоДанным1С"), ДополнительныеПараметры.Ини.ПересчитыватьЦеныПоДанным1С.РассчитанноеЗначение, 2));
			сбисВыполнитьОбработчикиПоДокументу(ДополнительныеПараметры.Ини.мОбработчикПередЗаписьюНаСервере, Объект1СЗначение, ДополнительныеПараметрыОбработчика);
		КонецЕсли;							
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	// ▼ ayan#bitrix#4397_03 Создавать документ Поступление в тек дате КирилловПС  2023.12.08 ▼ Начало
	Если ОбъектПодТип = "ПриобретениеТоваровУслуг" ИЛИ ОбъектПодТип = "СчетФактураПолученный" Тогда
		аян_ТекДата = ТекущаяДатаСеанса();
		ДополнительныеПараметры.Ини.Документ_Дата.РассчитанноеЗначение = аян_ТекДата;
		СтруктураДокОбъект.Дата = аян_ТекДата;
		Объект1СЗначение.Дата = аян_ТекДата;
		
		Если ОбъектПодТип = "СчетФактураПолученный" Тогда
			//Если НЕ ЗначениеЗаполнено(Объект1СЗначение.Склад)  Тогда
			//	Объект1СЗначение.Склад = аян_ОбщийСерверПовтИсп.СкладТомскАТ_Общий(); 
			//КонецЕсли; 
		Иначе
			аян_ОбщийСервер.ДоработатьПриобретениеТоваровУслуг(Объект1СЗначение);
		КонецЕсли; 
	КонецЕсли; 	
	// ▲ ayan#bitrix#4397_03 Создавать документ Поступление в тек дате КирилловПС  2023.12.08 ▲ Конец 
		
	//Записываем изменения
	Попытка
		Объект1СЗначение.Записать();
		Если ОбъектТип <> "РегистрыСведений" Тогда
			ОбъектСсылка = Объект1СЗначение.Ссылка;
		Иначе
			ОбъектСсылка = ОбъектПодТип+" ";
			Для Каждого Измер Из Метаданные.РегистрыСведений[ОбъектПодТип].Измерения Цикл
				Если ЗначениеЗаполнено(Объект1СЗначение[Измер.Имя]) Тогда
					ОбъектСсылка = ОбъектСсылка+Измер.Имя + ": "  + Объект1СЗначение[Измер.Имя]+";";
				КонецЕсли;
			КонецЦикла
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Отказ = Истина;
	КонецПопытки;
	//Пробуем заполним документу дату и повторно записать при ошибке.
	Если	Отказ
		И	ОбъектТип = "Документ" Тогда
		Отказ = Ложь;
		Попытка
			Объект1СЗначение.Дата = ТекущаяДата();
			Объект1СЗначение.Записать();
			ОбъектСсылка = Объект1СЗначение.Ссылка;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	//Заполняем результат
	Если Отказ Тогда
		Результат.Состояние = "Ошибка формирования " + ТекстТип;
		Результат.Сообщение = "Не удалось записать "  + ?(ОбъектТип = "Документ", "документ",  " элемент " + ТекстТип) + ". " +  ТекстОшибки;
	Иначе
		СостояниеОбъекта	= ?(ЭтоНовый, "Создан", "Перезаполнен"); 
		Результат.Состояние = СостояниеОбъекта + ".";
		Результат.Сообщение = СостояниеОбъекта + ?(ОбъектТип = "Документ", " документ",  " элемент " + ТекстТип) + " " + Строка(ОбъектСсылка);
		Результат.Ссылка	= ОбъектСсылка;		
	КонецЕсли;
	Возврат Результат;
КонецФункции

// функция дозаполняет табличную часть документа данными из электронного документа
&НаСервере
Функция сбисДозаполнитьТабличнуюЧасть(Объект1СЗначение, Элемент, КлючиПоиска, Ини)
	// ключи, по которым ищем строки в документе, в которые необходимо внести изменения
	КлючиПоиска = РазбитьСтрокуВМассив(КлючиПоиска, ",");
	ЗаменятьТолькоЗаполненные = Ложь;
	// Можно задать в инишке список полей, которые хотим редактировать 
	ПоляДляПерезаполнения = РассчитатьЗначениеСервер("ПоляПерезаполнить", Новый Структура("ини", Ини.мТаблДок[Элемент.Ключ]));
	Если Не ЗначениеЗаполнено(ПоляДляПерезаполнения) Тогда
		ЗаменятьТолькоЗаполненные = Истина;
	КонецЕсли;                                          
	// В СписокОтредактированныхСтрок складываем строки документа, которые уже отредактировали, чтобы второй раз не редактировать одну и ту же строку, а редактировать следующую с такими же ключами 
	// (для случая наличия строк с одинаковыми номенклатурами/характеристиками)
	СписокОтредактированныхСтрок = Новый СписокЗначений;
	Для Каждого Строка Из Элемент.Значение Цикл  
		ПараметрыОтбора = Новый Структура;
		Для каждого Элем Из КлючиПоиска Цикл
			Если ЗначениеЗаполнено(Строка[Элем]) Тогда
				ПараметрыОтбора.Вставить(Элем, Строка[Элем]);				
			КонецЕсли;
		КонецЦикла;
		НайденныеСтроки = Объект1СЗначение[Элемент.Ключ].НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если СписокОтредактированныхСтрок.НайтиПоЗначению(НайденнаяСтрока.НомерСтроки)<>Неопределено Тогда
					Продолжить;
				Иначе
					НоваяСтрока = НайденнаяСтрока;
					СписокОтредактированныхСтрок.Добавить(НайденнаяСтрока.НомерСтроки);
					// Если в инишке не указаны поля, то перезаполняем все, которые рассчитались по инишке
					Если ЗаменятьТолькоЗаполненные Тогда
						ПоляДляПерезаполнения = "";
						Для Каждого Элем Из Строка Цикл
							Если Элем.Значение<>Неопределено Тогда
								ПоляДляПерезаполнения = ПоляДляПерезаполнения + Элем.Ключ+",";						
							КонецЕсли;
						КонецЦикла;
						Если Прав(ПоляДляПерезаполнения, 1) = "," Тогда
							ПоляДляПерезаполнения = Лев(ПоляДляПерезаполнения, СтрДлина(ПоляДляПерезаполнения)-1);
						КонецЕсли;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, ПоляДляПерезаполнения);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НоваяСтрока = Объект1СЗначение[Элемент.Ключ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
		КонецЕсли;
		Если Ини.мТаблДок[Элемент.Ключ].Свойство("мОбработчикПередЗаписьюНаСервере") Тогда
			ДополнительныеПараметрыОбработчика = Новый Структура;
			ДополнительныеПараметрыОбработчика.Вставить("ПересчитыватьНДСПоДанным1С", ?(Ини.Свойство("ПересчитыватьНДСПоДанным1С"), Ини.ПересчитыватьНДСПоДанным1С.РассчитанноеЗначение, 2));
			ДополнительныеПараметрыОбработчика.Вставить("ПересчитыватьЦеныПоДанным1С", ?(Ини.Свойство("ПересчитыватьЦеныПоДанным1С"), Ини.ПересчитыватьЦеныПоДанным1С.РассчитанноеЗначение, 2));
			сбисВыполнитьОбработчикиПоСтрокеТЧ(Ини.мТаблДок[Элемент.Ключ].мОбработчикПередЗаписьюНаСервере, Объект1СЗначение, Элемент.Ключ,	НоваяСтрока, ДополнительныеПараметрыОбработчика);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// функция выполняет обработчики по строкам создаваемого документа
// Обработчики указываются в инишке на загрузку документа
// Например, можно вызывать функции из общих модулей, в которых дозаполняются данные документа по умолчанию или пересчитываются определенные реквизиты, в зависимости от загруженных реквизитов
&НаСервере
Функция сбисВыполнитьОбработчикиПоСтрокеТЧ(мОбработчикПередЗаписью, Объект1СЗначение, КлючТЧ, СтрокаТЧ, ДополнительныеПараметры)
	СбисКонтекстРассчета = Новый Структура("ДанныеРезультат", Новый Структура());
	СбисКонтекстРассчета.Вставить("ИмяОбъектаЛокальное", КлючТЧ); 
	СбисКонтекстРассчета.Вставить("ИмяОбъекта", "Документ");
	СбисКонтекстРассчета.ДанныеРезультат.Вставить(КлючТЧ,	СтрокаТЧ); 
	СбисКонтекстРассчета.ДанныеРезультат.Вставить("Документ", Объект1СЗначение);
	СбисКонтекстРассчета.Вставить("Переменные", ДополнительныеПараметры);
	ПересчитатьНДСПоДанным1С = Ложь;
	Если ДополнительныеПараметры.ПересчитыватьНДСПоДанным1С <> 2 Тогда
		СуммаСтавкаНДС = Новый Структура("СуммаНДС, СтавкаНДС");
		ЗаполнитьЗначенияСвойств(СуммаСтавкаНДС, СтрокаТЧ);
		Если ДополнительныеПараметры.ПересчитыватьНДСПоДанным1С = 1
				ИЛИ (ДополнительныеПараметры.ПересчитыватьНДСПоДанным1С = 0 
						И НЕ ЗначениеЗаполнено(СуммаСтавкаНДС.СуммаНДС)
						И НЕ ЗначениеЗаполнено(СуммаСтавкаНДС.СтавкаНДС))Тогда
			ПересчитатьНДСПоДанным1С = Истина;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Обр Из мОбработчикПередЗаписью Цикл
		Если Обр.Значение.Свойство("ОбработчикСтроки") и Обр.Значение.ОбработчикСтроки.Свойство("Обработчик") Тогда
			Если (Обр.Ключ = "ЗаполнитьСтавкуНДС" ИЛИ Обр.Ключ = "РассчитатьСуммуНДС")
				И НЕ ПересчитатьНДСПоДанным1С Тогда
				Продолжить;
			КонецЕсли;
			
			РассчитатьЗначениеСервер(Обр.Значение.ОбработчикСтроки.Обработчик, СбисКонтекстРассчета);	
		КонецЕсли;
	КонецЦикла;	
КонецФункции 

// функция выполняет обработчики по создаваемому документу
// Обработчики указываются в инишке на загрузку документа
// Например, можно вызывать функции из общих модулей, в которых дозаполняются данные документа по умолчанию или пересчитываются определенные реквизиты, в зависимости от загруженных реквизитов
&НаСервере
Функция сбисВыполнитьОбработчикиПоДокументу(мОбработчикПередЗаписью, Объект1СЗначение, ДополнительныеПараметрыОбработчика)
	СбисКонтекстРассчета = Новый Структура("ДанныеРезультат", Новый Структура());
	СбисКонтекстРассчета.Вставить("ИмяОбъекта", "Документ");
	СбисКонтекстРассчета.ДанныеРезультат.Вставить("Документ", Объект1СЗначение);
	СбисКонтекстРассчета.Вставить("Переменные", ДополнительныеПараметрыОбработчика);
	Для Каждого Обр Из мОбработчикПередЗаписью Цикл
		Если Обр.Значение.Свойство("ОбработчикДокумента") и Обр.Значение.ОбработчикДокумента.Свойство("Обработчик") Тогда
			РассчитатьЗначениеСервер(Обр.Значение.ОбработчикДокумента.Обработчик, СбисКонтекстРассчета);	
		КонецЕсли;
	КонецЦикла;	
КонецФункции

//Возвращает Истина, если есть ВычислитьНаСервере, либо Вычислить определенного вида
//В СтрокуПараметраВычислить Отдаётся значение параметра.
&НаСервере
Функция ЕстьПараметрВычислитьНаСервере(СбисЭлементПроверки, СтрокаПараметраВычислить=Неопределено)
	Возврат 	(	СбисЭлементПроверки.Свойство("ВычислитьНаСервере", СтрокаПараметраВычислить)//ВычислитьНаСервере берём в приоритете (совместимость старой логики). Только если нет узла, смотрим Вычислить
	И	ЗначениеЗаполнено(СтрокаПараметраВычислить))
	Или	(	СбисЭлементПроверки.Свойство("Вычислить", СтрокаПараметраВычислить) 
	И	ЗначениеЗаполнено(СтрокаПараметраВычислить)
	И	Не (	Лев(СтрокаПараметраВычислить,1) = "'"
	Или	Лев(СтрокаПараметраВычислить,1) = "{" 
	Или	Лев(СтрокаПараметраВычислить,1) = "^"));	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Документ_Шаблон_Обработчики

////////////////////////////////////////////////////
/////////////Обработчики для узлов//////////////////
////////////////////////////////////////////////////

//Стандартный обработчик узла при загузке в 1С
//Аргумент - Структура с полями Ключ, Значение/КлючИЗначение - расчитываемое имя и значение узла 
//ПараметрыОбработчика - структура Кэш, Контекст, Обработчики, ДополнительныеПараметры
//Кэш - Кэш ВО
//Контекст - структура контекста для рассчета узла
//Обработчики - структура с описанием функции-обработчика для определенных узлов
&НаКлиенте
Процедура Обработчик_УзелИни(Аргумент, ПараметрыОбработчика) Экспорт
	Перем РезультатРасчета, СбисОбработчикДляУзла, ДопПараметры;
	Кэш			= ПараметрыОбработчика.Кэш;
	СбисПоле	= Аргумент.Значение;
	СбисКлюч	= Аргумент.Ключ;
	СбисКонтекст= ПараметрыОбработчика.Контекст;
	//Обратная совместимость со старыми функциями.
	СбисКонтекст.Вставить("ТекущееПолеИни", СбисПоле);
	СбисКонтекст.Вставить("ТекущееПолеКлюч",СбисКлюч);
	
	Если ПараметрыОбработчика.Обработчики.Свойство(Аргумент.Ключ, СбисОбработчикДляУзла) Тогда
		//Если есть отдельный обработчик на узел по его имени, то применим его
		СбисАргументДляОбработчика		= Неопределено;
		ОписаниеОповещенияОбработчика	= Неопределено;
		Если Не СбисОбработчикДляУзла.Свойство("Аргумент", СбисАргументДляОбработчика) Тогда
			СбисАргументДляОбработчика = Аргумент;
		КонецЕсли;
		Если Не СбисОбработчикДляУзла.Свойство("ОписаниеОповещения", ОписаниеОповещенияОбработчика) Тогда
			СбисПараметрыДляОбработчика	= Неопределено;
			Если Не СбисОбработчикДляУзла.Свойство("Параметры", СбисПараметрыДляОбработчика) Тогда
				СбисПараметрыДляОбработчика = ПараметрыОбработчика;
			КонецЕсли;
			ОписаниеОповещенияОбработчика = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения(СбисОбработчикДляУзла.Метод, СбисОбработчикДляУзла.Модуль, СбисПараметрыДляОбработчика);
		КонецЕсли;
		МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(СбисАргументДляОбработчика, ОписаниеОповещенияОбработчика);
	ИначеЕсли 		НРег(Лев(Аргумент.Ключ, 5)) = "выбор" Тогда
		//Если это выбор, то посчитаем условие и вынесем подходящие узлы в контекст	
		Обработчик_Выбор(Аргумент, ПараметрыОбработчика);
	ИначеЕсли Не	Аргумент.Значение.Свойство("Значение")Тогда
		//Если нет значения, то может быть это сложный узел, или какая-то ересь.	
		Если	НРег(Аргумент.Ключ) = "мтаблобъект"
			Или	ЭтоСложныйУзел_Клиент(Кэш, Аргумент.Значение) Тогда
			Обработчик_СложныйУзелКлиент(Аргумент, ПараметрыОбработчика);
		КонецЕсли;
	ИначеЕсли		Аргумент.Значение.Свойство("РассчитанноеЗначение", РезультатРасчета) Тогда
		//Расчитанное значение, ничего не делаем, раз уже всё готово
	Иначе
		//Во всех прочих случая - стандартная обработка	
		Если Не ПараметрыОбработчика.Свойство("ДополнительныеПараметры", ДопПараметры) Тогда
			ДопПараметры = Новый Структура;
		КонецЕсли;
		РассчитатьПараметрИни(Кэш,, Аргумент.Значение, СбисКонтекст, ДопПараметры);		
	КонецЕсли; 	
КонецПроцедуры

//Вынесен общий код и проверки в отдельную функцию
&НаСервере
Процедура Обработчик_УзелИниСервер(Аргумент, ПараметрыРассчитать)
	Перем лПараметрВычислить, РезультатРасчета, ПолеЗначение;
	СбисКлюч	= Аргумент.Ключ;
	СбисПоле 	= Аргумент.Значение;
	СбисКонтекст= ПараметрыРассчитать.Контекст;
	Если		НРег(Лев(СбисКлюч, 5)) = "выбор" Тогда
		Обработчик_ВыборСервер(Аргумент, ПараметрыРассчитать);
	ИначеЕсли	НРег(СбисКлюч) = "добавлятьстроку" Тогда
		Обработчик_ДобавлятьСтрокуСервер(Аргумент, ПараметрыРассчитать);		
	ИначеЕсли	НРег(СбисКлюч) = "мтаблдок" Тогда
		Обработчик_мТаблДокСервер(Аргумент, ПараметрыРассчитать);
	ИначеЕсли	Не	СбисПоле.Свойство("Значение", ПолеЗначение) Тогда
		Если	НРег(Аргумент.Ключ) = "мтаблобъект"
			Или	ЭтоСложныйУзел_Сервер(Аргумент) Тогда//Это сложный узел, требующий рекурсивного обсчёта
			Обработчик_СложныйУзелСервер(Аргумент, ПараметрыРассчитать);
		КонецЕсли;
	ИначеЕсли	СбисПоле.Свойство("РассчитанноеЗначение", РезультатРасчета) Тогда
		Если ЗначениеЗаполнено(РезультатРасчета) Тогда
			//Расчитанные значения заполняем только те, что посчитались
			ЗаполнитьЗначениеРеквизита_Сервер(РезультатРасчета, СбисПоле, СбисКонтекст, СбисКонтекст.ДополнительныеПараметры);
		КонецЕсли;
	ИначеЕсли 	ЕстьПараметрВычислитьНаСервере(Аргумент.Значение, лПараметрВычислить) Тогда
		РезультатРасчета = РассчитатьЗначениеСервер(лПараметрВычислить, СбисКонтекст);
		Если СбисПоле.Свойство("Отбор") Тогда
			Аргумент.Вставить("РассчитанноеЗначение", РезультатРасчета);
			РезультатРасчета = ВычислитьОтборНаСервере(Аргумент, ПараметрыРассчитать);
		КонецЕсли;
		ЗаполнитьЗначениеРеквизита_Сервер(РезультатРасчета, СбисПоле, СбисКонтекст, СбисКонтекст.ДополнительныеПараметры);
		СбисПоле.Вставить("РассчитанноеЗначение", РезультатРасчета);
	КонецЕсли;
КонецПроцедуры

//Обработка структуры стороны.
//ПараметрыОбработчика - структура Кэш, Контекст, Обработчики
//Кэш - Кэш ВО
//Контекст - структура контекста для рассчета узла
&НаКлиенте
Процедура Обработчик_мСторона(Аргумент, ПараметрыОбработчика) Экспорт
	Ограничения		= Новый Структура;	
	
	Кэш				= ПараметрыОбработчика.Кэш;
	СбисКонтекст	= ПараметрыОбработчика.Контекст;
	ТекущееЗначение = Аргумент.Значение;
	СтруктураФайла	= СбисКонтекст.ДанныеИсточник;
	Вложение		= СбисКонтекст.Вложение;
	Ини				= СбисКонтекст.Ини;
	ДопПараметры	= Новый Структура;
	
	КонтрагентРоль	= РассчитатьЗначение("Контрагент_Роль",	СбисКонтекст, Кэш);
	ОрганизацияРоль	= РассчитатьЗначение("Организация_Роль",СбисКонтекст, Кэш);
	
	//Порождаем экземпляр класса контекста.
	ПеременныеДляСтроки	= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст.Переменные,	, Ложь);
	СбисКонтекстРассчета= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст,			, Ложь);
	СбисКонтекстРассчета.Вставить("ИмяОбъектаЛокальное",		"ТаблДок");
	СбисКонтекстРассчета.Вставить("Переменные",					ПеременныеДляСтроки);
	
	// сначала ищем организацию, т.к. она может потребоваться при поиске контрагента (при определенной настройке прав)
	Если ТекущееЗначение.Свойство(ОрганизацияРоль) Тогда
		Сторона = ТекущееЗначение[ОрганизацияРоль];
		
		//Возьмём шапку, дополним ТабЧастью. Это наш контекст строки
		КонтекстИниСтроки = Новый Структура(СбисКонтекст.Ключи.Шапка);
		ЗаполнитьЗначенияСвойств(КонтекстИниСтроки, СбисКонтекст.Ини);
		Кэш.ОбщиеФункции.СбисСкопироватьСтруктуруНаКлиенте(КонтекстИниСтроки, Сторона);
		//Заполним в контекст Сторона данные стороны, чтобы правильно заполнить значение.
		КонтекстИниСтроки.Сторона.Вставить("РассчитанноеЗначение", Сторона);
		
		СбисКонтекстРассчета.Вставить("Ини",						КонтекстИниСтроки);
		
		ЗначениеПараметра = РассчитатьПараметрИни(Кэш,, Сторона.Сторона, СбисКонтекстРассчета, Новый Структура("ВызовСервера,БратьПосчитанное,ДопАргументыДляФункции", Истина, Ложь, Новый Структура("Сторона", Сторона)));
		Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда  // структура в формате СБИС
			ЗначениеПараметра = Кэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(Кэш.Ини.Конфигурация, ЗначениеПараметра);
		КонецЕсли;
		Если Кэш.Ини.Конфигурация.Свойство("ЗапросКонтрагента") и Кэш.Ини.Конфигурация.ЗапросКонтрагента.Свойство("ОграничениеПоОрганизации") и НРег(Кэш.Ини.Конфигурация.ЗапросКонтрагента.ОграничениеПоОрганизации)="да"  Тогда
			Ограничения = Новый Структура("Организация",ЗначениеПараметра);
		КонецЕсли;
		ЗаполнитьЗначениеРеквизита(ЗначениеПараметра, ТекущееЗначение[ОрганизацияРоль].Сторона, СбисКонтекстРассчета, ДопПараметры);	
	КонецЕсли;
	Для Каждого Сторона Из ТекущееЗначение Цикл
		Если Сторона.Ключ = ОрганизацияРоль Тогда
			Продолжить;
		КонецЕсли;   
		
		//Возьмём шапку, дополним ТабЧастью. Это наш контекст строки
		КонтекстИниСтроки = Новый Структура(СбисКонтекст.Ключи.Шапка);
		ЗаполнитьЗначенияСвойств(КонтекстИниСтроки, СбисКонтекст.Ини);
		Кэш.ОбщиеФункции.СбисСкопироватьСтруктуруНаКлиенте(КонтекстИниСтроки, Сторона.Значение);
		//Заполним в контекст Сторона данные стороны, чтобы правильно заполнить значение.
		КонтекстИниСтроки.Сторона.Вставить("РассчитанноеЗначение", Сторона.Значение);
		
		СбисКонтекстРассчета.Вставить("Ини",						КонтекстИниСтроки);
			 
		СтруктураСтороны = РассчитатьПараметрИни(Кэш,, Сторона.Значение.Сторона, СбисКонтекстРассчета, Новый Структура("ВызовСервера,БратьПосчитанное,ДопАргументыДляФункции", Истина, Ложь, Новый Структура("Сторона", Сторона.Значение)));
		Если ТипЗнч(СтруктураСтороны) = Тип("Структура") Тогда
			//ЗначениеПараметра = НайтиСоздатьКонтрагента(СтруктураСтороны, Сторона.Значение);
			Если ЗначениеЗаполнено(Ограничения) Тогда
				СтруктураСтороны.Вставить("Ограничения",Ограничения);
			КонецЕсли;
			Если Сторона.Значение.Сторона.Свойство("Тип") и Найти(Сторона.Значение.Сторона.Тип, "Организаци")>0 Тогда
				ЗначениеПараметра = Кэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(Кэш.Ини.Конфигурация, СтруктураСтороны);
			ИначеЕсли Сторона.Значение.Сторона.Свойство("Тип") и Найти(Сторона.Значение.Сторона.Тип, "Контрагент")>0 Тогда
				ЗначениеПараметра = Кэш.ОбщиеФункции.НайтиКонтрагентаИзДокументаСБИС(Кэш.Ини.Конфигурация, СтруктураСтороны, Ини);	
			КонецЕсли;
			Если Сторона.Ключ = КонтрагентРоль Тогда
				Если Вложение.Свойство("РучноеИзменение") И Вложение.РучноеИзменение = Истина и Вложение.Свойство("Контрагент1С") и ЗначениеЗаполнено(Вложение.Контрагент1С) Тогда
					ЗначениеПараметра = Вложение.Контрагент1С;
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьЗначениеРеквизита(ЗначениеПараметра, Сторона.Значение.Сторона, СбисКонтекстРассчета, ДопПараметры);      
		Иначе
			ЗаполнитьЗначениеРеквизита(СтруктураСтороны, Сторона.Значение.Сторона, СбисКонтекстРассчета, ДопПараметры);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Обработка структуры табличной части
&НаКлиенте
Процедура Обработчик_мТаблДок(Аргумент, ПараметрыОбработчика) Экспорт
	Перем УзелТаблДок, УзелИмяТЧ;
	Кэш				= ПараметрыОбработчика.Кэш;
	СбисКонтекст	= ПараметрыОбработчика.Контекст;
	ТекущееЗначение = Аргумент.Значение;
	СтруктураФайла	= СбисКонтекст.ДанныеИсточник;
	ДопПараметры	= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ПараметрыОбработчика.ДополнительныеПараметры,,Ложь);
	Если Не ДопПараметры.Свойство("ДопАргументыДляФункции") Тогда
		ДопПараметры.Вставить("ДопАргументыДляФункции", Новый Структура);
	КонецЕсли;
	
	ИмяПервойТЧ = "";
	мТаблДокРассчитанноеЗначение = Новый Структура;
	Для Каждого ТабЧасть Из ТекущееЗначение Цикл
		ТабЧастьРассчитанноеЗначение = Новый Массив;
		мТаблДокРассчитанноеЗначение.Вставить(ТабЧасть.Ключ, ТабЧастьРассчитанноеЗначение);
		//Определим узел с описанием ТЧ
		Если ТабЧасть.Значение.Свойство("ТаблДок", УзелТаблДок) Тогда
			//Создаём копию, чтобы рассчитанное значение данных ТЧ не попадало в расчитанную ини, т.к. иначе замедлим передачу данных на сервер
			УзелТаблДок = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(УзелТаблДок,, Ложь);
		Иначе
			УзелТаблДок = Новый Структура;
		КонецЕсли;
		Если Не УзелТаблДок.Свойство("Данные") Тогда
			//По-умолчанию, хардкодим путь к данным, если не указаны
			УзелТаблДок.Вставить("Данные", "Файл.Документ.ТаблДок.СтрТабл");
		КонецЕсли;
		
		ТаблДок = РассчитатьПараметрИни(Кэш, "ТаблДок", УзелТаблДок, СбисКонтекст, Новый Структура("ЗаполнитьДанные", Ложь));
		Если Не ЗначениеЗаполнено(ТаблДок) Тогда
			//При заполнении пустого документа
			Продолжить;
		КонецЕсли;
		СбисКонтекст.Вставить("ТаблДок", ТаблДок);
		Если ПустаяСтрока(ИмяПервойТЧ) Тогда
			ИмяПервойТЧ = ТабЧасть.Ключ;
		КонецЕсли;
		//Порождаем экземпляр класса контекста.
		ПеременныеДляСтроки	= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст.Переменные,	, Ложь);
		СбисКонтекстРассчета= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст,			, Ложь);
		СбисКонтекстРассчета.Вставить("ИмяОбъектаЛокальное",		"ТаблДок");
		СбисКонтекстРассчета.Вставить("Переменные",					ПеременныеДляСтроки);		
		
		НомерСтрокиДокумента = 0;
		Для Каждого Строка Из ТаблДок Цикл
			Если Строка.Свойство("НеЗагружать") Тогда
				Продолжить;
			КонецЕсли;
			//Возьмём шапку, дополним ТабЧастью. Это наш контекст строки
			КонтекстИниСтроки = Новый Структура(СбисКонтекст.Ключи.Шапка);
			ЗаполнитьЗначенияСвойств(КонтекстИниСтроки, СбисКонтекст.Ини);
			Кэш.ОбщиеФункции.СбисСкопироватьСтруктуруНаКлиенте(КонтекстИниСтроки, ТабЧасть.Значение);
			//Заполним в контекст ТаблДок данные строки, чтобы правильно заполнить значение.
			КонтекстИниСтроки.ТаблДок.Вставить("РассчитанноеЗначение", Строка);
			
			СбисКонтекстРассчета.Вставить("ДанныеИсточникЛокальные",	Строка);
			СбисКонтекстРассчета.Вставить("ДанныеРезультатЛокальные", 	Новый Структура);
			СбисКонтекстРассчета.Вставить("Ини",						КонтекстИниСтроки);
			ИмяТЧ = РассчитатьПараметрИни(Кэш, "ИмяТЧ",,СбисКонтекстРассчета, Новый Структура("ВызовСервера,БратьПосчитанное,ДопАргументыДляФункции", Истина, Ложь, Новый Структура("СтрТабл", Строка)));
			Если ИмяТЧ = Неопределено Тогда
				ИмяТЧ = ИмяПервойТЧ;
			КонецЕсли;
			
			Если		Не ИмяТЧ = ТабЧасть.Ключ Тогда
				Продолжить;
			ИначеЕсли	Не СбисКонтекстРассчета.ДанныеРезультат.Свойство(ИмяТЧ) Тогда
				СбисКонтекстРассчета.ДанныеРезультат.Вставить(ИмяТЧ, Новый массив);
			КонецЕсли;
			ТабЧастьРассчитанноеЗначение.Добавить(КонтекстИниСтроки);
			НомерСтрокиДокумента	= НомерСтрокиДокумента + 1;
			ТабЧастьЗначение		= ТабЧасть.Значение;
			
			ДопПараметры.ДопАргументыДляФункции.Вставить("СтрТабл",		СбисКонтекстРассчета.ДанныеРезультатЛокальные);
			ДопПараметры.ДопАргументыДляФункции.Вставить("СтрокаФайла",	Строка);
			АргументыВызова = Новый Структура("Кэш, Контекст, Обработчики, ДополнительныеПараметры", Кэш, СбисКонтекстРассчета, ПараметрыОбработчика.Обработчики, ДопПараметры);
			//Расчет ведём по контексту из табчасти, заполняем в контекст ини
			Для Каждого Элемент Из ТабЧастьЗначение Цикл
				Обработчик_УзелИни(Новый Структура("Ключ, Значение", Элемент.Ключ, КонтекстИниСтроки[Элемент.Ключ]), АргументыВызова);
			КонецЦикла;
			СбисКонтекст.ДанныеРезультат[ИмяТЧ].Добавить(СбисКонтекстРассчета.ДанныеРезультатЛокальные);
			Строка.Вставить("ИмяТЧ",ИмяТЧ);
			Строка.Вставить("НомерСтрокиТЧ", НомерСтрокиДокумента - 1);
		КонецЦикла
	КонецЦикла;
	ТекущееЗначение.Вставить("РассчитанноеЗначение", мТаблДокРассчитанноеЗначение);
	
КонецПроцедуры

//Обработка структуры параметров заказа
&НаКлиенте
Процедура Обработчик_мПараметрыДокумента(Аргумент, ПараметрыОбработчика) Экспорт
	Если ПараметрыОбработчика.ДополнительныеПараметры.Режим = "Подготовка" Тогда
		Возврат;
	КонецЕсли;
	Кэш				= ПараметрыОбработчика.Кэш;
	СбисКонтекст	= ПараметрыОбработчика.Контекст;
	ДопПараметры	= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ПараметрыОбработчика.ДополнительныеПараметры,,Ложь);
	ДопПараметры.Вставить("ЗаполнитьДанные", Ложь);
	СтруктураСвойств = Новый Структура;
	Для Каждого Элемент Из Аргумент.Значение Цикл
		Параметр_Значение = Элемент.Значение.Параметр_Значение;	
		Параметр_Имя = Элемент.Значение.Параметр_Имя;	
		
		Параметр_Значение	= РассчитатьПараметрИни(Кэш,, Элемент.Значение.Параметр_Значение, СбисКонтекст, ДопПараметры);
		Параметр_Имя		= РассчитатьПараметрИни(Кэш,, Элемент.Значение.Параметр_Имя, СбисКонтекст, ДопПараметры);
		Если	ЗначениеЗаполнено(Параметр_Значение)
			И	ЗначениеЗаполнено(Параметр_Имя)	Тогда
			СтруктураСвойств.Вставить(Параметр_Имя, Параметр_Значение);
		КонецЕсли;
	КонецЦикла;
	СбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "ДокументШаблон.СтруктураСвойств", СбисКонтекст.Вложение.Идентификатор, СтруктураСвойств); 
	Кэш.ОбщиеФункции.СбисЗакэшироватьЗначениеРассчитанногоОбъекта(Кэш, СбисОписаниеОбъекта);
КонецПроцедуры

//Обработчик узла мТаблДок для сервера
&НаСервере
Процедура Обработчик_мТаблДокСервер(Аргумент, ПараметрыОбработчика)
	Перем мТаблДокКонтекст, СбисДобавлятьСтроку, ТабЧастьДанные;
	СбисКонтекст		= ПараметрыОбработчика.Контекст;
	СбисПоле			= Аргумент.Значение;
	Объект1СЗаполнить	= СбисКонтекст.ДанныеРезультат[СбисКонтекст.ИмяОбъекта];
	КлючДанныеТЧ		= "ТаблДок";
	
	Если Не СбисПоле.Свойство("РассчитанноеЗначение",	мТаблДокКонтекст)Тогда
		Возврат;
	КонецЕсли;
	АргументыРассчитать = Новый Структура("Контекст");
	//Перебираем исходную ини, в которой нет узлов шапки
	Для Каждого ТабЧасть Из СбисПоле Цикл
		Если ТабЧасть.Ключ = "РассчитанноеЗначение" Тогда
			Продолжить;
		КонецЕсли;
		ТабЧастьКонтекст= мТаблДокКонтекст[ТабЧасть.Ключ];
		ИндексТч = -1;
		
		СбисКонтекстРассчета						= СкопироватьОбъектСПараметрамиСервер(СбисКонтекст, Ложь);
		СбисКонтекстРассчета.Переменные				= СкопироватьОбъектСПараметрамиСервер(СбисКонтекст.Переменные, Ложь);
		СбисКонтекстРассчета.ДополнительныеПараметры= СкопироватьОбъектСПараметрамиСервер(СбисКонтекст.ДополнительныеПараметры, Ложь);
		СбисКонтекстРассчета.ДополнительныеПараметры.Вставить("ЗаполнитьДанные", Истина);
		
		Если Не СбисКонтекст.ДанныеИсточник.Свойство(КлючДанныеТЧ) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТЧ Из СбисКонтекст.ДанныеИсточник[КлючДанныеТЧ] Цикл
			Если	СтрокаТЧ.Свойство("НеЗагружать")
				Или Не	(	СтрокаТЧ.Свойство("ИмяТЧ")
				И	СтрокаТЧ.ИмяТЧ = ТабЧасть.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			ТабЧастьДанные = Объект1СЗаполнить[СтрокаТЧ.ИмяТЧ];
			ИндексТч = ИндексТч + 1;
			
			СбисКонтекстРассчета.Вставить("Ини", 						ТабЧастьКонтекст[ИндексТЧ]);
			СбисКонтекстРассчета.Вставить("ИмяТЧ",						ТабЧасть.Ключ);
			СбисКонтекстРассчета.Вставить("СтрокаФайла",				СтрокаТЧ);
			СбисКонтекстРассчета.Вставить("ИмяОбъектаЛокальное",		КлючДанныеТЧ);
			СбисКонтекстРассчета.ДанныеРезультат.Вставить(КлючДанныеТЧ,	ТабЧастьДанные[СтрокаТЧ.НомерСтрокиТЧ]);
			АргументыРассчитать.Контекст = СбисКонтекстРассчета;
			Для Каждого Элемент Из ТабЧасть.Значение Цикл
				СбисКонтекстРассчета.ДополнительныеПараметры.ЗаполнитьДанные = Не Элемент.Ключ = КлючДанныеТЧ;
				//Составные узлы могут формировать строки в ту же ТЧ, откуда вызываются. 
				Обработчик_УзелИниСервер(Новый Структура("Ключ, Значение", Элемент.Ключ, СбисКонтекстРассчета.Ини[Элемент.Ключ]), АргументыРассчитать);
			КонецЦикла;
		КонецЦикла;
		Если Не ТабЧастьДанные = Неопределено Тогда
			//Удалям строки после общего расчета. Некоторые функции требует строки ТЧ в процессе загрузки и должны быть сформированы на клиенте
			Шаг = 0;
			Пока Шаг < ТабЧастьДанные.Количество() Цикл
				Если	ТабЧастьДанные[Шаг].Свойство("ДобавлятьСтроку", СбисДобавлятьСтроку)
					И	СбисДобавлятьСтроку = Ложь Тогда
					ТабЧастьДанные.Удалить(Шаг);
					Продолжить;
				КонецЕсли;
				Шаг = Шаг + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

//Обработка узла на добавлять строку. Работает от контекста в узле ини (кроме выбора)
&НаСервере
Процедура Обработчик_ДобавлятьСтрокуСервер(Аргумент, ПараметрыОбработчика)
	СбисКонтекст		= ПараметрыОбработчика.Контекст;
	СбисПоле			= Аргумент.Значение;
	Обработчик_УзелИниСервер(Новый Структура("Ключ, Значение", "", Аргумент.Значение), ПараметрыОбработчика);
	Если Аргумент.Значение.Свойство("РассчитанноеЗначение") Тогда
		СбисКонтекст.ДанныеРезультат[СбисКонтекст.ИмяОбъектаЛокальное].Вставить(Аргумент.Ключ, Аргумент.Значение.РассчитанноеЗначение);
	КонецЕсли;
КонецПроцедуры

//Обработка заполнения оснований
&НаКлиенте
Процедура Обработчик_мОснование(Аргумент, ПараметрыОбработчика) Экспорт
	Кэш				= ПараметрыОбработчика.Кэш;
	СбисКонтекст	= ПараметрыОбработчика.Контекст;
	Для Каждого Основание Из Аргумент.Значение Цикл
		ТипДок			= Сред(СбисКонтекст.Ини.Документ.Значение,	Найти(СбисКонтекст.Ини.Документ.Значение, ".") + 1);
		ИмяРеквизита	= Сред(Основание.Значение.Основание.Значение, Найти(Основание.Значение.Основание.Значение, ".") + 1);
		ЗаполнитьСвязанныеДокументы(ТипДок, ИмяРеквизита, Основание.Значение, СбисКонтекст.ДанныеРезультат, СбисКонтекст.МассивОснований);
	КонецЦикла;
КонецПроцедуры	

//Стандартный обработчик на узел, начинающийся на "Выбор" для загрузки документов. 
//Работает аналогично выгрузке: если встречаем узел с Выбором, то смотрим Условие, если true, то выносим все узлы в ини на уровень выше
&НаКлиенте
Процедура Обработчик_Выбор(Аргумент, ПараметрыОбработчика)
	Кэш			= ПараметрыОбработчика.Кэш;
	СбисКонтекст= ПараметрыОбработчика.Контекст;
	СбисПоле	= Аргумент.Значение;
	
	КонтекстРассчетаВыбор		= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст,	,Ложь);
	КонтекстРассчетаВыбор.Ини	= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст.Ини,,Ложь);
	КонтекстРассчетаВыбор.Вставить("ДополнительныеПараметры", Новый Структура("ВызовСервера", Истина));
	
	АргументыВызова = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ПараметрыОбработчика,,Ложь);
	АргументыВызова.Контекст = КонтекстРассчетаВыбор;
	Для Каждого ПодРаздел Из СбисПоле Цикл //Выбираем подузлы
		Если Не (	ТипЗнч(ПодРаздел.Значение) = Тип("Структура")
			И	ПодРаздел.Значение.Количество()) Тогда
			Продолжить;
		КонецЕсли;
		Кэш.ОбщиеФункции.СбисСкопироватьСтруктуру(КонтекстРассчетаВыбор.Ини, ПодРаздел.Значение);
		Если ПодРаздел.Значение.Свойство("Условие") Тогда
			Обработчик_УзелИни(Новый Структура("Ключ, Значение", "Условие", ПодРаздел.Значение.Условие), АргументыВызова);
			РезультатУсловия = ПодРаздел.Значение.Условие;
			Если	Не РезультатУсловия.Свойство("РассчитанноеЗначение", РезультатУсловия)
				Или	Не РезультатУсловия = Истина Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//Если условие выполнено, либо его нет(узел по-умолчанию), то выберем в контекст ини подузлы и рассчитаем их
		Для Каждого ПодЭлемент Из ПодРаздел.Значение Цикл //Выбираем подузлы
			Если ПодЭлемент.Ключ = "Условие" Тогда
				Продолжить;
			КонецЕсли;
			ПодЭлементЗначение = КонтекстРассчетаВыбор.Ини[ПодЭлемент.Ключ];
			Если Не ПодЭлементЗначение.Свойство("РассчитанноеЗначение") Тогда
				Обработчик_УзелИни(Новый Структура("Ключ, Значение", ПодЭлемент.Ключ, ПодЭлементЗначение), АргументыВызова);
			КонецЕсли;
			СбисКонтекст.Ини.Вставить(ПодЭлемент.Ключ, ПодЭлементЗначение);
		КонецЦикла;
		Прервать;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура Обработчик_ВыборСервер(Аргумент, ПараметрыОбработчика)
	СбисКонтекст			= ПараметрыОбработчика.Контекст;
	СбисПоле				= Аргумент.Значение;
	КонтекстРассчетаВыбор	= СкопироватьОбъектСПараметрамиСервер(СбисКонтекст, Ложь);
	
	АргументыВызова = Новый Структура("Контекст", КонтекстРассчетаВыбор);
	Для Каждого ПодРаздел Из СбисПоле Цикл //Выбираем подузлы
		Если Не (	ТипЗнч(ПодРаздел.Значение) = Тип("Структура")
			И	ПодРаздел.Значение.Количество()) Тогда
			Продолжить;
		КонецЕсли;
		//Условие на клиенте заполняем в подраздел, так как оно может перекрыть другие узлы выбора.
		//Все остальные узлы посчитанного выбора уже есть в контексте ини.
		Если ПодРаздел.Значение.Свойство("Условие") Тогда
			УзелУсловие = ПодРаздел.Значение["Условие"]; 
			Обработчик_УзелИниСервер(Новый Структура("Ключ, Значение", "Условие", УзелУсловие), АргументыВызова);
			РезультатУсловия = Неопределено;
			Если	Не УзелУсловие.Свойство("РассчитанноеЗначение", РезультатУсловия)
				Или	Не РезультатУсловия = Истина Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//Если условие выполнено, либо его нет(узел по-умолчанию), то выберем в контекст ини подузлы и рассчитаем их
		Для Каждого ПодЭлемент Из ПодРаздел.Значение Цикл 
			//Выбираем подузлы.Перебираем подраздел, а как данные берём текущую ини - там может быть посчитанное значение на клиенте
			Если ПодЭлемент.Ключ = "Условие" Тогда
				Продолжить;
			КонецЕсли;
			ПодЭлементЗначение = КонтекстРассчетаВыбор.Ини[ПодЭлемент.Ключ];
			Обработчик_УзелИниСервер(Новый Структура("Ключ, Значение", ПодЭлемент.Ключ, ПодЭлементЗначение), АргументыВызова);
			СбисКонтекст.Ини.Вставить(ПодЭлемент.Ключ, ПодЭлементЗначение);
		КонецЦикла;
		Прервать;
	КонецЦикла;	
КонецПроцедуры

//Стандартный обработчик для сложных узлов
&НаКлиенте
Процедура Обработчик_СложныйУзелКлиент(Аргумент, ПараметрыОбработчика) Экспорт
	Перем СтрокаРодительСоставнойУзел;
	Кэш			= ПараметрыОбработчика.Кэш;
	СбисКонтекст= ПараметрыОбработчика.Контекст;
	СбисПоле	= Аргумент.Значение;
	УзелНаРасчет= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисПоле);
	
	Если Не СбисКонтекст.Свойство("ДанныеИсточникЛокальные", СтрокаРодительСоставнойУзел) Тогда
		СтрокаРодительСоставнойУзел = СбисКонтекст.ДанныеИсточник;
	КонецЕсли;
	РезультатОбработкиСложногоУзла = Новый Структура;
	
	ДопПараметрыОбработчика = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ПараметрыОбработчика.ДополнительныеПараметры,,Ложь);
	ДопПараметрыОбработчика.Вставить("ЗаполнитьДанные", Ложь);
	Для Каждого АтрибутУзла Из УзелНаРасчет Цикл
		Если Не ТипЗнч(АтрибутУзла.Значение) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		//Получить первый элемент внутри сложного узла и проверрить не массив ли он?
		Для Каждого Элемент Из АтрибутУзла.Значение Цикл
			Если Не	(	Элемент.Значение.Свойство("Тип")
				И	НРег(Элемент.Значение.Тип) = "табличнаячасть") Тогда
				//Первый элемент это не описание ТЧ	
				Прервать;
			КонецЕсли;
			//Рассчитаем первый параметр в составном узле - это должно быть описание ТЧ
			РассчитанноеЗначение = РассчитатьПараметрИни(Кэш,, Элемент.Значение, СбисКонтекст, ДопПараметрыОбработчика);
			Если РассчитанноеЗначение = Неопределено Тогда
				//Данных ТЧ нет, значит дальше не смотрим.
				Прервать;
			КонецЕсли;	
			//Запись массива в табличную часть? Переходим к его обработке 
			//Формируем "РасчитанноеЗначение" в таб части. Заполнение док.Объекта уже на сервере
			ПараметрыОбработчикаСУ = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ПараметрыОбработчика,,Ложь);
			ПараметрыОбработчикаСУ.ДополнительныеПараметры = ДопПараметрыОбработчика;
			РезультатОбработкиПодУзла = Новый Массив;
			Если ТипЗнч(РассчитанноеЗначение) = Тип("Массив") Тогда
				Для Каждого СоставнаяСтрока Из РассчитанноеЗначение Цикл
					Элемент.Значение.Вставить("РассчитанноеЗначение", СоставнаяСтрока);
					РезультатОбработкиПодУзла.Добавить(ОбработатьЭлементСУ_Клиент(Кэш, СоставнаяСтрока, АтрибутУзла.Значение, ПараметрыОбработчикаСУ));
				КонецЦикла;
				РезультатОбработкиСложногоУзла.Вставить(АтрибутУзла.Ключ, Новый Структура("РассчитанноеЗначение", РезультатОбработкиПодУзла));
			ИначеЕсли Не РассчитанноеЗначение = Неопределено Тогда
				Элемент.Значение.Вставить("РассчитанноеЗначение", РассчитанноеЗначение);
				РезультатОбработкиПодУзла.Добавить(ОбработатьЭлементСУ_Клиент(Кэш, РассчитанноеЗначение, АтрибутУзла.Значение, ПараметрыОбработчикаСУ));
				РезультатОбработкиСложногоУзла.Вставить(АтрибутУзла.Ключ, Новый Структура("РассчитанноеЗначение", РезультатОбработкиПодУзла));
			КонецЕсли;
			//в обработке СУ интересует только поиск элемента СУ, сама обработка узлов идёт дальше
			Прервать;
		КонецЦикла;
	КонецЦикла;	
	//Для составных узлов заполним расчитанные значения, чтобы это попало дальше на сервер.
	//Заполнение в ДокОбъект происходит на сервере!
	//При необходимости обратиться к результату обсчёта составного узла, брать из Контекст.Ини.мТаблДок[РассчитанноеЗначение]
	Для Каждого РасчитанныйПодУзел Из РезультатОбработкиСложногоУзла Цикл
		СбисПоле[РасчитанныйПодУзел.Ключ].Вставить("РассчитанноеЗначение", РасчитанныйПодУзел.Значение["РассчитанноеЗначение"]);
	КонецЦикла;
КонецПроцедуры

//Обрабатывает сложные узел на сервере, дозаполняет ДокОбъект
&НаСервере
Процедура Обработчик_СложныйУзелСервер(Аргумент, ПараметрыОбработчика)
	Перем лПараметрВычислить, РассчитанноеЗначение, АтрибутУзлаЗначение;
	СбисПоле	= Аргумент.Значение;
	СбисКонтекст= ПараметрыОбработчика.Контекст;
	Для Каждого АтрибутУзла Из СбисПоле Цикл
		Если		ТипЗнч(АтрибутУзла.Значение) = Тип("Структура")
			И	Не	АтрибутУзла.Ключ = "РассчитанноеЗначение" Тогда
			АтрибутУзлаЗначение = АтрибутУзла.Значение;
		Иначе
			Продолжить;
		КонецЕсли;
		//Если есть расчитанное значение, то оно было посчитано на клиенте. Берём его за основу и досчитываем.
		//Иначе пробуем посчитать на сервере
		АргументСУ = Новый Структура("Ключ,Значение", АтрибутУзла.Ключ, АтрибутУзла.Значение);
		Если АтрибутУзла.Значение.Свойство("РассчитанноеЗначение") Тогда
			//АргументСУ.Вставить("РассчитанноеЗначение");
			АтрибутУзлаЗначение = АтрибутУзлаЗначение.РассчитанноеЗначение;
			Если ТипЗнч(АтрибутУзлаЗначение) = Тип("Массив") Тогда
				Для Каждого СтрокаАтрибутУзла Из АтрибутУзлаЗначение Цикл
					АргументСУ.Значение = СтрокаАтрибутУзла;
					Обработчик_ЭлементСложногоУзлаСервер(АргументСУ, ПараметрыОбработчика);
				КонецЦикла;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Обработчик_ЭлементСложногоУзлаСервер(АргументСУ, ПараметрыОбработчика)
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура Обработчик_ЭлементСложногоУзлаСервер(Аргумент, ПараметрыОбработчика)
	Перем лПараметрВычислить, РассчитанноеЗначение, ИмяТЧ;
	СбисПоле			= Аргумент.Значение;
	СбисКонтекст		= ПараметрыОбработчика.Контекст;
	Для Каждого Элемент Из СбисПоле Цикл
		Если	(	Элемент.Значение.Свойство("РассчитанноеЗначение", РассчитанноеЗначение))
			И	Не	РассчитанноеЗначение = Неопределено Тогда
			//Есть расчитанное значение
		ИначеЕсли 	ЕстьПараметрВычислитьНаСервере(Элемент.Значение, лПараметрВычислить) Тогда
			РассчитанноеЗначение = РассчитатьЗначениеСервер(лПараметрВычислить, СбисКонтекст);
			//РассчитанноеЗначение = РассчитатьЗначениеНаСервере(лПараметрВычислить, Новый Структура("Ини, Документ, Переменные, СтруктураФайла, СтрокаФайла", ДопПараметры.Ини, СбисПоле, ДопПараметры.Переменные, ДопПараметры.СтруктураФайла, Строка));
		КонецЕсли;
		
		//Запись массива в табличную часть? Переходим к его обработке 
		Если	Элемент.Значение.Свойство("Тип")
			И	НРег(Элемент.Значение.Тип) = "табличнаячасть" Тогда
			//Какую ТЧ заполнять из массива?
			Если Найти(Элемент.Значение.Значение, "[") = 1 Тогда  // ссылка на реквизит
				ИмяТЧ = Сред(Элемент.Значение.Значение, Найти(Элемент.Значение.Значение,".") + 1);
			Иначе//Не правильно указан путь к ТЧ. Не обрабатываем.
				Возврат;				
			КонецЕсли;
			
			//ПараметрыОбработчика.Контекст.Вставить("ИмяТЧ", ИмяТЧ);
			АргументЭлементаСУ = Новый Структура("Ключ,Значение,ИмяУзла,РассчитанноеЗначение", Элемент.Ключ, СбисПоле, ИмяТЧ, РассчитанноеЗначение);
			Если ТипЗнч(РассчитанноеЗначение) = Тип("Массив") Тогда
				Для Каждого Строка Из РассчитанноеЗначение Цикл
					АргументЭлементаСУ.РассчитанноеЗначение = Строка;
					Обработчик_СтрокаДанныеСложногоУзлаСервер(АргументЭлементаСУ, ПараметрыОбработчика);
				КонецЦикла;
			ИначеЕсли Не РассчитанноеЗначение = Неопределено Тогда
				Обработчик_СтрокаДанныеСложногоУзлаСервер(АргументЭлементаСУ, ПараметрыОбработчика);
			КонецЕсли;
			//ПараметрыОбработчика.Контекст.Удалить("ИмяТЧ");
			//в обработке сложного узла интересует только поиск массива, сама обработка узлов структуры массива в специальной функции
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура Обработчик_СтрокаДанныеСложногоУзлаСервер(Аргумент, ДопПараметры)
	Перем лПараметрВычислить, СБисТип;
	СбисПоле	= Аргумент.Значение;
	СбисКонтекст= ДопПараметры.Контекст;
	
	КонтекстИниСтроки = СкопироватьОбъектСПараметрамиСервер(СбисКонтекст.Ини,Ложь);
	Для Каждого Элемент Из СбисПоле Цикл
		КонтекстИниСтроки.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	КонтекстРасчета = СкопироватьОбъектСПараметрамиСервер(СбисКонтекст,Ложь);
	КонтекстРасчета.Вставить("ДополнительныеПараметры",		Новый Структура);
	КонтекстРасчета.Вставить("ИмяОбъектаЛокальное",			Аргумент.Ключ);
	КонтекстРасчета.Вставить("Ини",							КонтекстИниСтроки);
	КонтекстРасчета.ДанныеРезультат.Вставить(Аргумент.Ключ, Новый Структура);
	
	//Перебрать структуру данных и найти соответствие каждому элементу в структуре строки
	АргументыРасчета = Новый Структура("Контекст", КонтекстРасчета);
	Для Каждого ЭлементСД Из СбисПоле Цикл
		//Это узел описания ТЧ. Его не заполняем.
		Обработчик_УзелИниСервер(Новый Структура("Ключ, Значение", ЭлементСД.Ключ, КонтекстИниСтроки[ЭлементСД.Ключ]), АргументыРасчета);
	КонецЦикла;
	ОбъектДанные = СбисКонтекст.ДанныеРезультат[СбисКонтекст.ИмяОбъекта];
	Если НЕ ОбъектДанные.Свойство(Аргумент.ИмяУзла) Тогда
		ОбъектДанные.Вставить(Аргумент.ИмяУзла, Новый Массив);
	КонецЕсли;	
	Если ЗначениеЗаполнено(КонтекстРасчета.ДанныеРезультат[Аргумент.Ключ]) Тогда
		Если КонтекстРасчета.ДанныеРезультат[Аргумент.Ключ].Свойство("ДобавлятьСтроку") И КонтекстРасчета.ДанныеРезультат[Аргумент.Ключ]["ДобавлятьСтроку"] = Ложь Тогда
			Возврат;
		Иначе
			ОбъектДанные[Аргумент.ИмяУзла].Добавить(КонтекстРасчета.ДанныеРезультат[Аргумент.Ключ]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обработчик_мРасхожденияОбъектов(Аргумент, ПараметрыОбработчика) Экспорт
	Кэш				= ПараметрыОбработчика.Кэш;
	СбисКонтекст	= ПараметрыОбработчика.Контекст;
	
	РезультатЗаполнения = Новый Структура;
	Для Каждого Расхождение Из Аргумент.Значение Цикл  
		Ини = Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(СбисКонтекст.Ини.мСравнениеДокументов[Расхождение.Ключ]);
		//ЗаполнитьЗначенияСвойств(Ини, РезультатЗаполнения);
		КонтекстЗаполнения = Новый Структура("Ини, ДанныеИсточник", Ини, СбисКонтекст.ДанныеИсточник);
		ОписаниеОбъекта = Новый Структура("Ключ, Значение, Ини", "ОписаниеОшибки", Новый Структура, Ини);
		ПараметрыЗаполнения	= Новый Структура("Кэш, Контекст, ДополнительныеПараметры, Обработчики",
			Кэш, КонтекстЗаполнения, Новый Структура, ПараметрыОбработчика.Обработчики);
		СтруктураОбъекта = СбисЗаполнитьСтруктуруОбъекта(ОписаниеОбъекта, ПараметрыЗаполнения).Значение;
		
		РезультатЗаполнения.Вставить(Расхождение.Ключ, Новый Структура);
		
		Для Каждого ЭлементОбъекта Из СтруктураОбъекта Цикл
			Если ТипЗнч(ЭлементОбъекта.Значение) = Тип("Массив")
				Или Найти("ОписаниеОшибки,ОписаниеКратко,ЗначениеСБИС,Значение1С", ЭлементОбъекта.Ключ) > 0 Тогда
				
				РезультатЗаполнения[Расхождение.Ключ].Вставить(ЭлементОбъекта.Ключ, ЭлементОбъекта.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СбисКонтекст.ДанныеРезультат = РезультатЗаполнения;
КонецПроцедуры

//Обработка структуры табличной части
&НаКлиенте
Процедура Обработчик_мТаблДокДляРасхождений(Аргумент, ПараметрыОбработчика) Экспорт
	Перем УзелТаблДок, УзелИмяТЧ;
	Кэш				= ПараметрыОбработчика.Кэш;
	СбисКонтекст	= ПараметрыОбработчика.Контекст;
	ТекущееЗначение = Аргумент.Значение;
	СтруктураФайла	= СбисКонтекст.ДанныеИсточник;
	ДопПараметры	= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ПараметрыОбработчика.ДополнительныеПараметры,,Ложь);
	Если Не ДопПараметры.Свойство("ДопАргументыДляФункции") Тогда
		ДопПараметры.Вставить("ДопАргументыДляФункции", Новый Структура);
	КонецЕсли;
	
	ИмяПервойТЧ = "";
	мТаблДокРассчитанноеЗначение = Новый Структура;
	Для Каждого ТабЧасть Из ТекущееЗначение Цикл
		ТабЧастьРассчитанноеЗначение = Новый Массив;
		мТаблДокРассчитанноеЗначение.Вставить(ТабЧасть.Ключ, ТабЧастьРассчитанноеЗначение);
		//Определим узел с описанием ТЧ
		Если ТабЧасть.Значение.Свойство("ТаблДокРасхождения", УзелТаблДок) Тогда
			//Создаём копию, чтобы рассчитанное значение данных ТЧ не попадало в расчитанную ини, т.к. иначе замедлим передачу данных на сервер
			УзелТаблДок = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(УзелТаблДок,, Ложь);
		Иначе
			УзелТаблДок = Новый Структура;
		КонецЕсли;
		Если Не УзелТаблДок.Свойство("Данные") Тогда
			//По-умолчанию, хардкодим путь к данным, если не указаны
			УзелТаблДок.Вставить("Данные", "Файл.Документ.ТаблДок.СтрТабл");
		КонецЕсли;
		
		ТаблДок = РассчитатьПараметрИни(Кэш, "ТаблДокРасхождения", УзелТаблДок, СбисКонтекст, Новый Структура("ЗаполнитьДанные", Ложь));
		Если Не ЗначениеЗаполнено(ТаблДок) Тогда
			//При заполнении пустого документа
			Продолжить;
		КонецЕсли;
		СбисКонтекст.Вставить("ТаблДок", ТаблДок);
		Если ПустаяСтрока(ИмяПервойТЧ) Тогда
			ИмяПервойТЧ = ТабЧасть.Ключ;
		КонецЕсли;
		//Порождаем экземпляр класса контекста.
		ПеременныеДляСтроки	= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст.Переменные,	, Ложь);
		СбисКонтекстРассчета= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст,			, Ложь);
		СбисКонтекстРассчета.Вставить("ИмяОбъектаЛокальное",		"ТаблДок");
		СбисКонтекстРассчета.Вставить("Переменные",					ПеременныеДляСтроки);		
		
		НомерСтрокиДокумента = 0;
		Для Каждого Строка Из ТаблДок Цикл
			Если ТипЗнч(Строка) = Тип("КлючИЗначение") Тогда
				Строка = Строка.Значение;
			КонецЕсли;
			
			Если Строка.Свойство("НеЗагружать") Тогда
				Продолжить;
			КонецЕсли;
			//Возьмём шапку, дополним ТабЧастью. Это наш контекст строки
			КонтекстИниСтроки = Новый Структура;
			ЗаполнитьЗначенияСвойств(КонтекстИниСтроки, СбисКонтекст.Ини);
			Кэш.ОбщиеФункции.СбисСкопироватьСтруктуруНаКлиенте(КонтекстИниСтроки, ТабЧасть.Значение);
			//Заполним в контекст ТаблДок данные строки, чтобы правильно заполнить значение.
			КонтекстИниСтроки.ТаблДокРасхождения.Вставить("РассчитанноеЗначение", Строка);
			
			СбисКонтекстРассчета.Вставить("ДанныеИсточникЛокальные",	Строка);
			СбисКонтекстРассчета.Вставить("ДанныеРезультатЛокальные", 	Новый Структура);
			СбисКонтекстРассчета.Вставить("Ини",						КонтекстИниСтроки);
			ИмяТЧ = РассчитатьПараметрИни(Кэш, "ИмяТЧ",,СбисКонтекстРассчета, Новый Структура("ВызовСервера,БратьПосчитанное,ДопАргументыДляФункции", Истина, Ложь, Новый Структура("СтрТабл", Строка)));
			Если ИмяТЧ = Неопределено Тогда
				ИмяТЧ = ИмяПервойТЧ;
			КонецЕсли;
			
			//Если		Не ИмяТЧ = ТабЧасть.Ключ Тогда
			//	Продолжить;
			//Иначе
			Если	Не СбисКонтекстРассчета.ДанныеРезультат.Свойство(ИмяТЧ) Тогда
				СбисКонтекстРассчета.ДанныеРезультат.Вставить(ИмяТЧ, Новый массив);
			КонецЕсли;
			ТабЧастьРассчитанноеЗначение.Добавить(КонтекстИниСтроки);
			НомерСтрокиДокумента	= НомерСтрокиДокумента + 1;
			ТабЧастьЗначение		= ТабЧасть.Значение;
			
			ДопПараметры.ДопАргументыДляФункции.Вставить("СтрТабл",		СбисКонтекстРассчета.ДанныеРезультатЛокальные);
			ДопПараметры.ДопАргументыДляФункции.Вставить("СтрокаФайла",	Строка);
			АргументыВызова = Новый Структура("Кэш, Контекст, Обработчики, ДополнительныеПараметры", Кэш, СбисКонтекстРассчета, ПараметрыОбработчика.Обработчики, ДопПараметры);
			//Расчет ведём по контексту из табчасти, заполняем в контекст ини
			Для Каждого Элемент Из ТабЧастьЗначение Цикл
				Обработчик_УзелИни(Новый Структура("Ключ, Значение", Элемент.Ключ, КонтекстИниСтроки[Элемент.Ключ]), АргументыВызова);
			КонецЦикла;
			СбисКонтекст.ДанныеРезультат[ИмяТЧ].Добавить(СбисКонтекстРассчета.ДанныеРезультатЛокальные);
			Строка.Вставить("ИмяТЧ",ИмяТЧ);
			Строка.Вставить("НомерСтрокиТЧ", НомерСтрокиДокумента - 1);
		КонецЦикла
	КонецЦикла;
	ТекущееЗначение.Вставить("РассчитанноеЗначение", мТаблДокРассчитанноеЗначение);
	
КонецПроцедуры

////////////////////////////////////////////////////
//////Обработка составных узлов документа///////////
////////////////////////////////////////////////////

//Функция возвращает результат обсчета сложного узла
&НаКлиенте
Функция ОбработатьЭлементСУ_Клиент(Кэш, Строка, СтруктураДанных, ПараметрыОбработчика)
	СбисКонтекст		= ПараметрыОбработчика.Контекст;
	
	ПараметрыОбработкиУзла = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ПараметрыОбработчика,,Ложь);
	//Готовим контекст расчета
	КонтекстРасчета		= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст,,Ложь);
	СтрокаИниРезультат	= Новый Структура;
	Кэш.ОбщиеФункции.СбисСкопироватьСтруктуруНаКлиенте(КонтекстРасчета.Ини,	СтруктураДанных);
	Кэш.ОбщиеФункции.СбисСкопироватьСтруктуруНаКлиенте(СтрокаИниРезультат,	СтруктураДанных);
	КонтекстРасчета.Вставить("ДанныеРезультатЛокальные",СтрокаИниРезультат);
	Если КонтекстРасчета.Свойство("ИмяОбъектаЛокальное") Тогда
	КонтекстРасчета.Вставить("ДанныеИсточникЛокальные",	Строка);
	КонецЕсли;
	УстановитьЗначениеИниВСтек(Кэш, КонтекстРасчета, СтрокаИниРезультат);	
	ПараметрыОбработкиУзла.Контекст = КонтекстРасчета;
	
	//Перебрать структуру данных и найти соответствие каждому элементу в структуре строки
	Для Каждого ЭлементСД Из СтруктураДанных Цикл
		Обработчик_УзелИни(Новый Структура("Ключ, Значение", ЭлементСД.Ключ, КонтекстРасчета.ДанныеРезультатЛокальные[ЭлементСД.Ключ]), ПараметрыОбработкиУзла);
	КонецЦикла;
	Возврат КонтекстРасчета.ДанныеРезультатЛокальные;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Документ_Шаблон_Прочее
////////////////////////////////////////////////////
//////////Вспомогательные функции загрузки//////////
////////////////////////////////////////////////////

//Проводит поиск значения по узлу описания и обновление из описанного узла. Если не найдено, досоздаёт.
//Контекст - контекст расчета
//УППоиск - Ключ узла с описанием поиска.
//УПТип - Параметр, определяет тип объекта.
//УПОписаниеОбъекта - Ключ узла с описанием структуры для обновления объекта.
//Дополнительные параметры определяются в переменных из контекста узлами:
//	СбисНайтиИОбновить_Сообщить - сообщает о результате обновления(создания) объекта. По-умолчанию - Ложь (не сообщать)
//	СбисНайтиИОбновить_Обновлять - определяет необходимость обновить найденный объект. По-умолчанию - Ложь (вернуть ссылку, не трогая).
//	СбисНайтиИОбновить_Досоздать - определяет необходимость создать новый объект, если не найден. По-умолчанию - Истина (вернуть ссылку нового объекта).
&НаСервере
Функция СбисНайтиИОбновить(Знач Контекст, Знач УППоиск, Знач УПТип="", Знач УПОписаниеОбъекта=Неопределено)
	Перем СообщитьСтатус, ОбновитьОбъект;
	РезультатПоиска = РассчитатьЗначениеСервер(УППоиск, Контекст);
	Если РезультатПоиска = Неопределено Тогда
		Если (	Контекст.Переменные.Свойство("СбисНайтиИОбновить_Досоздать", ОбновитьОбъект)
			И	ОбновитьОбъект = Ложь) Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	ИначеЕсли Не	(	Контекст.Переменные.Свойство("СбисНайтиИОбновить_Обновить", ОбновитьОбъект)
		И	ОбновитьОбъект = Истина) Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	УниверсальныйПоиск_Тип = СтрЗаменить(УПТип, ".", Символы.ПС);
	Отказ = Ложь;
	СтруктураДосоздать = РассчитатьЗначениеСервер(УПОписаниеОбъекта, Контекст);
	ПараметрыСоздания = Новый Структура("ТипОбъекта,ПодТипОбъекта,ОбъектПерезаполнитьСсылка", 
	СтрПолучитьСтроку(УниверсальныйПоиск_Тип, 1),
	СтрПолучитьСтроку(УниверсальныйПоиск_Тип, 2),
	РезультатПоиска);
	РезультатСоздания = СоздатьОбъектИзСтруктуры(СтруктураДосоздать, ПараметрыСоздания, Отказ);
	Если	Контекст.Переменные.Свойство("СбисНайтиИОбновить_Сообщить", СообщитьСтатус)
		И	СообщитьСтатус = Истина Тогда
		Сообщить(РезультатСоздания.Сообщение);
	КонецЕсли;
	Возврат РезультатСоздания.Ссылка;
КонецФункции

//Функция возвращает глубокую копию раздела ини без копии расчитанных значений. 
//Поддерживаемые составные типы: Структура, Массив.
//ДопПараметры: КлючиНеКопировать - массив ключей, значения которых не копируются, а переносятся как есть.
&НаСервере
Функция СкопироватьОбъектСПараметрамиСервер(Знач СбисОбъект, ГлубокоеКопирование=Истина, СбисКлючи=Неопределено)
	Если ТипЗнч(СбисОбъект) = Тип("Структура") Тогда
		Если СбисКлючи = Неопределено Тогда
			Результат = Новый Структура;
			Для Каждого КлючИЗначение Из СбисОбъект Цикл
				Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				Если ГлубокоеКопирование Тогда
					Результат[КлючИЗначение.Ключ] = СкопироватьОбъектСПараметрамиСервер(КлючИЗначение.Значение,ГлубокоеКопирование)			
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат = Новый Структура(СбисКлючи);
			ЗаполнитьЗначенияСвойств(Результат, СбисОбъект);
			Если ГлубокоеКопирование Тогда
				Для Каждого КлючИЗначение Из Результат Цикл
					Результат[КлючИЗначение.Ключ] = СкопироватьОбъектСПараметрамиСервер(КлючИЗначение.Значение,ГлубокоеКопирование)
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СбисОбъект) = Тип("Массив") Тогда
		Результат = Новый Массив;
		Если СбисКлючи = Неопределено Тогда
			Для Каждого ЭлементМассива Из СбисОбъект Цикл
				Результат.Добавить(?(ГлубокоеКопирование, СкопироватьОбъектСПараметрамиСервер(ЭлементМассива,ГлубокоеКопирование), ЭлементМассива));
			КонецЦикла;
		Иначе
			Для Счетчик = 0 По СбисОбъект.Количество() Цикл
				Если СбисКлючи.Найти(Счетчик) Тогда
					Результат.Добавить(?(ГлубокоеКопирование, СкопироватьОбъектСПараметрамиСервер(ЭлементМассива,ГлубокоеКопирование), ЭлементМассива));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Результат = СбисОбъект;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Функция проверяет, не является ли указанный параметр ссылкой на узел в ини контекста, либо в стекеИни, если указано. В СбисПоле будет помещён найденный узел при успехе.
&НаКлиенте
Функция ЭтоСсылкаНаУзелИни(Кэш, СбисПараметр, СбисПоле=Неопределено, СбисКонтекст, ДопПараметры)
	Если СбисКонтекст.Свойство("СтекИни") Тогда
		//Стек ини для возможности указать узел на рассчет без изменения контекста (например, для составных узлов)
		Для Каждого ЭлементСтека Из СбисКонтекст.СтекИни Цикл
			Попытка
				Если ЭлементСтека.Свойство(СбисПараметр, СбисПоле) Тогда
					Прервать;
				КонецЕсли;
			Исключение
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		Возврат Не СбисПоле = Неопределено;
	Иначе
	Попытка
		Возврат СбисКонтекст.Ини.Свойство(СбисПараметр, СбисПоле);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	КонецЕсли;
КонецФункции

//Процедура устанавливает стек в контекст
&НаКлиенте
Процедура УстановитьЗначениеИниВСтек(Кэш, СбисКонтекст, ЗначениеИниВСтек) Экспорт
	Перем СтекИни;
	Если СбисКонтекст.Свойство("СтекИни", СтекИни) Тогда
		СтекИни.Вставить(0, ЗначениеИниВСтек);
	Иначе
		СтекИни = Новый Массив;
		СтекИни.Добавить(ЗначениеИниВСтек);
		СтекИни.Добавить(СбисКонтекст.Ини);
		СбисКонтекст.Вставить("СтекИни", СтекИни);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗначениеИниИзСтека(Кэш, СбисКонтекст) Экспорт
	Перем СтекИни;
	Если Не СбисКонтекст.Свойство("СтекИни", СтекИни) Тогда
		Возврат;
	КонецЕсли;
	Если СтекИни.Количество() = 2 Тогда
		СбисКонтекст.Удалить("СтекИни");
	Иначе	
		СтекИни.Удалить(0);
	КонецЕсли;
КонецПроцедуры

//Проверяет узел на то, что он составной (таб.часть у вложения)
&НаКлиенте
Функция ЭтоСложныйУзел_Клиент(Кэш, Поле)
	Перем ЗначениеТипПодУзла;
	Если ТипЗнч(Поле) = Тип("Структура") Тогда
		//Если Поле.Свойство("НомСредИдентТов") Тогда
		//	Возврат Истина;
		//КонецЕсли;
		Для Каждого КлючИЗначение Из Поле Цикл
			Если	ТипЗнч(КлючИЗначение.Значение) = Тип("Структура")
				И	КлючИЗначение.Значение.Свойство(КлючИЗначение.Ключ, ЗначениеТипПодУзла)
				И	ЗначениеТипПодУзла.Свойство("Тип", ЗначениеТипПодУзла)
				И	НРег(ЗначениеТипПодУзла) = "табличнаячасть" Тогда
				Возврат Истина;
			КонецЕсли;
			//Проверку делаем по первому элементу узла. Если там нет описания, то адью.
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

//Проверяет узел на то, что он составной (таб.часть у вложения)
&НаСервере
Функция ЭтоСложныйУзел_Сервер(Аргумент)
	Перем ЗначениеТипПодУзла;
	Поле = Аргумент.Значение;
	Если ТипЗнч(Поле) = Тип("Структура") Тогда
		//Если Поле.Свойство("НомСредИдентТов") Тогда
		//	Возврат Истина;
		//КонецЕсли;
		Для Каждого КлючИЗначение Из Поле Цикл
			Если	ТипЗнч(КлючИЗначение.Значение) = Тип("Структура")
				И	КлючИЗначение.Значение.Свойство(КлючИЗначение.Ключ, ЗначениеТипПодУзла)
				И	ЗначениеТипПодУзла.Свойство("Тип", ЗначениеТипПодУзла)
				И	НРег(ЗначениеТипПодУзла) = "табличнаячасть" Тогда
				Возврат Истина;
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПрерываниеПользователемФормированияДокументов()
	// Если пользователь прервал формирование документов, прячем состояние
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СбисПоискОснованияКорректировки(Контекст, ИдПакета, Вложения) Экспорт 
	Если Не ТипЗнч(Вложения) = Тип("Массив") Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ВремТабл = Новый ТаблицаЗначений;
	Массив = Новый Массив;
	КС = Новый КвалификаторыСтроки(50);
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив,, КС);
	ВремТабл.Колонки.Добавить("Ид", ОписаниеТиповС);
	ВремТабл.Колонки.Добавить("ИдВложения", ОписаниеТиповС);
	ИдВложения = Неопределено;
	
	Для Каждого ЭлВлождение Из Вложения Цикл
		
		Если НРег(ЭлВлождение.Направление) = "исходящий"
			И НРег(ЭлВлождение.Тип) = "уведомлотгр" Тогда
			
			ИдВложения = ЭлВлождение.Идентификатор;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИдВложения = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;

	НовСтрВремТабл = ВремТабл.Добавить();
	НовСтрВремТабл.Ид = ИдПакета;
	НовСтрВремТабл.ИдВложения = ИдВложения;
	
	мСвойстваДокументСбисИд = Новый Массив; 
	мСвойстваДокументСбисИдВложения = Новый Массив;
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		ИмяРегистраСвойствОбъектов = "ДополнительныеСведения"; 
		ИмяРеквизитаСвойства = "Заголовок";
		//мСвойстваДокументСбисИд.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Заголовок", "ДокументСБИС_Ид"));
		//мСвойстваДокументСбисИдВложения.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Заголовок", "ДокументСБИС_ИдВложения"));
	#Иначе
		ИмяРегистраСвойствОбъектов = "ЗначенияСвойствОбъектов"; 
		ИмяРеквизитаСвойства = "Наименование";
		//мСвойстваДокументСбисИд.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ДокументСБИС_Ид", Истина));
		//мСвойстваДокументСбисИдВложения.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ДокументСБИС_ИдВложения", Истина));
	#КонецЕсли
	
	запрос = новый Запрос;
	запрос.Текст  = "ВЫБРАТЬ
	|	ТЗ.Ид,
	|	ТЗ.ИдВложения
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ид,
	|	ЗначенияСвойствОбъектов.Объект КАК Док1С
	|ПОМЕСТИТЬ ВТДокументыПакета
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистраСвойствОбъектов + " КАК ЗначенияСвойствОбъектов
	|		ПО ЗначенияСвойствОбъектов.Значение ПОДОБНО ВТ.Ид + ""%""
	|		И (ЗначенияСвойствОбъектов.Свойство." + ИмяРеквизитаСвойства + " ПОДОБНО ""%"" + &мСвойстваДокументСбисИд)
	|СГРУППИРОВАТЬ ПО Ид, Объект;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ИдВложения,
	|	ЗначенияСвойствОбъектов.Объект КАК Док1С
	|ПОМЕСТИТЬ ВТДокументыВложений
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистраСвойствОбъектов + " КАК ЗначенияСвойствОбъектов
	|		ПО ВТ.ИдВложения = ЗначенияСвойствОбъектов.Значение
	|		И (ЗначенияСвойствОбъектов.Свойство." + ИмяРеквизитаСвойства + " ПОДОБНО ""%"" + &мСвойстваДокументСбисИдВложения)
	|СГРУППИРОВАТЬ ПО ИдВложения, Объект;
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументыПакета.Ид,
	|	ЕСТЬNULL(ВТДокументыВложений.ИдВложения, """") КАК ИдВложения,
	|	ВТДокументыПакета.Док1С								
	|ИЗ
	|	ВТДокументыПакета КАК ВТДокументыПакета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыВложений 
	|		ПО ВТДокументыПакета.Док1С = ВТДокументыВложений.Док1С";
	
	запрос.УстановитьПараметр("ТЗ", ВремТабл);
	запрос.УстановитьПараметр("мСвойстваДокументСбисИд", "ДокументСБИС_Ид");
	запрос.УстановитьПараметр("мСвойстваДокументСбисИдВложения", "ДокументСБИС_ИдВложения");
	Выборка = Запрос.Выполнить().Выбрать();

	Возврат ?(Выборка.Следующий(), Выборка.Док1С, Неопределено);
КонецФункции

Функция СбисПоискСвойств(Знач Контекст, Знач Заголовок) Экспорт
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда 
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РАЗЛИЧНЫЕ ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		                      |ГДЕ
		                      |	ДополнительныеРеквизитыИСведения.Заголовок = &Заголовок");
	#Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РАЗЛИЧНЫЕ ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	ПланВидовХарактеристик.СвойстваОбъектов КАК ДополнительныеРеквизитыИСведения
		                      |ГДЕ
		                      |	ДополнительныеРеквизитыИСведения.Наименование = &Заголовок");
	#КонецЕсли
	Запрос.УстановитьПараметр("Заголовок", Заголовок);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка.Следующий();
КонецФункции

&НаКлиенте
Функция ВыполнитьПроверкуРасхождений (Кэш, СписокОтмеченныхДокументов, ДопПараметры) Экспорт
	
	Обновлять = Ложь;

	СписокРасхожденийПолучить = Новый СписокЗначений;
	Для Каждого СтрокаСпискаОтметить Из СписокОтмеченныхДокументов Цикл
		СтрокаСравнениеПолучить = Новый Структура("Документ1С, ДокументСБИСНазвание, ИдВложения, СоставПакета");
		ЗаполнитьЗначенияСвойств(СтрокаСравнениеПолучить, СтрокаСпискаОтметить.Значение);
		СписокРасхожденийПолучить.Добавить(СтрокаСравнениеПолучить);
	КонецЦикла;
	
	ДопПараметрыСравнения		= Новый Структура("Кэш", МестныйКэш);
	ПараметрыСравненияИсходящеи	= Новый Структура("СписокСопоставлений", СписокРасхожденийПолучить);
	Возврат МодульОбъектаКлиент().СравнитьВыбранныеДокументы(ПараметрыСравненияИсходящеи, ДопПараметрыСравнения);
	
КонецФункции

#КонецОбласти
