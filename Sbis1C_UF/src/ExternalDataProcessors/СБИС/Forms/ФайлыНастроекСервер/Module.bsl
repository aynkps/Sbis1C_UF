//НАДО дописать чтение настроек от класса, не через ВыполнитьПолучениеИни


&НаКлиенте
Перем ЛокальныйКэш, НажатиеВыполнено;

&НаКлиенте
Перем СбисДанныеДиалога Экспорт; 

#Область include_local_ПолучитьМодульОбъекта

&НаСервере
Функция МодульОбъектаСервер()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция МодульОбъектаСерверБезКонтекста()
	Возврат Новый (Тип("ВнешняяОбработкаОбъект.СБИС"));
КонецФункции

&НаКлиенте
Функция МодульОбъектаКлиент() Экспорт
	Возврат ВладелецФормы.Кэш.СБИС.МодульОбъектаКлиент;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_ВызовИнтеграции
////////////////////////////////////////////////////

//Записывает выбранный вариант настроек в виде JSON на сервер.
&НаКлиенте
Функция		ЗаписатьConnection(Кэш, ПараметрыЗаписи, СбисДополнительныеПараметры, Отказ)
	Перем ОбновитьИниНаСервере, ЭтоНовоеСоединение, ТипНастроек, Статус, ТихийРежим;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при записи промежуточных данных, вроде меню и параметров
	
	СбисПараметры = ПараметрыЗаписи.Данные.Параметры;
	
	Если Не ЗначениеЗаполнено(СбисПараметры) Тогда
		СбисПараметры = ПолучитьПараметрыСБИС(Кэш, "");
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура;
	Если	СбисДополнительныеПараметры.Свойство("ТолькоСбисПараметры")
		И	СбисДополнительныеПараметры.ТолькоСбисПараметры
		Или	Не	(	(	ПараметрыЗаписи.ПараметрыРаботы.Свойство("Статус", Статус)
					И	Статус = "Удален")
				Или	(		ПараметрыЗаписи.ПараметрыРаботы.Свойство("ТипНастроек", ТипНастроек)
					И Не	ТипНастроек = "Пользовательские")) Тогда
		ПараметрыОтправки.Вставить("id",		ПараметрыЗаписи.Идентификатор);
		ЭтоНовоеСоединение = Ложь;
	Иначе
		ЭтоНовоеСоединение = Истина;
		ПараметрыОтправки.Вставить("url",		Кэш.ПараметрыСистемы.Конфигурация.URL);
		ПараметрыОтправки.Вставить("service",	Кэш.КэшНастроек.ПараметрыКонфигурации.service);//service для записи берем из параметров конфигурации системы, т.к. может отличаться для работы с конфигом и коннекшеном
		ПараметрыОтправки.Вставить("subsystem",	ПараметрыЗаписи.ПараметрыКонфигурации.subsystem);
		ПараметрыОтправки.Вставить("version",	Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(ПараметрыЗаписи.ПараметрыКонфигурации.version,"СтрокуВЧисло"), "ЧРГ=; ЧН=0; ЧГ=0"));
		СбисПараметры.Вставить("Service4Config", Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
		СбисПараметры.Вставить("nameSubsystem",	Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(,ПараметрыЗаписи.ПараметрыКонфигурации.subsystem));
	КонецЕсли;
	Если ПараметрыЗаписи.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
		ПараметрыОтправки.Вставить("for_all", Истина);
		Если ЗначениеЗаполнено(ПараметрыЗаписи.Идентификатор) Тогда
			ПараметрыОтправки.Вставить("id", ПараметрыЗаписи.Идентификатор);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗаписи.ПараметрыРаботы.Шаблон) Тогда
		ПараметрыОтправки.Вставить("parent", ПараметрыЗаписи.ПараметрыРаботы.Шаблон);
	КонецЕсли;
	Если СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("СообщатьПриОшибке") Тогда
		СбисДополнительныеПараметры.Вставить("СообщатьПриОшибке", Ложь);
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ВернутьОшибку") Тогда
		СбисДополнительныеПараметры.Вставить("ВернутьОшибку", Истина);
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ЕстьОтвет") Тогда
		СбисДополнительныеПараметры.Вставить("ЕстьОтвет", Истина);
	КонецЕсли;
	ЕстьИниКЗаписи	= Булево(ПараметрыЗаписи.ПараметрыРаботы.СбисИни.СписокОтправить.Количество());
	ФормированиеМеню=	ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Обновить
					И	ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Отправлять;
	
	ВыполнитьЗапись	= ЕстьИниКЗаписи Или ЭтоНовоеСоединение;
	//Если запись параметров, то не обрабатываем коннекшен, а только запишем параметры
	Если Не	(	СбисДополнительныеПараметры.Свойство("ТолькоСбисПараметры")
			И	СбисДополнительныеПараметры.ТолькоСбисПараметры) Тогда
		//Если это не запись сбиспараметров, то проверим необходимость обновить сбисменю. Если надо, то выполним запись 	
		ini_array = Новый Массив;
		//Необязательные параметры. Если есть, то передаём
		Если ПараметрыЗаписи.Свойство("Название") Тогда
			ПараметрыОтправки.Вставить("name_connection",	Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ПараметрыЗаписи.Название));
		КонецЕсли;
		Если	ПараметрыЗаписи.ПараметрыРаботы.Свойство("ДатаИзмененияНастроек")
			И	ЗначениеЗаполнено(ПараметрыЗаписи.ПараметрыРаботы.ДатаИзмененияНастроек) Тогда
			ПараметрыОтправки.Вставить("update_date",		Формат(ПараметрыЗаписи.ПараметрыРаботы.ДатаИзмененияНастроек,"ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""));
		КонецЕсли;
		Если ПараметрыЗаписи.ПараметрыРаботы.Свойство("Автообновление") Тогда
			ПараметрыОтправки.Вставить("auto_update ",		ПараметрыЗаписи.ПараметрыРаботы.Автообновление);
		КонецЕсли;
		//Если надо апдейтнуть меню по данным, то делаем только если сразу отправим на БЛ
		Если ФормированиеМеню Тогда
			ПараметрыЗаписи.Данные.Меню = КлассIntegrationConnection_СформироватьСбисМеню(Кэш, ПараметрыЗаписи, Новый Структура, Отказ);
		КонецЕсли;
		//Конвертнём и добавим в параметры ини к обновлению на сервисе
		Если ЕстьИниКЗаписи Тогда
			ПараметрыЗапроса = Новый Структура
				("Идентификатор,				ПараметрыКонфигурации,					СбисМеню,						Искать",
				ПараметрыЗаписи.Идентификатор,	ПараметрыЗаписи.ПараметрыКонфигурации,	ПараметрыЗаписи.Данные.Меню,	Новый Структура("Включено", "01"));
			ДанныеСпискаИни		= СформироватьСписокИни(Кэш,ПараметрыЗапроса,Отказ);
			КонвертированныеИни	= Новый Структура;
			Для Каждого ИмяИниВО Из  ПараметрыЗаписи.ПараметрыРаботы.СбисИни.СписокОтправить Цикл
				Если Не ПараметрыЗаписи.Данные.Ини.Свойство(ИмяИниВО) Тогда
					Отказ = Истина;
					Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.ЗаписатьConnection", 785, "Ошибка во входящих данных", "Отсутствует файл настроек " + ИмяИниВО + " в данных к отправке!");
				КонецЕсли;
				КонвертированныеИни.Вставить(ИмяИниВО, ПараметрыЗаписи.Данные.Ини[ИмяИниВО]);
			КонецЦикла;
			КонвертированныеИни = ПреобразованиеВОИни_JSONИни_ВыполнитьПреобразование(КонвертированныеИни);
			
			Для Каждого ИмяИниВО Из ПараметрыЗаписи.ПараметрыРаботы.СбисИни.СписокОтправить Цикл
				ЗаписьИни			= СбисОписаниеИни(Кэш);
				ЗначениеИни			= КонвертированныеИни[ИмяИниВО];
				СписокКлючейОчистить= Новый Массив;
				Для Каждого КлючИЗначениеЗначениеИни Из ЗначениеИни Цикл
					Если Лев(КлючИЗначениеЗначениеИни.Ключ, 4) = "Сбис" Тогда
						СписокКлючейОчистить.Добавить(КлючИЗначениеЗначениеИни.Ключ);
					КонецЕсли;
				КонецЦикла;
				Для Каждого КлючОчистить Из СписокКлючейОчистить Цикл
					ЗначениеИни.Удалить(КлючОчистить);
				КонецЦикла;
				
				ИмяИниJson	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ИмяИниВО, "во_json");
				ЭлементКарты= ДанныеСпискаИни.Карта.НайтиПоЗначению(НРег(ИмяИниJson));
				ДанныеСписка= ДанныеСпискаИни.Данные[ДанныеСпискаИни.Карта.Индекс(ЭлементКарты)];
				ЗаполнитьЗначенияСвойств(ЗаписьИни, ДанныеСписка);
			
				ЗаписьИни.data = Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ЗначениеИни);
				ini_array.Добавить(ЗаписьИни);
			КонецЦикла;
		КонецЕсли;
		//Добавим меню в список отправляемых ини
		Если ФормированиеМеню Тогда
			ЗаписьИни = СбисОписаниеИниМеню(Кэш);
			ЗаписьИни.data = Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ПараметрыЗаписи.Данные.Меню);
			ini_array.Добавить(ЗаписьИни);
			ВыполнитьЗапись = Истина;
		КонецЕсли;
	КонецЕсли;
	//Добавим СбисПараметры в отправку		
	Если	(	(	ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Обновить
				И	ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Отправлять) 
			Или	ЭтоНовоеСоединение)
		И	СбисПараметры.Количество() Тогда
		ПараметрыОтправки.Вставить("json_connection", Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(СбисПараметры));
		ВыполнитьЗапись = Истина;
	КонецЕсли;
	
	Если ВыполнитьЗапись Тогда
		ПараметрыОтправки = Новый Структура("props, ini", ПараметрыОтправки, ini_array);
		Если Не СбисДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
			ТихийРежим = Ложь;
		КонецЕсли;
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисПоказатьСостояние("Запись настроек", Кэш.ГлавноеОкно);
		КонецЕсли;
		Результат = Кэш.Интеграция.ЗаписатьConnection(Кэш, ПараметрыОтправки, СбисДополнительныеПараметры, Отказ);
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;
	КонецЕсли;
	Если Не Отказ Тогда
		//Обновить подключение после записи
		ПараметрыЗаписи.Идентификатор =	Результат;
		Если Не ПараметрыЗаписи.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
			ПараметрыЗаписи.ПараметрыРаботы.ТипНастроек = "Пользовательские";
		КонецЕсли;
		ПараметрыЗаписи.ПараметрыРаботы.Статус = "Активен";
		ПараметрыЗаписи.ПараметрыРаботы.СбисИни.СписокОтправить.Очистить();
		Если ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Отправлять Тогда
			ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Обновить = Ложь;
		КонецЕсли;
		Если ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Отправлять Тогда
			ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Обновить = Ложь;
		КонецЕсли;
		//Здесь нужно для того, чтобы если в каталоге отключили узлы, то и в рабочих ини узлов быть не должно. После переполучения, ини очистятся в конверторе.
		Если ЕстьИниКЗаписи Тогда
			ОчиститьОтключенныеУзлы(ПараметрыЗаписи.Данные.Ини);
		КонецЕсли;
	КонецЕсли;

	Возврат	Результат;
	
КонецФункции

//Получает стуктуру СбисПараметров. 
&НаКлиенте
Функция		ПолучитьСБИСПараметрыСоединения(Кэш, Идентификатор, Отказ)
	
	Перем ШаблонПодключения;
	Если Отказ Тогда
		Возврат Неопределено;
	ИначеЕсли	Кэш.КэшНастроек.Свойство("ВыбранныеНастройки")
			И	Кэш.КэшНастроек.ВыбранныеНастройки.Идентификатор = Идентификатор
			И	(		Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.Статус = "Новый"
				Или	Не	Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Отправлять) Тогда
		//Если надо получить параметры от текущих настроек в момент мастера, либо предустановки (когда автозапись параметров отключена)
		Возврат Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Параметры;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("id", Строка(Идентификатор));
	
	Результат = ВыполнитьПолучениеИни(Кэш, "ReadConnection", Новый Структура("props, ini", ПараметрыЗапроса, Неопределено), Новый Структура("СообщатьПриОшибке,ВернутьОшибку", Ложь,Истина), Отказ);
	Если Не Отказ Тогда
		Результат = НовыйIntegrationConnection(Кэш, Новый Структура("ДанныеБЛ, ИнициироватьДанные, Перечитать, Кэшировать", Результат, Ложь, Истина, Ложь), Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Идентификатор = "";//При любой ошибке в процессе получения параметров очищается идентификатор, чтобы не спамить сообщениями об ошибках при дальнейших попытках получения.
		Если	Строка(Результат.code) = "756" Тогда//Код ошибки 756 - подключение не доступно для пользователя, либо было удалено в процессе работы. В любом случае, настройки получить не выйдет.
			Отказ = Ложь;
			Если	Кэш.Текущий.ТипДок = ""
				Или	(	ПараметрыРаботы.Свойство("ИзменениеПользователя")
					И	ПараметрыРаботы.ИзменениеПользователя)
				Или	(	ПараметрыРаботы.Свойство("ИзмененаФормаНастроек")
					И	ПараметрыРаботы.ИзмененаФормаНастроек)Тогда//Было изменение пользователя, или это первый запуск окна(до этого работали под другим пользователем).
				Возврат Неопределено;
			Иначе//Надо предложить сохранить настройки при следующем переходе. Для этого включаем кэш настроек с сохранением того, что было получено и ставим флаг на изменение.
				Кэш.КэшНастроек.ПараметрыНастроек.Вставить("КэшироватьВсеПолучаемые", Истина);
				ПриЗапускеРедактораНастроек(Новый Структура("КэшироватьВсеПолучаемые", Истина), Кэш);
				ВыбранныеНастройки = Неопределено;
				Если Кэш.КэшНастроек.Свойство("ВыбранныеНастройки",ВыбранныеНастройки) Тогда 
					ВыбранныеНастройки.ПараметрыРаботы.Статус			= "Удален";
					ВыбранныеНастройки.Идентификатор					= ПараметрыЗапроса.id;
					ВыбранныеНастройки.Название							= Кэш.ФормаНастроекОбщее.НастройкиНазвание;
					ВыбранныеНастройки.ПараметрыРаботы.Автообновление	= Кэш.ФормаНастроекОбщее.НастройкиАвтообновление;
					ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек		= "Пользовательские";
				КонецЕсли;
				ПараметрыДиалога = Новый Структура("ТекстВопроса, КнопкиДиалога", "Сохранить текущие настройки и создать подключение повторно?", РежимДиалогаВопрос.ДаНет);
				Кэш.КэшНастроек.Вставить("ИзмененияВНастройках_ПараметрыДиалога",ПараметрыДиалога);
				Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
			КонецЕсли;
		КонецЕсли;
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, Результат);
		Возврат	Неопределено;
	КонецЕсли;
	
	СбисПараметры = Неопределено;
	Если Не	ЗначениеЗаполнено(Результат.Данные.Параметры) Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	//Читаем параметры с шаблона и дополняем текущие 
	Если	Не	Результат.ПараметрыРаботы.ТипНастроек = "Шаблон"
		И		ЗначениеЗаполнено(Результат.ПараметрыРаботы.Шаблон) Тогда
		ОшибкаЧтенияШаблона	= Ложь;
		ПараметрыШаблона	= ПолучитьСБИСПараметрыСоединения(Кэш,  Результат.ПараметрыРаботы.Шаблон, Отказ);
		
		НоваяСтруктураПараметров= Новый Структура;
		Если Не ОшибкаЧтенияШаблона Тогда
			ЗначениеПараметраВПодключении = Неопределено;
			Для Каждого Элемент Из ПараметрыШаблона Цикл
				Если Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Найти(НРег(Элемент.Ключ)) = Неопределено Тогда
					Продолжить;
				ИначеЕсли Не Результат.Данные.Параметры.Свойство(Элемент.Ключ, ЗначениеПараметраВПодключении) Тогда
					Результат.Данные.Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
				ИначеЕсли	ТипЗнч(ЗначениеПараметраВПодключении)	= Тип("Структура")
						И	ТипЗнч(Элемент.Значение)				= Тип("Структура") Тогда
					//Обе структуры - накатить параметры подключения поверх шаблона.
					Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Элемент.Значение, ЗначениеПараметраВПодключении);
					Результат.Данные.Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
				Иначе
					//Приоритет = пользовательские изменения
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СбисПараметры = Результат.Данные.Параметры;
	Если ТипЗнч(СбисПараметры) = Тип("Строка") Тогда//При работе через крипто плагин здесь строка, вместо структуры. Временный костыль, потом надо разобраться, почему.
		СбисПараметры = Кэш.РаботаСJSON.СбисПрочитатьJSON(СбисПараметры);
	КонецЕсли;
	
	Возврат	Кэш.ФормаНастроекОбщее.ОбработатьСтруктуруПараметров(СбисПараметры);
	
КонецФункции

//Получает список строк IntegrationConnection.
&НаКлиенте
Функция		ПолучитьСписокConnection(Кэш, ПараметрыПолучения, Отказ)
	Перем СписокИни, ТипКоннекшена, ТихийРежим;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура("service", ПараметрыПолучения.ПараметрыКонфигурации.service);
	Если ПараметрыПолучения.ДополнительныеПараметры.Свойство("ТипКоннекшена", ТипКоннекшена) Тогда
		//account/user
		ПараметрыЗапроса.Вставить("connection_type", ТипКоннекшена);
	КонецЕсли;
	Если ПараметрыПолучения.ДополнительныеПараметры.Свойство("URL") Тогда
		//ПараметрыЗапроса.Вставить("url", ЗначениеВJSON(ПараметрыПолучения.ДополнительныеПараметры.URL));
	КонецЕсли;
	Если ПараметрыПолучения.ДополнительныеПараметры.Свойство("subsystem") Тогда
		ПараметрыЗапроса.Вставить("subsystem", ПараметрыПолучения.ДополнительныеПараметры.subsystem);
	КонецЕсли;
	ПараметрыСообщения		= Новый Структура("filter, ini", ПараметрыЗапроса, ПараметрыПолучения.СписокИни);
	ДополнительныеПараметры	= ПараметрыПолучения.ДополнительныеПараметры;
	Если Не ДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Кэш.ТихийРежим;
	КонецЕсли;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Получение списка настроек", Кэш.ГлавноеОкно);
	КонецЕсли;
	
	РезультатМетода = Кэш.Интеграция.ПолучитьСписокConnection(Кэш, ПараметрыСообщения, ПараметрыПолучения.ДополнительныеПараметры, Отказ);	
	
	Если Отказ Тогда
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;
		Возврат	РезультатМетода;
	КонецЕсли;
	
	Результат = Новый Массив;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Чтение списка настроек", Кэш.ГлавноеОкно);
	КонецЕсли;
	Для Каждого СтрокаРезультат Из РезультатМетода Цикл
		СтрокаРезультатДобавить = НовыйIntegrationConnection(Кэш, Новый Структура("ДанныеБЛ, ИнициироватьДанные, ПроверятьАктуальность", СтрокаРезультат, Ложь, Ложь), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(СтрокаРезультатДобавить, "ФайлыНастроекСервер.ПолучитьСписокConnection");
		КонецЕсли;
		Результат.Добавить(СтрокаРезультатДобавить);
	КонецЦикла;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	Возврат	Результат;
	
КонецФункции

//Получает список строк IntegrationConnection.
&НаКлиенте
Функция		ПолучитьСписокConfig(Кэш, ПараметрыПолучения, Отказ)
	Если	Отказ	Тогда
		Возврат	Неопределено
	КонецЕсли;
	
	ПараметрыСообщения		= Новый Структура("service", Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
	ДополнительныеПараметры	= ПараметрыПолучения.ДополнительныеПараметры;
	РезультатМетода			= Кэш.Интеграция.ПолучитьСписокConfig(Кэш, ПараметрыСообщения, ДополнительныеПараметры, Отказ);	
	Если Отказ Тогда
		Возврат	РезультатМетода;
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	Для Каждого СтрокаРезультат Из РезультатМетода Цикл
		КлассIntegrationConnection = НовыйIntegrationConnection(Кэш, Новый Структура("ДанныеБЛ, ИнициироватьДанные", СтрокаРезультат, Ложь), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnection, "ФайлыНастроекСервер.ПолучитьСписокConfig");
		КонецЕсли;
		Результат.Добавить(КлассIntegrationConnection, КлассIntegrationConnection.Название);
	КонецЦикла;
	Результат.СортироватьПоПредставлению();
	Возврат	Результат.ВыгрузитьЗначения();

КонецФункции

//Получает настройки по ID.
&НаКлиенте
Функция		ПолучитьConnection(Кэш, ПараметрыПолучения, Отказ)
	Если Отказ Тогда
		Возврат	Неопределено;
	КонецЕсли;
	ПараметрыКонвертации = Неопределено;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("id",		Строка(ПараметрыПолучения.Идентификатор));
	ПараметрыЗапроса.Вставить("version",Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(ПараметрыПолучения.ПараметрыКонфигурации.Version,"СтрокуВЧисло"),"ЧРГ=; ЧН=0; ЧГ=0"));
	Если	ПараметрыПолучения.ДополнительныеПараметры.Свойство("ТолькоПользовательские")
		И	ПараметрыПолучения.ДополнительныеПараметры.ТолькоПользовательские Тогда
		//Если получаем только пользовательские изменения, то при конвертации не требуется удалять отключенные узлы
		ПараметрыЗапроса.Вставить("read_config", Ложь);
		ПараметрыКонвертации = Новый Структура("ОчищатьОтключенные", Ложь);
	КонецЕсли;	
	
	ПараметрыСообщения = Новый Структура("props, ini", ПараметрыЗапроса, ПараметрыПолучения.СписокИни);		
	Результат = ПолучитьConnectionССервиса(Кэш, ПараметрыСообщения, ПараметрыПолучения.ДополнительныеПараметры, Отказ);
	Если Отказ Тогда 
		Возврат	Результат;
	КонецЕсли;

	//ЧтениеИни_ОбработатьРезультат(Кэш, Результат, ПараметрыКонвертации);

	Возврат	Результат;
	
КонецФункции	

//Получает типовые настройки по параметрам системы.
&НаКлиенте
Функция		ПолучитьConfig(Кэш, ПараметрыПолучения, Отказ)
	
	Если Отказ Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Результат				= Неопределено;
	ДополнительныеПараметры	= ПараметрыПолучения.ДополнительныеПараметры;
	ТихийРежим				= Неопределено;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при получении промежуточных данных, вроде меню и параметров
	Если Не ДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Кэш.ТихийРежим;
	КонецЕсли;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Получение стандартных настроек", Кэш.ГлавноеОкно);
	КонецЕсли;	
	
	ПараметрыКонфигурации	= ПараметрыПолучения.ПараметрыКонфигурации;
	Запрос_Фильтр			= Новый Структура("version,subsystem,service");
	Если Не ЗначениеЗаполнено(ПараметрыКонфигурации) Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.ПолучитьConfig", 600, "Неизвестная ошибка настроек", "Отсутствует описание конфигурации для получения стандартных настроек! Обратитесь в тех. поддержку.");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Запрос_Фильтр, ПараметрыКонфигурации);
	Запрос_Фильтр.Вставить("version", Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(Запрос_Фильтр.version,"СтрокуВЧисло"), "ЧРГ=; ЧН=0; ЧГ=0"));
	
	ПараметрыСообщения = Новый Структура("props, ini", Запрос_Фильтр, ПараметрыПолучения.СписокИни);
	
	Если ПустаяСтрока(ПараметрыСообщения.props.subsystem) Тогда//Это пользовательская конфигурация. Генерируем ряд обязательных параметров, всё остальное берётся по-умолчанию.
		РезультатМетода = Новый Структура(
		"name_config,					auto_update,service,							subsystem,							version", 
		"Пользовательская конфигурация",Ложь,		ПараметрыСообщения.props.service,	ПараметрыСообщения.props.subsystem,	ПараметрыСообщения.props.version);
	Иначе
		РезультатМетода	= ВыполнитьПолучениеИни(Кэш, "ReadConfig", ПараметрыСообщения, ДополнительныеПараметры, Отказ);//Получаем типовые конфиги.
		Если РезультатМетода = Неопределено Тогда
			Отказ = Истина;
			ИмяЗапрашиваемойКонфигурации = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ПараметрыСообщения.props.service, Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(ПараметрыСообщения.props));
			РезультатМетода = Новый Структура("code,message,details", 765, "Значение не найдено в таблице настроек", СтрЗаменить("Настройки %CF% не найдены!", "%CF%", ИмяЗапрашиваемойКонфигурации));
		КонецЕсли;
	КонецЕсли;
	Если	Отказ Тогда
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;	
		Возврат	РезультатМетода;
	КонецЕсли;
	
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Чтение стандартных настроек", Кэш.ГлавноеОкно);
	КонецЕсли;
	Результат = НовыйIntegrationConnection(Кэш, Новый Структура("ДанныеБЛ", РезультатМетода), Отказ);
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат	Результат;
	КонецЕсли;
	
	ЧтениеИни_ОбработатьРезультат(Кэш, Результат);
	
	Возврат	Результат;
	
КонецФункции

//Функция выполняет разбивку получения ини по пакетно, для ускорения разбора данных.
&НаКлиенте
Функция		ВыполнитьПолучениеИни(Кэш,Метод,ПараметрыМетода,ДопПараметры,Отказ)
	Перем СписокКЗапросу, Результат, ПолучатьИни;
	
	Если ПараметрыМетода.Свойство("ini", СписокКЗапросу) Тогда
		ПолучатьИни = Не СписокКЗапросу = Неопределено;
	Иначе
		ПолучатьИни = Ложь;
	КонецЕсли;
	
	Если ПолучатьИни Тогда
		ЧислоИниЗаРаз = Кэш.КэшНастроек.ПараметрыНастроек.ПолучатьИниЗаРаз;
		СписокРазовоеЧтение = Новый Массив;
		Если СписокКЗапросу.Количество() > ЧислоИниЗаРаз Тогда
			Для Каждого ИниПолучить Из СписокКЗапросу Цикл
				Если СписокРазовоеЧтение.Количество() = ЧислоИниЗаРаз Тогда
					ПараметрыМетода.Вставить("ini", СписокРазовоеЧтение);
					РезультатПолучения = Кэш.Интеграция.ПолучитьИни(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
					Если Отказ Тогда
						Возврат РезультатПолучения;
					КонецЕсли;
					ВыполнитьПолучениеИни_ДобавитьВРезультат(Кэш,Результат,РезультатПолучения,Отказ);
					СписокРазовоеЧтение = Новый Массив
				КонецЕсли;
				СписокРазовоеЧтение.Добавить(ИниПолучить);
			КонецЦикла;
			Если СписокРазовоеЧтение.Количество() Тогда
				ПараметрыМетода.Вставить("ini", СписокРазовоеЧтение);
				РезультатПолучения = Кэш.Интеграция.ПолучитьИни(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
				Если Отказ Тогда
					Возврат РезультатПолучения;
				КонецЕсли;
				ВыполнитьПолучениеИни_ДобавитьВРезультат(Кэш,Результат,РезультатПолучения,Отказ);
			КонецЕсли;
		Иначе//Список пустой, или нужно инишек меньше, чем разбивка.
			ПараметрыМетода.Вставить("ini", СписокКЗапросу);
			Результат = Кэш.Интеграция.ПолучитьИни(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
		КонецЕсли;
	Иначе
		Результат = Кэш.Интеграция.ПолучитьИни(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура	ВыполнитьПолучениеИни_ДобавитьВРезультат(Кэш,Результат,РезультатЗапроса,Отказ)
	ДанныеРезультат = Неопределено;
	ДанныеЗапроса	= Неопределено;
	Если Результат = Неопределено Тогда
		Результат = РезультатЗапроса;
	ИначеЕсли	Результат.Свойство("data",			ДанныеРезультат)
			И	РезультатЗапроса.Свойство("data",	ДанныеЗапроса) Тогда
		Если ТипЗнч(ДанныеРезультат) = Тип("Строка") Тогда
			data = Новый Массив;
			data.Добавить(ДанныеРезультат);
			Результат.data = data;	
		КонецЕсли;
		Результат.data.Добавить(ДанныеЗапроса);
	КонецЕсли;
КонецПроцедуры

//Получает настройки по ID.
&НаКлиенте
Функция		ПолучитьConnectionССервиса(Кэш, ПараметрыСообщения, ДополнительныеПараметры, Отказ) Экспорт
	
	ТихийРежим	= Неопределено;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при получении промежуточных данных, вроде меню и параметров
	ИмяМетода	= "ReadConnection";
	Если Не ДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Кэш.ТихийРежим;
	КонецЕсли;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Получение сохраненных настроек", Кэш.ГлавноеОкно);
	КонецЕсли;	
	
	РезультатМетода = ВыполнитьПолучениеИни(Кэш, ИмяМетода, ПараметрыСообщения, ДополнительныеПараметры, Отказ);
	
	Если Отказ Тогда
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;	
		Возврат	РезультатМетода;
	КонецЕсли;
	
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Чтение сохраненных настроек", Кэш.ГлавноеОкно);
	КонецЕсли;	
	Результат = НовыйIntegrationConnection(Кэш, Новый Структура("ДанныеБЛ", РезультатМетода), Отказ);
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	
	Возврат	Результат;
	
КонецФункции	

&НаКлиенте
Функция		ДоступныеТипыКоннекшена()
	МассивТипов = Новый Массив;
	МассивТипов.Добавить("Шаблон");
	МассивТипов.Добавить("Пользовательские");
	МассивТипов.Добавить("Стандартные");
	Возврат МассивТипов;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_КлассIntegrationConnection_Области
//Описание и методы псевдокласса для работы с настройками в СБИС

#Область include_core2_vo2_Настройки_СБИС_КлассIntegrationConnection_Конструктор

// Функция формирует новый "класс" IC.
//
// Параметры:
//  Кэш			 - Структура - Экземпляр ЛокальныйКэш
//  ДопПараметры - Структура -
//		БазовыйКласс			- Экземпляр IntegrationConnection		- на основе которого требуется получить новый эксзепляр
//		Идентификатор			- УИД в формате строка					- ИД коннекшена для чтения
//		ПараметрыКонфигурации	- Структура: service subsystem version	- Описание конфигурации. Без идентификатора, либо базового класса будет сформирован класс IntegrationConfig
//		Перечитать				- Булево(Ложь)							- Необходимость прочитать данные с БЛ, а не брать от кэша
//		ИнициироватьДанные		- Булево(Истина)						- Необходимость прочитать данные ини (список активных, конфигурация)
//		ПроверятьАктуальность	- Булево(Истина)						- Необходимость проверить статус существующего класса, сделав минимальный запрос
//		Кэшировать				- Булево(Истина)						- Необходмиость запомнить полученные данные класса в кэше для дальнейшего использования
//		ИнитКоннекшен			- Булево(Ложь)							- Это не прямое чтение, даже если указан Идентификатор, а подбор коннекшена происходит на стороне БЛ.
//		Тип						- Строка								- Тип для нового класса (Шаблон/Пользовательский)
//  Отказ		 - Булево	 - флаг ошибки
// 
// Возвращаемое значение:
//  Структура - Экземпляр класса IntegrationConnection
//
&НаКлиенте
Функция		НовыйIntegrationConnection(Кэш, ДопПараметры, Отказ)
	Перем СбисДанныеБЛ, СбисПараметрыКонфигурации, КлассIntegrationConnection, ID, Перечитать, ИнитКоннекшен;
	
	////Статус - возможные значнения "Активен", "Удален"
	//ПараметрыРаботы = Новый Структура("Статус, ТипНастроек, Автообновление, Изменен, Шаблон, Пользователь", "Новый", "Стандартные", Истина, Ложь);
	////Определяет работу со Сбис параметрами:
	////Отправлять- если нет необходимости записывать на сервис, то флаг переключить в ложь. Тогда изменения будут кэшироваться в выбранном подключении
	////Обновить	- флаг изменения в параметрах. Если переключен в истину, то будет проведена отправка на сервис.
	
	//ПараметрыРаботы.Вставить("СбисПараметры",	Новый Структура("Обновить, Отправлять", Ложь, Истина));
	//ПараметрыРаботы.Вставить("СбисМеню",		Новый Структура("Обновить, Отправлять", Ложь, Истина));
	//ПараметрыРаботы.Вставить("СбисИни",			Новый Структура("СписокОтправить", Новый Массив));
	//Результат = Новый Структура(
	//"ПараметрыРаботы,	Данные,									Ошибки,				Название,	ДатаИзмененияНастроек,	ПараметрыКонфигурации,	Идентификатор, Шаблон"
	//,ПараметрыРаботы,	Новый Структура("Ини, Меню, Параметры"),Новый Соответствие, "",			ТекущаяДата(),			ПараметрыСтандартнойКонфигурации(Кэш, Кэш.КэшНастроек.ПараметрыКонфигурации));
	
	СуществующийКоннекшен = Истина;
	Если	Не ДопПараметры.Свойство("ИнитКоннекшен", ИнитКоннекшен) Тогда
		ИнитКоннекшен = Ложь;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("БазовыйКласс") Тогда
		
		Возврат _НовыйIntegrationConnection_НаОсновеКласса(Кэш, ДопПараметры, Отказ);
		
	ИначеЕсли	ДопПараметры.Свойство("Идентификатор")
			И	ЗначениеЗаполнено(ДопПараметры.Идентификатор) Тогда	
			
		ID = ДопПараметры.Идентификатор;
		
	ИначеЕсли	ДопПараметры.Свойство("ПараметрыКонфигурации", СбисПараметрыКонфигурации) Тогда
		
		ID = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(ПараметрыСтандартнойКонфигурации(Кэш, СбисПараметрыКонфигурации));
		СуществующийКоннекшен = Ложь;
		
	КонецЕсли;
	
	Если Не ДопПараметры.Свойство("Перечитать", Перечитать) Тогда
		
		Перечитать = Ложь;
		
	КонецЕсли;
	
	
	Если		ЗначениеЗаполнено(ID)
		И	Не	Перечитать Тогда
		
		КлассIntegrationConnection = Кэш.КэшНастроек.КэшIntegrationConnection.Получить(ID);
		
	КонецЕсли;
	
	Если КлассIntegrationConnection = Неопределено Тогда
		
		Если ИнитКоннекшен Тогда
			
			//Если это вызов через InitCOnnection то пробросить идентификатор справочно для уточнения подбора подключения
			ДопПараметрыИнит = Новый Структура;
			Если СуществующийКоннекшен Тогда
				ДопПараметрыИнит.Вставить("Идентификатор", ID);
			КонецЕсли;
			
			Попытка
				
				РезультатКоннешен = _КлассIntegrationConnection_ИнитКоннекшен(Кэш, ДопПараметрыИнит);
				
			Исключение
				
				Отказ = Истина;
				Возврат	МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), "ФайлыНастроекСервер.НовыйIntegrationConnection");
				
			КонецПопытки;
			
			КлассIntegrationConnection	= НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, Перечитать, ИнициироватьДанные", РезультатКоннешен.ConnectionId, Истина, Ложь), Отказ);
			
		Иначе
			
			КлассIntegrationConnection = КлассIntegrationConnection_Инициализировать(Кэш, ДопПараметры, Отказ);
			Если Отказ Тогда
				Возврат	Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnection, "ФайлыНастроекСервер.НовыйIntegrationConnection");
			КонецЕсли;
				
		КонецЕсли;
		
	ИначеЕсли	Не КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные
		И	(Не 	ДопПараметры.Свойство("ИнициироватьДанные")
			Или		ДопПараметры.ИнициироватьДанные) Тогда
			
		//Если у класса не проиничены ини, то инитим, если только не отключено специально.
		КлассIntegrationConnection = КлассIntegrationConnection_Инициализировать(Кэш, Новый Структура("КлассIntegrationConnection", КлассIntegrationConnection), Отказ);
		
		Если Отказ Тогда 
			
			Возврат	Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnection, "ФайлыНастроекСервер.НовыйIntegrationConnection");
			
		КонецЕсли;
		
	ИначеЕсли	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Активен"
		И	(	Не	ДопПараметры.Свойство("ПроверятьАктуальность")
			Или		ДопПараметры.ПроверятьАктуальность) Тогда
			
		//Проверим актуальность класса. Могли удалить
		ДанныеБЛ = _КлассIntegrationConnection_ВыполнитьЧтениеСБЛ(Кэш, КлассIntegrationConnection, Новый Структура("СписокИни"), Отказ);
		
		Если Отказ Тогда
			
			Если ДанныеБЛ.code = 756 Тогда
				
				Отказ = Ложь;
				КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Определим, название создано по шаблону, или это ручное изменение.
	Если Не ЗначениеЗаполнено(КлассIntegrationConnection.Название) Тогда
		
		КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		НазваниеСгенерировано = Истина;
		
	Иначе
		
		НазваниеСгенерировано = (КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура, Отказ));
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ID) Тогда
		
		ID = КлассIntegrationConnection_Идентификатор(Кэш, КлассIntegrationConnection);
		
	КонецЕсли;
	
	Если	Не	ДопПараметры.Свойство("Кэшировать")
		Или		ДопПараметры.Кэшировать Тогда
		Кэш.КэшНастроек.КэшIntegrationConnection.Вставить(ID, КлассIntegrationConnection);
	КонецЕсли;

	ПараметрыКопирования = Новый Структура;
	Если	КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные
		И		ДопПараметры.Свойство("ИнициироватьДанные")
		И Не	ДопПараметры.ИнициироватьДанные Тогда
		
		ПараметрыКопирования.Вставить("Ини", Ложь);
		ПараметрыКопирования.Вставить("Меню", Ложь);
		
	КонецЕсли;
	
	КлассIntegrationConnectionРезультат = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, ПараметрыКопирования, Отказ);
	Если	ДопПараметры.Свойство("Тип") Тогда
		
		КлассIntegrationConnection_ИзменитьТип(Кэш, КлассIntegrationConnectionРезультат, ДопПараметры, Отказ);
		Если НазваниеСгенерировано Тогда
			
			КлассIntegrationConnectionРезультат.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnectionРезультат, Новый Структура, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат КлассIntegrationConnectionРезультат;
	
КонецФункции

//Возвращает экземпляр класса на основе другого класса
&НаКлиенте
Функция		_НовыйIntegrationConnection_НаОсновеКласса(Кэш, ПараметрыКонструктора, Отказ)
	Перем ИниСравнения, ДанныеИни, ПараметрыКонфигурации;
	КлассIntegrationConnection	= КлассIntegrationConnection_Скопировать(Кэш, ПараметрыКонструктора.БазовыйКласс, Новый Структура, Отказ);
	
	//Меняется конфигурация у нового класса. Сабсистем должны совпадать с версией шаблона.
	Если ПараметрыКонструктора.Свойство("ПараметрыКонфигурации", ПараметрыКонфигурации) Тогда
		Если КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
			Если КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
				//С новым шаблоном можно делать что угодно
			ИначеЕсли	Не КлассIntegrationConnection.ПараметрыКонфигурации.subsystem = ПараметрыКонфигурации.subsystem Тогда
					//Или	Не КлассIntegrationConnection.ПараметрыКонфигурации.version = ПараметрыКонфигурации.version Тогда
				Отказ = Истина;
				Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.НовыйIntegrationConnection.НаОсновеКласса",773,,"Не допускается изменение параметров системы для существующего шаблона!");
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(КлассIntegrationConnection.ПараметрыРаботы.Шаблон) Тогда
			КлассШаблонаДляПроверки = НовыйIntegrationConnection(Кэш,  Новый Структура("Идентификатор, ИнициироватьДанные", КлассIntegrationConnection.ПараметрыРаботы.Шаблон, Ложь), Отказ);
			Если	КлассШаблонаДляПроверки.ПараметрыРаботы.Статус = "Активен"
				И	(	Не	КлассШаблонаДляПроверки.ПараметрыКонфигурации.subsystem = ПараметрыКонфигурации.subsystem) Тогда
					//Или	Не	КлассШаблонаДляПроверки.ПараметрыКонфигурации.version = ПараметрыКонфигурации.version) Тогда
				Отказ = Истина;
				Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.НовыйIntegrationConnection.НаОсновеКласса",773,,"Не допускается расхождение параметров системы у подключения, созданного по шаблону!");
			КонецЕсли;
		КонецЕсли;
		КлассIntegrationConnection.ПараметрыКонфигурации = ПараметрыКонфигурации;
	КонецЕсли;
	Если ПараметрыКонструктора.Свойство("Ини", ДанныеИни) Тогда
		Если КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
			КлассIntegrationConnection.Данные.Ини = Новый Структура;
		Иначе
			//Дозапросим ини, если не все получены.
			КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		КонецЕсли;
		Для Каждого КлючИЗначениеИни Из ДанныеИни Цикл
			Если КлючИЗначениеИни.Значение = Неопределено Тогда
				Отказ = Истина;
				Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.НовыйIntegrationConnection.НаОсновеКласса",773,,"Не допускается создание подключения при пустой ини!");
			КонецЕсли;
			КлассIntegrationConnection.Данные.Ини.Вставить(КлючИЗначениеИни.Ключ, КлючИЗначениеИни.Значение);
		КонецЦикла;
		КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные = Истина;
		
		//Переформируем меню у класса
		РезультатУстановки = КлассIntegrationConnection_СформироватьСбисМеню(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатУстановки, "ФайлыНастроекСервер.НовыйIntegrationConnection.НаОсновеКласса");
		КонецЕсли;	
		
		//Чистим структуру ини от возможного "мусора"
		ЧистыеИни	= Кэш.ФормаНастроекОбщее.ОчиститьСтруктуруИниОтСлужебныхЗначений(КлассIntegrationConnection.Данные.Ини);
		СписокИни	= КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		
		//Для сравнения дозапрашиваем только те ини, что установлены.
		КлассДляСравнения = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ПараметрыКонфигурации", КлассIntegrationConnection.ПараметрыРаботы.Шаблон, ПараметрыСтандартнойКонфигурации(Кэш, КлассIntegrationConnection.ПараметрыКонфигурации)), Отказ);
		РезультатУстановки = КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассДляСравнения, Новый Структура("СписокИни_ВО", КлассIntegrationConnection.Данные.Ини), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатУстановки, "ФайлыНастроекСервер.НовыйIntegrationConnection.НаОсновеКласса");
		КонецЕсли;
		//1190111968
		РасхожденияИни = ПолучитьРасхождениеИни(ЧистыеИни, Кэш.ФормаНастроекОбщее.ОчиститьСтруктуруИниОтСлужебныхЗначений(КлассДляСравнения.Данные.Ини), Отказ);
		//Помимо заполнения параметров для кэширования настроек, надо дополнить уже готовые данные в кэше
		Для Каждого УстановленныйИни Из ЧистыеИни Цикл
			ИмяИни = УстановленныйИни.Ключ;
			
			Если КлассДляСравнения.Данные.Ини.Свойство(ИмяИни, ИниСравнения) Тогда
				ЕстьТиповая = ИниСравнения.СбисЕстьТиповая;
			Иначе
				ЕстьТиповая = Ложь;
			КонецЕсли;
			ЕстьИзменение	= Не ЕстьТиповая Или РасхожденияИни.Свойство(ИмяИни); 
			Автообновление	= КлассIntegrationConnection.ПараметрыРаботы.Автообновление И ЕстьТиповая;
			
			//Дополнить данные в ини кэша при контроле изменений
			КлассIntegrationConnection.Данные.Ини[ИмяИни].Вставить("СбисЕстьИзменения",		ЕстьИзменение);
			КлассIntegrationConnection.Данные.Ини[ИмяИни].Вставить("СбисЕстьТиповая",		ЕстьТиповая);
			КлассIntegrationConnection.Данные.Ини[ИмяИни].Вставить("СбисАвтообновление",	Автообновление);
			КлассIntegrationConnection.Данные.Ини[ИмяИни].Вставить("СбисСтандартная",			ЕстьТиповая);
			КлассIntegrationConnection.Данные.Ини[ИмяИни].Вставить("СбисПользовательская",		НЕ ЕстьТиповая ИЛИ ЕстьИзменение);
			КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Добавить(ИмяИни);
		КонецЦикла;
	КонецЕсли;
	Возврат КлассIntegrationConnection;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_КлассIntegrationConnection_private

	
//Функция Сохраняет класс IC, возвращает измененный вариант.
&НаКлиенте
Функция		_КлассIntegrationConnection_Записать(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем ОбновитьИниНаСервере, ТихийРежим;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при записи промежуточных данных, вроде меню и параметров
	
	СбисДополнительныеПараметры = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ДопПараметры,,Ложь);
	//Доп.Параметры по-умолчанию
	Если Не СбисДополнительныеПараметры.Свойство("СообщатьПриОшибке") Тогда
		СбисДополнительныеПараметры.Вставить("СообщатьПриОшибке", Ложь);
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ВернутьОшибку") Тогда
		СбисДополнительныеПараметры.Вставить("ВернутьОшибку", Истина);
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ЕстьОтвет") Тогда
		СбисДополнительныеПараметры.Вставить("ЕстьОтвет", Истина);
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Ложь;
	КонецЕсли;	
	ЗаписьНовогоСоединения	= Ложь;
	ЗаписьСбисПараметров	= Истина;
	ПараметрыОтправки = Новый Структура;
	Если	Не КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален"
		И	Не КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
		ПараметрыОтправки.Вставить("id",		КлассIntegrationConnection.Идентификатор);
	Иначе
		ЗаписьНовогоСоединения = Истина;
		ПараметрыОтправки.Вставить("url",		Кэш.ПараметрыСистемы.Конфигурация.URL);
		ПараметрыОтправки.Вставить("service",	Кэш.КэшНастроек.ПараметрыКонфигурации.service);//service для записи берем из параметров конфигурации системы, т.к. может отличаться для работы с конфигом и коннекшеном
		ПараметрыОтправки.Вставить("subsystem",	КлассIntegrationConnection.ПараметрыКонфигурации.subsystem);
		ПараметрыОтправки.Вставить("version",	Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(КлассIntegrationConnection.ПараметрыКонфигурации.version,"СтрокуВЧисло"), "ЧРГ=; ЧН=0; ЧГ=0"));
		КлассIntegrationConnection.Данные.Параметры.Вставить("Service4Config",	Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
		КлассIntegrationConnection.Данные.Параметры.Вставить("nameSubsystem",	Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(,КлассIntegrationConnection.ПараметрыКонфигурации.subsystem));
		Если Не КлассIntegrationConnection.Данные.Параметры.Свойство("comment") Тогда
			КлассIntegrationConnection.Данные.Параметры.Вставить("comment", "Создано обработкой");
		КонецЕсли;
		Если ЗначениеЗаполнено(КлассIntegrationConnection.Идентификатор) Тогда
			//Если требуется создать подключение с конкретным ИД
			ПараметрыОтправки.Вставить("id", КлассIntegrationConnection.Идентификатор);
		КонецЕсли;
	КонецЕсли;
	Если КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
		ПараметрыОтправки.Вставить("for_all", Истина);
	ИначеЕсли ЗначениеЗаполнено(КлассIntegrationConnection.ПараметрыРаботы.Шаблон) Тогда
		ПараметрыОтправки.Вставить("parent", КлассIntegrationConnection.ПараметрыРаботы.Шаблон);
	КонецЕсли;
	ЕстьИниКЗаписи	= Булево(КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Количество());
	ФормированиеМеню=		КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить
						И	КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Отправлять;
	ВыполнитьЗапись	=		ЕстьИниКЗаписи
						Или ЗаписьНовогоСоединения
						Или КлассIntegrationConnection.ПараметрыРаботы.Изменен;
	
	КлассIntegrationConnection.ПараметрыРаботы.Изменен = Ложь;
	//Если это не запись сбиспараметров, то проверим необходимость обновить сбисменю. Если надо, то выполним запись 	
	ini_array = Новый Массив;
	//Необязательные параметры. Если есть, то передаём
	//ПараметрыОтправки.Вставить("name_connection",	Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(КлассIntegrationConnection.Название));
	ПараметрыОтправки.Вставить("name_connection",	КлассIntegrationConnection.Название);
	ПараметрыОтправки.Вставить("auto_update",		КлассIntegrationConnection.ПараметрыРаботы.Автообновление);
	Если	ЗначениеЗаполнено(КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек) Тогда
		ПараметрыОтправки.Вставить("update_date",	Формат(КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек,"ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""));
	КонецЕсли;
	//Если надо апдейтнуть меню по данным, то делаем только если сразу отправим на БЛ
	Если ФормированиеМеню Тогда
		РезультатГенерацииМеню = КлассIntegrationConnection_СформироватьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатГенерацииМеню, "ФайлыНастроекСервер.КлассIntegrationConnection.Записать");
		КонецЕсли;
	КонецЕсли;
	//Конвертнём и добавим в параметры ини к обновлению на сервисе
	Если ЕстьИниКЗаписи Тогда
		ДанныеСпискаИни = КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection,  Новый Структура("Включено", "01"), Отказ);
		КонвертированныеИни	= Новый Структура;
		Для Каждого ИмяИниВО Из  КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить Цикл
			Если Не КлассIntegrationConnection.Данные.Ини.Свойство(ИмяИниВО) Тогда
				Отказ = Истина;
				Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.ЗаписатьConnection", 785, "Ошибка во входящих данных", "Отсутствует файл настроек " + ИмяИниВО + " в данных к отправке!");
			КонецЕсли;
			КонвертированныеИни.Вставить(ИмяИниВО, КлассIntegrationConnection.Данные.Ини[ИмяИниВО]);
		КонецЦикла;
		КонвертированныеИни = ПреобразованиеВОИни_JSONИни_ВыполнитьПреобразование(КонвертированныеИни);
		
		Для Каждого ИмяИниВО Из КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить Цикл
			ЗаписьИни			= СбисОписаниеИни(Кэш);
			ЗначениеИни			= КонвертированныеИни[ИмяИниВО];
			СписокКлючейОчистить= Новый Массив;
			Для Каждого КлючИЗначениеЗначениеИни Из ЗначениеИни Цикл
				Если Лев(КлючИЗначениеЗначениеИни.Ключ, 4) = "Сбис" Тогда
					СписокКлючейОчистить.Добавить(КлючИЗначениеЗначениеИни.Ключ);
				КонецЕсли;
			КонецЦикла;
			Для Каждого КлючОчистить Из СписокКлючейОчистить Цикл
				ЗначениеИни.Удалить(КлючОчистить);
			КонецЦикла;
			
			ИмяИниJson	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ИмяИниВО, "во_json");
			ЭлементКарты= ДанныеСпискаИни.Карта.НайтиПоЗначению(НРег(ИмяИниJson));
			Если ЭлементКарты = Неопределено Тогда
				//Нет такой ини в карте. Неизвестно, что это. Пропускаем.
				Продолжить;
			КонецЕсли;
			ДанныеСписка= ДанныеСпискаИни.Данные[ДанныеСпискаИни.Карта.Индекс(ЭлементКарты)];
			ЗаполнитьЗначенияСвойств(ЗаписьИни, ДанныеСписка);
		
			ЗаписьИни.data = Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ЗначениеИни);
			ini_array.Добавить(ЗаписьИни);
		КонецЦикла;
	КонецЕсли;
	//Добавим меню в список отправляемых ини
	Если ФормированиеМеню Тогда
		ЗаписьИни = СбисОписаниеИниМеню(Кэш);
		ЗаписьИни.data = Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(КлассIntegrationConnection.Данные.Меню);
		ini_array.Добавить(ЗаписьИни);
		ВыполнитьЗапись = Истина;
	КонецЕсли;
	//Добавим СбисПараметры в отправку		
	Если	КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Обновить
		И	КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять
		И	КлассIntegrationConnection.Данные.Параметры.Количество() Тогда
		ПараметрыОтправки.Вставить("json_connection", Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(КлассIntegrationConnection.Данные.Параметры));
		ВыполнитьЗапись = Истина;
	ИначеЕсли КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
		ОбязательныеПараметрыДляПодсключения = Новый Структура("Service4Config, nameSubsystem, comment");
		ЗаполнитьЗначенияСвойств(ОбязательныеПараметрыДляПодсключения, КлассIntegrationConnection.Данные.Параметры);
		ПараметрыОтправки.Вставить("json_connection", Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ОбязательныеПараметрыДляПодсключения));
		ВыполнитьЗапись = Истина;
	КонецЕсли;
	
	Если ВыполнитьЗапись Тогда
		ПараметрыОтправки = Новый Структура("props, ini", ПараметрыОтправки, ini_array);
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисПоказатьСостояние("Запись настроек", Кэш.ГлавноеОкно);
		КонецЕсли;
		Результат = Кэш.Интеграция.ЗаписатьConnection(Кэш, ПараметрыОтправки, СбисДополнительныеПараметры, Отказ);
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;
	КонецЕсли;
	Если Не Отказ Тогда
		//Обновить подключение после записи
		КлассIntegrationConnection.Идентификатор = Результат;
		КлассIntegrationConnection.ПараметрыРаботы.Изменен = Ложь;
		Если Не КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
			КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Пользовательские";
		КонецЕсли;
		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Активен";
		КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Очистить();
		Если КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять Тогда
			КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Обновить = Ложь;
		КонецЕсли;
		Если КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Отправлять Тогда
			КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить = Ложь;
		КонецЕсли;
		//Здесь нужно для того, чтобы если в каталоге отключили узлы, то и в рабочих ини узлов быть не должно. После переполучения, ини очистятся в конверторе.
		Если ЕстьИниКЗаписи Тогда
			ОчиститьОтключенныеУзлы(КлассIntegrationConnection.Данные.Ини);
		КонецЕсли;
	КонецЕсли;

	Возврат	Результат;
КонецФункции

&НаКлиенте
Функция		_КлассIntegrationConnection_ОсновныеПоля(Кэш)
	//Статус				- возможные значнения: "Новый"(по-умолч), "Активен"(актуален), "Удален"(был удалён в процессе работы с БЛ)
	//ТипНастроек			- возможные значнения: "Стандартные"(по-умолч), "Пользовательские", "Шаблон", "Неизвестно"("Пользовательские"/"Шаблон", при чтении)
	//Автообновление		- возможные значнения: True/False - признак автооподбора config под текущую версию
	//Изменен				- возможные значнения: True/False - признак того, менялся ли класс из интерфейса
	//Инициирован			- возможные значнения: True/False - признак того, инитился ли класс по его слепку с БЛ
	//ДатаИзмененияНастроек - Дата. Последнее изменение настроек
	//Шаблон				- УИД шаблона коннекшена, если есть.
	//Пользователь			- ИД пользователя, которому принадлежит коннекшен.
	//ВерсияКонфиг			- Номер версии конфига, из которого был создан коннешен. При отключенном автообновлении берётся версия отсюда.
	

	ПараметрыРаботыIntegrationConnection = Новый Структура	
	("Статус,	ТипНастроек,	Автообновление,	Изменен,ИнициированаШапка,	ИнициированыДанные,	ДатаИзмененияНастроек, Шаблон, Пользователь, ВерсияКонфиг, Демо"
	,"Новый",	"Стандартные",	Истина,			Ложь,	Ложь,				Ложь,				ТекущаяДата());
	//Определяет работу с настройкой:
	//Отправлять- если нет необходимости записывать на сервис, то флаг переключить в ложь. Тогда изменения будут кэшироваться в выбранном подключении
	//Обновить	- флаг изменения в параметрах. Если переключен в истину, то будет проведена отправка на сервис.
	ПараметрыРаботыIntegrationConnection.Вставить("СбисПараметры",	Новый Структура("Обновить, Отправлять", Ложь, Истина));
	ПараметрыРаботыIntegrationConnection.Вставить("СбисМеню",		Новый Структура("Обновить, Отправлять", Ложь, Истина));
	//Список ини, которые требуется отправить на БЛ при записи.
	ПараметрыРаботыIntegrationConnection.Вставить("СбисИни",			Новый Структура("СписокОтправить", Новый Массив));
	Результат = Новый Структура(
	"ПараметрыРаботы,						Данные,									Название,	ПараметрыКонфигурации,	Идентификатор"
	,ПараметрыРаботыIntegrationConnection,	Новый Структура("Ини, Прочие, Меню, Параметры"),"");	
	Возврат Результат;
КонецФункции

//Функция заполняет класс по данным БЛ
&НаКлиенте
Функция		_КлассIntegrationConnection_ЗаполнитьПоДанным(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем ДанныеИниНаЧтение, СтрокаJson, СписокНаКонтроль, ТипИни;
	СбисДанныеБЛ	= ДопПараметры.ДанныеБЛ;
	//Если указано, какие ини читали, то проконтролировать, что всё получено в полном объеме.
	КонтролироватьЧтениеИни = ДопПараметры.Свойство("КонтрольИни", СписокНаКонтроль);
	
	Если Не КлассIntegrationConnection.ПараметрыРаботы.ИнициированаШапка Тогда
		КлассIntegrationConnection.ПараметрыРаботы.ИнициированаШапка = Истина;
		Если СбисДанныеБЛ.Свойство("ID", КлассIntegrationConnection.Идентификатор) Тогда
			КлассIntegrationConnection.Идентификатор = Строка(КлассIntegrationConnection.Идентификатор);
			КлассIntegrationConnection.ПараметрыРаботы.Статус		= "Активен";
			КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек	= "Шаблон";
		Иначе
			КлассIntegrationConnection.Идентификатор = "";
		КонецЕсли;
		ПараметрыКонфигурации	= Новый Структура("service,subsystem,url", СбисДанныеБЛ.service, СбисДанныеБЛ.subsystem);											
		ВерсияКонфига			=  ?(СбисДанныеБЛ.Свойство("version_config"), СбисДанныеБЛ.version_config, СбисДанныеБЛ.version);
		ПараметрыКонфигурации.Вставить("version", ВерсияКонфига);
		КлассIntegrationConnection.ПараметрыКонфигурации = ПараметрыКонфигурации;
		КлассIntegrationConnection.ПараметрыКонфигурации.version = Кэш.ОбщиеФункции.СериализоватьВерсию(КлассIntegrationConnection.ПараметрыКонфигурации.version);
		Если	Не ДопПараметры.Свойство("Перечитать")
			Или	Не ДопПараметры.Перечитать Тогда
			КлассIntegrationConnectionСуществующий = Кэш.КэшНастроек.КэшIntegrationConnection.Получить(КлассIntegrationConnection_Идентификатор(Кэш, КлассIntegrationConnection));
			Если Не КлассIntegrationConnectionСуществующий = Неопределено Тогда
				КлассIntegrationConnection = КлассIntegrationConnectionСуществующий;
				Возврат _КлассIntegrationConnection_ЗаполнитьПоДанным(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
			КонецЕсли;
		КонецЕсли;
		
		Если Не СбисДанныеБЛ.Свойство("auto_update", КлассIntegrationConnection.ПараметрыРаботы.Автообновление) Тогда
			КлассIntegrationConnection.ПараметрыРаботы.Автообновление = Истина;
		ИначеЕсли ТипЗнч(КлассIntegrationConnection.ПараметрыРаботы.Автообновление) = Тип("Строка") Тогда
			КлассIntegrationConnection.ПараметрыРаботы.Автообновление = Кэш.РаботаСJSON.СбисПрочитатьJSON(КлассIntegrationConnection.ПараметрыРаботы.Автообновление);
		КонецЕсли;
		Если СбисДанныеБЛ.Свойство("user", КлассIntegrationConnection.ПараметрыРаботы.Пользователь) Тогда
			КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек	= "Пользовательские";
		Иначе
			КлассIntegrationConnection.ПараметрыРаботы.Пользователь	= "";
		КонецЕсли;
		КлассIntegrationConnection.ПараметрыРаботы.ВерсияКонфиг = Кэш.ОбщиеФункции.СериализоватьВерсию(ВерсияКонфига);
		Если Не СбисДанныеБЛ.Свойство("name_connection", КлассIntegrationConnection.Название) Тогда
			КлассIntegrationConnection.Название	= СбисДанныеБЛ.name_config;
		Иначе//Так, как для полей в JSON идёт двойное экранирование, снимаем его для названия
			Попытка
				КлассIntegrationConnection.Название	= Кэш.РаботаСJSON.СбисПрочитатьJSON("""" + КлассIntegrationConnection.Название + """");
			Исключение
				//Некорректное название. Оставляем как есть?
			КонецПопытки;
		КонецЕсли;
		СбисДанныеБЛ.Свойство("parent", КлассIntegrationConnection.ПараметрыРаботы.Шаблон);
		
		Если СбисДанныеБЛ.Свойство("update_date", КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек) Тогда//Дата последней правки настроек
			КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек =	Дата(Лев(СтрЗаменить(СтрЗаменить(СтрЗаменить(КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек,
													"-",""),
													" ",""),
													":", ""),
													14));
		Иначе
			КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек = ТекущаяДата();
		КонецЕсли;
		
		Если Не ПустаяСтрока(КлассIntegrationConnection.Идентификатор) Тогда
			КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = ?(ПустаяСтрока(КлассIntegrationConnection.ПараметрыРаботы.Пользователь), "Шаблон", "Пользовательские");
		КонецЕсли;
		
		Если Не СбисДанныеБЛ.Свойство("url", ПараметрыКонфигурации.url) Тогда
			ПараметрыКонфигурации.Удалить("url");
		КонецЕсли;
		КлассIntegrationConnection.Данные.Параметры = Новый Структура;
	КонецЕсли;
	//Разбор и обновление сбисПараметров, в кэше всегда актуальные, не пересекаются с установленными
	Если	СбисДанныеБЛ.Свойство("json_connection", СтрокаJson)
		И	ЗначениеЗаполнено(СтрокаJson) Тогда
		СбисСтрокаJson = Кэш.РаботаСJSON.СбисПрочитатьJSON(СтрокаJson);
		Если Не ТипЗнч(СбисСтрокаJson) = Тип("Структура") Тогда
			Отказ = Истина;
			Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.КлассIntegrationConnection.ЗаполнитьПоДанным", 785, "Ошибка во входящих данных", "Неизвестная структура параметров json_connection", СбисСтрокаJson);
		КонецЕсли;
		Если КлассIntegrationConnection.Данные.Параметры = Неопределено Тогда
			КлассIntegrationConnection.Данные.Параметры = Новый Структура;
		КонецЕсли;
		СтруктураРазобранныхПараметров = Кэш.ФормаНастроекОбщее.ОбработатьСтруктуруПараметров(СбисСтрокаJson); 
		Для Каждого ЭлементПараметра Из СтруктураРазобранныхПараметров Цикл
			КлассIntegrationConnection.Данные.Параметры.Вставить(ЭлементПараметра.Ключ, ЭлементПараметра.Значение);
		КонецЦикла;
	КонецЕсли;
	
	//Обработаем данные ини, если имеются
	Если	СбисДанныеБЛ.Свойство("data", ДанныеИниНаЧтение)
		И	ЗначениеЗаполнено(ДанныеИниНаЧтение) Тогда//При пакетном чтении ини, в data будет массив строк.
		Если Не ТипЗнч(ДанныеИниНаЧтение) = Тип("Массив") Тогда
			Списокdata = Новый Массив;
			Списокdata.Добавить(ДанныеИниНаЧтение);
			ДанныеИниНаЧтение = Списокdata;
		Иначе
			Списокdata = ДанныеИниНаЧтение;
		КонецЕсли;
		ДанныеИниНаЧтение = Новый Структура;
		Для Каждого Строкаdata Из Списокdata Цикл
			Попытка
				Соединениеdata = Кэш.РаботаСJSON.СбисПрочитатьJSON(Строкаdata);
				Для	Каждого КлючИЗначение Из Соединениеdata Цикл
					ИмяИни = КлючИЗначение.Ключ;
					Если	КонтролироватьЧтениеИни Тогда
						КлючКонтроля	= НРег(ИмяИни);
						ЗначениеКонтроля= СписокНаКонтроль.Получить(КлючКонтроля);
						Если ЗначениеКонтроля = Неопределено Тогда
							Отказ = Истина;
							Возврат	Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.ЗаполнитьПоДанным", 100, "Ошибка разбора файлов настроек.", КлассIntegrationConnection.Название + СтрЗаменить(": Неизвестная ини {0} в ответе.", "{0}", ИмяИни));
						КонецЕсли;
						СписокНаКонтроль.Удалить(КлючКонтроля);
					КонецЕсли;
					ЗначениеИни = Неопределено;
					Если Не КлючИЗначение.Значение.Свойство("data", ЗначениеИни) Тогда
						ЗначениеИни = КлючИЗначение.Значение;
					КонецЕсли;
					//В меню флаги не нужны
					Если ИмяИни = "сбисМеню" Тогда
						КлассIntegrationConnection.Данные.Меню = ЗначениеИни;
						Продолжить;
					КонецЕсли;
					ДанныеИниНаЧтение.Вставить(ИмяИни, ЗначениеИни);
					//Флаг типовой ини. Если свойства нет, подразумевается, что это и так типовая
					Если КлючИЗначение.Значение.Свойство("standart") Тогда
						ДанныеИниНаЧтение[ИмяИни].Вставить("СбисЕстьТиповая",(КлючИЗначение.Значение.standart = 1));
					Иначе
						ДанныеИниНаЧтение[ИмяИни].Вставить("СбисЕстьТиповая",Истина);
					КонецЕсли;
					Если Не ДанныеИниНаЧтение[ИмяИни].Свойство("ТипИни") И КонтролироватьЧтениеИни Тогда
						ДанныеИниНаЧтение[ИмяИни].Вставить("ТипИни", Новый Структура("Значение", ЗначениеКонтроля.type));
					КонецЕсли;
					//Флаг пользовательской ини. Если свойства нет, подразумевается, что пользовательской тоже нет.
					ДанныеИниНаЧтение[ИмяИни].Вставить("СбисЕстьИзменения",	(КлючИЗначение.Значение.Свойство("custom") И КлючИЗначение.Значение.custom = 1));
					//Флаг автообновления ини. Если включено и есть типовая.
					ДанныеИниНаЧтение[ИмяИни].Вставить("СбисАвтообновление", (КлассIntegrationConnection.ПараметрыРаботы.Автообновление И ДанныеИниНаЧтение[ИмяИни].СбисЕстьТиповая));
					//Флаг указывает на то, есть ли вообще стандартная настрока
					ДанныеИниНаЧтение[ИмяИни].Вставить("СбисСтандартная", ДанныеИниНаЧтение[ИмяИни].СбисЕстьТиповая);
					//Флаг присутсвия доработок, либо полностью пользовательская настройка
					ДанныеИниНаЧтение[ИмяИни].Вставить("СбисПользовательская", НЕ ДанныеИниНаЧтение[ИмяИни].СбисЕстьТиповая ИЛИ ДанныеИниНаЧтение[ИмяИни].СбисЕстьИзменения);
				КонецЦикла;
			Исключение
				Отказ = Истина;
				Возврат	Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.ЗаполнитьПоДанным", 100, "Ошибка разбора файлов настроек.", КлассIntegrationConnection.Название + ": " + ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		Если ЗначениеЗаполнено(ДанныеИниНаЧтение) Тогда
			ПараметрыКонвертации = Новый Структура("ОчищатьОтключенные", Истина);
			ДанныеИни = _КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_Клиент(ДанныеИниНаЧтение, ПараметрыКонвертации);
			Для Каждого КлючИЗначениеИни Из ДанныеИни Цикл
				ИмяИни	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначениеИни.Ключ);
				Если		КлючИЗначениеИни.Значение.Свойство("ТипИни", ТипИни)
					И	Не	Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни.Найти(ТипИни.Значение) = Неопределено Тогда
					Если КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
						КлассIntegrationConnection.Данные.Ини = Новый Структура;
					КонецЕсли;
					КлассIntegrationConnection.Данные.Ини.Вставить(ИмяИни, КлючИЗначениеИни.Значение);
				Иначе
					Если КлассIntegrationConnection.Данные.Прочие = Неопределено Тогда
						КлассIntegrationConnection.Данные.Прочие = Новый Структура;
					КонецЕсли;
					КлассIntegrationConnection.Данные.Прочие.Вставить(ИмяИни, КлючИЗначениеИни.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если	КонтролироватьЧтениеИни
		И	СписокНаКонтроль.Количество() Тогда
		СтрокаОшибки = "";
		Для Каждого  ЭлементНаКонтроль Из СписокНаКонтроль Цикл
			СтрокаОшибки = СтрокаОшибки + ЭлементНаКонтроль.Значение.name + ", ";
		КонецЦикла;
		СтрокаОшибки = Лев(СтрокаОшибки, СтрДлина(СтрокаОшибки) - 2);
		Отказ = Истина;
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.ЗаполнитьПоДанным", 100, "Ошибка разбора файлов настроек.", КлассIntegrationConnection.Название + СтрЗаменить(": не получены файлы настроек {0}.", "{0}", СтрокаОшибки));
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

//Функция возвращает ини "от класса"
&НаКлиенте
Функция		_КлассIntegrationConnection_ВыполнитьЧтениеСБЛ(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем СписокИниПолучить, ЗначениеИни, ДопПараметрыЧтения;
	Если Не	ДопПараметры.Свойство("ДополнительныеПараметры", ДопПараметрыЧтения) Тогда
		ДопПараметрыЧтения = Новый Структура("ЕстьРезультат", Истина);
	КонецЕсли;
	ДопПараметры.Свойство("СписокИни", СписокИниПолучить);
	Если СписокИниПолучить = "все" Тогда
		СписокИниПолучить = Новый Массив;
	КонецЕсли;
	
	ПараметрыСообщения = Новый Структура();
	МетодЧтения = "ReadConnection";
	Если	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Стандартные"
		Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
		МетодЧтения = "ReadConfig";
	КонецЕсли;
		
	Если МетодЧтения = "ReadConfig" Тогда
		Запрос_Фильтр = ПараметрыСтандартнойКонфигурации(Кэш, КлассIntegrationConnection.ПараметрыКонфигурации);
		Запрос_Фильтр.Вставить("version", Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(Запрос_Фильтр.version, "СтрокуВЧисло"), "ЧРГ=; ЧН=0; ЧГ=0"));
		
		ПараметрыСообщения = Новый Структура("props, ini", Запрос_Фильтр, СписокИниПолучить);
		
		Если ПустаяСтрока(ПараметрыСообщения.props.subsystem) Тогда//Это пользовательская конфигурация. Генерируем ряд обязательных параметров, всё остальное берётся по-умолчанию.
			ДанныеБЛ = Новый Структура
			("name_config,						auto_update,service,							subsystem,							version"
			,"Пользовательская конфигурация",	Ложь,		ПараметрыСообщения.props.service,	ПараметрыСообщения.props.subsystem,	ПараметрыСообщения.props.version);
		Иначе
			ДанныеБЛ = ВыполнитьПолучениеИни(Кэш, МетодЧтения, ПараметрыСообщения, ДопПараметрыЧтения, Отказ);//Получаем типовые конфиги.
			Если ДанныеБЛ = Неопределено Тогда
				Отказ = Истина;
				ИмяЗапрашиваемойКонфигурации = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(Запрос_Фильтр.service, Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(Запрос_Фильтр));
				Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.ВыполнитьЧтениеИни", 765, "Значение не найдено в таблице настроек", СтрЗаменить("Настройки {0} не найдены!", "{0}", ИмяЗапрашиваемойКонфигурации));
			КонецЕсли;
		КонецЕсли;
	Иначе
		Запрос_Фильтр = Новый Структура;
		Запрос_Фильтр.Вставить("id",		Строка(КлассIntegrationConnection_Идентификатор(Кэш, КлассIntegrationConnection, "Чтение")));
		Запрос_Фильтр.Вставить("version",	Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(КлассIntegrationConnection.ПараметрыКонфигурации.Version,"СтрокуВЧисло"),"ЧРГ=; ЧН=0; ЧГ=0"));
		Если	ДопПараметры.Свойство("ТолькоПользовательские")
			И	ДопПараметры.ТолькоПользовательские Тогда
			//Если получаем только пользовательские изменения
			Запрос_Фильтр.Вставить("read_config", Ложь);
		КонецЕсли;	
		ПараметрыСообщения = Новый Структура("props, ini", Запрос_Фильтр, СписокИниПолучить);		
		ДанныеБЛ = ВыполнитьПолучениеИни(Кэш, МетодЧтения, ПараметрыСообщения, ДопПараметрыЧтения, Отказ);
	КонецЕсли;
	Если Отказ Тогда 
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеБЛ, "ФайлыНастроекСервер.КлассIntegrationConnection.ВыполнитьЧтениеСБЛ");
	КонецЕсли;
	Возврат ДанныеБЛ;
КонецФункции

&НаКлиенте                                  
Функция		_КлассIntegrationConnection_ИнитКоннекшен(Кэш, ДопПараметры) Экспорт
	
	ПараметрыВызова1 = Новый Структура(
	"ExtSysType,Connector, ExtSysSubtype, ExtSysSubtypeTitle, ExtSysSubtypeVersion, ProductId, ProductVersion, ExtSysUid, ConnectionId",
	"1С",		"Dom1C");
	ПараметрыВызова1.ExtSysSubtype			= Кэш.ПараметрыСистемы.Конфигурация.Имя;
	ПараметрыВызова1.ExtSysSubtypeTitle		= Кэш.ПараметрыСистемы.Конфигурация.ПодробнаяИнформация;
	ПараметрыВызова1.ExtSysSubtypeVersion	= Кэш.ПараметрыСистемы.Конфигурация.Версия;
	ПараметрыВызова1.ExtSysUid				= Кэш.ПараметрыСистемы.Конфигурация.УИДИнтеграции;
	ПараметрыВызова1.ProductVersion			= Кэш.ПараметрыСистемы.Обработка.Версия;
	ПараметрыВызова1.ProductId				= Кэш.ПараметрыСистемы.Обработка.ИмяПродукта;
	Если ДопПараметры.Свойство("Идентификатор") Тогда
		ПараметрыВызова1.ConnectionId		= ДопПараметры.Идентификатор;
	КонецЕсли;
	
	ПараметрыВызова2	= Новый Структура("Format, Type", Кэш.КэшНастроек.ПараметрыКонфигурации.service, "Меню");
	ПараметрыИнит		= Новый Структура("Params, ExtSysSettings", ПараметрыВызова1, ПараметрыВызова2);
	ДопПараметрыВызова	= Новый Структура("Кэш, Отказ", Кэш, Ложь);
	РезультатВызова		= Кэш.Интеграция.АПИ3_ИнитКоннекшен(ПараметрыИнит, ДопПараметрыВызова);
	Если ДопПараметрыВызова.Отказ Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение(РезультатВызова, "ФайлыНастроекОбщее.Вызов_ИнитКоннекшен");
	КонецЕсли;
	
	Возврат РезультатВызова;
КонецФункции

//Процедура выполняет конвертацию полученных ини после их получения
&НаКлиенте
Функция		_КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_Клиент(ДанныеИни, ПараметрыКонвертации)
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат _КлассIntegrationConnection_ПреобразованиеJSONИниВОИни(ДанныеИни, ПараметрыКонвертации);
	//#Иначе
	//	Возврат _КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_Сервер(ДанныеИни, ПараметрыКонвертации);
	//#КонецЕсли	
КонецФункции

//Процедура выполняет конвертацию полученных ини после их получения
&НаКлиенте
Функция		_КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_Сервер(Знач ДанныеИни, Знач ПараметрыКонвертации)
	Возврат _КлассIntegrationConnection_ПреобразованиеJSONИниВОИни(ДанныеИни, ПараметрыКонвертации)
КонецФункции

//Процедура выполняет конвертацию полученных ини после их получения
&НаКлиенте
Функция		_КлассIntegrationConnection_ПреобразованиеJSONИниВОИни(ДанныеИни, ПараметрыКонвертации)
	Ини = Новый Структура();
	Для Каждого КлючИЗначение Из ДанныеИни Цикл
		Если КлючИЗначение.Ключ = "СбисМеню" Тогда
			ЗначениеИни = КлючИЗначение.Значение;
		Иначе
 			ЗначениеИни = _КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_ВыполнитьПреобразование(КлючИЗначение.Значение, ПараметрыКонвертации);
			Ини.Вставить(КлючИЗначение.Ключ , ЗначениеИни);
		КонецЕсли;
	КонецЦикла;
	Возврат Ини;
КонецФункции

//Функция преобразует структуру файлов настроек к "привычному" для обработки виду.
&НаКлиенте
Функция		_КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_ВыполнитьПреобразование(КэшИни, ДопПараметры) Экспорт
	
	СтруктураНастроек	= Новый	Структура;//
	КонтекстКонвертации	= Новый Структура;
	Если Не ДопПараметры.Свойство("Уровень") Тогда
		КонтекстКонвертации.Вставить("Уровень", 0);
	КонецЕсли;
		Для Каждого КлючЗначениеПараметра Из ДопПараметры	Цикл 
			КонтекстКонвертации.Вставить(КлючЗначениеПараметра.Ключ, КлючЗначениеПараметра.Значение);
		КонецЦикла;
	КонтекстКонвертации.Уровень = КонтекстКонвертации.Уровень + 1;
	Для Каждого Элемент Из КэшИни Цикл
		Если	Элемент.Ключ="СписокДокументов" Тогда
			Продолжить;
		КонецЕсли;
		Если	ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			ЭлементЗначение = Неопределено;
			Если	Элемент.Значение.Свойство("Значение",ЭлементЗначение)
				И	ТипЗнч(ЭлементЗначение) = Тип("Структура") Тогда
				СтруктураВставки = Новый Структура;
				ЭлементИни = Элемент.Значение;
				Для Каждого ЭлементСтруктуры Из ЭлементЗначение Цикл
					СтруктураВставки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);//	
				КонецЦикла;
				СтруктураНастроек.Вставить(Элемент.Ключ, _КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_ВыполнитьПреобразование(СтруктураВставки,КонтекстКонвертации));//					
			Иначе
				СтруктураНастроек.Вставить(Элемент.Ключ, _КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_ВыполнитьПреобразование(Элемент.Значение,КонтекстКонвертации));//
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ПодСтруктура = Новый Структура;
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				СтруктураЭлемента = Новый Структура;
				Для Каждого Поле Из ЭлементМассива Цикл
					Если Поле.Ключ<>"Имя" Тогда
						СтруктураЭлемента.Вставить(Поле.Ключ, Поле.Значение);	
					КонецЕсли;
				КонецЦикла;
				КлючПодструктуры = ЭлементМассива.Имя;
				ПодСтруктура.Вставить(КлючПодструктуры,СтруктураЭлемента);	
			КонецЦикла;
			КонтекстКонвертации.Вставить("УровеньМассив", КонтекстКонвертации.Уровень);
			КлючВставить	= Элемент.Ключ;
			ЗначениеВставить= _КлассIntegrationConnection_ПреобразованиеJSONИниВОИни_ВыполнитьПреобразование(ПодСтруктура,КонтекстКонвертации);//
			Если	КлючВставить = "Значение"
				И	КэшИни.Количество() = 1
				И	ДопПараметры.Свойство("УровеньМассив")
				И	КонтекстКонвертации.Уровень - ДопПараметры.УровеньМассив = 2 Тогда
				//На 2 уровеня выше был массив, значит это может быть структура с удаленным дублирующимся именем . Пример: <Сотрудник Имя="Сотрудник"><Элемент/></Сотрудник> Превращается в {"Сотрудник": {"Элемент"}}
				СтруктураНастроек = ЗначениеВставить;//
			Иначе
				СтруктураНастроек.Вставить(Элемент.Ключ, ЗначениеВставить);//
			КонецЕсли;
			КонтекстКонвертации.Удалить("УровеньМассив");
		ИначеЕсли Лев(Элемент.Ключ,6)="Отбор_" Тогда
			ИмяОтбора = Сред(Элемент.Ключ, 7);
			Если	Элемент.Значение = ""
				И	КонтекстКонвертации.Свойство("ОчищатьОтключенные")
				И	КонтекстКонвертации.ОчищатьОтключенные Тогда
				Продолжить;//Отключенные узлы отбора не попадают в итоговую инишку.
			КонецЕсли;
			Если Не СтруктураНастроек.Свойство("Отбор") Тогда
				СтруктураНастроек.Вставить("Отбор", Новый Структура(ИмяОтбора,Элемент.Значение));//			
			Иначе
				СтруктураНастроек.Отбор.Вставить(ИмяОтбора,Элемент.Значение);
			КонецЕсли;
		Иначе
			ЗначениеКонтекста = Неопределено;
			Если КонтекстКонвертации.Свойство("Удалять",ЗначениеКонтекста)
				И ЗначениеКонтекста = Элемент.Ключ Тогда
				Продолжить;
			ИначеЕсли	КонтекстКонвертации.Свойство("ОбернутьЗначение", ЗначениеКонтекста)
				И	Не	ЗначениеКонтекста = Элемент.Ключ Тогда
				СтруктураНастроек.Вставить(Элемент.Ключ, Новый Структура(ЗначениеКонтекста, Элемент.Значение));
			Иначе
				СтруктураНастроек.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураНастроек
	
КонецФункции

//Функция преобразует структуру файлов настроек к "привычному" для обработки виду.
&НаКлиенте
Функция		_КлассIntegrationConnection_СтрукутраСБИСПараметровПоУмолчанию()
	Возврат Новый Структура("ДатаПоследнегоЗапросаСтатусов, ИдентификаторПоследнегоСобытия, ДатНачЧтенияСтатусов, ДатКнцЧтенияСтатусов", "", "", "", "");
КонецФункции


#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_КлассIntegrationConnection_public

&НаКлиенте
Функция		КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем ТипНастроекДляНазвания;
	Если Не ДопПараметры.Свойство("Тип", ТипНастроекДляНазвания) Тогда
		ТипНастроекДляНазвания = КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек;
	КонецЕсли;
	//Если есть шаблон, то название генерируем по шаблону.
	Если	Не  ТипНастроекДляНазвания = "Стандартные"
		И		ЗначениеЗаполнено(КлассIntegrationConnection.ПараметрыРаботы.Шаблон) Тогда
		КлассIntegrationШаблон = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ИнициироватьДанные", КлассIntegrationConnection.ПараметрыРаботы.Шаблон, Ложь), Отказ);
		КлассIntegrationConnectionНазвание = КлассIntegrationШаблон.Название;
	Иначе	
		ПрефиксНастроек = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(КлассIntegrationConnection.ПараметрыКонфигурации);
		КлассIntegrationConnectionНазвание = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(КлассIntegrationConnection.ПараметрыКонфигурации.service,ПрефиксНастроек);
	КонецЕсли;
	Если		ТипНастроекДляНазвания = "Шаблон" Тогда
		КлассIntegrationConnectionНазвание = "Шаблон для " + КлассIntegrationConnectionНазвание;
	ИначеЕсли   ТипНастроекДляНазвания = "Создание по шаблону" Тогда
		КлассIntegrationConnectionНазвание = "Создание по шаблону " + КлассIntegrationConnectionНазвание;
	КонецЕсли;
	Возврат КлассIntegrationConnectionНазвание;
КонецФункции

&НаКлиенте
Функция		КлассIntegrationConnection_ИзменитьТип(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	ТекущийТипКласс = КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек;
	Если ДопПараметры.Тип = "Создание по шаблону" Тогда
		Если		Не	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
			Отказ = Истина;
			Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.ИзменитьТип", 773, "Ошибка при изменении типа настроек", СтрЗаменить("Класс настроек  {0} не шаблон!", "{0}", КлассIntegrationConnection.Название));
		ИначеЕсли		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
					Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален" Тогда
			Отказ = Истина;
			Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.ИзменитьТип", 773, "Ошибка при изменении типа настроек", СтрЗаменить("Класс настроек  {0} не записан!", "{0}", КлассIntegrationConnection.Название));
		КонецЕсли;
		НовыйКлассIntegrationConnection = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура, Отказ) Тогда
			НовыйКлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		КонецЕсли;
		НовыйКлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый";
		НовыйКлассIntegrationConnection.ПараметрыРаботы.Шаблон = КлассIntegrationConnection.Идентификатор;
		НовыйКлассIntegrationConnection.Идентификатор = "";
		КлассIntegrationConnection = НовыйКлассIntegrationConnection;
	КонецЕсли;
	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = ДопПараметры.Тип;
	Если ТекущийТипКласс = "Стандартные" Тогда
		//Меняется со стандартного конфига на что-то иное
		КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если ДопПараметры.Тип = "Пользовательские" Тогда
			КлассIntegrationConnection.ПараметрыРаботы.Пользователь = Кэш.ГлавноеОкно.Пользователь;
		КонецЕсли;
	КонецЕсли;
	Возврат КлассIntegrationConnection;
КонецФункции

&НаКлиенте
Процедура	КлассIntegrationConnection_Изменить(КлассIntegrationConnection, ПараметрыИзменить)
	Кэш		= ПараметрыИзменить.Кэш;
	Отказ	= Ложь;
	НовыйКлассIntegrationConnection = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
	Если Отказ Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение(НовыйКлассIntegrationConnection, "ФайлыНастроекСервер.КлассIntegrationConnection.Изменить");
	КонецЕсли;
	Если ПараметрыИзменить.Свойство("Тип") Тогда
		ТекущийТипКласс = КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек;
		Если ПараметрыИзменить.Тип = "Создание по шаблону" Тогда
			Если		Не	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
				МодульОбъектаКлиент().ВызватьСбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.Изменить", 773, "Ошибка при изменении типа настроек", СтрЗаменить("Класс настроек  {0} не шаблон!", "{0}", КлассIntegrationConnection.Название));
			ИначеЕсли		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
						Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален" Тогда
				МодульОбъектаКлиент().ВызватьСбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.Изменить", 773, "Ошибка при изменении типа настроек", СтрЗаменить("Класс настроек  {0} не записан!", "{0}", КлассIntegrationConnection.Название));
			КонецЕсли;
			Если КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура, Отказ) Тогда
				НовыйКлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ПараметрыИзменить, Отказ);
			КонецЕсли;
			НовыйКлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый";
			НовыйКлассIntegrationConnection.ПараметрыРаботы.Шаблон = КлассIntegrationConnection.Идентификатор;
			НовыйКлассIntegrationConnection.Идентификатор = "";
		КонецЕсли;
		НовыйКлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = ПараметрыИзменить.Тип;
		Если ТекущийТипКласс = "Стандартные" Тогда
			//Меняется со стандартного конфига на что-то иное
			НовыйКлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, НовыйКлассIntegrationConnection, ПараметрыИзменить, Отказ);
			Если ПараметрыИзменить.Тип = "Пользовательские" Тогда
				НовыйКлассIntegrationConnection.ПараметрыРаботы.Пользователь = Кэш.ГлавноеОкно.Пользователь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыИзменить.Свойство("ПараметрыКонфигурации") Тогда
		ПараметрыИнит = Новый Структура("ПараметрыКонфигурации, ИнициироватьДанные", ПараметрыИзменить.ПараметрыКонфигурации, КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные);
		НовыйКлассIntegrationConnection = НовыйIntegrationConnection(Кэш, ПараметрыИнит, Отказ);
		Если Отказ Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(НовыйКлассIntegrationConnection, "ФайлыНастроекСервер.КлассIntegrationConnection.Изменить");
		КонецЕсли;

		НовыйКлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить = Истина;
		Если	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон"
			И	НовыйКлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
			КлассIntegrationConnection_Изменить(НовыйКлассIntegrationConnection, Новый Структура("Тип, Кэш", "Шаблон", Кэш));
			НовыйКлассIntegrationConnection.Идентификатор = КлассIntegrationConnection.Идентификатор;
		КонецЕсли;
	КонецЕсли;

	КлассIntegrationConnection = НовыйКлассIntegrationConnection;
	
КонецПроцедуры

//Функция дозаполняет класс ини недостающими данными
&НаКлиенте
Функция		КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем СписокИниПоиска, ДанныеСпискаДляЧтения;
	ПараметрыЗапросаИни	= Новый Структура;
	Если Не ДопПараметры.Свойство("ДанныеСписка", ДанныеСпискаДляЧтения) Тогда
		//Если требуется получить список, идентичный установленным ини
		Если ДопПараметры.Свойство("СписокИни_ВО", СписокИниПоиска) Тогда
			СтруктураИскать = Новый Структура("Включено, Имя", "01", Новый Массив);
			Если ТипЗнч(СписокИниПоиска) = Тип("Структура") Тогда
				Для Каждого УстановленныйФайл Из СписокИниПоиска Цикл
					СтруктураИскать.Имя.Добавить(ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, УстановленныйФайл.Ключ, "во_json"));
				КонецЦикла;
			Иначе	
				Для Каждого УстановленныйФайл Из ДопПараметры.СписокИни_ВО Цикл
					СтруктураИскать.Имя.Добавить(ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, УстановленныйФайл, "во_json"));
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
            //Ини не определены, берём все включенные
            СтруктураИскать = Новый Структура("Включено", "1");
		Иначе
			//Ищем ини те, что установлены в структуре но не определены
			СтруктураИскать = Новый Структура("Включено, Имя", "01", Новый Массив);
			Для Каждого КлючИЗначениеИни Из КлассIntegrationConnection.Данные.Ини Цикл
				Если Не КлючИЗначениеИни.Значение = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтруктураИскать.Имя.Добавить(ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначениеИни.Ключ, "во_json"));
			КонецЦикла;
			Если Не СтруктураИскать.Имя.Количество() Тогда
				Возврат КлассIntegrationConnection.Данные.Ини;
			КонецЕсли;	
		КонецЕсли;
		ПараметрыСборкаСписка = Новый Структура("Искать", СтруктураИскать);
		Если ДопПараметры.Свойство("ДоступныеТипыИни") Тогда
			ПараметрыСборкаСписка.Вставить("ДоступныеТипыИни", ДопПараметры.ДоступныеТипыИни);
		КонецЕсли;
		//Пропустим требуемый список через сбисМеню подключения на предмет того, а есть ли там вообще такая ини
		ДанныеСписка = КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, ПараметрыСборкаСписка, Отказ);
		Если Отказ Тогда
			Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеСписка, "ФайлыНастроекСервер.КлассIntegrationConnection.ДозапроситьИни");
		КонецЕсли;
		ДанныеСпискаДляЧтения = ДанныеСписка["Данные"];
	КонецЕсли;
	ПараметрыЗапросаИни.Вставить("СписокИни", ДанныеСпискаДляЧтения);
	Если	ДопПараметры.Свойство("ТолькоПользовательские") Тогда
		ПараметрыЗапросаИни.Вставить("ТолькоПользовательские", ДопПараметры.ТолькоПользовательские);
	КонецЕсли;

	//Лутаем ини по списку
	РезультатДозапроса = КлассIntegrationConnection_ПолучитьИни(Кэш, КлассIntegrationConnection, ПараметрыЗапросаИни, Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(РезультатДозапроса, "ФайлыНастроекСервер.КлассIntegrationConnection.ДозапроситьИни");
	КонецЕсли;
	ПолучитьТолькоПользовательскиеИзменения = ДопПараметры.Свойство("ТолькоПользовательские") И ДопПараметры.ТолькоПользовательские;
	
	Результат = Новый Структура;
	Для Каждого ЭлементСписка Из ДанныеСпискаДляЧтения Цикл
		КлючИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементСписка.name);
		Если Не		РезультатДозапроса.Свойство(КлючИни)
				И	ПолучитьТолькоПользовательскиеИзменения Тогда
			Продолжить;
		КонецЕсли;
		Результат.Вставить(КлючИни, РезультатДозапроса[КлючИни]);
	КонецЦикла;
	Возврат Результат;
КонецФункции

//Функция определяет наличие изменений в выбранных настройках. осущствлённых пользователем
&НаКлиенте                                  
Функция		КлассIntegrationConnection_ЕстьИзменения(Кэш, КлассIntegrationConnection, Отказ)
	//Оценка по шапке
	Если	КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Количество()
		Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален"
		Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
		Или	КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить
		Или	КлассIntegrationConnection.ПараметрыРаботы.Изменен Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДопПараметрыЧтения = Новый Структура("ТихийРежим",Истина);
	КлассIntegrationConnectionДоИзменений = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ПараметрыКонфигурации, ДополнительныеПараметры", КлассIntegrationConnection.Идентификатор, КлассIntegrationConnection.ПараметрыКонфигурации, ДопПараметрыЧтения), Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnectionДоИзменений, "ФайлыНастроекСервер.КлассIntegrationConnection.ЕстьИзменения");
	КонецЕсли;

	Если	Не	КлассIntegrationConnection.ПараметрыРаботы.Автообновление	= КлассIntegrationConnectionДоИзменений.ПараметрыРаботы.Автообновление
		Или	Не	КлассIntegrationConnection.Название							= КлассIntegrationConnectionДоИзменений.Название Тогда
		Возврат Истина;
	КонецЕсли;
	ДанныеСписка = КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, ДопПараметрыЧтения, Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnectionДоИзменений, "ФайлыНастроекСервер.КлассIntegrationConnection.ЕстьИзменения");
	КонецЕсли;
	//Сравним состав ини
	МассивПроверено = Новый Массив;
	Для Каждого ЭлементКарты Из ДанныеСписка.Карта Цикл
		ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементКарты.Представление);
		
		Если КлассIntegrationConnectionДоИзменений.Данные.Ини.Свойство(ИмяИни) Тогда
			МассивПроверено.Добавить(ИмяИни);
			Продолжить;
		КонецЕсли;
		Возврат Истина;
	КонецЦикла;
	Если Не КлассIntegrationConnectionДоИзменений.Данные.Ини.Количество() = МассивПроверено.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;//Пока инишки не сравниваем, слишком тяжёлый механизм.
		
	//Сравним значения ини.
	РезультатДозапроса = КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnectionДоИзменений, Новый Структура, Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(РезультатДозапроса, "ФайлыНастроекСервер.КлассIntegrationConnection.ЕстьИзменения");
	КонецЕсли;
	Если ИниРазличаются(Кэш, КлассIntegrationConnection.Данные.Ини, КлассIntegrationConnectionДоИзменений.Данные.Ини, Отказ) Тогда
		Для Каждого КлючИЗначениеИни Из Кэш.Ини Цикл
			КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Добавить(КлючИЗначениеИни.Ключ)
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;	
	Возврат Ложь;
	
КонецФункции

//Возвращает идентификатор класса 
&НаКлиенте
Функция		КлассIntegrationConnection_Идентификатор(Кэш, КлассIntegrationConnection, Режим="Общий") 
	Если ЗначениеЗаполнено(КлассIntegrationConnection.Идентификатор) Тогда
		Возврат КлассIntegrationConnection.Идентификатор;
	ИначеЕсли Режим = "Общий" Тогда
		Возврат Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(КлассIntegrationConnection.ПараметрыКонфигурации)
	ИначеЕсли Режим = "Чтение" Тогда
		Если		ЗначениеЗаполнено(КлассIntegrationConnection.ПараметрыРаботы.Шаблон) Тогда
			Возврат КлассIntegrationConnection.ПараметрыРаботы.Шаблон;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

//Инициализирует класс IC по идентификатору, либо по данным конфигурации
&НаКлиенте
Функция		КлассIntegrationConnection_Инициализировать(Кэш, ДопПараметры, Отказ)
	Перем КлассIntegrationConnection, ПарметрыКонфигурации, СписокИниПолучить, ДанныеБЛ;
	//Если есть класс, то проинитим его. Если класса нет, то поднимем экземпляр и отправим его в инит.
	Если Не ДопПараметры.Свойство("КлассIntegrationConnection", КлассIntegrationConnection) Тогда
		КлассIntegrationConnection = _КлассIntegrationConnection_ОсновныеПоля(Кэш);
		Если Не ДопПараметры.Свойство("ПараметрыКонфигурации", ПарметрыКонфигурации) Тогда
			ПарметрыКонфигурации = Кэш.КэшНастроек.ПараметрыКонфигурации;
		КонецЕсли;
		КлассIntegrationConnection.ПараметрыКонфигурации = ПарметрыКонфигурации;
		Если	ДопПараметры.Свойство("Идентификатор", КлассIntegrationConnection.Идентификатор)
			И	ЗначениеЗаполнено(КлассIntegrationConnection.Идентификатор) Тогда
			КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Неизвестно";
			КлассIntegrationConnection.ПараметрыРаботы.Статус = "Активен";
		Иначе
			КлассIntegrationConnection.ПараметрыКонфигурации = ПараметрыСтандартнойКонфигурации(Кэш, КлассIntegrationConnection.ПараметрыКонфигурации);
		КонецЕсли;
	КонецЕсли;
	ИнициироватьДанные =	Не 	ДопПараметры.Свойство("ИнициироватьДанные")
						Или		ДопПараметры.ИнициироватьДанные;
	
	//Либо передаём данные БЛ извне (списочные методы), либо формируем по классу
	Если Не ДопПараметры.Свойство("ДанныеБЛ", ДанныеБЛ) Тогда
		Если ИнициироватьДанные Тогда
			СписокИниПолучить = Новый Массив;
			Если КлассIntegrationConnection.Данные.Меню = Неопределено Тогда
				СписокИниПолучить.Добавить(СбисОписаниеИниМеню(Кэш));
			КонецЕсли;
			Если		КлассIntegrationConnection.Данные.Ини = Неопределено
				Или	Не	КлассIntegrationConnection.Данные.Ини.Свойство("Конфигурация")
				Или		КлассIntegrationConnection.Данные.Ини.Конфигурация = Неопределено Тогда
				СписокИниПолучить.Добавить(Новый Структура("name, type, active, data", "Конфигурация", "Система", Истина));
			КонецЕсли;
			Если Не СписокИниПолучить.Количество() Тогда
				СписокИниПолучить = Неопределено;//Иначе придут все ини
			КонецЕсли;
			ПараметрыЧтенияИни = Новый Структура("СписокИни", СписокИниПолучить);
		Иначе
			ПараметрыЧтенияИни = Новый Структура("СписокИни", СписокИниПолучить);
		КонецЕсли;
		ДанныеБЛ = _КлассIntegrationConnection_ВыполнитьЧтениеСБЛ(Кэш, КлассIntegrationConnection, ПараметрыЧтенияИни, Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеБЛ, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
	КонецЕсли;
	ПараметрыОбработки = Новый Структура("ДанныеБЛ", ДанныеБЛ);
	Если ДопПараметры.Свойство("Перечитать") Тогда
		ПараметрыОбработки.Вставить("Перечитать", ДопПараметры.Перечитать);
	КонецЕсли;
	Если ЗначениеЗаполнено(СписокИниПолучить) Тогда
		СписокНаКонтроль = Новый Соответствие;
		Для Каждого ЭлементСпискаПолучить Из СписокИниПолучить Цикл
			СписокНаКонтроль.Вставить(НРег(ЭлементСпискаПолучить.name), ЭлементСпискаПолучить);
		КонецЦикла;
		ПараметрыОбработки.Вставить("КонтрольИни", СписокНаКонтроль);
	КонецЕсли;
	//При инициализации не требуется проверять шаблон. Либо есть данные по ИД, либо это конфиг, либо ошибка - нет подключения
	РезультатОбработки = _КлассIntegrationConnection_ЗаполнитьПоДанным(Кэш, КлассIntegrationConnection, ПараметрыОбработки, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
	ИначеЕсли ИнициироватьДанные Тогда
		//Инициируем структуру ини пустыми значениями
		ДанныеСписка = КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
		КонецЕсли;
		Если КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
			КлассIntegrationConnection.Данные.Ини = Новый Структура;
		КонецЕсли;
		Для Каждого ЭлементСписка Из ДанныеСписка.Данные Цикл
			ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементСписка.name);
			Если КлассIntegrationConnection.Данные.Ини.Свойство(ИмяИни) Тогда
				Продолжить;
			КонецЕсли;
			КлассIntegrationConnection.Данные.Ини.Вставить(ИмяИни, Неопределено);
		КонецЦикла;
		КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные = Истина;
	КонецЕсли;
	//Если КлассIntegrationConnection.ПараметрыРаботы.ВерсияКонфиг = Неопределено Тогда
	//	ПараметрыСтандартнойКонфигурации = НайтиТиповойКонфигСервиса(Кэш, КлассIntegrationConnection.ПараметрыКонфигурации);
	//	КлассIntegrationConnection.ПараметрыРаботы.ВерсияКонфиг = ПараметрыСтандартнойКонфигурации.version;
	//КонецЕсли;

	Если	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Стандартные"
		И	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
		//Для конфигов установим своё название
		КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		КлассIntegrationConnection.Данные.Параметры = КлассIntegrationConnection_ПолучитьПараметрыСБИС(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
		КонецЕсли;
	КонецЕсли;
	
	Возврат КлассIntegrationConnection;
КонецФункции

//Функция дозапрашивает меню при необходимости и возвращает список ини по меню с параметрами
&НаКлиенте
Функция		КлассIntegrationConnection_Очистить(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ=Ложь)
	Если	ДопПараметры.Свойство("Ини")
		И	ДопПараметры.Ини Тогда
		КлассIntegrationConnection.Данные.Ини = Неопределено;
		КлассIntegrationConnection.Данные.Меню = Неопределено;
		КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные = Ложь;
		КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить = Ложь;
		КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Очистить();
	КонецЕсли;
КонецФункции
	
//Функция возвращает ини "от класса"
&НаКлиенте
Функция		КлассIntegrationConnection_ПолучитьИни(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем МассивИниКЗапросу, ЗначениеИни, ДопПараметрыЧтения, СтруктураИниРезультат;
	
	РекурсивныйВызов = Ложь;
	ИдКласса = КлассIntegrationConnection_Идентификатор(Кэш, КлассIntegrationConnection);
	//Чтобы изменениями класса не сломать полученное, создаём отдельный экземпляр для чтения ини
	Если		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
		И	Не	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда
		//Если новый класс, то либо конфиг, либо шаблон
		КлассДляЧтения = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ПараметрыКонфигурации, ИнициироватьДанные", КлассIntegrationConnection.ПараметрыРаботы.Шаблон, КлассIntegrationConnection.ПараметрыКонфигурации, Ложь), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(КлассДляЧтения, "ФайлыНастроекСервер.КлассIntegrationConnection.ПолучитьИни");
		КонецЕсли;
		РекурсивныйВызов = Истина;
	ИначеЕсли 	ДопПараметры.Свойство("ТолькоПользовательские")
			И	ДопПараметры.ТолькоПользовательские Тогда
		//Создадим абсолютно новый экземпляр, который потом нигде не сохранится
		КлассДляЧтения = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, Новый Структура("Ини", Ложь), Отказ);
	Иначе
		КлассДляЧтения = Кэш.КэшНастроек.КэшIntegrationConnection.Получить(ИдКласса);
	КонецЕсли;
	
	Если КлассДляЧтения = Неопределено Тогда
		//Если не новый класс, то закэшируем сам класс.
		КлассДляЧтения = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		Кэш.КэшНастроек.КэшIntegrationConnection.Вставить(ИдКласса, КлассДляЧтения);
	КонецЕсли;

	Если Не ДопПараметры.Свойство("Результат", СтруктураИниРезультат) Тогда
		СтруктураИниРезультат = Новый Структура;
		ДопПараметры.Вставить("Результат", СтруктураИниРезультат)
	КонецЕсли;
	
	Если Не	ДопПараметры.Свойство("СписокИни", МассивИниКЗапросу) Тогда
		Если	КлассIntegrationConnection.ПараметрыКонфигурации.subsystem = ""
			И	(	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Пользовательские"
				Или	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон")	Тогда
			МассивИниКЗапросу = Неопределено;
		Иначе
			ДопПараметрыЧтения = Новый Структура();
			//Если не указан список ини для запроса, то берём по-умолчанию (включенные-"1" в меню)
			РезультатЗапроса = КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, ДопПараметрыЧтения, Отказ);
			Если Отказ Тогда
				Возврат	Кэш.ОбщиеФункции.СбисИсключение(РезультатЗапроса, "ФайлыНастроекСервер.КлассIntegrationConnection.ПолучитьИни");
			КонецЕсли;
			МассивИниКЗапросу = РезультатЗапроса["Данные"];	
		КонецЕсли;
	КонецЕсли;
	Если Не МассивИниКЗапросу.Количество() Тогда
		Возврат СтруктураИниРезультат;
	КонецЕсли;
	Если Не	ДопПараметры.Свойство("ДополнительныеПараметры", ДопПараметрыЧтения) Тогда
		ДопПараметрыЧтения = Новый Структура;
	КонецЕсли;
	
	ОписаниеСбисМеню = СбисОписаниеИниМеню(Кэш);
	ЕстьЗапросДанные = Ложь;
	Если РекурсивныйВызов Тогда
		МассивПолучитьИтого = МассивИниКЗапросу;
	Иначе		
		МассивПолучитьИтого = Новый Массив;
		//Проверим, что ини уже есть в полученных данных
		Для Каждого ЭлементСписка Из МассивИниКЗапросу Цикл
			Если ЭлементСписка.name = ОписаниеСбисМеню.name Тогда
				//Меню живёт в отдельном поле
				Если Не КлассДляЧтения.Данные.Меню = Неопределено Тогда
					//Меню в процессе может сильно меняться. Копируем целиком.
					КлассIntegrationConnection.Данные.Меню = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(КлассДляЧтения.Данные.Меню);
					Продолжить;
				КонецЕсли;
			Иначе
				ЕстьЗапросДанные = Истина;
				ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементСписка.name);
				Если	Не	КлассДляЧтения.Данные.Ини = Неопределено
					И		КлассДляЧтения.Данные.Ини.Свойство(ИмяИни, ЗначениеИни)
					И	Не	ЗначениеИни = Неопределено Тогда
					Если КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
						//Инитим Данные.Ини только если есть ини, которые должны быть добавлены в класс
						КлассIntegrationConnection.Данные.Ини = Новый Структура;
					КонецЕсли;
					СтруктураИниРезультат.Вставить(ИмяИни, ЗначениеИни);
					КлассIntegrationConnection.Данные.Ини.Вставить(ИмяИни, ЗначениеИни);
					Продолжить;
				ИначеЕсли 	Не	КлассДляЧтения.Данные.Прочие = Неопределено
						И		КлассДляЧтения.Данные.Прочие.Свойство(ИмяИни, ЗначениеИни)
						И	Не	ЗначениеИни = Неопределено Тогда
					//Не ЭДО инишки хранятся отдельно
					Если КлассIntegrationConnection.Данные.Прочие = Неопределено Тогда
						//Инитим Данные.Прочие только если есть ини, которые должны быть добавлены в класс
						КлассIntegrationConnection.Данные.Прочие = Новый Структура;
					КонецЕсли;
					СтруктураИниРезультат.Вставить(ИмяИни, ЗначениеИни);
					КлассIntegrationConnection.Данные.Прочие.Вставить(ИмяИни, ЗначениеИни);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			МассивПолучитьИтого.Добавить(ЭлементСписка);
		КонецЦикла;
	КонецЕсли;
	Если РекурсивныйВызов Тогда
		ПараметрыПолучения = Новый Структура("СписокИни, Результат, ДополнительныеПараметры", МассивПолучитьИтого, СтруктураИниРезультат, ДопПараметрыЧтения);
		РезультатОбработки = КлассIntegrationConnection_ПолучитьИни(Кэш, КлассДляЧтения, ПараметрыПолучения, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
		КонецЕсли;
		Для Каждого ЭлементСписка Из МассивПолучитьИтого Цикл
			Если ЭлементСписка.name = ОписаниеСбисМеню.name Тогда
				//Меню живёт в отдельном поле
				КлассIntegrationConnection.Данные.Меню = КлассДляЧтения.Данные.Меню;
				Продолжить;
			ИначеЕсли КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
				//Инитим Данные.Ини только если есть ини, которые должны быть добавлены в класс
				КлассIntegrationConnection.Данные.Ини = Новый Структура;
			КонецЕсли;
			ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементСписка.name);
			//Заполняем из класса чтения в класс основной настройки
			КлассIntegrationConnection.Данные.Ини.Вставить(ИмяИни, КлассДляЧтения.Данные.Ини[ИмяИни]);
		КонецЦикла;
		Возврат РезультатОбработки;
	ИначеЕсли МассивПолучитьИтого.Количество() Тогда
		ПолучитьТолькоПользовательскиеИзменения = ДопПараметры.Свойство("ТолькоПользовательские") И ДопПараметры.ТолькоПользовательские;
		
		//Что-то дозаправишваем
		ДанныеБЛ = _КлассIntegrationConnection_ВыполнитьЧтениеСБЛ(Кэш, КлассДляЧтения, Новый Структура("СписокИни, ТолькоПользовательские", МассивПолучитьИтого, ПолучитьТолькоПользовательскиеИзменения), Отказ);
		Если Отказ Тогда
			Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеБЛ, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура("ДанныеБЛ", ДанныеБЛ);
		Если Не ПолучитьТолькоПользовательскиеИзменения Тогда			
			//Если получаем пользовательские изменения для выгрузки, то контроль чтения не происходит, т.к. не известно, что есть в изменениях инишек.
			СписокНаКонтроль = Новый Соответствие;
			Для Каждого ЭлементСпискаПолучить Из МассивПолучитьИтого Цикл
				СписокНаКонтроль.Вставить(НРег(ЭлементСпискаПолучить.name), ЭлементСпискаПолучить);
			КонецЦикла;
			ПараметрыЗаполнения.Вставить("КонтрольИни", СписокНаКонтроль);
		КонецЕсли;
		РезультатОбработки = _КлассIntegrationConnection_ЗаполнитьПоДанным(Кэш, КлассДляЧтения, ПараметрыЗаполнения, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
		КонецЕсли;
		Если ПолучитьТолькоПользовательскиеИзменения Тогда
			Если ЗначениеЗаполнено(КлассДляЧтения.Данные.Ини) Тогда 
				СтруктураИниРезультат					= КлассДляЧтения.Данные.Ини;
				КлассIntegrationConnection.Данные.Ини	= КлассДляЧтения.Данные.Ини;
			Иначе 
				СтруктураИниРезультат					= КлассДляЧтения.Данные.Прочие;
				КлассIntegrationConnection.Данные.Ини	= КлассДляЧтения.Данные.Прочие; 
			КонецЕсли;
		Иначе
			ОписаниеСбисМеню = СбисОписаниеИниМеню(Кэш);
			Для Каждого ЭлементСписка Из МассивПолучитьИтого Цикл
				Если		ЭлементСписка.name = ОписаниеСбисМеню.name Тогда
					//Меню живёт в отдельном поле
					КлассIntegrationConnection.Данные.Меню = КлассДляЧтения.Данные.Меню;
					Продолжить;
				КонецЕсли;
				
				ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементСписка.name);
				Если	Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни.Найти(ЭлементСписка.type) = Неопределено Тогда
					Если КлассIntegrationConnection.Данные.Прочие = Неопределено Тогда
						//Инитим Данные только если есть ини, которые должны быть добавлены в класс
						КлассIntegrationConnection.Данные.Прочие = Новый Структура;
					КонецЕсли;
					ЗначениеВставить = КлассДляЧтения.Данные.Прочие[ИмяИни];
					КлассIntegrationConnection.Данные.Прочие.Вставить(ИмяИни, ЗначениеВставить);
				Иначе
					Если КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
						//Инитим Данные только если есть ини, которые должны быть добавлены в класс
						КлассIntegrationConnection.Данные.Ини = Новый Структура;
					КонецЕсли;
					ЗначениеВставить = КлассДляЧтения.Данные.Ини[ИмяИни];
					КлассIntegrationConnection.Данные.Ини.Вставить(ИмяИни, ЗначениеВставить);
				КонецЕсли;
				СтруктураИниРезультат.Вставить(ИмяИни, ЗначениеВставить);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураИниРезультат;	
КонецФункции

//Возвращает СБИС параметры "от класса"
&НаКлиенте
Функция		КлассIntegrationConnection_ПолучитьПараметрыСБИС(Кэш, КлассIntegrationConnection, ДопПараметры,Отказ) Экспорт
	
	Если		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
		И	Не	ЗначениеЗаполнено(КлассIntegrationConnection.Данные.Параметры) Тогда
		КлассIntegrationConnection.Данные.Параметры = _КлассIntegrationConnection_СтрукутраСБИСПараметровПоУмолчанию();
	КонецЕсли;
	//По умочанию возвращаем параметры "от self"
	Если	Не	(	ДопПараметры.Свойство("ПрочитатьСБЛ")
				И	ДопПараметры.ПрочитатьСБЛ)
			Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
			Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален"
			Или	Не ЗначениеЗаполнено(КлассIntegrationConnection.Идентификатор) Тогда
		Возврат КлассIntegrationConnection.Данные.Параметры;
	КонецЕсли;
	
	//Чтение СБИС параметров ТОЛЬКО по ИД от класса, без переадресаций на шаблон и конфиг.
	ДанныеБЛ = _КлассIntegrationConnection_ВыполнитьЧтениеСБЛ(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеБЛ, "ФайлыНастроекСервер.КлассIntegrationConnection.ПолучитьПараметрыСБИС");
	КонецЕсли;
	
	РезультатОбработки = _КлассIntegrationConnection_ЗаполнитьПоДанным(Кэш, КлассIntegrationConnection, Новый Структура("ДанныеБЛ", ДанныеБЛ), Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеБЛ, "ФайлыНастроекСервер.КлассIntegrationConnection.ПолучитьПараметрыСБИС");
	КонецЕсли;
	
	Возврат	КлассIntegrationConnection.Данные.Параметры;
КонецФункции

//Функция возвращает сбисМеню "от класса"
&НаКлиенте
Функция		КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	//Помимо получения данных, тут идёт проверка доступности соединения. Получаем меню, чтобы были актуальные данные и в случае недоступности соединения, ругаемся	
	Если ЗначениеЗаполнено(КлассIntegrationConnection.Данные.Меню) Тогда
		Возврат КлассIntegrationConnection.Данные.Меню;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;	
	ПараметрыЗапроса.Вставить("ДополнительныеПараметры",Новый Структура("ТихийРежим, ЕстьРезультат", Истина, Истина));
	ПараметрыЗапроса.Вставить("СписокИни",				Новый Массив);
	ПараметрыЗапроса.СписокИни.Добавить(СбисОписаниеИниМеню(Кэш));
	РезультатОбработки = КлассIntegrationConnection_ПолучитьИни(Кэш, КлассIntegrationConnection, ПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.ПолучитьСбисМеню");
	КонецЕсли;
	Возврат КлассIntegrationConnection.Данные.Меню;
КонецФункции

//Функция возвращает копию класса шаблона подключения
&НаКлиенте
Функция		КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ=Ложь)
	//Поверхностная копия узлов
	НовыйКлассIntegrationConnection = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(КлассIntegrationConnection,,Ложь);
	НовыйКлассIntegrationConnection.ПараметрыРаботы = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(НовыйКлассIntegrationConnection.ПараметрыРаботы);
	НовыйКлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Очистить();
	
	//Меню и параметры копируем целиком. Ини - поверхностная копия 
	НовыйКлассIntegrationConnection.Данные			=  Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(НовыйКлассIntegrationConnection.Данные,,Ложь);
	НовыйКлассIntegrationConnection.Данные.Параметры=  Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(НовыйКлассIntegrationConnection.Данные.Параметры);
	Если Не ДопПараметры.Свойство("Ини")
		Или	ДопПараметры.Ини Тогда
		НовыйКлассIntegrationConnection.Данные.Ини = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(НовыйКлассIntegrationConnection.Данные.Ини,,Ложь);
	Иначе
		НовыйКлассIntegrationConnection.Данные.Ини = Неопределено;
		НовыйКлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные = Ложь;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("Меню")
		Или	ДопПараметры.Меню Тогда
		НовыйКлассIntegrationConnection.Данные.Меню =  Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(НовыйКлассIntegrationConnection.Данные.Меню);
	Иначе
		НовыйКлассIntegrationConnection.Данные.Меню = Неопределено;
	КонецЕсли;
	
	Возврат НовыйКлассIntegrationConnection;
КонецФункции

//Функция Сохраняет класс IC, возвращает измененный вариант.
&НаКлиенте
Функция		КлассIntegrationConnection_СохранитьПодключение(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ) Экспорт
	
	//Если настройки не пользовательские, то запись обязана быть проведена для создания нового пользовательского соединения
	Результат = Новый Структура("ЗаписьВыполнялась, Идентификатор", Ложь, КлассIntegrationConnection.Идентификатор);
	ПропуститьЗапись = Ложь;
	Если КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда
		КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Обновить = Истина;//Для создания нового подключения с стандартными настройками обязательно нужно передать СбисПараметры с service4config
		КлассIntegrationConnection.ПараметрыКонфигурации = Кэш.ФормаНастроекОбщее.НайтиВыбраннуюКонфигурациюНастроек(КлассIntegrationConnection.ПараметрыКонфигурации);	
		//Для пользовательской конфигурации(с пустым subsystem) ставим отправку всех ини, так как иначе данных на сервере не появится!
		Если КлассIntegrationConnection.ПараметрыКонфигурации.subsystem = "" Тогда
			Для Каждого КлючИЗначениИни Из КлассIntegrationConnection.Данные.Ини Цикл
				КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Добавить(КлючИЗначениИни.Ключ);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
		СтруктураПараметров = КлассIntegrationConnection.Данные.Параметры;
		Если КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
			//Запишем шаблон
			КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить = Истина;
			КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Отправлять = Истина;
			КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять = Ложь;
			РезультатЗаписиШаблона = _КлассIntegrationConnection_Записать(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
			Если Отказ Тогда 
				Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатЗаписиШаблона, "ФайлыНастроекСервер.КлассIntegrationConnection.СохранитьПодключение");
			КонецЕсли;
		КонецЕсли;
		РезультатИзменения = КлассIntegrationConnection_ИзменитьТип(Кэш, КлассIntegrationConnection, Новый Структура("Тип", "Создание по шаблону"), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатИзменения, "ФайлыНастроекСервер.КлассIntegrationConnection.СохранитьПодключение");
		КонецЕсли;
	ИначеЕсли КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Пользовательские" Тогда
		//Если взяты готовые настройки без изменений, просто запишем их ID в обработке, во всех прочих случаях, нужно записать JSON на сервер
		ЕстьИзменения = КлассIntegrationConnection_ЕстьИзменения(Кэш, КлассIntegrationConnection, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(ЕстьИзменения, "ФайлыНастроекСервер.КлассIntegrationConnection.СохранитьПодключение");
		КонецЕсли;
		ПропуститьЗапись = Не ЕстьИзменения;
	КонецЕсли;
	
	Если Не ПропуститьЗапись Тогда
		КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять = Истина;
		КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Отправлять		= Истина;
		
		РезультатЗаписи = _КлассIntegrationConnection_Записать(Кэш, КлассIntegrationConnection, Новый Структура("ТихийРежим", Кэш.ТихийРежим), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатЗаписи, "ФайлыНастроекСервер.КлассIntegrationConnection.СохранитьПодключение");
		КонецЕсли;
		
		Результат.ЗаписьВыполнялась = Истина;
		Результат.Идентификатор = РезультатЗаписи;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Функция Сохраняет класс IC, возвращает измененный вариант.
&НаКлиенте
Функция		КлассIntegrationConnection_СохранитьСбисПараметры(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем ОбновитьИниНаСервере, ТихийРежим, ЗначениеСвойства, ШаблонПодключения;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при записи промежуточных данных, вроде меню и параметров
	
	Если	Не	ЗначениеЗаполнено(КлассIntegrationConnection.Данные.Параметры)
		Или	Не	КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять
		Или		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален"
		Или		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"	Тогда
		//Новый коннекшен мы не записываем через сбис параметры
		Возврат Ложь;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ПараметрыДописать") Тогда
		Для Каждого Элемент Из ДопПараметры.ПараметрыДописать Цикл
			// Параметры для шаблона добавляем только на шаблон
			Если НЕ КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон"
					И НЕ Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Найти(НРег(Элемент.Ключ)) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			//Сразу проверим необходимость записи параметров - если такого узла ещё нет, либо он менялся
			Если	Не КлассIntegrationConnection.Данные.Параметры.Свойство(Элемент.Ключ, ЗначениеСвойства)
				Или	Не ЗначениеСвойства = Элемент.Значение Тогда
				КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Обновить = Истина;
				КлассIntegrationConnection.Данные.Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыКлассСкопировать	= Новый Структура("Меню, Ини", Ложь, Ложь);
	КлассПараметрыДляЗаписи		= КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, ПараметрыКлассСкопировать, Ложь);
	
	//Удалить лишние ключи - для шаблона остаётся только то, что пишется на шаблон, для остальных - всё, что не пишется на шаблон.
	СписокКлючейУдалить = Новый Массив;
	Для Каждого Элемент Из КлассПараметрыДляЗаписи.Данные.Параметры Цикл
		Если КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
			Если Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Найти(НРег(Элемент.Ключ)) = Неопределено Тогда
				СписокКлючейУдалить.Добавить(Элемент.Ключ);
			КонецЕсли;
		ИначеЕсли НЕ Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Найти(НРег(Элемент.Ключ)) = Неопределено	Тогда
			КлассПараметрыДляЗаписи.Данные.Параметры.Вставить(Элемент.Ключ, Неопределено);
		Иначе
			// Нормальный ключ пишется как обычный
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючУдалить Из СписокКлючейУдалить Цикл
		КлассПараметрыДляЗаписи.Данные.Параметры.Удалить(КлючУдалить);
	КонецЦикла;
	
	СбисПараметры = КлассIntegrationConnection_ПодготовитьСБИСПараметрКЗаписи(Кэш, КлассПараметрыДляЗаписи, КлассПараметрыДляЗаписи.Данные.Параметры);
		
	ПараметрыОтправки = Новый Структура("id, update_date", КлассIntegrationConnection.Идентификатор, Формат(КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек,"ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""));
	//Добавим СбисПараметры в отправку		
	Если	КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Обновить
		И	КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять
		И	СбисПараметры.Количество() Тогда
		ПараметрыОтправки.Вставить("json_connection", Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(СбисПараметры));
	Иначе
		Возврат КлассIntegrationConnection.Идентификатор
	КонецЕсли;
	ПараметрыОтправки = Новый Структура("props, ini", ПараметрыОтправки, Новый Массив);
	Если КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
		ПараметрыОтправки.props.Вставить("for_all", Истина);
	КонецЕсли;
	Результат = Кэш.Интеграция.ЗаписатьConnection(Кэш, ПараметрыОтправки, Новый Структура("ВернутьОшибку, ЕстьОтвет, СообщатьПриОшибке, ТихийРежим", Истина, Истина, Ложь, Истина), Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(Результат, "ФайлыНастроекСервер.КлассIntegrationConnection.СохранитьСбисПараметры");
	КонецЕсли;

	Возврат	Результат;
	
КонецФункции

&НаКлиенте
Функция	КлассIntegrationConnection_ПодготовитьСБИСПараметрКЗаписи(Кэш, КлассIntegrationConnection, ВходяшийПараметр)
	
	Если ТипЗнч(ВходяшийПараметр) = Тип("Структура") Тогда
		Результат = Новый Структура;
		Для Каждого Элемент Из ВходяшийПараметр Цикл
			Результат.Вставить(Элемент.Ключ, КлассIntegrationConnection_ПодготовитьСБИСПараметрКЗаписи(Кэш, КлассIntegrationConnection, Элемент.Значение));
		КонецЦикла;
	ИначеЕсли ТипЗнч(ВходяшийПараметр) = Тип("Дата") Тогда
		Результат = Формат(ВходяшийПараметр,"ДФ=""дд.ММ.гггг ЧЧ:мм:сс""");
	ИначеЕсли ТипЗнч(ВходяшийПараметр) = Тип("Строка") Тогда
		Результат = ВходяшийПараметр;
	Иначе
		Результат = Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(ВходяшийПараметр);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Функция дозапрашивает меню при необходимости и возвращает список ини по меню с параметрами
&НаКлиенте
Функция		КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
    Перем Искать, ТипыИни;
	Если КлассIntegrationConnection.Данные.Меню = Неопределено Тогда
		РезультатЧтения = КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатЧтения, "ФайлыНастроекСервер.КлассIntegrationConnection.СписокИни");
		КонецЕсли;
	КонецЕсли;
	//Позволяет определить типы к получению. Если не указано, берутся стандартные из настроек.
	Если Не	ДопПараметры.Свойство("ДоступныеТипыИни", ТипыИни) Тогда
		ТипыИни = Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни;
	КонецЕсли;
	//Позволяет определить какие ини требуется полчить. 01 - ищутся все, 0 - отключенные 1 - включенные
	Если Не	ДопПараметры.Свойство("Искать", Искать) Тогда
		Искать = Новый Структура("Включено", "1")//По-умолчанию искать только включенные.
	КонецЕсли;
	
	Возврат	СформироватьСпискиИзМеню(ТипыИни, КлассIntegrationConnection.Данные.Меню, Искать);
	
КонецФункции

&НаКлиенте
Функция		КлассIntegrationConnection_СформироватьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Если ПустаяСтрока(КлассIntegrationConnection.ПараметрыКонфигурации.subsystem) Тогда
		СбисМеню = Новый Структура;
	Иначе
		СбисМеню = КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(СбисМеню, "ФайлыНастроекСервер.КлассIntegrationConnection.СформироватьСбисМеню");
		КонецЕсли;
	КонецЕсли;
	ПараметрыМеню = СбисОписаниеИниМеню(Кэш);
	ПараметрыМеню.Вставить("active", Истина);
	
	//Для обновления меню нужны все настройки. Дополучим отсутствующие, если надо.
	РезультатДополучения = КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатДополучения, "ФайлыНастроекСервер.КлассIntegrationConnection.СформироватьСбисМеню");
	КонецЕсли;
	
	Попытка
		СбисМеню = СформироватьМеню_Структура(Кэш, КлассIntegrationConnection.Данные.Ини, СбисМеню, Отказ);//Меням данные меню по записываемым ини.
		КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить = Истина;
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.СформироватьСбисМеню",,,ОписаниеОшибки());
	КонецПопытки;
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(СбисМеню, "ФайлыНастроекСервер.КлассIntegrationConnection.СформироватьСбисМеню");
	КонецЕсли;
	КлассIntegrationConnection.Данные.Меню = СбисМеню;
	Возврат	СбисМеню;
КонецФункции

//Устанавливает выбранный класс настроек на ГО
&НаКлиенте
Функция		КлассIntegrationConnection_Установить(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ) Экспорт
	Перем	ТихийРежим,				//Флаг управления выводом статуса установки
			СписокИниУстановить,	//Определяет список ини к получению и установке.
			ПолучитьДанныеИни,		//Определяет необходимость получения и установки ини.
	        ПрименитьXSLT,			//Необходимость получения и применения xslt. Необходимо для возможности установить пользовательскую конфу, если при получении что-то пошло не так и с сервера ничего не возвращается
			СтруктураКонфигураций, СписокТиповНастроек;
			
	ГлавноеОкно = Кэш.ГлавноеОкно;
	ПараметрыДозапросаИни = Новый Структура;
	
	Если Не ДопПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Кэш.ТихийРежим;
	КонецЕсли;
	Если	ДопПараметры.Свойство("СписокИни", СписокИниУстановить)
		И	СписокИниУстановить.Количество() Тогда
		//Если требуется установить конкретный набор ини, иначе ставятся включенные из меню
		ПараметрыДозапросаИни.Вставить("СписокИни", СписокИниУстановить);
	КонецЕсли;
	Если Не ДопПараметры.Свойство("ПрименитьXSLT", ПрименитьXSLT) Тогда
		ПрименитьXSLT = Истина;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("ПолучитьДанныеИни", ПолучитьДанныеИни) Тогда
		ПолучитьДанныеИни = Истина;
	КонецЕсли;
	
	Если ПрименитьXSLT Тогда
		Кэш.ФормаНастроек.СбисСформироватьСтруктуруXSLT(Кэш, КлассIntegrationConnection, Отказ);
	КонецЕсли;
	
	Если Не	ТихийРежим Тогда
		ГлавноеОкно.СбисПоказатьСостояние("Формирование структуры настроек", ГлавноеОкно);
	КонецЕсли;
	
	Если ПолучитьДанныеИни Тогда
		РезультатДозапроса = КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnection, ПараметрыДозапросаИни, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатДозапроса, "ФайлыНастроекСервер.КлассIntegrationConnection.Установить");
		КонецЕсли;
	ИначеЕсли Не КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные Тогда
		РезультатИнициализации = КлассIntegrationConnection_Инициализировать(Кэш, Новый Структура("КлассIntegrationConnection", КлассIntegrationConnection), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатИнициализации, "ФайлыНастроекСервер.КлассIntegrationConnection.Установить");
		КонецЕсли;
	КонецЕсли;
	Если КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
		//Обновим меню для нового коннекшена, чтобы заполнились разделы обработки.
		РезультатИнициализации = КлассIntegrationConnection_СформироватьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатИнициализации, "ФайлыНастроекСервер.КлассIntegrationConnection.Установить");
		КонецЕсли;
	КонецЕсли;
	
	УстановленныеИни = КлассIntegrationConnection_СписокИниДляИнтерфейса(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
	Кэш.Вставить("Ини", КлассIntegrationConnection.Данные.Ини);
	
	ПараметрыКонфигурации = ПараметрыСтандартнойКонфигурации(Кэш, КлассIntegrationConnection.ПараметрыКонфигурации);
	Если Не ТихийРежим Тогда
		ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	ПараметрыКонфигурации.Удалить("service");
	//Обновим сервис для статистики
	Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксУстановленныхНастроек = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(ПараметрыКонфигурации);
	Кэш.СБИС.ПараметрыИнтеграции.Демо = Неопределено;
	Если Не КлассIntegrationConnection.ПараметрыРаботы.Демо = Неопределено Тогда
		Кэш.СБИС.ПараметрыИнтеграции.Демо = КлассIntegrationConnection.ПараметрыРаботы.Демо;
	КонецЕсли;
	
	Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", КлассIntegrationConnection);
	Кэш.Парам.ИдентификаторНастроек = КлассIntegrationConnection.Идентификатор;
	
	Если Кэш.ФормаНастроекОбщее.Открыта() Тогда
		Попытка
			КлассIntegrationConnection_ЗаполнитьРедакторИниПоКлассу(Кэш, КлассIntegrationConnection, Новый Структура);
		Исключение
			Отказ = Истина;
			Возврат МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), "ФайлыНастроекСервер.КлассIntegrationConnection.Установить");
		КонецПопытки;
	КонецЕсли;
	Возврат	Новый Структура("СписокФайлов", УстановленныеИни);
	
КонецФункции

&НаКлиенте
Функция		КлассIntegrationConnection_НастроитьШаблон(Кэш, КлассIntegrationConnection, КлассIntegrationШаблон, ДопПараметры, Отказ)
	Если Не ЗначениеЗаполнено(КлассIntegrationШаблон) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если	КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура("Тип", "Стандартные"), Ложь)
		Или	КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура("Тип", "Создание по шаблону"), Ложь) Тогда
		КлассIntegrationConnection.ПараметрыРаботы.Шаблон	= КлассIntegrationШаблон.Идентификатор;
		КлассIntegrationConnection.ПараметрыКонфигурации	= КлассIntegrationШаблон.ПараметрыКонфигурации;
	
		КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Иначе
		КлассIntegrationConnection.ПараметрыРаботы.Шаблон	= КлассIntegrationШаблон.Идентификатор;
		КлассIntegrationConnection.ПараметрыКонфигурации	= КлассIntegrationШаблон.ПараметрыКонфигурации;
	КонецЕсли;
КонецФункции

#Область include_core2_vo2_Настройки_СБИС_КлассIntegrationConnection_public_ВзаимодействиеСИнтерфейсом

&НаКлиенте
Функция		КлассIntegrationConnection_СписокИниДляИнтерфейса(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем ПрефиксИни;
	МассивУстановленныхИниФайлов = Новый Массив;
	КэшИни = КлассIntegrationConnection.Данные.Ини;
	
	ДатаНастроек		= КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек;
	АвтообновлениеДефолт= КлассIntegrationConnection.ПараметрыРаботы.Автообновление;
	Если Не ДопПараметры.Свойство("ПрефиксИни", ПрефиксИни) Тогда
		ПрефиксИни = "";
	КонецЕсли;
	
	КлючиСтрок	= "Имяфайла,ИмяфайлаБезРасширения,ПутьДоИниФайла,ЕстьИзменения,Автообновление,Стандартная,Пользовательская,ДатаФайла,ДатаФайлаКлиент,Ини_ИмяИни,Ини_ИмяБезРасширения";
	СписокСтрок	= Новый	СписокЗначений();
	Для Каждого КлючИЗначениеИни Из КэшИни	Цикл
		ИмяИни		= КлючИЗначениеИни.Ключ;
		ЗначениеИни	= КлючИЗначениеИни.Значение;
		Если		ИмяИни	= "Конфигурация"	Тогда//Конфигурация вверху.
			ПолеСортировки = "а";
		ИначеЕсли Лев(ИмяИни, 8) = "Загрузка" Тогда
			ПолеСортировки = "я";
		Иначе
			ПолеСортировки = "б";
		КонецЕсли;
		СбисЕстьТиповая		= Ложь;
		СбисЕстьИзменения	= Ложь;
		СбисАвтообновление	= АвтообновлениеДефолт;
		Если ЗначениеЗаполнено(ЗначениеИни) Тогда				
			ЗначениеИни.Вставить("СбисОшибки",			Новый Массив());
			ЗначениеИни.Вставить("СбисПолноеИмяФайла",	СтрЗаменить(ИмяИни,"""",""));
			ЗначениеИни.Вставить("СбисИмяФайла",		СтрЗаменить(ИмяИни,"""",""));
			
			Если ЗначениеИни.Свойство("СбисЕстьТиповая")	Тогда
				СбисЕстьТиповая = ЗначениеИни.СбисЕстьТиповая;
			КонецЕсли;
			Если ЗначениеИни.Свойство("СбисЕстьИзменения")	Тогда
				СбисЕстьИзменения = ЗначениеИни.СбисЕстьИзменения;
			КонецЕсли;
			Если ЗначениеИни.Свойство("СбисАвтообновление")	Тогда
				СбисАвтообновление = ЗначениеИни.СбисАвтообновление; 
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока = Новый	Структура(КлючиСтрок);
		НоваяСтрока.ПутьДоИниФайла			= "";
		НоваяСтрока.ЕстьИзменения			= СбисЕстьИзменения;
		НоваяСтрока.Автообновление			= СбисАвтообновление;
		НоваяСтрока.Стандартная				= СбисЕстьТиповая;
		НоваяСтрока.Пользовательская		= НЕ СбисЕстьТиповая ИЛИ СбисЕстьИзменения;
		НоваяСтрока.Имяфайла				= ПрефиксИни + СтрЗаменить(ИмяИни + ?(СбисЕстьТиповая, ".sbis3", ""),"""","");
		НоваяСтрока.ИмяфайлаБезРасширения	= ПрефиксИни + СтрЗаменить(ИмяИни, """", "");
		НоваяСтрока.ДатаФайла				= ?(СбисЕстьТиповая,	ДатаНастроек, Неопределено);
		НоваяСтрока.ДатаФайлаКлиент			= ?(СбисЕстьИзменения,	ДатаНастроек, Неопределено);
		НоваяСтрока.Ини_ИмяИни				= СтрЗаменить(ИмяИни,"""","");
		НоваяСтрока.Ини_ИмяБезРасширения	= Сред(НоваяСтрока.ИмяФайла,1,Найти(НоваяСтрока.ИмяФайла,".")-1);
		
		СписокСтрок.Добавить(НоваяСтрока,  ПолеСортировки + НоваяСтрока.ИмяФайла);
	КонецЦикла;
	СписокСтрок.СортироватьПоПредставлению();
	Возврат	СписокСтрок.ВыгрузитьЗначения();
КонецФункции

&НаКлиенте
Процедура	КлассIntegrationConnection_ЗаполнитьРедакторИниПоКлассу(Кэш, КлассIntegrationConnection, ДопПараметры) Экспорт
	
	//Выберем базовую, для установленных настроек, конфигурацию и заполним список доступных конфигураций
	Кэш.Парам.НастройкиАвтообновление				= КлассIntegrationConnection.ПараметрыРаботы.Автообновление;
	Кэш.ФормаНастроекОбщее.НастройкиАвтообновление	= КлассIntegrationConnection.ПараметрыРаботы.Автообновление;
	Кэш.ФормаНастроекОбщее.НастройкиНазвание		= КлассIntegrationConnection.Название;
	
	Если Не Кэш.Свойство("Конфигурация") Тогда
		СписокТиповНастроек = СбисПолучитьСписокДоступныхНастроек(Кэш);
		Если СписокТиповНастроек = Неопределено Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.ЗаполнитьРедакторИниПоКлассу", 773,,"Отсутствует список доступных конфигураций");
		КонецЕсли;
		ДанныеКонфигураций = Кэш.ФормаНастроекОбщее.СформироватьСтруктуруКонфигураций(Кэш, СписокТиповНастроек);
		Кэш.Вставить("Конфигурация", ДанныеКонфигураций.СтруктураКонфигураций);
		Кэш.ГлавноеОкно.СбисЭлементФормы(Кэш.ФормаНастроекОбщее,"Конфигурация").СписокВыбора.ЗагрузитьЗначения(ДанныеКонфигураций.СписокВыбора);
	КонецЕсли;
	
	НашаКонфигурация = Кэш.ФормаНастроекОбщее.НайтиСтандартнуюКонфигурациюНастроек(КлассIntegrationConnection.ПараметрыКонфигурации);
	Кэш.ФормаНастроекОбщее.Конфигурация = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(НашаКонфигурация.service, Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(НашаКонфигурация));
	
	//Флаг ставится если есть изменения в настройках, либо изменился коннекшен для пользователя в сохранённых.
	Кэш.КэшНастроек.ИзмененияВНастройках = Кэш.КэшНастроек.ИзмененияВНастройках Или Не СбисПолучитьИдентификаторНастроек(Кэш) = КлассIntegrationConnection.Идентификатор;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_Конвертеры_ОбработкаВJSON
////////////////////////////////////////////////////

//Функция преобразует структуру файлов настроек из "привычного" для обработки вида в формат JSON.
&НаКлиенте
Функция		ПреобразованиеВОИни_JSONИни_ВыполнитьПреобразование(КэшИни) Экспорт
	
	Результат = Новый Структура();
	//В качестве значения идёт уровень узла, где встречается. Если что, можно расширить.
	НеобратаываемыеУзлы = Новый Структура;
	НеобратаываемыеУзлы.Вставить("СписокДокументов",		0);
	НеобратаываемыеУзлы.Вставить("СБИС_Столбцы",			0);
	НеобратаываемыеУзлы.Вставить("СБИС_СписокВыбораФильтр",	0);
	ГлобальныеПараметрыКонвертации = Новый Структура("НеобрабатываемыеУзлы", НеобратаываемыеУзлы);
	Для	Каждого	КлючИЗначение Из КэшИни Цикл
		//Результат.Вставить(КлючИЗначение.Ключ, ПреобразованиеИниСтВJSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение));
		ЛокальныеПараметрыКонвертации = Новый Структура("Уровень_Текущий, Уровень_ВложенныйМассив, РежимМассива, ОпределятьТипМассив", 0, 0, Ложь, Истина);
		Результат.Вставить(КлючИЗначение.Ключ, ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение, ЛокальныеПараметрыКонвертации, ГлобальныеПараметрыКонвертации));
	КонецЦикла;
	Возврат	Результат;
		
КонецФункции

//Флаг режим массив определяет форму возвращаемого значения, флаг ОпределятьТипМассив определяет необходимости проверки текущего элемента на то, является ли он массивом
&НаКлиенте
Функция		ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КэшИни, ПараметрыКонвертации, ГлобальныеПараметрыКонвертации)
	
	Результат	= ?(ПараметрыКонвертации.РежимМассива, Новый Массив(), Новый Структура());
	
	Для	Каждого	КлючИЗначение Из КэшИни Цикл
		Если		ГлобальныеПараметрыКонвертации.НеобрабатываемыеУзлы.Свойство(КлючИЗначение.Ключ)
			И	ГлобальныеПараметрыКонвертации.НеобрабатываемыеУзлы[КлючИЗначение.Ключ] = ПараметрыКонвертации.Уровень_Текущий Тогда
			//Некоторые узлы не обрабатываем вообще, т.к. они не используются обработкой.
			Продолжить;
		КонецЕсли;

		КонтекстКонвертации = Новый Структура;
		//Пробросим контекст в подузлы
		Для Каждого КлючИЗначениеПараметр Из ПараметрыКонвертации Цикл
			КонтекстКонвертации.Вставить(КлючИЗначениеПараметр.Ключ, КлючИЗначениеПараметр.Значение);
		КонецЦикла;
		КонтекстКонвертации.Уровень_ВложенныйМассив = 0;
		Если   КлючИЗначение.Ключ	= "Вложения" Тогда
			Если КонтекстКонвертации.Свойство("ИмяУзла") Тогда
				КонтекстКонвертации.Удалить("ИмяУзла");
			КонецЕсли;
			КонтекстКонвертации.Вставить("Сократить", "Значение");//В значение по ключу узла, в значении ини которого будет сокращаемый ключ, будет добавлен сразу сокращаемый узел.
			КонтекстКонвертации.Уровень_Текущий = КонтекстКонвертации.Уровень_Текущий + 1;
			Результат.Вставить(КлючИЗначение.Ключ, Новый Структура("Имя, Значение", КлючИЗначение.Ключ, ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение, КонтекстКонвертации, ГлобальныеПараметрыКонвертации)));
			Продолжить;
		ИначеЕсли	КлючИЗначение.Ключ = "мФайл"
				Или	КлючИЗначение.Ключ = "мДокумент" Тогда
			//Если встречается структура в которой в мФайле идёт затем мДокумент, то это массив. Нужно поймать имя и проверять дальше
			КонтекстКонвертации.Вставить("СистемныйКлюч", КлючИЗначение.Ключ);
		КонецЕсли;
				
		//Проверим текущий элемент: не массивом ли он должен быть
		КонтекстКонвертации.РежимМассива = ?(КонтекстКонвертации.ОпределятьТипМассив, ПреобразованиеВОИни_JSONИни_ЭтоМассив(КлючИЗначение.Ключ, КлючИЗначение.Значение, КонтекстКонвертации), Ложь);
		
		Если	ПараметрыКонвертации.РежимМассива	Тогда
			Если	КонтекстКонвертации.РежимМассива
				И	КлючИЗначение.Значение.Свойство("Значение") Тогда
				//Это массив в массиве
				ЭлементДобавить	= ПреобразованиеВОИни_JSONИни_СформироватьЭлементСОтбором(КлючИЗначение.Значение);
				ЭлементДобавить.Вставить("Имя",	КлючИЗначение.Ключ);
			Иначе
				КонтекстКонвертации.Уровень_Текущий = КонтекстКонвертации.Уровень_Текущий + 1;
				ЭлементДобавить	= Новый	Структура("Имя, Значение", КлючИЗначение.Ключ, ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение, КонтекстКонвертации, ГлобальныеПараметрыКонвертации));
			КонецЕсли;
			Результат.Добавить(ЭлементДобавить);
		Иначе
			Если	(Не	ТипЗнч(КлючИЗначение.Значение) = Тип("Структура"))	Тогда
				Если КонтекстКонвертации.Свойство("ИмяУзла") Тогда
					Результат.Вставить("Имя", КонтекстКонвертации.ИмяУзла);
				КонецЕсли;
				Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			ИначеЕсли	(	КлючИЗначение.Значение.Свойство("Отбор")		)	Тогда
				Результат.Вставить(КлючИЗначение.Ключ, ПреобразованиеВОИни_JSONИни_СформироватьЭлементСОтбором(КлючИЗначение.Значение));
			ИначеЕсли 	(	КлючИЗначение.Значение.Свойство("Значение")		)	Тогда
				Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура")	Тогда
					Если	КонтекстКонвертации.Свойство("Сократить")
						И	КлючИЗначение.Значение.Свойство(КонтекстКонвертации.Сократить) Тогда
						Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение[КонтекстКонвертации.Сократить]);
					Иначе	
						КонтекстКонвертации.Вставить("РежимМассива", Ложь);
						Если КонтекстКонвертации.Свойство("ИмяУзла") Тогда
							КонтекстКонвертации.ИмяУзла = КлючИЗначение.Ключ;
						КонецЕсли;
						КонтекстКонвертации.Уровень_Текущий = КонтекстКонвертации.Уровень_Текущий + 1;
						Результат.Вставить(КлючИЗначение.Ключ, ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение, КонтекстКонвертации, ГлобальныеПараметрыКонвертации));
					КонецЕсли;
				Иначе
					Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЕсли;
			Иначе
				Если КонтекстКонвертации.Свойство("ИмяУзла") Тогда
					КонтекстКонвертации.ИмяУзла = КлючИЗначение.Ключ;
				КонецЕсли;
				КонтекстКонвертации.Уровень_Текущий = КонтекстКонвертации.Уровень_Текущий + 1;
				ПромежуточныйРезультат = ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение, КонтекстКонвертации, ГлобальныеПараметрыКонвертации);
				Результат.Вставить(КлючИЗначение.Ключ, ПромежуточныйРезультат);
			КонецЕсли;
			Если КонтекстКонвертации.РежимМассива Тогда
				//Первый встречный вложенный массив будет нашим мерилом для вложенности.
				//TODO39 добавить анализ уровней, если в одном элементе будет массив и структура с массивом
				Если ПараметрыКонвертации.Уровень_ВложенныйМассив = 0 Тогда
					ПараметрыКонвертации.Уровень_ВложенныйМассив = КонтекстКонвертации.Уровень_Текущий
				КонецЕсли;
			ИначеЕсли Не КонтекстКонвертации.Уровень_ВложенныйМассив = 0 Тогда
				ПараметрыКонвертации.Уровень_ВложенныйМассив = КонтекстКонвертации.Уровень_ВложенныйМассив;
			КонецЕсли;
		КонецЕсли
	КонецЦикла;
	Если ПараметрыКонвертации.РежимМассива Тогда
		ПараметрыКонвертации.Уровень_ВложенныйМассив = ПараметрыКонвертации.Уровень_Текущий;
	ИначеЕсли Не ПараметрыКонвертации.Уровень_Текущий = 0 Тогда
		//Если был вложенный массив, то проверим на предмет нашего текущего уровня. Если 2 и более, то текущий элемент тоже должен быть массивом
		Если ПараметрыКонвертации.Уровень_ВложенныйМассив - ПараметрыКонвертации.Уровень_Текущий = 2 Тогда
			//Переформатируем результат
			НовыйРезультат = Новый Массив;
			ПараметрыКонвертации.РежимМассива = Истина;
			//ПараметрыКонвертации.Уровень_ВложенныйМассив = КонтекстКонвертации.Уровень_Текущий - 1;
			Для Каждого ЭлементРезультата Из Результат Цикл
				 НовыйРезультат.Добавить(Новый Структура("Имя, Значение", ЭлементРезультата.Ключ, ЭлементРезультата.Значение));
			КонецЦикла;
			Результат = НовыйРезультат; 
		КонецЕсли;
	КонецЕсли;	
	
	Возврат	Результат;
	
КонецФункции

//Функция формирует новый элемент при наличии в нём отборов.
&НаКлиенте
Функция		ПреобразованиеВОИни_JSONИни_СформироватьЭлементСОтбором(Значение)
	
	Результат	= Новый	Структура();
	
	Для	Каждого	УзелДобавить	Из Значение	Цикл
		Если	УзелДобавить.Ключ	= "Отбор"
			И	ТипЗнч(УзелДобавить.Значение)	= Тип("Структура")	Тогда
				Для	Каждого	ЭлементОтбора	Из	УзелДобавить.Значение	Цикл
					Результат.Вставить(УзелДобавить.Ключ	+ "_"	+ ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				КонецЦикла;
		Иначе
			Результат.Вставить(УзелДобавить.Ключ, УзелДобавить.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат	Результат;

КонецФункции

//Функция определяет, должен ли переданный элемент быть массивом, или нет
&НаКлиенте
Функция		ПреобразованиеВОИни_JSONИни_ЭтоМассив(Ключ, Значение, КонтекстУзла)
	
	ЭтоМассив	= Ложь;
	Если		Ключ	= "Данные"					Тогда
	ИначеЕсли	ТипЗнч(Значение) = Тип("Структура")	Тогда
		ЭтоМассив	= Значение.Свойство("Значение");
		Если	Не	ЭтоМассив	Тогда//Проверим подэлементы. Если в одном из есть "значение", то делаем массив
			Для	Каждого	ПодЭлемент	Из	Значение	Цикл
				Если(	(	ТипЗнч(ПодЭлемент.Значение)	= Тип("Структура")
						И	ПодЭлемент.Значение.Свойство("Значение")))
					//Или если уровнем выше был системный ключ и в узле встречается другой системный ключ, то тоже делаем
					Или	(		(	ПодЭлемент.Ключ = "мФайл"
								Или ПодЭлемент.Ключ = "мДокумент")
						И		КонтекстУзла.Свойство("СистемныйКлюч")
						И	Не	ПодЭлемент.Ключ = КонтекстУзла.СистемныйКлюч) Тогда
					ЭтоМассив = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат	ЭтоМассив;

КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_Конвертеры_JSONВОбработку
////////////////////////////////////////////////////

//Функция преобразует структуру файлов настроек к "привычному" для обработки виду.
&НаСервереБезКонтекста
Функция		ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(Знач КэшИни, ДопПараметры) Экспорт
	
	СтруктураНастроек	= Новый	Структура;//
	КонтекстКонвертации	= Новый Структура;
	Если Не ДопПараметры.Свойство("Уровень") Тогда
		КонтекстКонвертации.Вставить("Уровень", 0);
	КонецЕсли;
		Для Каждого КлючЗначениеПараметра Из ДопПараметры	Цикл 
			КонтекстКонвертации.Вставить(КлючЗначениеПараметра.Ключ, КлючЗначениеПараметра.Значение);
		КонецЦикла;
	КонтекстКонвертации.Уровень = КонтекстКонвертации.Уровень + 1;
	Для Каждого Элемент Из КэшИни Цикл
		Если	Элемент.Ключ="СписокДокументов" Тогда
			Продолжить;
		КонецЕсли;
		Если	ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			ЭлементЗначение = Неопределено;
			Если	Элемент.Значение.Свойство("Значение",ЭлементЗначение)
				И	ТипЗнч(ЭлементЗначение) = Тип("Структура") Тогда
				СтруктураВставки = Новый Структура;
				ЭлементИни = Элемент.Значение;
				Для Каждого ЭлементСтруктуры Из ЭлементЗначение Цикл
					СтруктураВставки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);//	
				КонецЦикла;
				СтруктураНастроек.Вставить(Элемент.Ключ, ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(СтруктураВставки,КонтекстКонвертации));//					
			Иначе
				СтруктураНастроек.Вставить(Элемент.Ключ, ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(Элемент.Значение,КонтекстКонвертации));//
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ПодСтруктура = Новый Структура;
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				СтруктураЭлемента = Новый Структура;
				Для Каждого Поле Из ЭлементМассива Цикл
					Если Поле.Ключ<>"Имя" Тогда
						СтруктураЭлемента.Вставить(Поле.Ключ, Поле.Значение);	
					КонецЕсли;
				КонецЦикла;
				КлючПодструктуры = ЭлементМассива.Имя;
				ПодСтруктура.Вставить(КлючПодструктуры,СтруктураЭлемента);	
			КонецЦикла;
			КонтекстКонвертации.Вставить("УровеньМассив", КонтекстКонвертации.Уровень);
			КлючВставить	= Элемент.Ключ;
			ЗначениеВставить= ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(ПодСтруктура,КонтекстКонвертации);//
			Если	КлючВставить = "Значение"
				И	КэшИни.Количество() = 1
				И	ДопПараметры.Свойство("УровеньМассив")
				И	КонтекстКонвертации.Уровень - ДопПараметры.УровеньМассив = 2 Тогда
				//На 2 уровеня выше был массив, значит это может быть структура с удаленным дублирующимся именем . Пример: <Сотрудник Имя="Сотрудник"><Элемент/></Сотрудник> Превращается в {"Сотрудник": {"Элемент"}}
				СтруктураНастроек = ЗначениеВставить;//
			Иначе
				СтруктураНастроек.Вставить(Элемент.Ключ, ЗначениеВставить);//
			КонецЕсли;
			КонтекстКонвертации.Удалить("УровеньМассив");
		ИначеЕсли Лев(Элемент.Ключ,6)="Отбор_" Тогда
			ИмяОтбора = Сред(Элемент.Ключ, 7);
			Если	Элемент.Значение = ""
				И	КонтекстКонвертации.Свойство("ОчищатьОтключенные")
				И	КонтекстКонвертации.ОчищатьОтключенные Тогда
				Продолжить;//Отключенные узлы отбора не попадают в итоговую инишку.
			КонецЕсли;
			Если Не СтруктураНастроек.Свойство("Отбор") Тогда
				СтруктураНастроек.Вставить("Отбор", Новый Структура(ИмяОтбора,Элемент.Значение));//			
			Иначе
				СтруктураНастроек.Отбор.Вставить(ИмяОтбора,Элемент.Значение);
			КонецЕсли;
		Иначе
			ЗначениеКонтекста = Неопределено;
			Если КонтекстКонвертации.Свойство("Удалять",ЗначениеКонтекста)
				И ЗначениеКонтекста = Элемент.Ключ Тогда
				Продолжить;
			ИначеЕсли	КонтекстКонвертации.Свойство("ОбернутьЗначение", ЗначениеКонтекста)
				И	Не	ЗначениеКонтекста = Элемент.Ключ Тогда
				СтруктураНастроек.Вставить(Элемент.Ключ, Новый Структура(ЗначениеКонтекста, Элемент.Значение));
			Иначе
				СтруктураНастроек.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураНастроек
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_ВнешниеВызовы
////////////////////////////////////////////////////

&НаКлиенте                                  
Процедура	АвтообновлениеПриИзменении(Кэш, НовоеЗначение) Экспорт	
	Кэш.КэшНастроек.ИзмененияВНастройках = Истина;		
	// Если попадаем сюда до авторизации, то выбранных настроек у нас нет. Изменяем в кэше, потом при авторизации заполнится автоматом (с) Сычев
	Если Кэш.КэшНастроек.Свойство("ВыбранныеНастройки") Тогда
		Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.Автообновление = НовоеЗначение;
	КонецЕсли;
	Кэш.Парам.НастройкиАвтообновление = НовоеЗначение;
КонецПроцедуры

&НаКлиенте                                  
Процедура	ИспользоватьГенераторПриИзменении(Кэш, НовоеЗначение) Экспорт	
	ЗаписатьОбщиеНастройкиПодключения(Кэш, Новый Структура("ИспользоватьГенератор", НовоеЗначение), Кэш.Парам.ИдентификаторНастроек);
КонецПроцедуры

&НаКлиенте
Процедура	ИнициализироватьКэшНастроек(Кэш, ПараметрыИнициализации=Неопределено, Отказ=Ложь) Экспорт
	Если Отказ Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ПараметрыИнициализации) = Тип("Структура") 
		И ПараметрыИнициализации.Свойство("Обновить")  //флаг "Обновить" используется для установки кэша серверных настроек при изменении параметров 
		И ПараметрыИнициализации.Обновить Тогда
		УстановитьПараметрыХранящиесяНаШаблоне(Кэш, ПараметрыИнициализации.Параметр);
		Возврат;
	КонецЕсли;
	Кэш.ФормаНастроекОбщее.МестныйКэш = Кэш;
	
	КэшIntegrationConnection= Новый Соответствие;
	КэшПолученныхНастроек	= Новый Структура;
	ПараметрыНастроек		= Новый Структура;
	КэшНастроек				= Новый Структура("ПараметрыНастроек, КэшIntegrationConnection, ИзмененияВНастройках, ИниВПорядке", ПараметрыНастроек, КэшIntegrationConnection, Ложь, Ложь);
	ПрефиксСервисСистемы	= "Com1C";
	
	ПараметрыНастроек.Вставить("ПрефиксСервис",					ПрефиксСервисСистемы + "82");	//Префикс системы по-умолчанию, для стандартных настроек
	ПараметрыНастроек.Вставить("ЭлементФормы",					"НастройкиНазвание");			//Элемент формы по-умолчанию
	ПараметрыНастроек.Вставить("ПрефиксУстановленныхНастроек",	"-");							//Передаваемый в статистику префикс от выбранных настроек.
	ПараметрыНастроек.Вставить("ПолучатьИниЗаРаз",				30);							//Определяет максимальное количество ини, получаемое запросом на сервер за раз. Разбивка для ускорения обработки больших строк.
	ПараметрыНастроек.Вставить("СимволыКаталог",				"@/-_=\# &:|;?.");				//Последовательность символов, которых не может быть в идентификаторе соединения, но могут быть в пути к папке
	ПараметрыНастроек.Вставить("КэшироватьВсеПолучаемые",		Ложь);							//Определяет необходимость хранить полученные ини в памяти.
	ПараметрыНастроек.Вставить("ИспользоватьУИДИнтеграции",		Истина);						//Определяет залоченность системы на УИД интеграции. В Мастере нельзя создать коннекшен и/или шаблон, отличный от установленного.
	ПараметрыНастроек.Вставить("СформироватьСтруктуруРазделов",	Ложь);							//Определяет необходимость формировать структуру разделов с Сбис Меню по всем инишкам.
	ПараметрыНастроек.Вставить("Режим",							"Облако");
	ПараметрыНастроек.Вставить("ПоследнийРаздел",				"");							//Определяет наличие перехода в раздел настроек.
	
	
	ПараметрыСистемы = Кэш.ПараметрыСистемы;
	Если ПараметрыСистемы = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ПараметрыКонфигурации = Кэш.ФормаНастроекОбщее.ОпределитьПараметрыКонфигурации(Кэш.ПараметрыСистемы, Отказ);
	
	//Определяем service в зависимости от текущей версии системы
	ВерсияСистемыМС = СтрЗаменить(ПараметрыСистемы.Клиент.ВерсияПриложения, ".", Символы.ПС);
	service = ПрефиксСервисСистемы + СтрПолучитьСтроку(ВерсияСистемыМС,1);
	ПодВерсияСистемы2 = СтрПолучитьСтроку(ВерсияСистемыМС,2);
	Если (ПодВерсияСистемы2 = "1") Тогда
		ПодВерсияСистемы2 = "2";
	КонецЕсли;
	service = service + ПодВерсияСистемы2;
	
	ПараметрыКонфигурации.Вставить("service", service);
	КэшНастроек.Вставить("ПараметрыКонфигурации", ПараметрыКонфигурации);
	
	СоответствиеНазваний= Новый Массив;
	ДоступныеТипыИни	= Новый Массив;
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "Конфигурация",		"Конфигурация"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "сбисМеню",			"сбисМеню"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "СинхВыгрузка", 		"СинхВыгрузка"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "СинхЗагрузка", 		"СинхЗагрузка"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "ЗагрузкаИсходящих",	"Загрузка_Исходящий"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "Загрузка", 			"Загрузка_Входящий"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "ВыгрузкаВходящих", 	"Выгрузка_Входящий"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "Выгрузка", 			""));
	//Так, как в меню могут быть различные типы, не относящиеся к обработке, делаем фильтр.
	ДоступныеТипыИни.Добавить("Система");
	Для Шаг = 4 По СоответствиеНазваний.Количество()-1 Цикл
		ДоступныеТипыИни.Добавить(СоответствиеНазваний[Шаг].json);
	КонецЦикла;
	ПараметрыНастроек.Вставить("СоответствиеНазваний",СоответствиеНазваний);//Шаблон перевода имен названий сервис-обработка
	ПараметрыНастроек.Вставить("ДоступныеТипыИни",	ДоступныеТипыИни);		//Список доступных типов ини для работы обработки

	СписокПараметровХранящихсяНаШаблоне = Новый Массив;
    СписокПараметровХранящихсяНаШаблоне.Добавить("использоватьгенератор");
	СписокПараметровХранящихсяНаШаблоне.Добавить("реквизитсопоставленияноменклатуры");
	Если МодульОбъектаКлиент().ИспользоватьСбисПараметрыДляХраненияОбщихНастроек() Тогда 
    	СписокПараметровХранящихсяНаШаблоне.Добавить("saby_params");
	КонецЕсли;
   	Если Кэш.Парам.СпособХраненияМетокСтатусов = 1 Тогда
        СписокПараметровХранящихсяНаШаблоне.Добавить("status_marks");
    КонецЕсли;
	КэшНастроек.Вставить("СписокПараметровХранящихсяНаШаблоне", СписокПараметровХранящихсяНаШаблоне);
	
	//Очищаем закэшированные значения ини загрузки.
	Если Кэш.Свойство("КэшЗначенийИни") Тогда 
		Кэш.КэшЗначенийИни.ИниЗагрузки = Новый Структура();
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыИнициализации) = Тип("Структура") 
		И ПараметрыИнициализации.Свойство("ИнициализацияВременногоКэша") 
		И ПараметрыИнициализации.ИнициализацияВременногоКэша Тогда 
		Кэш.Вставить("КэшНастроек", КэшНастроек);
	Иначе 
		МодульОбъектаКлиент().ОбновитьПараметрГлобальногоМодуля("ФормаНастроек",	ЭтаФорма);
		МодульОбъектаКлиент().ОбновитьПараметрГлобальногоМодуля("КэшНастроек",		КэшНастроек);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура	КонфигурацияПриИзменении(ПараметрыКонфигурацииВходящие, Кэш) Экспорт
	
    НоваяКонфигурация	= ПараметрыКонфигурацииВходящие.Конфигурация;
	ВыбранныеНастройки	= Кэш.КэшНастроек.ВыбранныеНастройки;

	Если 	ВыбранныеНастройки.ПараметрыКонфигурации.subsystem = НоваяКонфигурация.ПараметрыКонфигурации.subsystem
		И	ВыбранныеНастройки.ПараметрыКонфигурации.version = НоваяКонфигурация.ПараметрыКонфигурации.version Тогда
		МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(, ПараметрыКонфигурацииВходящие.ОбработчикЗавершения);
		Возврат;
	ИначеЕсли	Не ВыбранныеНастройки.ПараметрыРаботы.Статус = "Новый" Тогда
		ПараметрыКонфигурацииВходящие.ОбработчикЗавершения.ДополнительныеПараметры.Отказ = Истина;
		СбисИсключение = МодульОбъектаКлиент().НовыйСбисИсключение(, "ФайлыНастроекСервер.КонфигурацияПриИзменении",,,"Запрещено менять систему для уже созданных подключений");
		МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(СбисИсключение, ПараметрыКонфигурацииВходящие.ОбработчикЗавершения);
		Возврат;
	КонецЕсли;
	
	ОбработчикПослеДиалога = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("КонфигурацияПриИзменении_ПослеДиалога", ЭтаФорма, ПараметрыКонфигурацииВходящие);
	МодульОбъектаКлиент().СбисПоказатьВопрос(ОбработчикПослеДиалога, "Изменить конфигурацию настроек?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура	КонфигурацияПриИзменении_ПослеДиалога(РезультатДиалога, ПараметрыКонфигурацииВходящие) Экспорт
	
	Перем ЗначениеИни;
	ОбработчикЗавершенияИзменения	= ПараметрыКонфигурацииВходящие.ОбработчикЗавершения;
    НоваяКонфигурация				= ПараметрыКонфигурацииВходящие.Конфигурация;
	Кэш								= ОбработчикЗавершенияИзменения.ДополнительныеПараметры.Кэш;
	Если РезультатДиалога = КодВозвратаДиалога.Нет Тогда
		МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(, ПараметрыКонфигурацииВходящие.ОбработчикЗавершения);
		Возврат;
	КонецЕсли;
	Результат	= Неопределено;
	Отказ		= Ложь;
	Попытка
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Изменение подключения...");
		НовыйКлассIntegrationConnection = КлассIntegrationConnection_Скопировать(Кэш, Кэш.КэшНастроек.ВыбранныеНастройки, Новый Структура);
		КлассIntegrationConnection_Изменить(НовыйКлассIntegrationConnection, Новый Структура("Кэш, ПараметрыКонфигурации", Кэш, НоваяКонфигурация.ПараметрыКонфигурации));
		
		РезультатДозапроса = КлассIntegrationConnection_ДозапроситьИни(Кэш, НовыйКлассIntegrationConnection, Новый Структура, Отказ);
		Если Отказ Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(РезультатДозапроса, "ФайлыНастроекСервер.КлассIntegrationConnection.Установить");
		КонецЕсли;
		
		РезультатУстановки = КлассIntegrationConnection_Установить(Кэш, НовыйКлассIntegrationConnection, Новый Структура, Отказ);
		Если Отказ Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(РезультатУстановки, "ФайлыНастроекСервер.КлассIntegrationConnection.Установить");
		КонецЕсли;
		Результат = РезультатУстановки.СписокФайлов;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Результат = МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФайлыНастроекСервер.КонфигурацияПриИзменении");
		ПараметрыКонфигурацииВходящие.ОбработчикЗавершения.ДополнительныеПараметры.Отказ = Истина;
	КонецПопытки;
	МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(Результат, ПараметрыКонфигурацииВходящие.ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Функция		ПолучитьМассивФайловДляКонфигурации(Кэш,СписокТиповНастроек, ПрефиксСервис,ДополнительныеПараметры) Экспорт
	
	Возврат	Кэш.ФормаНастроекОбщее.ПолучитьМассивФайловДляКонфигурации(СписокТиповНастроек, ПрефиксСервис, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Функция		ПолучитьИнформациюПоНастройкам(Кэш, ПараметрыСтатистики, Отказ) Экспорт
	
	Возврат Новый Структура("XSLT,XML,EPF", Новый Массив, Новый Массив, Новый Структура("ЕстьИзменения", Ложь));
	
КонецФункции	

&НаКлиенте                                  
Процедура	ПриЗапускеРедактораНастроек(ПараметрыЗапускаРедактораВходящие, Кэш) Экспорт
	Перем КэшироватьТекущие, ВыбранныеНастройки;
	
	Отказ		= Ложь;
	КэшНастроек = Кэш.КэшНастроек;
	
	КэшНастроек.Удалить("ИзмененияВНастройках_ПараметрыДиалога");
	Если Не ПараметрыЗапускаРедактораВходящие.Свойство("КэшироватьТекущие", КэшироватьТекущие) Тогда
		КэшироватьТекущие = Истина;
	КонецЕсли;
	
	//Кэширование включается при работе в разделе настроек. При выходе из раздела отключается и кэш чистится
	КэшНастроек.ПараметрыНастроек.КэшироватьВсеПолучаемые = ПараметрыЗапускаРедактораВходящие.КэшироватьВсеПолучаемые;
	//Кэшируем текущие ини.
	Если		КэшироватьТекущие Тогда
		СтруктураТекущихНастроек = СформироватьСтруктуруТекущихНастроек(Кэш, ПараметрыЗапускаРедактораВходящие, Отказ);
		Если Отказ Тогда
			//По какой-то причине не удалось закэшировать текущие настройки. Запускам алгоритм по-умолчанию.
			Если СтруктураТекущихНастроек.code = 765 Тогда//Не нашли типовые настройки. Вообще всё пропало!
				МодульОбъектаКлиент().ВызватьСбисИсключение(СтруктураТекущихНастроек, "ФайлыНастроекСервер.ПриЗапускеРедактораНастроек");
			КонецЕсли;
			Отказ = Ложь;
 			СбисПеречитатьНастройки(Новый Структура, Кэш);
		ИначеЕсли Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", ВыбранныеНастройки) Тогда
			//Установим параметры на отправку в ложь. Таким образом, закэшируем изменения и параметры, а после отправим всё на сервис при записи изменений
			Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисМеню.Отправлять = Ложь;
			Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Отправлять = Ложь;
		Иначе
			Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", СтруктураТекущихНастроек);
		КонецЕсли;
	КонецЕсли;
	КлассIntegrationConnection_ЗаполнитьРедакторИниПоКлассу(Кэш, СтруктураТекущихНастроек, Новый Структура)

КонецПроцедуры

&НаКлиенте                                  
Процедура	ПриИзмененииНаВкладкеФайловНастроек(ПараметрыИзменения, Кэш) Экспорт
	//Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
	Если ПараметрыИзменения.Поле = "Название" Тогда
		Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.Изменен = Не Кэш.КэшНастроек.ВыбранныеНастройки.Название = ПараметрыИзменения.НовоеЗначение;
		Кэш.КэшНастроек.ВыбранныеНастройки.Название	= ПараметрыИзменения.НовоеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте                                  
Функция		СбисДобавитьПечатныеФормы(Кэш) Экспорт
	
	Возврат Кэш.ФормаНастроекОбщее.СбисДобавитьПечатныеФормы(Кэш);
	
КонецФункции	

&НаКлиенте
Функция		СбисКлючНастроек(Кэш) Экспорт
	Если ЗначениеЗаполнено(Кэш.ГлавноеОкно.Пользователь) Тогда
		КлючНастроек = Кэш.ГлавноеОкно.Пользователь;
	ИначеЕсли	Кэш.СБИС.ОбменВключен
			И	Кэш.СБИС.Авторизован Тогда
		КлючНастроек = Кэш.Интеграция.ИнформацияОТекущемПользователе(Кэш);
	Иначе
		КлючНастроек = "";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(КлючНастроек) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат НРег(СтрЗаменить(СтрЗаменить(СтрЗаменить(КлючНастроек, " ", ""), Символы.ПС, ""), Символы.Таб, ""));
КонецФункции

//Возвращает список ключей в порядке их приоритета для поиска сохранённого коннекшена. Первый ключ в списке - основной
&НаКлиенте
Функция		КлючиНастроекСБИС(Кэш) Экспорт
	
	ШаблонКлюча = "{КодСервиса}{ИдПользователя}_{ИдАккаунта}";
	ПараметрыПрименить = Новый Структура("Заменить", Кэш.СБИС.ПараметрыИнтеграции);

	Результат = Новый Массив;
	КлючДобавить = МодульОбъектаКлиент().СбисФормат(ШаблонКлюча, ПараметрыПрименить);
	Если ЗначениеЗаполнено(КлючДобавить) Тогда
		Результат.Добавить(КлючДобавить);
	КонецЕсли;
	Если		ЗначениеЗаполнено(Кэш.СБИС.ПараметрыИнтеграции.Пользователь) Тогда
		КлючНастроек = Кэш.СБИС.ПараметрыИнтеграции.Пользователь;
	ИначеЕсли	ЗначениеЗаполнено(Кэш.ГлавноеОкно.Пользователь) Тогда
		КлючНастроек = Кэш.ГлавноеОкно.Пользователь;
	ИначеЕсли	Кэш.СБИС.ОбменВключен
			И	Кэш.СБИС.Авторизован Тогда
		КлючНастроек = Кэш.Интеграция.ИнформацияОТекущемПользователе(Кэш);
	Иначе
		КлючНастроек = "";
	КонецЕсли;
	ШаблонКлюча = "{КодСервиса}{ИдПользователя}";
	ПараметрыФормат = Новый Структура("КодСервиса, ИдПользователя", "", "", "");
	ПараметрыПрименить.Заменить = ПараметрыФормат;
	Если ЗначениеЗаполнено(КлючНастроек) Тогда
		ПараметрыФормат.КодСервиса		= Кэш.СБИС.ПараметрыИнтеграции.КодСервиса;
		ПараметрыФормат.ИдПользователя	= НРег(СтрЗаменить(СтрЗаменить(СтрЗаменить(КлючНастроек, " ", ""), Символы.ПС, ""), Символы.Таб, ""));
		Результат.Добавить(МодульОбъектаКлиент().СбисФормат(ШаблонКлюча, ПараметрыПрименить));
		ПараметрыФормат.КодСервиса = "";
		Результат.Добавить(МодульОбъектаКлиент().СбисФормат(ШаблонКлюча, ПараметрыПрименить));
	КонецЕсли;
	Если Не Кэш.Парам.ВходПоСертификату Тогда
		ПараметрыФормат.ИдПользователя	= НРег(Кэш.Парам.Логин);
		Результат.Добавить(МодульОбъектаКлиент().СбисФормат(ШаблонКлюча, ПараметрыПрименить));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура	СбисПодключитьЗаплатки(Кэш, ДопПараметрыПодключения=Неопределено) Экспорт
	
	// Подключает внешнюю обработку с пользовательскими функциями
	МестаПоискаОбработки = Новый Массив();//Массив адресов, где искать файл в порядке приоритета
	МестаПоискаОбработки.Добавить(Новый Структура("Путь, Алгоритм", "Справочники.ДополнительныеОтчетыИОбработки",	"Запрос"));
	МестаПоискаОбработки.Добавить(Новый Структура("Путь, Алгоритм", "Справочники.ВнешниеОбработки",					"Запрос"));
	
	ДопПараметры = Новый Структура("МестаПоиска", МестаПоискаОбработки);
	Кэш.ФормаНастроекОбщее.СбисПодключитьЗаплатки(Кэш, ДопПараметры);
		
КонецПроцедуры

//Функция возвращает последний сохраненный идентификатор настроек в СБИС для выбранного логина пользователя
&НаКлиенте
Функция		СбисПолучитьИдентификаторНастроек(Кэш) Экспорт
	
	КлючиНастроек = КлючиНастроекСБИС(Кэш);

	Для Каждого КлючНастроек Из	КлючиНастроек Цикл
		ЗначениеИдентификатора = Кэш.Парам.ИдентификаторыНастроекВСБИС.НайтиПоЗначению(КлючНастроек);
		Если Не ЗначениеИдентификатора = Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеИдентификатора = Неопределено Тогда
		Результат = "";
	Иначе
		Результат = ЗначениеИдентификатора.Представление;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Функция устанавливает соответсвие последнего идентификатора настроек для пользователя
&НаКлиенте
Процедура	СбисЗаписатьИдентификаторНастроек(Кэш, ИдентификаторНастроек) Экспорт
	
	КлючиНастроек = КлючиНастроекСБИС(Кэш);
	КлючДляЗаписи = КлючиНастроек[0];
	КлючиНастроек.Удалить(0);
 	ЗначениеИдентификатора = Кэш.Парам.ИдентификаторыНастроекВСБИС.НайтиПоЗначению(КлючДляЗаписи);
	Если ЗначениеИдентификатора = Неопределено Тогда
		Кэш.Парам.ИдентификаторыНастроекВСБИС.Добавить(КлючДляЗаписи, ИдентификаторНастроек);
	Иначе
		ЗначениеИдентификатора.Представление = ИдентификаторНастроек;
	КонецЕсли;
	СбисОчиститьИдПоСтаромуКлючу(Кэш, КлючиНастроек);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("ИдентификаторыНастроекВСБИС", Кэш.Парам.ИдентификаторыНастроекВСБИС);
	
КонецПроцедуры

&НаКлиенте
Процедура	СбисОчиститьИдПоСтаромуКлючу(Кэш, КлючиНастроек)
	
	Для Каждого КлючНастроек Из КлючиНастроек Цикл
 	 	ЗначениеИдентификатора = Кэш.Парам.ИдентификаторыНастроекВСБИС.НайтиПоЗначению(КлючНастроек);
		Если ЗначениеИдентификатора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Кэш.Парам.ИдентификаторыНастроекВСБИС.Удалить(ЗначениеИдентификатора);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура	СбисВыбратьСоединение(Кэш, ДопПараметры=Неопределено) Экспорт
	Перем ОписаниеОповещенияЗавершение;
	Отказ = Ложь;
	Если ДопПараметры = Неопределено Тогда 
		ПараметрыДиалога = Новый Структура("ТипКоннекшена", "user");
	Иначе
		ПараметрыДиалога = ДопПараметры;
	КонецЕсли; 
	РезультатИнициализации = ИнициироватьРежимДиалога(Кэш, ПараметрыДиалога, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатИнициализации);
		Возврат;
	КонецЕсли;
	Если Не ПараметрыДиалога.Свойство("ОбработчикРезультата", ОписаниеОповещенияЗавершение) Тогда
		ПараметрыВызова = Новый Структура("Кэш, Отказ, ДополнительныеПараметры",Кэш,Отказ, Новый Структура("СообщатьПриОшибке", Истина));
		ОписаниеОповещенияЗавершение = Кэш.ОбщиеФункции.СбисОписаниеОповещения(Кэш, "СбисЗапускПримененияНастроекСФормы", ЭтаФорма, ПараметрыВызова);
	КонецЕсли;

	ТекстПредупреждения = "Не удалось получить список настроек СБИС!";
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если Отказ Тогда
			Предупреждение(ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		РезультатВыбора = ЭтаФорма.ОткрытьМодально();
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, РезультатВыбора, ОписаниеОповещенияЗавершение);
	#Иначе
		Если Отказ Тогда
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияЗавершение;
		Открыть();
	#КонецЕсли
КонецПроцедуры

&НаКлиенте                                  
Процедура	СбисВыгрузитьНастройкиВКаталог(Кэш, ПараметрыВыгрузки) Экспорт
	Отказ = Ложь;
	ГлавноеОкно		= Кэш.ГлавноеОкно;
	
	ДиалогОткрытия	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Каталог		= ГлавноеОкно.Кэш.Парам.КаталогНастроек;
	ДиалогОткрытия.Заголовок	= "Выберите каталог"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		КаталогСНастройками	= Кэш.ОбщиеФункции.СбисФорматКаталога(ДиалогОткрытия.Каталог, Кэш.ПараметрыСистемы.Клиент); 
	Иначе
		ПродолжитьВыполнение	= Ложь;
		Возврат;
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("КаталогНаКлиенте",	КаталогСНастройками);
	ПараметрыВыгрузки.Вставить("ВариантОбработки",	0);
	
	СбисПолучитьНастройкиССервера_Клиент(ПараметрыВыгрузки);//Массив установленных ини
		
КонецПроцедуры

&НаКлиенте                                  
Процедура	СбисЗагрузитьНастройкиИзКаталога(Кэш, ДопПараметры) Экспорт
	
	ГлавноеОкно		= Кэш.ГлавноеОкно;
	Отказ = Ложь;
	
	ДиалогОткрытия	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Каталог		= ГлавноеОкно.Кэш.Парам.КаталогНастроек;
	ДиалогОткрытия.Заголовок	= "Выберите каталог"; 
	Если Не ДиалогОткрытия.Выбрать() Тогда 
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, "", ДопПараметры.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;	
	КаталогНастроекКлиент	= Кэш.ОбщиеФункции.СбисФорматКаталога(ДиалогОткрытия.Каталог, Кэш.ПараметрыСистемы.Клиент); 
	ЗагрузитьНастройкиНаСервер_ПослеВвода(КаталогНастроекКлиент, ДопПараметры);	
	
КонецПроцедуры

&НаКлиенте                                  
Процедура	ЗагрузитьНастройкиНаСервер_ПослеВвода(КаталогНастроекКлиент, ДопПараметры) Экспорт
	Кэш = ДопПараметры.Кэш;
	Отказ = Ложь;
	Кэш.ГлавноеОкно.Кэш.Парам.КаталогНастроек	= КаталогНастроекКлиент;
	УстановленныеИни = ЗагрузитьНастройкиИзКаталогаНаСервер(Кэш, КаталогНастроекКлиент, Отказ);//Массив установленных ини
	
	Если Отказ Тогда
		ДопПараметры.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, УстановленныеИни, ДопПараметры.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	
	Кэш.КэшНастроек.Вставить("ИзмененияВНастройках", Истина);
	Кэш.ФормаНастроекОбщее.СбисОбновитьИнформациюНастроек(Кэш, УстановленныеИни);
	МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(КаталогНастроекКлиент, ДопПараметры.ОписаниеОповещенияОЗавершении);
КонецПроцедуры	
	
//При смене версии, типовые инишки обновляются при чтении соединения.
&НаКлиенте
Процедура	СбисОбновитьИниФайлы(Кэш, ПараметрыОбновления, Отказ) Экспорт
	Возврат;
КонецПроцедуры

// Заглушка для настроек на сервере. Они там обновляются по своему алгоритму.
&НаКлиенте
Функция ПолучитьОсвеженныеФайлыНастроек(Кэш, ПараметрыОбновления, Отказ) Экспорт
	Возврат Неопределено;
КонецФункции

//Серверные настройки - не перечитывать ини
&НаКлиенте
Функция		СбисОбновитьМассивУстановленныхИниФайлов(Кэш, МассивУстановленныхИни) Экспорт
	
	Возврат	МассивУстановленныхИни;
	
КонецФункции

&НаКлиенте                                  
Функция		СбисОтключитьВыбранныеФайлыНастроек(Ини, Кэш, Идентификатор, Отказ=Ложь) Экспорт
	
	Если Ини.Количество() Тогда
		Кэш.КэшНастроек.Вставить("ИзмененияВНастройках", Истина);
	КонецЕсли;
	
	Возврат	ОтключитьФайлыНастроекНаСервере(Ини, Кэш, Идентификатор, Отказ);
	
КонецФункции

//Очищает выбранные настройки для их повторного заполнения
&НаКлиенте
Процедура	СбисОчиститьВыбранныеНастройки(Кэш, Отказ=Ложь) Экспорт
	Кэш.Ини			= Новый Структура;
	Кэш.КэшНастроек.ИниВПорядке	= Ложь;
	Если Не Кэш.Свойство("КэшНастроек") Тогда
		Возврат;
	КонецЕсли;
	Кэш.КэшНастроек.Удалить("ИзмененияВНастройках_ПараметрыДиалога");
	
	Если Кэш.КэшНастроек.Свойство("ВыбранныеНастройки")	Тогда
		Кэш.КэшНастроек.Удалить("ВыбранныеНастройки");
	КонецЕсли;
	Кэш.Парам.ИдентификаторНастроек = "";
	Кэш.КэшНастроек.ИзмененияВНастройках = Кэш.ФормаНастроекОбщее.Открыта();	
КонецПроцедуры

&НаКлиенте
Процедура	СбисОчиститьКэшНастроек(Кэш) Экспорт

	КэшНастроек = Неопределено;
	ВыбранныеНастройки = Неопределено;
	Если Не Кэш.Свойство("КэшНастроек", КэшНастроек) Тогда
		Возврат;
	КонецЕсли;
	КэшНастроек.КэшIntegrationConnection.Очистить();
	КэшНастроек.ПараметрыНастроек.ПоследнийРаздел = "";
	
	Кэш.ФормаНастроекОбщее.СбисОчиститьКэшНастроек(Кэш, Новый Структура);
	Если	Не КэшНастроек.Свойство("ВыбранныеНастройки", ВыбранныеНастройки)
		Или	Не ЗначениеЗаполнено(ВыбранныеНастройки) Тогда
		Возврат;
	КонецЕсли;
	//Установим выбранным настройкам параметры для работы
	//ВыбранныеНастройки.Данные.Ини = Новый Структура;
	ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Отправлять	= Истина;
	ВыбранныеНастройки.ПараметрыРаботы.СбисМеню.Отправлять		= Ложь;
КонецПроцедуры

//Функция отслеживает изменение версии конфигурации и наличия изменений в файлах настроек.
&НаКлиенте                                  
Функция		СбисОпределитьНеобходимостьПроверки(Кэш, УстановленныеИниФайлы, СтруктураПараметров) Экспорт
	Перем СбисПоследнееИзменение, ВыбранныеНастройки;
	Если Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки",ВыбранныеНастройки) Тогда
		Отказ = Ложь;
		ВыбранныеНастройки = СбисПолучитьДанныеСервисаИнтеграции(Кэш, Новый Структура("Идентификатор,СписокИни", Кэш.Парам.ИдентификаторНастроек, Неопределено), Отказ);
		//TODO38 исправить это место. Не должно быть ситуаций когда нет настроек.
		Если Отказ Тогда//Не понятно, что произошло и почему настроек нет. Вернём проверку истина, на всякий.
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, ВыбранныеНастройки);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	НужноПроверять = Кэш.ФормаНастроекОбщее.СбисОпределитьНеобходимостьПроверки(Кэш, СтруктураПараметров);
	СтруктураПараметров.Свойство("ПоследнееИзменение",	СбисПоследнееИзменение);
	
	//Определим необходимость проверки по последним изменениям в настройках
	Если	Не НужноПроверять
		И	Не СбисПоследнееИзменение = ВыбранныеНастройки.ПараметрыРаботы.ДатаИзмененияНастроек Тогда
		НужноПроверять = Истина;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ПоследнееИзменение",	ВыбранныеНастройки.ПараметрыРаботы.ДатаИзмененияНастроек);
	
	Возврат НужноПроверять;
	
КонецФункции

//Применяет выбранные настройки в обработку. Инициирует проверку.
&НаКлиенте
Процедура	СбисПеречитатьНастройки(ПараметрыПеречитать, Кэш) Экспорт
	
	//Ничего не менялось
	Если	Не	Кэш.КэшНастроек.ИзмененияВНастройках
		И		Кэш.КэшНастроек.Свойство("ВыбранныеНастройки")
		И	Не	Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.Изменен Тогда
		МодульОбъектаКлиент().СбисСообщить(Новый Структура("Текст, ЭлементНазначения", "Изменения отсутствуют.", ПараметрыПеречитать.Элемент));
		Возврат
	КонецЕсли;
	СбисПараметрыДиалога = Новый Структура("Кэш, ПараметрыПеречитать", Кэш, ПараметрыПеречитать);
	ОбработчикДиалога = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("СбисПеречитатьНастройки_ПослеДиалога", ЭтаФорма, СбисПараметрыДиалога);
	ТекстВопроса = "Все несохраненные изменения будут очищены. Продолжить?";
	МодульОбъектаКлиент().СбисПоказатьВопрос(ОбработчикДиалога, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,"Очистить изменения?");
	
КонецПроцедуры

//Применяет выбранные настройки в обработку. Инициирует проверку.
&НаКлиенте
Процедура	СбисПеречитатьНастройки_ПослеДиалога(РезультатОтвета, ДопПараметры) Экспорт

	Если Не РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Кэш							= ДопПараметры.Кэш;
	НастройкиДоПеречитывания	= Кэш.КэшНастроек.ВыбранныеНастройки;

	Попытка
		
		СбисПеречитатьТекущиеНастройки(ДопПараметры.ПараметрыПеречитать, Кэш);
		
	Исключение
		
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ФайлыНастроекСервер.СбисПеречитатьНастройки_ПослеДиалога");
		ОшибкаУстановки = Истина;
		РезультатОтката = КлассIntegrationConnection_Установить(Кэш, НастройкиДоПеречитывания, Новый Структура("ПрименитьXSLT, ПолучитьДанныеИни, ТихийРежим", Ложь, Ложь, Истина), ОшибкаУстановки);
		Если ОшибкаУстановки Тогда
			
			МодульОбъектаКлиент().СообщитьСбисИсключение(РезультатОтката);
			
		КонецЕсли;
		
	КонецПопытки;
	
	Если Кэш.ФормаНастроекОбщее.Открыта() Тогда
		Кэш.ФормаНастроекОбщее.СбисОбновитьИнформациюНастроек(Кэш);
	КонецЕсли;

КонецПроцедуры

//Получает данные настроек, как стандартных, так и пользовательских. Проверяет наличие в кэше, дополняет данные в кэше. Возвращает "псевдокласс" конфиг/коннекшен/их список
&НаКлиенте
Функция		СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыЗапроса, Отказ) Экспорт
	Перем	КлассIntegrationConnection,	//Временный параметр для перевода на класс
			ТипЗапроса,					//Возможные значения: "Config", "Connection, ListConfig, ListConnection". Если не указано, определяем по наличию идентификатора.
			Идентификатор,				//ИД соединения. Если не передан, значит это "Config", иначе "Connection".
			ПараметрыКонфигурации,		//Параметры конфигурации: Структура "service,subsystem,verison"
			СписокИни,					//Возможные значения:
										// 1) Массив структур с ключами "type", "name".
										// 2) Пустой массив - получаем всё.
										// 3) Неопрелено - не получаем ини, только основные поля. 
										// 4) Не передан - строится автоматически из СбисМеню по полю enable.
			ДополнительныеПараметры,	//Дополнительно, для передачи в метод чтения.
			Кэшировать,					//Возможность отключить кэширование конкретного чтения, без изменения общей настройки
			БратьВКэше,					//Возможность отключить получение из кэша конкретных значений, без изменения общей настройки
			Результат;					//Возвращаемый результат	

	ПараметрыПолучения = Новый Структура;
	//Определяем переданные параметры и устанавливаем фильтры.
	Если Не ПараметрыЗапроса.Свойство("КлассIntegrationConnection", КлассIntegrationConnection) Тогда
		Если Не ПараметрыЗапроса.Свойство("Идентификатор", Идентификатор) Тогда 
			//Или	Идентификатор = "Новое подключение" Тогда
			Идентификатор = "";
		КонецЕсли;
		Если Не ПараметрыЗапроса.Свойство("ТипЗапроса", ТипЗапроса)	Тогда
			ТипЗапроса = ?(ПустаяСтрока(Идентификатор), "Config", "Connection");	
		КонецЕсли;
		Если Не ПараметрыЗапроса.Свойство("ПараметрыКонфигурации",	ПараметрыКонфигурации)	Тогда
			ПараметрыКонфигурации = Новый Структура("service,subsystem,version");
			ЗаполнитьЗначенияСвойств(ПараметрыКонфигурации,Кэш.КэшНастроек.ПараметрыКонфигурации);	
			Если ТипЗапроса = "Config" Или ТипЗапроса = "ListConfig" Тогда//Для запросов на конфиг без указания конфигурации берем префикс 82.
				ПараметрыКонфигурации.service = Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис;
			КонецЕсли;
		КонецЕсли;
		Если Не ПараметрыЗапроса.Свойство("СписокИни", СписокИни)			Тогда
			//Для config пользовательской конфигурации ини нет.
			Если		ПараметрыКонфигурации.subsystem = ""
				И Не	ТипЗапроса = "Connection"	Тогда
				СписокИни = Неопределено;
			Иначе
				ПараметрыЗапросаМеню = Новый Структура("Идентификатор,ПараметрыКонфигурации",Идентификатор,ПараметрыКонфигурации);
				РезультатЗапроса = СформироватьСписокИни(Кэш, ПараметрыЗапросаМеню, Отказ);
				Если Отказ Тогда
					Возврат РезультатЗапроса;
				КонецЕсли;
				Если	Не ТипЗнч(РезультатЗапроса) = Тип("Структура")
					Или	Не РезультатЗапроса.Свойство("Данные",СписокИни) Тогда
					СписокИни = РезультатЗапроса;	
				КонецЕсли;
			КонецЕсли;
			ПараметрыПолучения.Вставить("СписокИни", СписокИни);	
		Иначе
			ПараметрыПолучения.Вставить("СписокИни", СписокИни);
		КонецЕсли;
		
		Если Не	ПараметрыЗапроса.Свойство("Кэшировать", Кэшировать) Тогда
			Кэшировать = Кэш.КэшНастроек.ПараметрыНастроек.КэшироватьВсеПолучаемые;
		КонецЕсли;
		Если Не	ПараметрыЗапроса.Свойство("БратьВКэше", БратьВКэше) Тогда
			БратьВКэше = Кэш.КэшНастроек.ПараметрыНастроек.КэшироватьВсеПолучаемые;
		КонецЕсли;	
		Если Не	ПараметрыЗапроса.Свойство("ДополнительныеПараметры", ДополнительныеПараметры) Тогда
			ДополнительныеПараметры = Новый Структура;
		КонецЕсли;
		
		Если Лев(ТипЗапроса,4) = "List" Тогда
			БратьВКэше = Ложь;
		КонецЕсли;
	КонецЕсли;
	//В кэше данных нет, либо есть, но не все. Получаем с сервера
	ПараметрыПолучения.Вставить("ДополнительныеПараметры",	ДополнительныеПараметры);
	Если	Не	КлассIntegrationConnection = Неопределено Тогда
		КлассIntegrationConnection_ПолучитьИни(Кэш, КлассIntegrationConnection, ПараметрыПолучения, Отказ);
		РезультатЗапроса = ПолучитьConfig(Кэш, ПараметрыПолучения, Отказ);
	ИначеЕсли	ТипЗапроса = "Config" Тогда//Получить типовые
		ПараметрыПолучения.Вставить("ПараметрыКонфигурации",	ПараметрыКонфигурации);
		РезультатЗапроса = ПолучитьConfig(Кэш, ПараметрыПолучения, Отказ);
	ИначеЕсли	ТипЗапроса = "Connection" Тогда
		ПараметрыПолучения.Вставить("Идентификатор",			Идентификатор);
		ПараметрыПолучения.Вставить("ПараметрыКонфигурации",	Кэш.КэшНастроек.ПараметрыКонфигурации);
		РезультатЗапроса = ПолучитьConnection(Кэш, ПараметрыПолучения, Отказ);
	ИначеЕсли	ТипЗапроса = "ListConnection" Тогда
		ПараметрыКонфигурацииСписка = Новый Структура("service");
		ЗаполнитьЗначенияСвойств(ПараметрыКонфигурацииСписка, ПараметрыКонфигурации);
		ПараметрыПолучения.Вставить("ПараметрыКонфигурации",	ПараметрыКонфигурацииСписка);
		РезультатЗапроса = ПолучитьСписокConnection(Кэш, ПараметрыПолучения, Отказ);
	ИначеЕсли	ТипЗапроса = "ListConfig" Тогда
		ПараметрыКонфигурацииСписка = Новый Структура("service");
		ЗаполнитьЗначенияСвойств(ПараметрыКонфигурацииСписка, ПараметрыКонфигурации);
		ПараметрыПолучения.Вставить("ПараметрыКонфигурации",	ПараметрыКонфигурацииСписка);
		РезультатЗапроса = ПолучитьСписокConfig(Кэш, ПараметрыПолучения, Отказ);
	Иначе
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.СбисПолучитьДанныеСервисаИнтеграции", 760, "Неверные параметры фильтра", "Не известный тип запроса!");
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = РезультатЗапроса;
	ИначеЕсли Не Лев(ТипЗапроса,4) = "List" Тогда
		Для Каждого ПараметрЗапросаИни Из СписокИни Цикл
			ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ПараметрЗапросаИни.name);
			Если ИмяИни = "сбисМеню" Тогда
				Результат.Данные.Меню = РезультатЗапроса.Данные.Меню;
				Продолжить;
			ИначеЕсли	Результат.Данные.Ини.Свойство(ИмяИни)
				Или	Не	РезультатЗапроса.Данные.Ини.Свойство(ИмяИни) Тогда
				Продолжить;
			КонецЕсли;
			Результат.Данные.Ини.Вставить(ИмяИни, РезультатЗапроса.Данные.Ини[ИмяИни]);
		КонецЦикла;
	КонецЕсли;
		
	Возврат	Результат;
	
КонецФункции

//Функция взаимодействия с online. Получает и кэширует необходимые данные
&НаКлиенте
Функция		СбисПолучитьНастройки(Кэш=Неопределено,Отказ=Ложь,ПродолжитьВыполнение=Истина) Экспорт
	
	Если Кэш = Неопределено	Тогда//Для теста функции при поиске        
		Возврат	Истина;
	КонецЕсли;
	
	РезультатИзмененияПараметров = СбисПолучитьНастройки_ОбработатьПараметрыРаботы(Кэш,Отказ,ПродолжитьВыполнение);
	
	Если Не РезультатИзмененияПараметров = Неопределено Тогда
		
		Возврат РезультатИзмененияПараметров;
		
	ИначеЕсли Кэш.КэшНастроек.ИниВПорядке Тогда
		
		ПродолжитьВыполнение = Ложь;
		Возврат Неопределено;
		
    КонецЕсли;
	
	СбисПодключитьЗаплатки(Кэш);
	
	Попытка
		
		//Читаем настройки без данных, затем на стадии проверки если надо, то дозапросим
		Настройки = ПрочитатьНастройкиЧерезИнитКоннекшен(Кэш, Новый Структура("ПолучитьДанныеИни", Ложь));
		
	Исключение
		
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ФайлыНастроекСервер.СбисПолучитьНастройки");
		Отказ					= Истина;
		ПродолжитьВыполнение	= Ложь;
		Возврат	Неопределено;
		
	КонецПопытки;
	
	Возврат	Настройки;
			
КонецФункции

&НаКлиенте
Функция		СбисПолучитьНастройкиСБИС(Кэш=Неопределено,Отказ=Ложь,ПродолжитьВыполнение=Истина) Экспорт
	Возврат СбисПолучитьНастройки(Кэш,Отказ,ПродолжитьВыполнение);
КонецФункции

&НаКлиенте
Функция		СбисПолучитьШапкуПротоколаОбОшибках(Кэш, СписокИниФайловДляПроверки) Экспорт				
	
	ПараметрыПротокола	= Новый	Структура();
	ВыбранныеНастройки = Неопределено;
	Если Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки",ВыбранныеНастройки) Тогда
		ВыбранныеНастройки = Кэш.КэшНастроек.ВыбранныеНастройки;
	КонецЕсли;
	 
	ПрефиксНастроек = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(ВыбранныеНастройки.ПараметрыКонфигурации);
	ИмяКонфигурации	= Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ВыбранныеНастройки.ПараметрыКонфигурации.service,ПрефиксНастроек);
	ПараметрыПротокола.Вставить("КонфигурацияФайловНастроек", ИмяКонфигурации);
	Если ВыбранныеНастройки.ПараметрыРаботы.Статус = "Новый"	Тогда  
		Если ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда  
			ПараметрыПротокола.Вставить("ЗаголовокКаталог",	"Создание нового шаблона: " + ВыбранныеНастройки.Название); 
		Иначе	
			ПараметрыПротокола.Вставить("ЗаголовокКаталог",	"Создание нового подключения: " + ВыбранныеНастройки.Название); 
		КонецЕсли;	
	Иначе
		ПараметрыПротокола.Вставить("ЗаголовокКаталог",	"Применяемые настройки: " + ВыбранныеНастройки.Название);
	КонецЕсли;
	ПараметрыПротокола.Вставить("Версия",			ВыбранныеНастройки.ПараметрыКонфигурации.version);
	ПараметрыПротокола.Вставить("КаталогНастроек",	"");

	Возврат ПараметрыПротокола;
	
КонецФункции

//Формируется массив для обновления главного окна
&НаКлиенте
Функция		СбисПолучитьСписокДоступныхНастроек(Кэш, Отказ=Ложь) Экспорт
	Перем КэшIntegrtationConfig;
	Если Не Кэш.КэшНастроек.Свойство("ПараметрыКонфигурации")	Тогда
		Возврат	Неопределено;
	ИначеЕсли Не Кэш.КэшНастроек.Свойство("КэшIntegrtationConfig", КэшIntegrtationConfig) Тогда
		Кэш.КэшНастроек.Вставить("КэшIntegrtationConfig");
	Иначе
		Возврат КэшIntegrtationConfig;
	КонецЕсли;
	
	//СписокИни = Новый Массив;
	//СписокИни.Добавить(СбисОписаниеИниМеню(Кэш));
	ПараметрыЗапроса = Новый Структура("СписокИни, ДополнительныеПараметры", Неопределено, Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ЕстьРезультат", Ложь, Истина, Истина));
	ПолученныеНастройки = ПолучитьСписокConfig(Кэш, ПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, ПолученныеНастройки);
		Возврат	Неопределено;
	КонецЕсли;
	
	СписокТиповНастроек = Новый СписокЗначений;
	Для Каждого СтрокаНастроек Из ПолученныеНастройки Цикл
		Если ПустаяСтрока(СтрокаНастроек.ПараметрыКонфигурации.subsystem) Тогда
			Продолжить;
		КонецЕсли;
		Префикс	= Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(СтрокаНастроек.ПараметрыКонфигурации);
		СписокТиповНастроек.Добавить(Новый Структура("МассивИни,ПараметрыКонфигурации", Новый Массив, СтрокаНастроек.ПараметрыКонфигурации),Префикс);		
	КонецЦикла;
	//Пользовательская конфигурация
	ПараметрыТекущейСистемы	= Новый	Структура("service,subsystem,version");
	ПараметрыТекущейСистемы.Вставить("service",		Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
	ПараметрыТекущейСистемы.Вставить("subsystem",	"");
	ПараметрыТекущейСистемы.Вставить("version", 	"0.0.0.1");
	
	СписокТиповНастроек.Добавить(Новый	Структура("МассивИни,ПараметрыКонфигурации",	Новый	Массив, ПараметрыТекущейСистемы),ПараметрыТекущейСистемы.service);
	
	Кэш.КэшНастроек.КэшIntegrtationConfig = СписокТиповНастроек;
	Возврат	СписокТиповНастроек;

КонецФункции

&НаКлиенте
Функция		СбисПолучитьСтруктуруКонфигурации(Кэш, СтруктураКонфигураций, ЗначениеКонфигурации) Экспорт
	
	Отказ = Ложь;
	НашаКонфигурация = Кэш.ФормаНастроекОбщее.НайтиВыбраннуюКонфигурациюНастроек(СтруктураКонфигураций, ЗначениеКонфигурации);
	Если НашаКонфигурация = Неопределено Тогда//Нет такой конфигурации, что-то отработало не так, как должно.
		Возврат	Неопределено;
	КонецЕсли;
	КлассIntegrationConfig = НовыйIntegrationConnection(Кэш, Новый Структура("ПараметрыКонфигурации, ИнициироватьДанные", НашаКонфигурация.ПараметрыКонфигурации, Ложь), Отказ);
	
	ВыбранныеНастройки = Неопределено;
	Если	Кэш.КэшНастроек.Свойство("ВыбранныеНастройки",ВыбранныеНастройки)
		И	ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда
		Параметры_Предыдущее = ВыбранныеНастройки.ПараметрыКонфигурации;
		ПрефиксНастроек = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(ВыбранныеНастройки.ПараметрыКонфигурации);
		ИмяКонфигурации	= Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ВыбранныеНастройки.ПараметрыКонфигурации.service,ПрефиксНастроек);
		ВыбранныеНастройки.ПараметрыКонфигурации = НашаКонфигурация.ПараметрыКонфигурации;//При создании нового подключения меняем параметры системы на выбранную конфигурацию. Потом уже нельзя.
		//Если меняется система
		Если	Не Параметры_Предыдущее.subsystem = ВыбранныеНастройки.ПараметрыКонфигурации.subsystem
			Или Не Параметры_Предыдущее.version = ВыбранныеНастройки.ПараметрыКонфигурации.version	Тогда 
			//Установлены какие-то ини, переустановить с учетом новой системы (те, что есть будут переполучены, тех что нет просто не будет)
			ВыбраноНазвание = ВыбранныеНастройки.Название;
			Если	ЗначениеЗаполнено(ВыбранныеНастройки.ПараметрыКонфигурации.subsystem)
				И	ВыбранныеНастройки.Данные.Ини.Количество() Тогда
				Отказ		= Ложь;
				СписокИскать= Новый Массив;
				Для Каждого КлючИЗначение Из ВыбранныеНастройки.Данные.Ини Цикл
					СписокИскать.Добавить(ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначение.Ключ, "во_json"));
				КонецЦикла;
				ПараметрыПоиска = Новый Структура("Идентификатор,ПараметрыКонфигурации,Искать", "",НашаКонфигурация.ПараметрыКонфигурации, Новый Структура("Имя", СписокИскать));
				ДанныеСписка	= СформироватьСписокИни(Кэш,ПараметрыПоиска,Отказ);
				Если Отказ Тогда
					Возврат Неопределено;
				КонецЕсли;
				ПараметрыУстановки = Новый Структура("СписокИни,ПараметрыКонфигурации", ДанныеСписка.Данные, НашаКонфигурация.ПараметрыКонфигурации);
				РезультатУстановки = УстановитьСтандартныеНастройкиНаСервере(Кэш, Отказ, ПараметрыУстановки);
				Если	Отказ 
					И	ЗначениеЗаполнено(РезультатУстановки) Тогда
					Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатУстановки);
				КонецЕсли;
				УстановленныеИни = РезультатУстановки;
				//Чтобы не думалось: при стандартных настройках меняем название создаваемого подключения на название выбранной конфиуграции
				Кэш.КэшНастроек.ВыбранныеНастройки.Название = НашаКонфигурация.НазываниеКонфигурации;
				
				Попытка
					Кэш.ФормаНастроекОбщее.СбисУстановитьНастройки(Новый Структура("ПринудительнаяПроверка, СписокИни", Истина, УстановленныеИни), Кэш);
				Исключение
					ИнфоОбОшибке = ИнформацияОбОшибке();
					Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФайлыНастроекСервер.СбисПолучитьСтруктуруКонфигурации"));		
				КонецПопытки;
				Сообщить("Выбранные файлы настроек были переустановлены.");
			ИначеЕсли ВыбранныеНастройки.Название = ИмяКонфигурации Тогда//Название настроек по-прежнему стандартное, сменим название для ясности того, что сменилась базовая конфигурация
				ВыбранныеНастройки.Название = НашаКонфигурация.НазываниеКонфигурации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если	НашаКонфигурация.СтруктураКонфигурации.Количество()
		Или	ПустаяСтрока(НашаКонфигурация.ПараметрыКонфигурации.subsystem)	Тогда
		Возврат	НашаКонфигурация.СтруктураКонфигурации;
	КонецЕсли;
	
	//Получаем полный список ини из меню
	ДанныеСписка = КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConfig, Новый Структура("Искать", Новый Структура("Включено", "01")), Отказ);
	Если Отказ Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	СтруктураКонфигурации = Новый СписокЗначений();
	
	Для	Каждого	Ини	Из	ДанныеСписка.Карта	Цикл
		ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, Ини.Представление);
		Если Ини.Значение = "конфигурация"	Тогда
			ПолеСортировки	= "а";
		ИначеЕсли Лев(Ини.Представление, 8) = "Загрузка" Тогда
			ПолеСортировки = "я";
		Иначе
			ПолеСортировки = "б";
		КонецЕсли;
		//Переводим инишки к старому формату названий.
		
		НоваяСтрока = Новый Структура();
		НоваяСтрока.Вставить("Имя",					ИмяИни	+ ".sbis3");
		НоваяСтрока.Вставить("ИмяБезРасширения",	ИмяИни);
		НоваяСтрока.Вставить("ПолноеИмя",			ИмяИни	+ ".sbis3");
		НоваяСтрока.Вставить("Путь",				"");
		НоваяСтрока.Вставить("Расширение",			"");
		СтруктураКонфигурации.Добавить(НоваяСтрока,   ПолеСортировки + ИмяИни);
	КонецЦикла;
	СтруктураКонфигурации.СортироватьПоПредставлению();
	НашаКонфигурация.СтруктураКонфигурации = СтруктураКонфигурации.ВыгрузитьЗначения();
	
	Возврат	НашаКонфигурация.СтруктураКонфигурации;
	
КонецФункции	

&НаКлиенте
Процедура	СбисПолучитьНастройкиДляТП(ПараметрыВыгрузки) Экспорт
	Перем ВыбранныеНастройки;
	Кэш	= ПараметрыВыгрузки.Кэш;  
	Отказ = Ложь;  
	//Если Не ЗначениеЗаполнено(Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Ини) Тогда
		СтруктураТекущихНастроек = СформироватьСтруктуруТекущихНастроек(Кэш, Новый Структура, Отказ);
		Если Отказ Тогда
			//По какой-то причине не удалось закэшировать текущие настройки. Запускам алгоритм по-умолчанию.
			Если СтруктураТекущихНастроек.code = 765 Тогда//Не нашли типовые настройки. Вообще всё пропало!
				Кэш.КэшНастроек.ПараметрыНастроек.ПоследнийРаздел = Кэш.Текущий.ТипДок;
				Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш.ГлавноеОкно, СтруктураТекущихНастроек);
				Возврат;
			КонецЕсли;
			Отказ = Ложь;
			СбисПеречитатьНастройки(Новый Структура, Кэш);
		ИначеЕсли Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", ВыбранныеНастройки) Тогда
			//Установим параметры на отправку в ложь. Таким образом, закэшируем изменения и параметры, а после отправим всё на сервис при записи изменений
			Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисМеню.Отправлять = Ложь;
			Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Отправлять = Ложь;
		Иначе
			Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", СтруктураТекущихНастроек);
		КонецЕсли;
	//КонецЕсли;
	СбисПолучитьНастройкиССервера_Клиент(ПараметрыВыгрузки);
КонецПроцедуры

&НаКлиенте
Процедура	СбисПолучитьНастройкиССервера_Клиент(ПараметрыВыгрузки)  Экспорт
	
	Кэш					= ПараметрыВыгрузки.Кэш;
	ГлавноеОкно			= Кэш.ГлавноеОкно;
	КаталогСНастройками	= ПараметрыВыгрузки.КаталогНаКлиенте;
	ВыбранныеНастройки	= Кэш.КэшНастроек.ВыбранныеНастройки;
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(ВыбранныеНастройки.Данные.Ини) Тогда
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, "Отсутствуют файлы настроек для выгрузки.", ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	ГлавноеОкно.Кэш.Парам.КаталогНастроек	= КаталогСНастройками;
	
	ИниКВыгрузке = Кэш.ФормаНастроекОбщее.ОчиститьСтруктуруИниОтСлужебныхЗначений(ВыбранныеНастройки.Данные.Ини);
	Для Каждого Ини Из ВыбранныеНастройки.Данные.Ини Цикл//Возвращаем системные ключи ини, необходимые для работы
		СбисЕстьТиповая		= Неопределено;
		СбисЕстьИзменения	= Неопределено;
		Если		Ини.Значение.Свойство("СбисЕстьТиповая",СбисЕстьТиповая) Тогда
		ИначеЕсли	Ини.Значение.Свойство("СбисИмяФайла")
				И	Найти(Ини.Значение.СбисИмяФайла, ".sbis3") Тогда
			СбисЕстьТиповая = Истина;
		Иначе
			СбисЕстьТиповая = Ложь;
		КонецЕсли;	
		СбисАвтообновление	= ?(Ини.Значение.Свойство("СбисАвтообновление"), Ини.Значение.СбисАвтообновление И СбисЕстьТиповая, СбисЕстьТиповая);
		Если Не	Ини.Значение.Свойство("СбисЕстьИзменения", СбисЕстьИзменения) Тогда
			СбисЕстьИзменения = Ложь;
		КонецЕсли;
		Если Не	СбисЕстьИзменения Тогда
			СбисЕстьИзменения = Не СбисЕстьТиповая;
		КонецЕсли;
		ИниКВыгрузке[Ини.Ключ].Вставить("СбисЕстьИзменения",	СбисЕстьИзменения);
		ИниКВыгрузке[Ини.Ключ].Вставить("СбисЕстьТиповая",		СбисЕстьТиповая);
		ИниКВыгрузке[Ини.Ключ].Вставить("СбисАвтообновление",	СбисАвтообновление);
		ИниКВыгрузке[Ини.Ключ].Вставить("СбисСтандартная",			СбисЕстьТиповая);
		ИниКВыгрузке[Ини.Ключ].Вставить("СбисПользовательская",		НЕ СбисЕстьТиповая ИЛИ СбисЕстьИзменения);	
	КонецЦикла;
	
	ВременныйКэш = Новый Структура("Парам, ини, СБИС", Новый Структура("КаталогНастроек", КаталогСНастройками), Новый Структура, Кэш.СБИС);
	ВременныйКэш.Вставить("РежимРаботы",		"");
	ВременныйКэш.Вставить("ГлавноеОкно",		ГлавноеОкно);
	ВременныйКэш.Вставить("ОбщиеФункции",		Кэш.ОбщиеФункции);
	ВременныйКэш.Вставить("ФормаНастроекОбщее",	Кэш.ФормаНастроекОбщее);
	ВременныйКэш.Вставить("Интеграция",			Кэш.Интеграция);
	ВременныйКэш.Вставить("ПараметрыСистемы",	Кэш.ПараметрыСистемы);
	ВременныйКэш.Вставить("ТихийРежим",			Кэш.ТихийРежим);
	ВременныйКэш.Вставить("РаботаСJSON",		Кэш.РаботаСJSON);
	
	ВременныйКэш.Парам.Вставить("СпособОбмена", 1);
	ВременныйКэш.Парам.Вставить("СпособХраненияНастроек", 0);
	ВременныйКэш.Парам.Вставить("ИдентификаторНастроек", "");
	
	ДополнительныеПараметры	= Новый	Структура();
	ДополнительныеПараметры.Вставить("РежимРаботы", "ВыгрузкаВКаталог");
	ВременныйКэш.Вставить("ДополнительныеПараметры",ДополнительныеПараметры);

	ПараметрыИнициализации = Новый Структура("ИнициализацияВременногоКэша", Истина);
	
	МодульОбъектаКлиент().ИзменитьПараметрСбис("СпособХраненияНастроек", ВременныйКэш.Парам.СпособХраненияНастроек, Новый Структура("Кэш, Глобально, Параметры", ВременныйКэш, Ложь, ПараметрыИнициализации));
	
	Если Не ВременныйКэш.Парам.СпособХраненияНастроек = 0 Тогда
		ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, "Не удалось установить форму работы с настройками!", ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	
	//ВременныйКэш.ФормаНастроек.ИнициализироватьКэшНастроек(ВременныйКэш, Отказ);
	ПараметрыКонфигурации			= ПараметрыСтандартнойКонфигурации(Кэш, ВыбранныеНастройки.ПараметрыКонфигурации);
	ПараметрыКонфигурацииВыгрузка	= ПараметрыСтандартнойКонфигурации(ВременныйКэш, ПараметрыКонфигурации);
	Если Найти(ПараметрыКонфигурацииВыгрузка.version, ".0.0.0") > 0 Тогда
		Если  Не ПараметрыКонфигурацииВыгрузка.subsystem = "БУХ1" Тогда
			ПараметрыКонфигурацииВыгрузка.version = "";
		Иначе
			ПараметрыКонфигурацииВыгрузка.version = СтрЗаменить(ПараметрыКонфигурацииВыгрузка.version, ".0.0.0","");
		КонецЕсли;
	ИначеЕсли Найти(ПараметрыКонфигурацииВыгрузка.version, ".0.0") > 0 Тогда
		ПараметрыКонфигурацииВыгрузка.version = СтрЗаменить(ПараметрыКонфигурацииВыгрузка.version, ".0.0","");
	КонецЕсли;
	ПрефиксДобавить	= Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(ПараметрыКонфигурацииВыгрузка);
	ПрефиксДобавить = ПрефиксДобавить + "_";
	СписокТиповыеИниВыгрузить	= Новый Массив;
	СписокПользовИниВыгрузить	= Новый Массив;
	СбисМеню = СформироватьМеню_Структура(Кэш, ИниКВыгрузке,,Отказ);
	ПараметрыЗапроса = Новый Структура
	(	"СбисМеню,	ДополнительныеПараметры",
		СбисМеню,	Новый Структура("ТихийРежим",Истина));
	ДанныеСписка = СформироватьСписокИни(Кэш, ПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, ДанныеСписка, ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	
	ИниСИзмененями				= Новый Структура();
	ВыгружатьТиповые			= Ложь;
	ВыгружатьПользовательские	= Ложь;
	Для Каждого КлючИЗначение Из ИниКВыгрузке Цикл
		ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначение.Ключ, "во_json");
		ЭлементКарты = ДанныеСписка.Карта.НайтиПоЗначению(НРег(ИмяИни));
		Если КлючИЗначение.Значение.СбисЕстьИзменения Тогда
			ИниСИзмененями.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			СписокПользовИниВыгрузить.Добавить(ДанныеСписка.Данные[ДанныеСписка.Карта.Индекс(ЭлементКарты)]);
			ВыгружатьПользовательские = Истина;
		КонецЕсли;
		Если КлючИЗначение.Значение.СбисЕстьТиповая Тогда
			СписокТиповыеИниВыгрузить.Добавить(ДанныеСписка.Данные[ДанныеСписка.Карта.Индекс(ЭлементКарты)]);
			ВыгружатьТиповые = Истина;
		КонецЕсли;
	КонецЦикла;
	ПараметрыВыгрузки.Вставить("Типовые",				СписокТиповыеИниВыгрузить);
	ПараметрыВыгрузки.Вставить("Пользовательские",		СписокПользовИниВыгрузить);
	ПараметрыВыгрузки.Вставить("ИниСизменениями",		ИниСИзмененями);
	ПараметрыВыгрузки.Вставить("ВременныйКэш",			ВременныйКэш);
	ПараметрыВыгрузки.Вставить("Префикс",				ПрефиксДобавить);
	ПараметрыВыгрузки.Вставить("ПараметрыКонфигурации",	ПараметрыКонфигурации);
	ПараметрыВыгрузки.Вставить("КлассНастроек",			ВыбранныеНастройки);
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(1,"Слитно, один файл это пользовательские изменения и стандартная настройка");
	СписокВыбора.Добавить(2,"Раздельно, пользовательские изменения в файле рядом со стандартной настройкой");
	
	ЭлементВыбораДефолт = СписокВыбора[0];
	ОбработчикВыбора = Кэш.ОбщиеФункции.СбисОписаниеОповещения(Кэш, "СбисПолучитьНастройкиССервера_Клиент_ПослеДиалога", ЭтаФорма, ПараметрыВыгрузки);
		
	Если ВыгружатьПользовательские Тогда
		ПараметрыВыбораСписка = Новый Структура("Заголовок, Элемент, Обработчик", "Укажите, как выгрузить пользоватеские изменения", ЭлементВыбораДефолт, ОбработчикВыбора);
		МодульОбъектаКлиент().СбисВыбратьИзСписка(СписокВыбора, ПараметрыВыбораСписка);
	Иначе
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, ЭлементВыбораДефолт, ОбработчикВыбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура	СбисПолучитьНастройкиССервера_Клиент_ПослеДиалога(РезультатВвода, ПараметрыВыгрузки) Экспорт
	Отказ			= Ложь;
	Кэш				= ПараметрыВыгрузки.Кэш;
	ВременныйКэш	= ПараметрыВыгрузки.ВременныйКэш;
	Если РезультатВвода = Неопределено Тогда
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, "Операция отменена", ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
		Возврат;	
	КонецЕсли;
	РежимВыгрузки = РезультатВвода.Значение;
	
	Если РежимВыгрузки = 1 Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Выгрузка настроек",Кэш.ГлавноеОкно);
		ВременныйКэш.Ини = ПараметрыВыгрузки.КлассНастроек.Данные.Ини;
		
		УстановленныеИни = ПолучитьМассивУстановленныхИниФайлов(ВременныйКэш.ини,,Отказ,ПараметрыВыгрузки.Префикс);
		Для Каждого УстановленнаяИни Из УстановленныеИни Цикл
			СбисРеестрПоУмолчанию = Кэш.ОбщиеФункции.РассчитатьЗначение("РеестрПоУмолчанию", ВременныйКэш.Ини[УстановленнаяИни.Ини_ИмяИни]);
			Если СбисРеестрПоУмолчанию = "0" Тогда
				УстановленнаяИни.Ини_ИмяБезРасширения = УстановленнаяИни.Ини_ИмяБезРасширения + ".0";
			КонецЕсли;
			УстановленнаяИни.Ини_ИмяБезРасширения = УстановленнаяИни.Ини_ИмяБезРасширения + ".sbis3";
		КонецЦикла;
		ВременныйКэш.ФормаНастроек.СбисСформироватьИниФайлыКлиента(ВременныйКэш, УстановленныеИни, ВременныйКэш.Ини);
	Иначе
		Если ПараметрыВыгрузки.Типовые.Количество() Тогда
			//Получаем стандартные ини и формируем .sbis3 файлы. 
			//ДополнительныеПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ЕстьРезультат", Ложь, Истина, Истина);
			КлассIntegrationConnection = НовыйIntegrationConnection(Кэш, Новый Структура("ПараметрыКонфигурации", ПараметрыВыгрузки.ПараметрыКонфигурации), Отказ);			
			ИниКВыгрузке = КлассIntegrationConnection_ПолучитьИни(Кэш, КлассIntegrationConnection, Новый Структура("СписокИни", ПараметрыВыгрузки.Типовые), Отказ);
			Если Отказ Тогда
				ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
				Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, ИниКВыгрузке, ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
				Возврат;
			КонецЕсли;
			Кэш.ГлавноеОкно.СбисПоказатьСостояние("Выгрузка стандартных настроек",Кэш.ГлавноеОкно);
			//Если Не ДанныеСтандартнойКонфигурации = Неопределено Тогда
			ВременныйКэш.Ини = ИниКВыгрузке;
			//КонецЕсли;
			
			УстановленныеИни = ПолучитьМассивУстановленныхИниФайлов(ВременныйКэш.ини,,Отказ,ПараметрыВыгрузки.Префикс);
			Для Каждого УстановленнаяИни Из УстановленныеИни Цикл
				СбисРеестрПоУмолчанию = Кэш.ОбщиеФункции.РассчитатьЗначение("РеестрПоУмолчанию", ВременныйКэш.Ини[УстановленнаяИни.Ини_ИмяИни]);
				Если СбисРеестрПоУмолчанию = "0" Тогда
					УстановленнаяИни.Ини_ИмяБезРасширения = УстановленнаяИни.Ини_ИмяБезРасширения + ".0";
				КонецЕсли;
				УстановленнаяИни.Ини_ИмяБезРасширения = УстановленнаяИни.Ини_ИмяБезРасширения + ".sbis3";
			КонецЦикла;
			ВременныйКэш.ФормаНастроек.СбисСформироватьИниФайлыКлиента(ВременныйКэш, УстановленныеИни, ВременныйКэш.Ини);
		КонецЕсли;
		Если ПараметрыВыгрузки.Пользовательские.Количество() Тогда	
			Кэш.ГлавноеОкно.СбисПоказатьСостояние("Выгрузка пользовательских изменений",Кэш.ГлавноеОкно);
			//Если есть не записанные изменения данных в настройках, то формируем данные к выгрузке через разбор типовых и выгружаемых
			Если Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисИни.СписокОтправить.Количество() Тогда
				ПользовательскиеИзменения = ПолучитьРасхождениеИни(ПараметрыВыгрузки.ИниСИзменениями, ПараметрыВыгрузки.КлассНастроек.Данные.Ини, Отказ);
			Иначе//Получаем с сервера только пользовательские изменения
				ПользовательскиеИзменения = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ИнициироватьДанные, Перечитать, Кэшировать", Кэш.КэшНастроек.ВыбранныеНастройки.Идентификатор, Ложь, Истина, Ложь), Отказ);
				КлассIntegrationConnection_ДозапроситьИни(Кэш, ПользовательскиеИзменения, Новый Структура("ТолькоПользовательские", Истина), Отказ);

				//ПользовательскиеИзменения = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ПараметрыКонфигурации, Перечитать, ТолькоПользовательские", Кэш.КэшНастроек.ВыбранныеНастройки.Идентификатор,ПараметрыВыгрузки.ПараметрыКонфигурации, Истина, Истина), Отказ);
				//ПараметрыЗапроса = Новый Структура("Идентификатор,ПараметрыКонфигурации", Кэш.КэшНастроек.ВыбранныеНастройки.Идентификатор,ПараметрыВыгрузки.ПараметрыКонфигурации);	
				//ПараметрыЗапроса.Вставить("СписокИни",	ПараметрыВыгрузки.Пользовательские);
				//ПараметрыЗапроса.Вставить("Кэшировать",	Ложь);
				//ПараметрыЗапроса.Вставить("БратьВКэше",	Ложь);
				//ПараметрыЗапроса.Вставить("ДополнительныеПараметры", Новый Структура("ТолькоПользовательские,ТихийРежим,ВернутьОшибку", Истина,Ложь,Истина));
				//ПользовательскиеИзменения = СбисПолучитьДанныеСервисаИнтеграции(Кэш,ПараметрыЗапроса,Отказ);
				Если Отказ Тогда
					Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, ПользовательскиеИзменения);
					ПользовательскиеИзменения = Новый Структура;
				Иначе
					ПользовательскиеИзменения = ПользовательскиеИзменения.Данные.Ини;
				КонецЕсли;
			КонецЕсли;
			Если ПользовательскиеИзменения.Количество() Тогда
				//Отдельльно сохраняем пользовательские изменения.
				УстановленныеИни = ПолучитьМассивУстановленныхИниФайлов(ПользовательскиеИзменения,,Отказ,ПараметрыВыгрузки.Префикс);
				ВременныйКэш.ФормаНастроек.СбисСформироватьИниФайлыКлиента(ВременныйКэш, УстановленныеИни, ПользовательскиеИзменения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, ВременныйКэш.Парам.КаталогНастроек, ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
КонецПроцедуры

//Получает подходящие готовые, либо общие настройки с данными ини если есть. Применяет в обработку, сохраняет connection в автоматическом режиме.
&НаКлиенте
Функция		СбисПрименитьПредустановленныеНастройки(Кэш, Отказ, ПродолжитьВыполнение, ДопПараметры=Неопределено) Экспорт
	Перем МассивИдентификаторовИсключить, УидСистемыФильтр, НастройкиУстановить;
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ДопПараметры = Неопределено Тогда
		ПараметрыУстановки = Новый Структура;
	Иначе
		ПараметрыУстановки = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ДопПараметры,,Ложь);
	КонецЕсли;
	
	Если Не	ПараметрыУстановки.Свойство("ИдентификаторыИсключить", МассивИдентификаторовИсключить) Тогда
		МассивИдентификаторовИсключить = Новый Массив;
	КонецЕсли;
	УидСистемыФильтр = Кэш.ПараметрыСистемы.Конфигурация.УИДИнтеграции;
	
	ДополнительныеПараметрыЗапрос = Новый Структура;
	ДополнительныеПараметрыЗапрос.Вставить("subsystem",		Кэш.КэшНастроек.ПараметрыКонфигурации.subsystem);
	ДополнительныеПараметрыЗапрос.Вставить("ТипКоннекшена",	"user");
	//Сперва проверим готовый коннекшен у пользователя.
	ПараметрыПолучения = Новый Структура("ДополнительныеПараметры, ПараметрыКонфигурации, СписокИни", ДополнительныеПараметрыЗапрос, Новый Структура("service", Кэш.КэшНастроек.ПараметрыКонфигурации.service));
	РезультатЗапросаСписка = ПолучитьСписокConnection(Кэш, ПараметрыПолучения, Отказ);
	Если Отказ Тогда
		Возврат РезультатЗапросаСписка;
	КонецЕсли;
	
	Для Каждого СоединениеПодобрано Из РезультатЗапросаСписка Цикл
		Если	Не	МассивИдентификаторовИсключить.Найти(СоединениеПодобрано.Идентификатор) = Неопределено
			Или		(		ЗначениеЗаполнено(УидСистемыФильтр)
					И	Не	СоединениеПодобрано.ПараметрыРаботы.Шаблон = УидСистемыФильтр)Тогда
			Продолжить;
		КонецЕсли;
		//Список не отдаёт полного набора данных. Перечитаем уже в полноценный класс
		НастройкиУстановить = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, Перечитать", СоединениеПодобрано.Идентификатор, Истина), Отказ);
		Прервать;
	КонецЦикла;

	//Если не нашли коннекшен, то применим шаблон
	Если НастройкиУстановить = Неопределено Тогда
		Если ЗначениеЗаполнено(УидСистемыФильтр) Тогда
			НастройкиУстановить = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор", УидСистемыФильтр), Отказ);
			Если Отказ Тогда
				Если НастройкиУстановить.code = 756 Тогда
					Отказ = Ложь;
					Возврат Неопределено;
				Иначе
					Возврат Кэш.ОбщиеФункции.СбисИсключение(НастройкиУстановить, "ФайлыНастроекСервер.СбисПрименитьПредустановленныеНастройки");
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДополнительныеПараметрыЗапрос.Вставить("ТипКоннекшена",	"account");
			РезультатЗапросаСписка = СбисПолучитьДанныеСервисаИнтеграции(Кэш, Новый Структура, Отказ);
			Если Отказ Тогда
				Возврат РезультатЗапросаСписка;
			КонецЕсли;
			Для Каждого СоединениеПодобрано Из РезультатЗапросаСписка Цикл
				Если Не МассивИдентификаторовИсключить.Найти(СоединениеПодобрано.Идентификатор) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НастройкиУстановить = СоединениеПодобрано;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если НастройкиУстановить = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ДопПараметры.Свойство("СбисПараметры") Тогда
		Если НастройкиУстановить.Данные.Параметры = Неопределено Тогда
			НастройкиУстановить.Данные.Параметры = ДопПараметры.СбисПараметры;
		Иначе
			Для Каждого КлючИЗначение Из ДопПараметры.СбисПараметры Цикл
				НастройкиУстановить.Данные.Параметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	НастройкиУстановить.ПараметрыРаботы.СбисПараметры.Отправлять = Ложь;
	
	ПараметрыЗапроса = Новый Структура("Кэш, Отказ, ПолучитьДанныеИни, ДополнительныеПараметры", Кэш, Отказ, Истина, Новый Структура);
	Результат = СбисПрименитьУстановленныеНастройки(НастройкиУстановить, ПараметрыЗапроса);
	Отказ = ПараметрыЗапроса.Отказ;
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(Результат, "ФайлыНастроекСервер.СбисПрименитьПредустановленныеНастройки");
	КонецЕсли;
	
	Если Кэш.КэшНастроек.ИниВПорядке Тогда
		//Если применили предустановленные ини, то надо проверить наличие структуры аккордеона в меню. Если нет, то запишем с формированием меню.
		СтруктураАккордеона = ПолучитьСтруктуруРазделов(Кэш,,Отказ);
		Если Не ЗначениеЗаполнено(СтруктураАккордеона) Тогда
			Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
		КонецЕсли;
		ПараметрыЗаписи = Новый Структура("ПропуститьЗапись, Отказ, ПродолжитьВыполнение", Ложь, Отказ, ПродолжитьВыполнение);
		Если	Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек = "Пользовательские" Тогда
			//Это пользовательские настройки, которые идут "как есть"
			ПараметрыЗаписи.Вставить("ПропуститьЗапись", Истина);
		КонецЕсли;
		СбисСохранитьВыбранныеНастройки(Кэш, ПараметрыЗаписи);//Тут запоминаем только идентификатор настроек
		НастройкиУстановить.ПараметрыРаботы.СбисПараметры.Отправлять = Истина;
		Если НастройкиУстановить.ПараметрыРаботы.СбисПараметры.Обновить Тогда
			//Тут сохраним только параметры, чтобы дата последнего изменения не обновилась и проверка не работала повторно
			СохранитьПараметрыСБИС(Кэш, Новый Структура, НастройкиУстановить.Идентификатор); 
		КонецЕсли;
		Отказ					= ПараметрыЗаписи.Отказ;
		ПродолжитьВыполнение	= ПараметрыЗаписи.ПродолжитьВыполнение;
	КонецЕсли;
	Если		Отказ
		Или Не	Кэш.КэшНастроек.ИниВПорядке Тогда//Ошибка при записи найденного соединения, или проблема с проверкой инишек. Переходим в раздел настроек для ручной правки.
		Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
		Если Не Кэш.ТихийРежим Тогда
			Кэш.ГлавноеОкно.ПерейтиВРаздел("АккордеонФайлыНастроек55");
		КонецЕсли;
		Отказ = Ложь;
	КонецЕсли;
	
	ПродолжитьВыполнение = Ложь;//Передаём флаг главному окну, что больше ничего делать не нужно.
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура	СбисЗапускПримененияНастроекСФормы(КлассНастроек, ПараметрыВызова) Экспорт
	Если Не НажатиеВыполнено Тогда
		Возврат;
	КонецЕсли;
	Если СбисДанныеДиалога = Неопределено Тогда
		СбисДанныеДиалога = Новый Структура("Параметры", ПараметрыВызова);
	КонецЕсли;
	Если	Не ПараметрыВызова.Свойство("РежимВыбора") Тогда
		ПараметрыВызова.Вставить("РежимВыбора", "ВыборПодключения");
	КонецЕсли;
	Если ПараметрыВызова.РежимВыбора = "ЗапросШаблона" Тогда
		СбисДанныеДиалога.Вставить("Шаблон", КлассНастроек);
	Иначе
		СбисДанныеДиалога.Вставить("Коннекшен", КлассНастроек);
	КонецЕсли;
	ЭтаФорма.ПодключитьОбработчикОжидания("СбисЗапускПримененияНастроекСФормыПослеЗакрытия", "0.1", Истина);
КонецПроцедуры

&НаКлиенте
Процедура	СбисЗапускПримененияНастроекСФормыПослеЗакрытия() Экспорт
	Перем ШаблонДиалог;
	Кэш = СбисДанныеДиалога.Параметры.Кэш;
	КлассIntegrationConnection = СбисДанныеДиалога.Коннекшен;
	ПараметрыПрименения = СбисДанныеДиалога.Параметры;
	Если	СбисДанныеДиалога.Параметры.РежимВыбора = "ВыборПодключения" Тогда
		Если		КлассIntegrationConnection.ПараметрыРаботы.Шаблон = Неопределено
			И		КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Пользовательские"
			И		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
			И 	Не	ЗначениеЗаполнено(КлассIntegrationConnection.ПараметрыРаботы.Шаблон)
			И	Не 	СбисДанныеДиалога.Свойство("Шаблон", ШаблонДиалог) Тогда
			//Запустим выбор шаблона для создания подключения, если не указан
			ПараметрыПрименения.Вставить("РежимВыбора", "ЗапросШаблона");
			ОписаниеОповещенияЗавершение = Кэш.ОбщиеФункции.СбисОписаниеОповещения(Кэш, "СбисЗапускПримененияНастроекСФормы", ЭтаФорма, ПараметрыПрименения);
			ДопПараметрыДиалога = Новый Структура("ТипКоннекшена, Скрыть, ЗапретНовых, Заголовок, ОбработчикРезультата", "account", Новый Массив, Истина, "Укажите шаблон для нового подключения:", ОписаниеОповещенияЗавершение);
			ДопПараметрыДиалога.Скрыть.Добавить("ПанельВыбора.user");

			//Откроем форму для выбора шаблона создаваемого подключения
			Отказ = Ложь;
			СбисДанныеДиалога.Вставить("ФормаВыбораСоединения", Кэш.ГлавноеОкно.СбисПолучитьФормуОбработки(Кэш, "ФайлыНастроекСервер", Новый Структура("Новая", Истина), Отказ));
			СбисДанныеДиалога.ФормаВыбораСоединения.СбисВыбратьСоединение(Кэш, ДопПараметрыДиалога);
			Возврат;
		ИначеЕсли	Не (	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Активен"
						Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый") Тогда
			//Отмена выбора
			СбисДанныеДиалога = Неопределено;
			Возврат;
		КонецЕсли;
	ИначеЕсли	СбисДанныеДиалога.Параметры.РежимВыбора = "ЗапросШаблона" Тогда
		Если СбисДанныеДиалога.Шаблон = Неопределено Тогда
			//Отмена выбора
			СбисДанныеДиалога = Неопределено;
			Возврат;
		ИначеЕсли	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
				И	СбисДанныеДиалога.Шаблон.ПараметрыРаботы.Статус = "Новый" Тогда
			//Новый коннекшен с новым шаблоном. Применяем шаблон.
			КлассIntegrationConnection = СбисДанныеДиалога.Шаблон;
		Иначе
			Отказ = Ложь;
			КлассIntegrationConnection_НастроитьШаблон(Кэш, КлассIntegrationConnection, СбисДанныеДиалога.Шаблон, Новый Структура("Тип", "Создание по шаблону"), Отказ);
		КонецЕсли;
	Иначе
		//Неизвестный режим выбора
		СбисДанныеДиалога = Неопределено;
		Возврат;
	КонецЕсли;
	СбисДанныеДиалога = Неопределено;//Очищаем переменную диалога после завершения выбора.
	
	КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять = Ложь;
	УстановленныеИни = СбисПрименитьУстановленныеНастройки(КлассIntegrationConnection, ПараметрыПрименения);
	Если Не ПараметрыПрименения.Отказ Тогда 
		Кэш.ФормаНастроекОбщее.СбисОбновитьИнформациюНастроек(Кэш, УстановленныеИни.СписокФайлов, ПараметрыПрименения.Отказ);
	КонецЕсли;
КонецПроцедуры

//Применяет выбранные настройки в обработку. Инициирует проверку. 2 Параметра исключетельно для возможности вызова описания оповещения!
&НаКлиенте
Функция		СбисПрименитьУстановленныеНастройки(КлассIntegrationConnection, ПараметрыВызова)
	Перем Результат, ДопПараметры, ШаблонИнтеграции;
	
	Если КлассIntegrationConnection = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Кэш	= ПараметрыВызова.Кэш;
	
	СбисОчиститьВыбранныеНастройки(Кэш, ПараметрыВызова.Отказ);
	Результат = КлассIntegrationConnection_Установить(Кэш, КлассIntegrationConnection, ПараметрыВызова.ДополнительныеПараметры, ПараметрыВызова.Отказ);

	Если ПараметрыВызова.Отказ Тогда
		Если	ЗначениеЗаполнено(Результат)//Если вызов происходит из формы диалога выбора подключения, то надо сообщить результат тут
			И	ПараметрыВызова.Свойство("ДополнительныеПараметры", ДопПараметры)
			И	ДопПараметры.Свойство("СообщатьПриОшибке")
			И	ДопПараметры.СообщатьПриОшибке Тогда
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, Результат);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Кэш.КэшНастроек.ИзмененияВНастройках= Не	Кэш.Парам.ИдентификаторНастроек = КлассIntegrationConnection.Идентификатор
											Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
											Или	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон";
	Кэш.Парам.ИдентификаторНастроек = КлассIntegrationConnection.Идентификатор;
	
	Попытка
		Кэш.ФормаНастроекОбщее.СбисУстановитьНастройки(Новый Структура("СписокИни, ИдентификаторНастроек, СтруктураНастроек", Результат.СписокФайлов, КлассIntegrationConnection.Идентификатор, КлассIntegrationConnection.Данные.Параметры), Кэш);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СбисИсключение = МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФайлыНастроекСервер.СбисПрименитьУстановленныеНастройки");
		Если	ПараметрыВызова.Свойство("ДополнительныеПараметры", ДопПараметры)
			И	ДопПараметры.Свойство("СообщатьПриОшибке")
			И	ДопПараметры.СообщатьПриОшибке Тогда
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, СбисИсключение);
		КонецЕсли;		
		ПараметрыВызова.Отказ = Истина;
		Возврат СбисИсключение;
	КонецПопытки;
	Возврат Результат;	
КонецФункции

//Пока ничего не происходит. Пользовательские инишки не формируем
&НаКлиенте
Процедура	СбисСформироватьИниФайлыКлиента(Кэш, СписокФайловПроверки, ОшибкиИни) Экспорт
	
	Возврат;
	
КонецПроцедуры

//Сохраняет выбранные настройки на сервис
&НаКлиенте
Процедура	СбисСохранитьВыбранныеНастройки(Кэш, ДопПараметры) Экспорт
	Перем КлассIntegrationConnection, ЗаписьВыполнялась, ВыбранныеНастройки, СбисПараметры, УстановленныеИни;
	Если		ДопПараметры.Отказ
		Или	Не	ДопПараметры.ПродолжитьВыполнение Тогда
			Возврат;
	КонецЕсли;
	
	Если Не	Кэш.КэшНастроек.ИниВПорядке Тогда
		ТекстПредупреждения	= "Для сохранения настроек они должны пройти проверку!";
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Предупреждение(ТекстПредупреждения);
		#Иначе
			ПоказатьПредупреждение(,ТекстПредупреждения);
		#КонецЕсли
		ДопПараметры.ПродолжитьВыполнение = Ложь;
		Возврат;
	КонецЕсли;
	Если Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", КлассIntegrationConnection)	Тогда
		Возврат;
	КонецЕсли;
	
	Если КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален" Тогда
		КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Обновить = Истина;//Для создания нового подключения обязательно нужно передать СбисПараметры с service4config
	КонецЕсли;
	КлассIntegrationConnection_Было = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, Новый Структура, ДопПараметры.Отказ);			
	Если ДопПараметры.Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, КлассIntegrationConnection_Было);
		Возврат;
	КонецЕсли;
	
	Если	ДопПараметры.Свойство("ПропуститьЗапись")
		И	ДопПараметры.ПропуститьЗапись Тогда
		ЗаписьВыполнялась = Ложь;
	Иначе
		РезультатЗаписи = КлассIntegrationConnection_СохранитьПодключение(Кэш, КлассIntegrationConnection, ДопПараметры, ДопПараметры.Отказ);
		Если ДопПараметры.Отказ Тогда
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатЗаписи);
			Возврат
		КонецЕсли;
		ЗаписьВыполнялась = РезультатЗаписи.ЗаписьВыполнялась;
	КонецЕсли;
	
	ТребуетсяОбовитьСписок = ЗаписьВыполнялась И Кэш.ФормаНастроекОбщее.Открыта();
	//После записи проверить, менялась ли галка автообновления. Если менялась, то надо перечитать настройки и проверить базовый конфиг, который использован для инишек. Если взят не тот, что был, то надо перечитать настройки сразу.
	Если Не КлассIntegrationConnection_Было.ПараметрыРаботы.Автообновление = КлассIntegrationConnection.ПараметрыРаботы.Автообновление Тогда
		КлассIntegrationConnection_Стало = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, Перечитать", РезультатЗаписи.Идентификатор, Истина), ДопПараметры.Отказ);
		Если	Не КлассIntegrationConnection_Стало.ПараметрыКонфигурации.version	= КлассIntegrationConnection.ПараметрыКонфигурации.version
			Или	Не КлассIntegrationConnection_Стало.ПараметрыКонфигурации.subsystem	= КлассIntegrationConnection.ПараметрыКонфигурации.subsystem Тогда
			РезультатУстановки = КлассIntegrationConnection_Установить(Кэш, КлассIntegrationConnection, Новый Структура, ДопПараметры.Отказ);
			Если ДопПараметры.Отказ Тогда
				Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатЗаписи);
				Возврат;
			КонецЕсли;
			УстановленныеИни = РезультатУстановки.СписокФайлов;
		Иначе//Проставим нужные галки и на этом все 
			Для Каждого КлючИЗначениеИни Из КлассIntegrationConnection.Данные.Ини Цикл
				ЗначениеИни = КлючИЗначениеИни.Значение;
				Если Не ЗначениеИни.Свойство("СбисАвтообновление") Тогда
					ЗначениеИни.Вставить("СбисАвтообновление", Ложь);
				КонецЕсли;
				Если Не ЗначениеИни.Свойство("СбисЕстьТиповая") Тогда
					ЗначениеИни.Вставить("СбисЕстьТиповая",Ложь);
				КонецЕсли;
				ЗначениеИни.СбисАвтообновление = ЗначениеИни.СбисЕстьТиповая И КлассIntegrationConnection_Стало.ПараметрыРаботы.Автообновление;
			КонецЦикла;
			УстановленныеИни = КлассIntegrationConnection_СписокИниДляИнтерфейса(Кэш, КлассIntegrationConnection, Новый Структура, ДопПараметры.Отказ);
		КонецЕсли;
	ИначеЕсли ТребуетсяОбовитьСписок Тогда
		УстановленныеИни = КлассIntegrationConnection_СписокИниДляИнтерфейса(Кэш, КлассIntegrationConnection, Новый Структура, ДопПараметры.Отказ);
	КонецЕсли;
	Если ДопПараметры.Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, УстановленныеИни);
		Возврат;
	КонецЕсли;
	Кэш.КэшНастроек.ВыбранныеНастройки	= КлассIntegrationConnection;
	Кэш.Парам.ИдентификаторНастроек		= КлассIntegrationConnection.Идентификатор;
	
	//В ини отдаём данные от класса, но с разрывом состава ини класса
	Кэш.Ини = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(КлассIntegrationConnection.Данные.Ини,,Ложь);
		
	Если ЗначениеЗаполнено(УстановленныеИни) Тогда
		ДопПараметры.ПродолжитьВыполнение = Ложь;
		Кэш.КэшНастроек.Удалить("ИзмененияВНастройках_ПараметрыДиалога");
		Кэш.КэшНастроек.ИзмененияВНастройках = Ложь;
	КонецЕсли;
	
	Если ДопПараметры.Отказ Тогда
		СбисОчиститьВыбранныеНастройки(Кэш, Ложь);
		СбисПеречитатьНастройки(Новый Структура, Кэш);
		Возврат;
	КонецЕсли;
	
	СбисЗаписатьИдентификаторНастроек(Кэш, Кэш.Парам.ИдентификаторНастроек);
	Если Кэш.КэшНастроек.ИзмененияВНастройках Тогда
		Кэш.КэшНастроек.ИзмененияВНастройках = Ложь;
	КонецЕсли;
	//Переустановим параметры
	Кэш.ФормаНастроекОбщее.УстановитьСбисПараметры(Кэш, КлассIntegrationConnection.Данные.Параметры);		

КонецПроцедуры

&НаКлиенте                                  
Процедура	СбисУстановитьВыбранныеФайлыНастроек(Ини, Кэш, Идентификатор, Отказ) Экспорт
	
	ТекстСообщения	= "";
	
	СтруктураВыбранныхНастроек = Неопределено;
	Если Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", СтруктураВыбранныхНастроек)	Тогда
		Отказ = Истина;
		Сообщить("Отсутствует структура настроек. Операция невозможна!");
		Возврат;
	КонецЕсли;
	
	НашаКонфигурация = Кэш.ФормаНастроекОбщее.НайтиВыбраннуюКонфигурациюНастроек(Кэш.Конфигурация, Кэш.ФормаНастроекОбщее.Конфигурация);	
	
	Если НашаКонфигурация = Неопределено Тогда//Нет такой конфигурации, что-то отработало не так, как должно.
		Отказ = Истина;
		Возврат;
	ИначеЕсли ПустаяСтрока(НашаКонфигурация.ПараметрыКонфигурации.subsystem) Тогда//У пользовательской конфигурации нет стандартных ини файлов.
		Возврат;
	КонецЕсли;
	
	Если		Не	СтруктураВыбранныхНастроек.ПараметрыКонфигурации.subsystem	= НашаКонфигурация.ПараметрыКонфигурации.subsystem	Тогда
		ТекстСообщения= "Внимание, Вы активируете настройки от другой конфигурации!";
	ИначеЕсли	Не	СтруктураВыбранныхНастроек.ПараметрыКонфигурации.version	= НашаКонфигурация.ПараметрыКонфигурации.version	Тогда
		ТекстСообщения= "Внимание, Вы активируете настройки от конфигурации другой версии!";
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		Если	СтруктураВыбранныхНастроек.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда
			СтруктураВыбранныхНастроек.Название = НашаКонфигурация.НазываниеКонфигурации;
			Кэш.ФормаНастроекОбщее.НастройкиНазвание = СтруктураВыбранныхНастроек.Название;
		Иначе
			ТекстПредупреждения	= ТекстСообщения + Символы.ПС +  "Выполнение данной операции не доступно!";
			ТаймАут	= 60;
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Предупреждение(ТекстПредупреждения, ТаймАут);
			#Иначе
				ПоказатьПредупреждение(,ТекстПредупреждения, ТаймАут);
			#КонецЕсли
			Возврат;
		КонецЕсли;			
	КонецЕсли;
	
	УстановленныеИни = УстановитьФайлыНастроекНаСервере(Ини, Кэш, СтруктураВыбранныхНастроек, НашаКонфигурация, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, УстановленныеИни);
	Иначе
		Кэш.КэшНастроек.Вставить("ИзмененияВНастройках", Истина);
		Попытка
			Кэш.ФормаНастроекОбщее.СбисУстановитьНастройки(Новый Структура("ПринудительнаяПроверка, СписокИни", Истина, УстановленныеИни), Кэш);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФайлыНастроекСервер.СбисУстановитьВыбранныеФайлыНастроек"));		
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция		СбисУстановитьСтандартныеНастройки(Кэш,Отказ,ПродолжитьВыполнение) Экспорт
	
	Если Не	ПродолжитьВыполнение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СбисОчиститьВыбранныеНастройки(Кэш, Отказ);
	
	ПараметрыКонфигурацииУстановить = Кэш.КэшНастроек.ПараметрыКонфигурации;
	Если ПустаяСтрока(ПараметрыКонфигурацииУстановить.subsystem) Тогда
		ПараметрыКонфигурацииУстановить = Кэш.ФормаНастроекОбщее.СистемаПо_УмолчаниюКлиент();
	КонецЕсли;
	//Устанавливаем стандартные настройки как новый шаблон
	КлассIntegrationConnection = НовыйIntegrationConnection(Кэш, Новый Структура("ПараметрыКонфигурации, Тип", ПараметрыКонфигурацииУстановить, "Шаблон"), Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnection, "ФайлыНастроекСервер.СбисУстановитьСтандартныеНастройки");
	КонецЕсли;
	КлассIntegrationConnection.Идентификатор = Кэш.ПараметрыСистемы.Конфигурация.УИДИнтеграции;
	РезультатУстановкиНастроек = КлассIntegrationConnection_Установить(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
	УстановленныеИни = РезультатУстановкиНастроек.СписокФайлов;
	
	Попытка
		Кэш.ФормаНастроекОбщее.СбисУстановитьНастройки(Новый Структура("ПринудительнаяПроверка, СписокИни, СтруктураНастроек", Истина, УстановленныеИни, КлассIntegrationConnection.Данные.Параметры), Кэш);
	Исключение
		Отказ = Истина;
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФайлыНастроекСервер.СбисУстановитьСтандартныеНастройки"));		
	КонецПопытки;
	//Кэш.ГлавноеОкно.ПерейтиВРаздел("АккордеонПолученные11");
	
	Если Не Отказ Тогда
		ПродолжитьВыполнение = Ложь;
		Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
	КонецЕсли;
	
	Возврат УстановленныеИни;
	
КонецФункции

//Временное решение для обновления статусов. Не использовать в других местах! 1179408775
&НаКлиенте
Функция		СбисЗаполнитьНеполученныеНастройки(Кэш, Отказ) Экспорт
	
	Возврат КлассIntegrationConnection_ДозапроситьИни(Кэш, Кэш.КэшНастроек.ВыбранныеНастройки,Новый Структура,Отказ);
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_ВнутренниеВызовы_Общее
////////////////////////////////////////////////////

&НаКлиенте
Функция		ЗагрузитьНастройкиИзКаталогаНаСервер(Кэш, КаталогСНастройками,Отказ)
	Перем ЗначениеИни;
	ГлавноеОкно		= Кэш.ГлавноеОкно;
	СбисИмяФункции	= "ФайлыНастроекСервер.ЗагрузитьНастройкиИзКаталогаНаСервер";
	
	ВременныйКэш = Новый Структура("Парам, Ини", Новый Структура, Новый Структура);
	
	ВременныйКэш.Вставить("ГлавноеОкно",			ГлавноеОкно);
	ВременныйКэш.Вставить("ФормаНастроекОбщее",		Кэш.ФормаНастроекОбщее);
	ВременныйКэш.Вставить("Интеграция",				Кэш.Интеграция);
	ВременныйКэш.Вставить("ПараметрыФильтра",		Кэш.ПараметрыФильтра);
	ВременныйКэш.Вставить("ОбщиеФункции",			Кэш.ОбщиеФункции);
	ВременныйКэш.Вставить("Заплатки",				Кэш.Заплатки); 
	ВременныйКэш.Вставить("ПараметрыСистемы",		Кэш.ПараметрыСистемы);
	ВременныйКэш.Вставить("ТекущийСеанс",			Новый Структура("Функции", Новый Структура));
	ВременныйКэш.Вставить("КэшНастроек",			Новый Структура);
	ВременныйКэш.Вставить("КэшЗначенийИни",			Новый Структура("ИниЗагрузки", Новый Структура));
	ВременныйКэш.Вставить("ТихийРежим",				Истина);
	ВременныйКэш.Вставить("РаботаСJSON",			Кэш.РаботаСJSON);
	ВременныйКэш.Вставить("СБИС",					Кэш.СБИС);
	ВременныйКэш.Вставить("СовместимостьМетодов",	Кэш.СовместимостьМетодов);
	
	ВременныйКэш.Парам.Вставить("СпособОбмена",					1);
	ВременныйКэш.Парам.Вставить("СпособХраненияНастроек",		0);
	ВременныйКэш.Парам.Вставить("ИдентификаторНастроек",		"");
	ВременныйКэш.Парам.Вставить("НастройкиАвтообновление",		Ложь);
	ВременныйКэш.Парам.Вставить("КаталогНастроек",				КаталогСНастройками);
	ВременныйКэш.Парам.Вставить("ВходПоСертификату",			МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ВходПоСертификату"));
	ВременныйКэш.Парам.Вставить("Логин",						МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("Логин"));
	ВременныйКэш.Парам.Вставить("ИдентификаторыНастроекВСБИС",	МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ИдентификаторыНастроекВСБИС"));
	
	ДополнительныеПараметры	= Новый	Структура();
	ДополнительныеПараметры.Вставить("РежимРаботы", "ЗагрузкаИзКаталога");
	ВременныйКэш.Вставить("ДополнительныеПараметры",ДополнительныеПараметры);
	
	ГлавноеОкно.СбисПоказатьСостояние("Чтение настроек...", ГлавноеОкно);   
	ПараметрыИнициализации = Новый Структура("ИнициализацияВременногоКэша", Истина); 
	ДопПараметрыИзмененияПараметра = Новый Структура("Кэш, Глобально, Параметры", ВременныйКэш, Ложь, ПараметрыИнициализации);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("СпособХраненияНастроек", ВременныйКэш.Парам.СпособХраненияНастроек, ДопПараметрыИзмененияПараметра);
	
	Если Не ВременныйКэш.Парам.СпособХраненияНастроек = 0 Тогда
		
		Отказ = Истина; 
		СбисСообщение	= "Запуск программы/функции/метода не удался";
		СбисДетализация	= "Не удалось установить форму работы с настройками!";
		
		Возврат	МодульОбъектаКлиент().НовыйСбисИсключение(, СбисИмяФункции, 776, СбисСообщение, СбисДетализация);
		
	КонецЕсли;
	
	УстановленныеИниФайлы = ВременныйКэш.ФормаНастроек.СбисПолучитьНастройки(ВременныйКэш, Отказ);
	ДатаИзмененияНастроек = ТекущаяДата();
	
	Если УстановленныеИниФайлы = Неопределено Тогда
		
		Отказ	= Истина; 
		СбисСообщение	= "Отсутствует файл настроек для данного типа данных";
		СбисДетализация	= "В каталоге " + КаталогСНастройками + " отсутствуют файлы настроек!";
		
		Возврат	МодульОбъектаКлиент().НовыйСбисИсключение(, СбисИмяФункции, 610, СбисСообщение, СбисДетализация);
		
	КонецЕсли; 
	
	//1189820427 
	ТипыИни = Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни;
	
	Для	Каждого	КлючИЗначениеИни ИЗ ВременныйКэш.Ини Цикл
		
		Если Не ТипЗнч(КлючИЗначениеИни.Значение) = Тип("Структура") Тогда
			
			Продолжить; 
			
		КонецЕсли;           
		
		ИниТип = Неопределено;  
		
		Если КлючИЗначениеИни.Значение.Свойство("ТипИни", ИниТип) 
			И ТипЗнч(ИниТип) = Тип("Структура")
			И ТипыИни.Найти(ИниТип.Значение) = Неопределено
			И НЕ КлючИЗначениеИни.Ключ = "Конфигурация" Тогда   
			
			ВременныйКэш.Ини.Удалить(КлючИЗначениеИни.Ключ);
			
		КонецЕсли;   
		
	КонецЦикла;  
	
	//Определение стандартной конфигурации по инишкам xml
	ПрефиксКонфигурации	= "";     
	
	Для	Каждого	УстановленнаяИни Из УстановленныеИниФайлы Цикл
		
		ИмяФайлаИни		= Сред(УстановленнаяИни.ИмяФайла, СтрДлина(ВременныйКэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис) + 1);
		ПрефиксИни		= Сред(ИмяФайлаИни, 1, Найти(ИмяФайлаИни, "_") - 1);
		ПолноеИмяИни	= СтрЗаменить(УстановленнаяИни.ИмяФайла, ".", "_");
		Если ПустаяСтрока(ПрефиксКонфигурации) Тогда
			
			ПрефиксКонфигурации	= ПрефиксИни;
			
		ИначеЕсли Не ПрефиксКонфигурации = ПрефиксИни Тогда 
			
			Отказ = Истина;
			СбисСообщение	= "Некорректное описание параметра в файле настроек";
			СбисДетализация	= "Нельзя загрузить настройки от различных конфигураций!";
			
			Возврат	МодульОбъектаКлиент().НовыйСбисИсключение(, СбисИмяФункции, 608, СбисСообщение, СбисДетализация);
			
		КонецЕсли;     
		
	КонецЦикла;
	
	ГлавноеОкно.СбисПоказатьСостояние("Патч настроек...", ГлавноеОкно);
	
	//Исправление определения базового конфига для загружаемых из каталога инишек
	ПараметрыТекущейСистемы	= Новый	Структура("service,subsystem,version", "");
	ЗаполнитьЗначенияСвойств(ПараметрыТекущейСистемы, Кэш.КэшНастроек.ПараметрыКонфигурации, "subsystem,version");
	ПрефиксТекущейСистемы = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(ПараметрыТекущейСистемы);
	
	Если Лев(ПрефиксТекущейСистемы, СтрДлина(ПрефиксИни)) = ПрефиксИни	Тогда //Это наша система, взять параметры текущей системы.
		
		ВерсияСистемы	= Кэш.КэшНастроек.ПараметрыКонфигурации.version;
		ПрефиксИни		= Кэш.КэшНастроек.ПараметрыКонфигурации.subsystem;
		
	ИначеЕсли	ПрефиксИни = "КА"
			Или	ПрефиксИни = "БГУ"
			Или	ПрефиксИни = "УПП" Тогда //Без начала версии в префиксе. Подразумевается 1.
			
		ВерсияСистемы	= Кэш.ОбщиеФункции.СериализоватьВерсию("1", "Дозаполнить");//Взять последнюю подходящую
		
	Иначе //Рассчитать версию с учетом наличия символов версии в префиксе.
		
		СимволыВерсии	= "0123456789";
		
		Для	шаг	= 1	По СтрДлина(ПрефиксИни)	Цикл
			
			Если Булево(Найти(СимволыВерсии, сред(ПрефиксИни, шаг, 1))) Тогда
				
				Прервать;  
				
			КонецЕсли; 
			
		КонецЦикла;    
		
		ВерсияСистемы	= Кэш.ОбщиеФункции.СериализоватьВерсию(Сред(ПрефиксИни, шаг), "Дозаполнить");
		ПрефиксИни		= Сред(ПрефиксИни, 1, шаг -1); 
		
		Если ПрефиксИни = "УТ" Тогда       
			
			ПрефиксИни = ПрефиксИни + СтрПолучитьСтроку(СтрЗаменить(ВерсияСистемы, ".", Символы.ПС), 1);   
			
		КонецЕсли;                                                                             
		
	КонецЕсли;
	
	//Определение подходящих конфигов для загруженных файлов
	КонфигурацияЗагруженныхИни	= Новый	Структура;
	КонфигурацияЗагруженныхИни.Вставить("service",	Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
	КонфигурацияЗагруженныхИни.Вставить("subsystem",ПрефиксИни);
	КонфигурацияЗагруженныхИни.Вставить("version",	ВерсияСистемы);
	ПараметрыКонфигурации = НайтиТиповойКонфигСервиса(Кэш, КонфигурацияЗагруженныхИни);
	//Проверяем при временном кэше, чтобы корректно заполнилась шапка отчета об ошибках
	ВременныйКэш.ТихийРежим = Ложь;
	
	//Получаем параметры СБИС из каталога
	СтруктураСбисПараметров = ВременныйКэш.ФормаНастроек.ПолучитьПараметрыСБИС(ВременныйКэш, ВременныйКэш.Парам.КаталогНастроек, Ложь);
	СтруктураНовыхПараметровСбис = Новый Структура;               
	
	Для Каждого КлючИЗначение Из СтруктураСбисПараметров Цикл      
		
		Если НРег(Лев(КлючИЗначение.Ключ, 2)) = "во" Тогда       
			
			Продолжить;                                         
			
		КонецЕсли;                                                      
		
		СтруктураНовыхПараметровСбис.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	//Выполним минимально необходимые операции с настройками
	
	//Пропатчим ини к виду СБИС
	Для	Каждого УстановленнаяИни Из УстановленныеИниФайлы Цикл 
		
		ПолноеИмяИни	= СтрЗаменить(УстановленнаяИни.ИмяФайла, ".", "_");
		ИниИмяИни		= УстановленнаяИни.Ини_ИмяИни;
		
		Если ВременныйКэш.ини.Свойство(ИниИмяИни, ЗначениеИни) Тогда
			
			ЗначениеИни.Вставить("СбисЕстьИзменения",	УстановленнаяИни.ЕстьИзменения);
			
			Если (Не (ИниИмяИни = "Конфигурация"
					Или Лев(ИниИмяИни, 8) = "Загрузка")
				И ЗначениеИни.Свойство("мДокумент")) Тогда
				
				ВременныйКэш.ини.Удалить(ИниИмяИни);
				ИниИмяИни = "Загрузка_Входящий_" + ИниИмяИни;
				ВременныйКэш.Ини.Вставить(ИниИмяИни, ЗначениеИни);
				УстановленнаяИни.Ини_ИмяИни = ИниИмяИни; 
				
			КонецЕсли;   
			
		КонецЕсли;    
		
	КонецЦикла;
	
	КлассIntegrationConnectionБыло = Кэш.КэшНастроек.ВыбранныеНастройки;
	КлассIntegrationConnection_Очистить(Кэш, КлассIntegrationConnectionБыло, Новый Структура("Ини", Истина), Отказ);
	
	КлассIntegrationConnectionБыло.ПараметрыРаботы.СбисПараметры.Отправлять = Ложь;
	КлассIntegrationConnection_СохранитьСбисПараметры(Кэш, КлассIntegrationConnectionБыло, Новый Структура("ПараметрыДописать", СтруктураНовыхПараметровСбис), Отказ);
	
	КлассIntegrationConnectionНовый = НовыйIntegrationConnection(Кэш, Новый Структура("БазовыйКласс, Ини", КлассIntegrationConnectionБыло, ВременныйКэш.Ини), Отказ);
	
	Если Отказ Тогда 
		
		Возврат МодульОбъектаКлиент().НовыйСбисИсключение(КлассIntegrationConnectionНовый, "ФайлыНастроекСервер.ЗагрузитьНастройкиИзКаталогаНаСервер"); 
		
	КонецЕсли;
	
	ГлавноеОкно.СбисПоказатьСостояние("Установка настроек...", ГлавноеОкно);
	
	РезультатУстановки = КлассIntegrationConnection_Установить(Кэш, КлассIntegrationConnectionНовый, Новый Структура, Отказ);
	
	Если Отказ Тогда
		
		Возврат МодульОбъектаКлиент().НовыйСбисИсключение(РезультатУстановки, "ФайлыНастроекСервер.ЗагрузитьНастройкиИзКаталогаНаСервер");
		
	КонецЕсли;
	
	Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", КлассIntegrationConnectionНовый);
	
	Попытка                      
		
		ПараметрыУстановить = Новый Структура;
		ПараметрыУстановить.Вставить("ПринудительнаяПроверка",	Истина);
		ПараметрыУстановить.Вставить("СписокИни",				РезультатУстановки.СписокФайлов);
		ПараметрыУстановить.Вставить("ИдентификаторНастроек",	КлассIntegrationConnectionНовый.Идентификатор);
		ПараметрыУстановить.Вставить("СтруктураНастроек",		КлассIntegrationConnectionНовый.Данные.Параметры);
		Кэш.ФормаНастроекОбщее.ВыполнитьУстановкуНастроек(ПараметрыУстановить, Кэш);        
		
	Исключение   
		
		ИнфоОбОшибке = ИнформацияОбОшибке();   
		
		Возврат МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, СбисИмяФункции);
		
	КонецПопытки;
	
	КлассIntegrationConnectionНовый.ПараметрыРаботы.Изменен = Истина;
	КлассIntegrationConnectionНовый.ПараметрыРаботы.СбисПараметры.Отправлять = Истина;
	Возврат КлассIntegrationConnection_СписокИниДляИнтерфейса(Кэш, КлассIntegrationConnectionНовый, Новый Структура, Отказ);
КонецФункции

&НаКлиенте
//Параметры
//	ПараметрыЗаполнения:		Структура. Возможные ключи:
//			Тип	account	- шаблон;
//				user	- пользовательские;
Функция		ЗаполнитьТаблицуДоступныхНастроек(Кэш, ПараметрыЗаполнения, Отказ)
	
	КлючТаблицы = "ТаблицаПользовательскихНастроек";
	
	Если ПараметрыЗаполнения.ТипКоннекшена = "account" Тогда
	
		КлючТаблицы = "ТаблицаШаблоновНастроек";
	
	КонецЕсли;
	
	ДанныеЗаполнить = СформироватьТаблицуДоступныхНастроек(Кэш, ПараметрыЗаполнения, Отказ);
	
	Если Отказ Тогда
	
		Возврат Кэш.ОбщиеФункции.СбисИсключение(ДанныеЗаполнить, "ФайлыНастроекСервер.ЗаполнитьТаблицуДоступныхНастроек");
	
	КонецЕсли;
	
	Попытка
	
		ЗаполнитьТаблицуДоступныхНастроек_Сервер(КлючТаблицы, ДанныеЗаполнить);
	
	Исключение
	
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(ОписаниеОшибки(), "ФайлыНастроекСервер.ЗаполнитьТаблицуДоступныхНастроек");
	
	КонецПопытки;

	Возврат Истина;
КонецФункции

&НаСервере
Процедура	ЗаполнитьТаблицуДоступныхНастроек_Сервер(КлючТаблицы, ДанныеКЗаполнению)
	
	ЭтаФорма[КлючТаблицы].Очистить();
	
	Для Каждого СтрокаНастроек Из ДанныеКЗаполнению Цикл
		
		НоваяСтрока = ЭтаФорма[КлючТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНастроек);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция		ИнициироватьРежимДиалога(Кэш, ДопПараметры, Отказ)
	
	Перем СтрокаЗаголовокФормы;
	
	ЛокальныйКэш		= Кэш;
	НажатиеВыполнено	= Ложь;
	ДопПараметрыТаблицы = Новый Структура("ТипКоннекшена, ЗапретНовых", ДопПараметры.ТипКоннекшена, Ложь);
	
	Если ДопПараметры.Свойство("ЗапретНовых") Тогда
		
		ДопПараметрыТаблицы.ЗапретНовых = ДопПараметры.ЗапретНовых;
		
	КонецЕсли;
	
	Результат = ЗаполнитьТаблицуДоступныхНастроек(Кэш, ДопПараметрыТаблицы, Отказ);
	
	Если Отказ Тогда
		
		Возврат Кэш.ОбщиеФункции.СбисИсключение(Результат, "ФайлыНастроекСервер.ИнициироватьРежимДиалога");
		
	КонецЕсли;
	
	ПанельВыбораДиалога = Кэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "ПанельВыбора");
	ПанельВыбораДиалога.ТекущаяСтраница = Кэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ПанельВыбораДиалога, ДопПараметры.ТипКоннекшена);
	
	Если Не ДопПараметры.Свойство("Заголовок", СтрокаЗаголовокФормы) Тогда
		
		СтрокаЗаголовокФормы = "Доступные настройки:";
		
	КонецЕсли;
	
	ЭтаФорма.Заголовок = СтрокаЗаголовокФормы;
	
	Если ДопПараметры.Свойство("Скрыть") Тогда
		
		Для Каждого ЭлементСкрыть Из ДопПараметры.Скрыть Цикл
			
			ЭлементСкрыть = Кэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, ЭлементСкрыть);
			
			Если ЭлементСкрыть = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЭлементСкрыть.Видимость = Ложь;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//В процедуре из переданной структуры убираются отключенные узлы, которые были оставлены для их записи и отправки на сервер (для отключения при получении), но которые будут мешать нормальной работе с настройками
&НаКлиенте
Процедура	ОчиститьОтключенныеУзлы(ДанныеИни, КонтекстУзла=Неопределено)
	
	КлючиУдалить = Новый Массив;
	
	Если ТипЗнч(ДанныеИни) = Тип("Структура") Тогда
		
		Для Каждого КлючИЗначение Из ДанныеИни Цикл
			
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
				
				ПараметрыУзла = Новый Структура("ИмяУзла", КлючИЗначение.Ключ);
				ОчиститьОтключенныеУзлы(КлючИЗначение.Значение,ПараметрыУзла);
				
			ИначеЕсли КлючИЗначение.Значение = "" Тогда
				
				Если	КонтекстУзла.Свойство("ИмяУзла")
					И	КонтекстУзла.ИмяУзла = "Отбор" Тогда
					
					КлючиУдалить.Добавить(КлючИЗначение.Ключ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого КлючУдалить Из КлючиУдалить Цикл
		
		ДанныеИни.Удалить(КлючУдалить);

	КонецЦикла;
	
КонецПроцедуры

//Функция переводит имена ини из шаблона онлайна в шаблон обработки и обратно
&НаКлиенте
Функция		ПолучитьИмяИни(СоответствиеНазваний, КлючИни, Направление="json_во")
	
	НаправлениеСтр	= СтрЗаменить(Направление, "_", Символы.ПС);
	КлючНаправления1= СтрПолучитьСтроку(НаправлениеСтр, 1);
	КлючНаправления2= СтрПолучитьСтроку(НаправлениеСтр, 2);
	
	ИмяИни	= КлючИни;
	Для Каждого Соответствие Из СоответствиеНазваний	Цикл
		Если Лев(ИмяИни, СтрДлина(Соответствие[КлючНаправления1])) = Соответствие[КлючНаправления1] Тогда
			Если Соответствие[КлючНаправления1] = Соответствие[КлючНаправления2] Тогда
				ИмяИниНазвание	= Сред(ИмяИни, СтрДлина(Соответствие[КлючНаправления1])+?(ПустаяСтрока(Соответствие[КлючНаправления1]), 0,  2));
				ИмяИни			= Соответствие[КлючНаправления1];//Имена инишек идентичны и в онлайн и в обработке
				Если Не ИмяИниНазвание = "" Тогда
					//Это не имя ини, а направление
					ИмяИни = ИмяИни + "_" + ИмяИниНазвание;
				КонецЕсли;
			Иначе
				ИмяИни =	Соответствие[КлючНаправления2] + ?(ПустаяСтрока(Соответствие[КлючНаправления2]), "", "_") + //переводим имена по соответствию имен, убирая старый префикс.
							Сред(ИмяИни, СтрДлина(Соответствие[КлючНаправления1])+?(ПустаяСтрока(Соответствие[КлючНаправления1]), 0,  2));
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяИни;	
	
КонецФункции

&НаКлиенте
Функция		СформироватьТаблицуДоступныхНастроек(Кэш, ДопПараметры, Отказ)
	Перем СписокИни;

	ПараметрыКонфигурацииСписка = Новый Структура("service", Кэш.КэшНастроек.ПараметрыКонфигурации.service);
	РезультатЗапроса = ПолучитьСписокConnection(Кэш, Новый Структура("ПараметрыКонфигурации, ДополнительныеПараметры, СписокИни", ПараметрыКонфигурацииСписка, ДопПараметры), Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатЗапроса, "ФайлыНастроекСервер.СформироватьТаблицуДоступныхНастроек");
	КонецЕсли;
	
	ДанныеКЗаполнению = Новый Массив();
	КлючиКолонок = "Название,Пользователь,НазваниеБазовыхНастроек,ВерсияБазовыхНастроек,Идентификатор,ТипКоннекшена,service,subsystem,version,Коннекшен";
	ДЛя Каждого СтрокаПолучено Из РезультатЗапроса Цикл
		ПараметрыКонфигурации = СтрокаПолучено.ПараметрыКонфигурации;
		
		НоваяСтрока	= Новый Структура(КлючиКолонок);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыКонфигурации);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучено);
		
		НоваяСтрока.НазваниеБазовыхНастроек = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ПараметрыКонфигурации.service, Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(ПараметрыКонфигурации));
		НоваяСтрока.ВерсияБазовыхНастроек	= ПараметрыКонфигурации.version;
		НоваяСтрока.ТипКоннекшена			= ДопПараметры.ТипКоннекшена;
		НоваяСтрока.Коннекшен				= Новый СписокЗначений;
		НоваяСтрока.Коннекшен.Добавить(СтрокаПолучено);
		Если	ПустаяСтрока(СтрокаПолучено.ПараметрыРаботы.Пользователь)	Тогда
			НоваяСтрока.Пользователь = "Общие для аккаунта";
		Иначе
			НоваяСтрока.Пользователь = Кэш.ГлавноеОкно.Пользователь;
		КонецЕсли;
		ДанныеКЗаполнению.Добавить(НоваяСтрока);
	КонецЦикла;	
	ПараметрыСортировки = Новый Структура("ПоляСортировки", Новый Массив);
	ПараметрыСортировки.ПоляСортировки.Добавить(Новый Структура("Поле,Направление", "Название",	"Возр"));
	ДанныеКЗаполнению = Кэш.ОбщиеФункции.СбисОтсортироватьОбъект(ДанныеКЗаполнению,ПараметрыСортировки, Отказ);
	
	ПараметрыКонфигурации = Кэш.КэшНастроек.ПараметрыКонфигурации;
	
	Если	ДопПараметры.Свойство("ЗапретНовых")
		И	ДопПараметры.ЗапретНовых Тогда
		Возврат ДанныеКЗаполнению;
	КонецЕсли;
	//СоздатьСтандартныйКласс			= Ложь;
	СоздатьСтандартныйКласс				= Истина;
	УжеЕстьШаблонКонфигурации			= Ложь;
	Если ДопПараметры.ТипКоннекшена = "account" Тогда
		ПустойКлассПодключения = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор", Кэш.ПараметрыСистемы.Конфигурация.УИДИнтеграции), Отказ);
		Если Отказ Тогда
			Если ПустойКлассПодключения.code = 756 Тогда
				Отказ = Ложь;
				//СоздатьСтандартныйКласс		= Истина;
			Иначе
				Возврат Кэш.ОбщиеФункции.СбисИсключение(ПустойКлассПодключения, "ФайлыНастроекСервер.СформироватьТаблицуДоступныхНастроек");
			КонецЕсли;
		ИначеЕсли ПустойКлассПодключения.ПараметрыРаботы.Статус = "Активен" Тогда
			УжеЕстьШаблонКонфигурации	= Истина;	
			//Возможность создать шаблон без привязки к ИД системы
			//ПустойКлассПодключения = НовыйIntegrationConnection(Кэш, Новый Структура("ПараметрыКонфигурации", Кэш.КэшНастроек.ПараметрыКонфигурации), Отказ);
		КонецЕсли;
	Иначе
		СоздатьСтандартныйКласс = Истина;
	КонецЕсли;
	
	НоваяСтрока = Новый Структура(КлючиКолонок);
	ЭтоШаблон = ДопПараметры.ТипКоннекшена = "account";
	//Если СоздатьСтандартныйКласс Тогда
	ПараметрыКласса = Новый Структура("ПараметрыКонфигурации, ИнициироватьДанные, Тип", ПараметрыКонфигурации, ЭтоШаблон, "Пользовательские");
	Если ЭтоШаблон Тогда
		ПараметрыКласса.Вставить("Тип", "Шаблон");
		//ПараметрыКласса.Вставить("Идентификатор",	Кэш.ПараметрыСистемы.Конфигурация.УИДИнтеграции);
	КонецЕсли;
	ПустойКлассПодключения = НовыйIntegrationConnection(Кэш, ПараметрыКласса, Отказ);

	Если Не ЭтоШаблон Тогда
		НоваяСтрока.Название = "новое подключение " + ПустойКлассПодключения.Название;
	ИначеЕсли УжеЕстьШаблонКонфигурации Тогда
		НоваяСтрока.Название = "новый " + ПустойКлассПодключения.Название;
	Иначе
		ПустойКлассПодключения.Идентификатор = Кэш.ПараметрыСистемы.Конфигурация.УИДИнтеграции;
		НоваяСтрока.Название = "новая интеграция " + ПустойКлассПодключения.Название;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрока,  Кэш.КэшНастроек.ПараметрыКонфигурации);
	Если ПустойКлассПодключения.ПараметрыРаботы.Статус = "Удален" Тогда
		НоваяСтрока.Название = "Восстановить: " + НоваяСтрока.Название;
	Иначе
		НоваяСтрока.Название = "Создать: " + НоваяСтрока.Название;
	КонецЕсли;
	Если	ПустаяСтрока(ПустойКлассПодключения.ПараметрыРаботы.Пользователь)	Тогда
		НоваяСтрока.Пользователь = "Общие для аккаунта";
	Иначе
		НоваяСтрока.Пользователь = Кэш.ГлавноеОкно.Пользователь;
	КонецЕсли;
	НоваяСтрока.НазваниеБазовыхНастроек = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ПараметрыКонфигурации.service, Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(ПараметрыКонфигурации));
	НоваяСтрока.ВерсияБазовыхНастроек	= ПараметрыКонфигурации.version;
	НоваяСтрока.Идентификатор			= ПустойКлассПодключения.Идентификатор;
	НоваяСтрока.Коннекшен				= Новый СписокЗначений;
	
	НоваяСтрока.Коннекшен.Добавить(ПустойКлассПодключения);
	ДанныеКЗаполнению.Добавить(НоваяСтрока);
	
	Возврат ДанныеКЗаполнению;
				
КонецФункции

&НаКлиенте
Функция		ОтключитьФайлыНастроекНаСервере(СписокИниКОтключению, Кэш, Идентификатор, Отказ)
	
	Если Отказ Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	СтруктураВыбранныхНастроек	= Кэш.КэшНастроек.ВыбранныеНастройки;
	
	Для	Каждого	УстановленныйФайл Из СписокИниКОтключению Цикл
		ИмяИниИсточник	= СтрЗаменить(УстановленныйФайл.Значение,".sbis3","");
		СтруктураВыбранныхНастроек.Данные.Ини.Удалить(ИмяИниИсточник);
		ИндексВОтправить = СтруктураВыбранныхНастроек.ПараметрыРаботы.СбисИни.СписокОтправить.Найти(ИмяИниИсточник);
		Если Не ИндексВОтправить = Неопределено Тогда
			СтруктураВыбранныхНастроек.ПараметрыРаботы.СбисИни.СписокОтправить.Удалить(ИндексВОтправить);
		КонецЕсли;
	КонецЦикла;
	СтруктураВыбранныхНастроек.ПараметрыРаботы.Изменен = Истина;
	Кэш.Вставить("ини", СтруктураВыбранныхНастроек.Данные.Ини);
	
	Возврат	ПолучитьМассивУстановленныхИниФайлов(СтруктураВыбранныхНастроек.Данные.Ини,СтруктураВыбранныхНастроек,Отказ);
	
КонецФункции

&НаКлиенте
Функция		ПолучитьМассивУстановленныхИниФайлов(КэшИни, ВыбранныеНастройки=Неопределено, Отказ=Ложь, ПрефиксИни="")
	
	МассивУстановленныхИниФайлов = Новый Массив;
	
	ДатаНастроек		= ?(ВыбранныеНастройки=Неопределено, ТекущаяДата(), ВыбранныеНастройки.ПараметрыРаботы.ДатаИзмененияНастроек);
	АвтообновлениеДефолт= ?(ВыбранныеНастройки=Неопределено, Истина, ВыбранныеНастройки.ПараметрыРаботы.Автообновление);
	
	КлючиСтрок	= "Имяфайла,ИмяфайлаБезРасширения,ПутьДоИниФайла,ЕстьИзменения,Автообновление,Стандартная,Пользовательская,ДатаФайла,ДатаФайлаКлиент,Ини_ИмяИни,Ини_ИмяБезРасширения";
	СписокСтрок	= Новый	СписокЗначений();
	Для Каждого КлючИЗначениеИни Из КэшИни	Цикл
		ИмяИни		= КлючИЗначениеИни.Ключ;
		ЗначениеИни	= КлючИЗначениеИни.Значение;
		Если		ИмяИни	= "Конфигурация"	Тогда//Конфигурация вверху.
			ПолеСортировки = "а";
		ИначеЕсли Лев(ИмяИни, 8) = "Загрузка" Тогда
			ПолеСортировки = "я";
		Иначе
			ПолеСортировки = "б";
		КонецЕсли;
		СбисЕстьТиповая		= Ложь;
		СбисЕстьИзменения	= Ложь;
		СбисАвтообновление	= АвтообновлениеДефолт;
		Если ЗначениеЗаполнено(ЗначениеИни) Тогда				
			ЗначениеИни.Вставить("СбисОшибки",			Новый Массив());
			ЗначениеИни.Вставить("СбисПолноеИмяФайла",	СтрЗаменить(ИмяИни,"""",""));
			ЗначениеИни.Вставить("СбисИмяФайла",		СтрЗаменить(ИмяИни,"""",""));
			
			Если ЗначениеИни.Свойство("СбисЕстьТиповая")	Тогда
				СбисЕстьТиповая = ЗначениеИни.СбисЕстьТиповая;
			КонецЕсли;
			Если ЗначениеИни.Свойство("СбисЕстьИзменения")	Тогда
				СбисЕстьИзменения = ЗначениеИни.СбисЕстьИзменения;
			КонецЕсли;
			Если ЗначениеИни.Свойство("СбисАвтообновление")	Тогда
				СбисАвтообновление = ЗначениеИни.СбисАвтообновление; 
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока = Новый	Структура(КлючиСтрок);
		НоваяСтрока.ПутьДоИниФайла			= "";
		НоваяСтрока.ЕстьИзменения			= СбисЕстьИзменения;
		НоваяСтрока.Автообновление			= СбисАвтообновление;
		НоваяСтрока.Стандартная				= СбисЕстьТиповая;
		НоваяСтрока.Пользовательская		= НЕ СбисЕстьТиповая ИЛИ СбисЕстьИзменения;
		НоваяСтрока.Имяфайла				= ПрефиксИни + СтрЗаменить(ИмяИни + ?(СбисЕстьТиповая, ".sbis3", ""),"""","");
		НоваяСтрока.ИмяфайлаБезРасширения	= ПрефиксИни + СтрЗаменить(ИмяИни, """", "");
		НоваяСтрока.ДатаФайла				= ?(СбисЕстьТиповая,	ДатаНастроек, Неопределено);
		НоваяСтрока.ДатаФайлаКлиент			= ?(СбисЕстьИзменения,	ДатаНастроек, Неопределено);
		НоваяСтрока.Ини_ИмяИни				= СтрЗаменить(ИмяИни,"""","");
		НоваяСтрока.Ини_ИмяБезРасширения	= Сред(НоваяСтрока.ИмяФайла,1,Найти(НоваяСтрока.ИмяФайла,".")-1);
		
		СписокСтрок.Добавить(НоваяСтрока,  ПолеСортировки + НоваяСтрока.ИмяФайла);
	КонецЦикла;
	СписокСтрок.СортироватьПоПредставлению();
	Возврат	СписокСтрок.ВыгрузитьЗначения();
	
КонецФункции

&НаКлиенте
Функция		ПараметрыСтандартнойКонфигурации(Кэш, ПараметрыКонфигурации)
	
	ПараметрыСтандартнойКонфигурации = Новый Структура("service, subsystem, version");
	ЗаполнитьЗначенияСвойств(ПараметрыСтандартнойКонфигурации, ПараметрыКонфигурации);
	ПараметрыСтандартнойКонфигурации.service = Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис;
	Возврат ПараметрыСтандартнойКонфигурации;
	
КонецФункции

//Применяет выбранные настройки в обработку. Инициирует проверку.
&НаКлиенте
Процедура	СбисПеречитатьТекущиеНастройки(ПараметрыПеречитать, Кэш) Экспорт
	Перем УстановленныеИни;
	
	ПараметрыВосстановить = Новый Структура;
	ПараметрыВосстановить.Вставить("Идентификатор",			СбисПолучитьИдентификаторНастроек(Кэш));
	ПараметрыВосстановить.Вставить("Перечитать",			Истина);
	ПараметрыВосстановить.Вставить("ПараметрыКонфигурации",	Кэш.КэшНастроек.ПараметрыКонфигурации);
	Отказ = Ложь;
	
	ВыбранныеНастройки = НовыйIntegrationConnection(Кэш, ПараметрыВосстановить, Отказ);
	Если Отказ Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение(ВыбранныеНастройки, "ФайлыНастроекСервер.СбисПеречитатьНастройки");
	КонецЕсли;
	
	Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", ВыбранныеНастройки);
	//КлассIntegrationConnection_Очистить(Кэш, ВыбранныеНастройки, Новый Структура("Ини", Истина), Отказ);
	РезультатУстановки = КлассIntegrationConnection_Установить(Кэш, ВыбранныеНастройки, Новый Структура, Отказ);
	
	Если Отказ Тогда
		Если РезультатУстановки.code = 756 Тогда
			
			//Выполнить InitConnection для получения верного коннекшена пользователя
			УстановленныеИни = ПрочитатьНастройкиЧерезИнитКоннекшен(Кэш);
			
		Иначе
			
			МодульОбъектаКлиент().ВызватьСбисИсключение(РезультатУстановки, "ФайлыНастроекСервер.СбисПеречитатьНастройки");
			
		КонецЕсли;
	Иначе
		УстановленныеИни = РезультатУстановки.СписокФайлов;
	КонецЕсли;
	
	Попытка
		Кэш.ФормаНастроекОбщее.СбисУстановитьНастройки(Новый Структура("ПринудительнаяПроверка, СписокИни", Истина, УстановленныеИни), Кэш);
		Кэш.ФормаНастроекОбщее.СбисОбновитьИнформациюНастроек(Кэш, УстановленныеИни);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "ФайлыНастроекСервер.СбисПеречитатьНастройки");
	КонецПопытки;	
КонецПроцедуры

//Временный костыль. Переписать на нормальное определение типовой конфы.
&НаКлиенте
Функция		НайтиТиповойКонфигСервиса(Кэш, ПараметрыКонфигурации)
	СписокТиповНастроек = СбисПолучитьСписокДоступныхНастроек(Кэш);
	ДопПараметрыПолучения = Новый Структура("ЗначениеПредставление, ВерсияТекущейКонфигурации, ПрефиксТекущейКонфигурации","Значение", СтрЗаменить(ПараметрыКонфигурации.version, ".", "-"), ПараметрыКонфигурации.subsystem);
	ПараметрыСтандартнойКонфигурации = Кэш.ФормаНастроекОбщее.ПолучитьМассивФайловДляКонфигурации(СписокТиповНастроек, Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис, ДопПараметрыПолучения);
	Возврат ПараметрыСтандартнойКонфигурации.ПараметрыКонфигурации;
КонецФункции

&НаКлиенте
Функция		СбисОписаниеИни(Кэш, data_ini=Неопределено)
	Возврат Новый Структура("active,data,type,name", Истина, data_ini)
КонецФункции

//Функция выполняет проверку изменения параметров работы формы настроек. Возвращает результат изменения параметров, либо неопределено.
&НаКлиенте                                  
Функция		СбисПолучитьНастройки_ОбработатьПараметрыРаботы(Кэш, Отказ, ПродолжитьВыполнение)
	
	//Проверка изменения параметров работы формы с настройками.	Обрабатываем переданные параметры и сразу очищаем.
	ПараметрРаботы = Неопределено;
	Если ПараметрыРаботы.Свойство("ИзменениеПользователя",	ПараметрРаботы) Тогда
		Если ПараметрРаботы Тогда
			СбисОчиститьВыбранныеНастройки(Кэш, Отказ);//Была смена пользователя. Перезапускаем получение даже если уже были выбраны какие-то настройки
		КонецЕсли;
		ПараметрыРаботы.Удалить("ИзменениеПользователя");
	КонецЕсли;	
	Если ПараметрыРаботы.Свойство("ИзменениеАккаунта",		ПараметрРаботы) Тогда
		Если ПараметрРаботы Тогда
			СбисОчиститьВыбранныеНастройки(Кэш, Отказ);//Была смена пользователя. Перезапускаем получение даже если уже были выбраны какие-то настройки
		КонецЕсли;
		ПараметрыРаботы.Удалить("ИзменениеАккаунта");
	КонецЕсли;	
	Если	ПараметрыРаботы.Свойство("ВыполнитьПроверку", ПараметрРаботы)
		И	ПараметрРаботы Тогда
		ВыбранныеНастройки = Неопределено;
		Если Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", ВыбранныеНастройки) Тогда//Настройки должны быть выбраны
			ПродолжитьВыполнение = Ложь;
			Возврат Неопределено;
		КонецЕсли;
		ПродолжитьВыполнение = Истина;
		Возврат ПолучитьМассивУстановленныхИниФайлов(Кэш.ини,ВыбранныеНастройки,Отказ);
	КонецЕсли;
	Если ПараметрыРаботы.Свойство("КэшироватьТекущие") Тогда
		ПараметрыРаботы.Удалить("КэшироватьТекущие");
	КонецЕсли;
	//Чистим способ данные по конфигурациям в кэше и выбранную конфу, так как другой способ хранения настроек
	Если ПараметрыРаботы.Свойство("ИзмененаФормаНастроек", ПараметрРаботы) Тогда
		Если ПараметрРаботы Тогда
			Кэш.ФормаНастроекОбщее.ОчиститьСобранныеНастройки(Кэш);
		КонецЕсли;
		ПараметрыРаботы.Удалить("ИзмененаФормаНастроек");
	КонецЕсли;

	Возврат Неопределено;
		
КонецФункции

//Функция осуществляет поиск и получение настроек по сохраненному идентификатору, либо по наличию ранее настроенного соединения.
&НаКлиенте                                  
Функция		ПрочитатьНастройкиЧерезИнитКоннекшен(Кэш, ДопПараметры = Неопределено)
	Перем Результат, РезультатЧтенияКоннекшена;
	
	ОшибкаУстановки	= Ложь;
	Если ДопПараметры = Неопределено Тогда
		
		ДопПараметры = Новый Структура;
		
	КонецЕсли;
	
	Попытка
		
		КлассКонекшенаПрименить = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ИнитКоннекшен", СбисПолучитьИдентификаторНастроек(Кэш), Истина), ОшибкаУстановки);
		Если ОшибкаУстановки Тогда
			
			МодульОбъектаКлиент().ВызватьСбисИсключение(КлассКонекшенаПрименить, "ФайлыНастроекСервер.НовыйIntegrationConnection");
			
		КонецЕсли;
		
		Результат = КлассIntegrationConnection_Установить(Кэш, КлассКонекшенаПрименить, ДопПараметры, ОшибкаУстановки);
		Если ОшибкаУстановки Тогда
			
			МодульОбъектаКлиент().ВызватьСбисИсключение(Результат, "ФайлыНастроекСервер.КлассIntegrationConnection_Установить");
			
		КонецЕсли;
		
		Возврат Результат;
		
	Исключение
		
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнформацияОбОшибке(), "ФайлыНастроекСервер.ПрочитатьНастройкиЧерезИнитКоннекшен");
		
	КонецПопытки;
			
КонецФункции

//Получает структуру XSLT при её отсутствии в кэше
&НаКлиенте
Функция		СбисСформироватьСтруктуруXSLT(Кэш, Идентификатор, Отказ) Экспорт
	
	//Пока XSLT не привязаны к ID. Делаем всегда получение. После переделать на получение xslt по ID.
	Если	Отказ
		Или	(	Кэш.Свойство("XSLT")
			И	ЗначениеЗаполнено(Кэш.XSLT))	Тогда
			Возврат Ложь;
	ИначеЕсли Не Кэш.ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Получение структуры XSLT", Кэш.ГлавноеОкно);
	КонецЕсли;
	ДопПараметрыЗапроса	= Новый Структура("ВернутьОшибку, ЕстьРезультат", Истина, Истина);
	
	РезультатЗапроса = Кэш.Интеграция.ПолучитьXslt(Кэш, Неопределено, ДопПараметрыЗапроса, Отказ);
	
	Если Не Кэш.ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	Если Отказ Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	Кэш.Вставить("XSLT", РезультатЗапроса);
	Возврат Истина;

КонецФункции

&НаКлиенте
Функция		СформироватьСписокИни(Кэш=Неопределено, ПараметрыПоиска, Отказ)
    Перем СбисМеню, Искать, Идентификатор, ТипыИни, СбисКоннекшен;
	Если 	ПараметрыПоиска.Свойство("Коннекшен", СбисКоннекшен) Тогда
		СбисМеню = СбисКоннекшен.Данные.Меню;
		Если СбисМеню = Неопределено Тогда
			Если Кэш = Неопределено Тогда//Если не передаётся меню, то кэш должен быть для возможности получить с сервера
				Отказ = Истина;
				Возврат Новый Структура("code,message,details", 100, "Невозможно определить список настроек для получения!", "Ошибка передачи параметров.");
			КонецЕсли;
			СбисМеню = КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, СбисКоннекшен, Новый Структура("БратьВКэше", Ложь), Отказ);
		КонецЕсли;
	ИначеЕсли	Не	ПараметрыПоиска.Свойство("СбисМеню", СбисМеню)
		Или		СбисМеню = Неопределено Тогда
		Если Кэш = Неопределено Тогда//Если не передаётся меню, то кэш должен быть для возможности получить с сервера
			Отказ = Истина;
			Возврат Новый Структура("code,message,details", 100, "Невозможно определить список настроек для получения!", "Ошибка передачи параметров.");
		КонецЕсли;
		Если Не ПараметрыПоиска.Свойство("Идентификатор", Идентификатор) Тогда
			Идентификатор = "";
		КонецЕсли;
		//Для Пользовательской ТИПОВОЙ конфигурации базовое меню будет пустым. Для коннекшена меню должно быть
		Если	ПустаяСтрока(Идентификатор)
			И	ПустаяСтрока(ПараметрыПоиска.ПараметрыКонфигурации.subsystem) Тогда
			СбисМеню = Новый Структура();
		Иначе
			КлассКонфиг	= НовыйIntegrationConnection(Кэш, Новый Структура("ПараметрыКонфигурации", ПараметрыПоиска.ПараметрыКонфигурации), Отказ); 
			СбисМеню	= КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, КлассКонфиг, Новый Структура, Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.СбисИсключение(СбисМеню, "ФайлыНастроекСервер.СформироватьСписокИни");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не	ПараметрыПоиска.Свойство("ДоступныеТипыИни", ТипыИни) Тогда
		Если Кэш = Неопределено Тогда//Если не передаются ТипыИни, то кэш должен быть
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		ТипыИни = Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни;
	КонецЕсли;
	Если Не	ПараметрыПоиска.Свойство("Искать", Искать) Тогда
		Искать = Новый Структура("Включено", "1")//По-умолчанию искать только включенные. 01 - ищутся все, 0 - отключенные
	КонецЕсли;
	
	Результат = СформироватьСпискиИзМеню(ТипыИни, СбисМеню, Искать);
	
	Возврат	Результат;
	
КонецФункции

//Функция формирует по меню структуру с полями "Карта" и "Данные" для дальнейшего составления запроса. 
//Карта		- список имен для быстрого поиска. 
//Данные	- массив структур "type, name" из меню для передачи в методы получения уже самих ини.
&НаКлиенте                                  
Функция		СформироватьСпискиИзМеню(ТипыИни, СбисМеню, Искать, СписокИни = Неопределено)	
	
	Если Не	ТипЗнч(СбисМеню) = Тип("Структура") Тогда
		ВызватьИсключение("Неизвестный формат меню");
	КонецЕсли;
	
	Если СписокИни = Неопределено Тогда
		СписокИни = Новый Структура("Карта, Данные",Новый СписокЗначений,Новый Массив);
	КонецЕсли;
	//Обойти меню и сформировать реестр ини.
	Для	Каждого	КлючИЗначение Из СбисМеню Цикл
		Если Не ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		enable = Неопределено;
		Если КлючИЗначение.Значение.Свойство("enable", enable) Тогда	
			ИмяИни	= КлючИЗначение.Ключ;
			ТипИни	= Неопределено;
			Если 	Не	КлючИЗначение.Значение.Свойство("type", ТипИни)
				Или		ТипыИни.Найти(ТипИни) = Неопределено Тогда//Фильтр по типу ини. Описание в инициализации кэша
				Продолжить;
			КонецЕсли;
			Карта		= СписокИни.Карта;//Карта для поиска значений без перебора
			Раздел		= СписокИни.Данные;//Данные - собственно список для передачи в запросы
			КлючКарты	= НРег(ИмяИни);
			enable		= Строка(enable);
			Фильтр		= Неопределено;
			Если		Искать.Свойство("Включено",Фильтр)
				И Не	Найти(Фильтр, enable) Тогда 
				Продолжить;
			ИначеЕсли	Искать.Свойство("Имя",Фильтр)
				И 		Фильтр.Найти(ИмяИни) = Неопределено Тогда 
				Продолжить;
			ИначеЕсли	Искать.Свойство("Тип")
				И 		Фильтр.Найти(ТипИни) = Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			Если Не	Карта.НайтиПоЗначению(КлючКарты) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Раздел.Добавить(Новый Структура("type,name", ТипИни,ИмяИни));
			Карта.Добавить(КлючКарты, ИмяИни);
		Иначе//Это подраздел
			СформироватьСпискиИзМеню(ТипыИни, КлючИЗначение.Значение,Искать,СписокИни);	
		КонецЕсли;
	КонецЦикла;
	Возврат СписокИни;
	
КонецФункции
	
//Процедура выполняет конвертацию полученных ини после их получения
&НаКлиенте
Процедура	ЧтениеИни_ОбработатьРезультат(Кэш, Результат, ПараметрыКонвертации = Неопределено)
	Ини = Новый Структура();
	Если ПараметрыКонвертации = Неопределено Тогда
		ПараметрыКонвертации = Новый Структура("ОчищатьОтключенные", Истина);
	КонецЕсли;
	Если Не Результат.Данные.Ини = Неопределено Тогда
		Для Каждого КлючИЗначение Из Результат.Данные.Ини Цикл
			Если		КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			ИначеЕсли	КлючИЗначение.Ключ = "СбисМеню" Тогда
				Ини.Вставить("СбисМеню", КлючИЗначение.Значение);
			Иначе
				ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначение.Ключ);
	 			ЗначениеИни = ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(КлючИЗначение.Значение, ПараметрыКонвертации);
				Ини.Вставить(ИмяИни, ЗначениеИни);
			КонецЕсли;
		КонецЦикла;
		Результат.Данные.Ини = Ини;
	КонецЕсли;
	Результат.ПараметрыКонфигурации.version = Кэш.ОбщиеФункции.СериализоватьВерсию(Результат.ПараметрыКонфигурации.version);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыХранящиесяНаШаблоне(Кэш, Параметр)
	Если Параметр = "status_marks" Тогда
		Если Кэш.Парам.СпособХраненияМетокСтатусов = 1 Тогда
			Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Добавить("status_marks");
		Иначе
			Элемент = Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Найти("status_marks");
			Если Не Элемент = Неопределено Тогда
				Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Удалить(Элемент);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	

#Область include_core2_vo2_Настройки_СБИС_ВнутренниеВызовы_Меню
////////////////////////////////////////////////////

//Функция возвращает описание инишки меню для запроса методами получения данных
&НаКлиенте
Функция		СбисОписаниеИниМеню(Кэш, СбисМеню=Неопределено)
	Результат = СбисОписаниеИни(Кэш, СбисМеню);
	Результат.type = "Меню";
	Результат.name = "сбисМеню";
	Возврат Результат;
КонецФункции

//Формируем Сбис меню на основании переданного и внесенных изменений.
&НаКлиенте                                  
Функция		СформироватьМеню_Структура(Кэш, УстановленныеИни, БазовоеМеню=Неопределено, Отказ)//
	Если БазовоеМеню = Неопределено Тогда
		//Если меню отсутствует, то надо собрать его по алгоритму с нуля из инишек, которые имеются в наличии, если меню есть, то взять только отличия (то, что было переключено)
		БазовоеМеню	= Новый	Структура();
	КонецЕсли;
	СтруктураМеню = БазовоеМеню;
	Если СтруктураМеню = Неопределено Тогда
		СтруктураМеню = Новый Структура();
	КонецЕсли;

	//Сперва смотрим ини, которые есть в меню. Переставляем все флаги в базовом меню (по-идее, это меню от конфига)
	ПараметрыЗапроса= Новый Структура("СбисМеню, Искать, ДоступныеТипыИни", БазовоеМеню, Новый Структура("Включено", "1"), Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни);
	ДанныеСписка	= СформироватьСписокИни(Кэш, ПараметрыЗапроса, Отказ);
	Для	Каждого	КлючИЗначениеРаздел	Из	БазовоеМеню	Цикл//Переключить то, что установлено в типовых настройках
		Если Не ТипЗнч(КлючИЗначениеРаздел.Значение) = Тип("Структура") Тогда
			//На случай добавления в меню не структурных параметров, пропускаем их
			Продолжить;
		КонецЕсли;
		Для	Каждого	Ини	Из КлючИЗначениеРаздел.Значение Цикл
			//+++ МАИ 02.08.2021 На случай добавления в ини не структурных параметров, пропускаем их
			ИниВключена	= Неопределено;
			ИниТип		= Неопределено;
			Если	Не	ТипЗнч(Ини.Значение) = Тип("Структура")
				Или	Не	Ини.Значение.Свойство("enable", ИниВключена)
				Или	Не	Ини.Значение.Свойство("type",	ИниТип)
				Или		Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни.Найти(ИниТип) = Неопределено Тогда//Ини не из списка поддерживаемых обработкой, не трогаем 
				Продолжить;
			КонецЕсли;
			//--- МАИ 02.08.2021
			ИмяИниМеню	= Ини.Ключ;
			ИмяИниВо	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ИмяИниМеню);
			Добавить	= Ложь;
			Если		ИниВключена = "1"	Тогда
				Если	УстановленныеИни.Свойство(ИмяИниВо) Тогда
					Продолжить;//Уже включено.
				КонецЕсли;
				ИниВключена	= "0";
				Добавить	= Истина;
			ИначеЕсли	ИниВключена = "0"	Тогда
				Если Не УстановленныеИни.Свойство(ИмяИниВо) Тогда
					Продолжить;//Уже выключено.
				КонецЕсли;
				ИниВключена	= "1";
				Добавить	= Истина;
			КонецЕсли;
			Если Добавить Тогда
				Если Не	СтруктураМеню.Свойство(КлючИЗначениеРаздел.Ключ)	Тогда
					СтруктураМеню.Вставить(КлючИЗначениеРаздел.Ключ, Новый	Структура);
				КонецЕсли;
				Если Не СтруктураМеню[КлючИЗначениеРаздел.Ключ].Свойство(ИмяИниМеню)	Тогда
					СтруктураМеню[КлючИЗначениеРаздел.Ключ].Вставить(ИмяИниМеню, Новый Структура("enable", ИниВключена));
				Иначе
					СтруктураМеню[КлючИЗначениеРаздел.Ключ][ИмяИниМеню].enable = ИниВключена;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//Смотрим установленные ини - возможно, добавлена не стандартная инишка
	Для	Каждого	КлючИЗначениеИни Из УстановленныеИни Цикл
		ИмяИниВО	= КлючИЗначениеИни.Ключ;
		ИмяИниМеню	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ИмяИниВО, "во_json");
		ПунктМеню	= СформироватьМеню_Элемент(КлючИЗначениеИни.Значение, ИмяИниМеню);
		Для	шаг = 1 По СтрЧислоСтрок(ПунктМеню.КнопкиРеестров)	Цикл
			ИмяКнопки	= СтрПолучитьСтроку(ПунктМеню.КнопкиРеестров, шаг);
			Раздел		= Неопределено;
			ПодРаздел	= Неопределено;
			Если Не СтруктураМеню.Свойство(ИмяКнопки, Раздел)	Тогда
				Раздел = Новый Структура();
				СтруктураМеню.Вставить(ИмяКнопки, Раздел);
			КонецЕсли;
			Если Раздел.Свойство(ИмяИниМеню, ПодРаздел)	Тогда
				ПодРаздел.enable = ПунктМеню.ЗначениеМеню.enable;
			Иначе
				Раздел.Вставить(ИмяИниМеню, ПунктМеню.ЗначениеМеню);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СтруктураМеню.Вставить("РазделыВнешнейОбработки", Кэш.ФормаНастроекОбщее.СбисСформироватьСтруктуруРазделов(Кэш, УстановленныеИни, Новый Структура));
	
	Возврат	СтруктураМеню;
	
КонецФункции

&НаКлиенте                                  
Функция		СформироватьМеню_Элемент(ЗначениеИни, НазваниеИни)

	ИниВключена = "1";
    Если ЗначениеИни.Свойство("Реестр1С_Название")	Тогда
        ИмяРеестра = СтрЗаменить(ЗначениеИни.Реестр1С_Название.Значение,"'", "");
	Иначе	
		ИмяРеестра = НазваниеИни;
	КонецЕсли;
	КнопкиРеестров = "";
	Если ЗначениеИни.Свойство("РеестрСБИС_ИдМеню")	Тогда
        КнопкиРеестров = СтрЗаменить(СтрЗаменить(СтрЗаменить(ЗначениеИни.РеестрСБИС_ИдМеню.Значение,
						 " ", ""), 
						 "'", ""), 
						 ",", Символы.ПС);
	КонецЕсли;
	Если ЗначениеИни.Свойство("мДокумент") Тогда
		Для Каждого КлючИЗначениеМДокумент Из ЗначениеИни["мДокумент"] Цикл 
			ИмяРаздела	= Неопределено;
			РеестрИдМеню= КлючИЗначениеМДокумент.Значение;
			Если 	Не РеестрИдМеню.Свойство("Имя", ИмяРаздела)
				Или Не ИмяРаздела = "РеестрСБИС_ИдМеню" Тогда
				Продолжить;
			КонецЕсли;
			КнопкиРеестров = КнопкиРеестров 
						   + ?(ПустаяСтрока(КнопкиРеестров), "", ",") 
						   + СтрЗаменить(СтрЗаменить(СтрЗаменить(РеестрИдМеню["Значение"],
							 " ", ""), 
							 "'", ""), 
							 ",", Символы.ПС);
            Прервать;
		КонецЦикла;
	КонецЕсли;
	Если ПустаяСтрока(КнопкиРеестров) Тогда
		КнопкиРеестров = "Handling";
	КонецЕсли;
	Если ЗначениеИни.Свойство("РеестрПоУмолчанию")	Тогда
        ПоУмолчанию = СтрЗаменить(ЗначениеИни.РеестрПоУмолчанию.Значение, "'", "");
	Иначе	
        ПоУмолчанию = "0";
	КонецЕсли;
	Если		НазваниеИни = "Конфигурация"	Тогда
		ТипИни	= "Система";
	ИначеЕсли	ЗначениеИни.Свойство("ТипИни")	Тогда
		ТипИни	= СтрЗаменить(ЗначениеИни.ТипИни.Значение, "'", "");
	ИначеЕсли	НРег(Лев(НазваниеИни,8)) = "загрузка" Тогда
		МногострочнНазвание = СтрЗаменить(НазваниеИни, "_", Символы.ПС);
		ТипИни	= СтрПолучитьСтроку(МногострочнНазвание,1);
        Если НРег(СтрПолучитьСтроку(МногострочнНазвание,2)) = "исходящий" Тогда
            ТипИни = ТипИни + "Исходящих";
		КонецЕсли;
	ИначеЕсли	НРег(Лев(НазваниеИни,8)) = "выгрузка" Тогда
		МногострочнНазвание = СтрЗаменить(НазваниеИни, "_", Символы.ПС);
		ТипИни	= СтрПолучитьСтроку(МногострочнНазвание,1);
        Если НРег(СтрПолучитьСтроку(МногострочнНазвание,2)) = "входящий" Тогда
            ТипИни = ТипИни + "Входящих";
		КонецЕсли;
	ИначеЕсли	ЗначениеИни.Свойство("мДокумент")	Тогда
		ТипИни	= "Загрузка";
	Иначе
		ТипИни	= "Выгрузка";
	КонецЕсли;
	
	Возврат Новый Структура("КнопкиРеестров, ЗначениеМеню", КнопкиРеестров, Новый Структура("name,type,default,enable", ИмяРеестра, ТипИни, ПоУмолчанию, ИниВключена));

КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_ВнутренниеВызовы_УстановкаИни
////////////////////////////////////////////////////

//Функция добавляет выбранные настройки в список активных Вызов extSDK происходит на клиенте
&НаКлиенте
Функция		УстановитьФайлыНастроекНаСервере(МассивФайловДляУстановки, Кэш, СтруктураВыбранныхНастроек, НашаКонфигурация, Отказ)
		
	Если	Отказ
		Или	СтруктураВыбранныхНастроек	= Неопределено	Тогда//Настройки должны быть получены. Если нет, была ошибка
		Возврат	Неопределено;
	КонецЕсли;
	МассивДозапрос = Новый Массив;
	Для Каждого УстановленныйФайл Из МассивФайловДляУстановки Цикл
		МассивДозапрос.Добавить(СтрЗаменить(УстановленныйФайл.ИмяФайлаИсточника,".sbis3",""));
	КонецЦикла;
	
	КлассIntegrationConnection = НовыйIntegrationConnection(Кэш, Новый Структура("ПараметрыКонфигурации", НашаКонфигурация.ПараметрыКонфигурации), Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnection, "ФайлыНастроекСервер.УстановитьФайлыНастроекНаСервере");
	КонецЕсли;
	ИниКУстановке = КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnection, Новый Структура("СписокИни_ВО", МассивДозапрос), Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(ИниКУстановке, "ФайлыНастроекСервер.УстановитьФайлыНастроекНаСервере");
	КонецЕсли;
	Если Не ИниКУстановке.Количество() = МассивФайловДляУстановки.Количество() Тогда
		Отказ				= Истина;
		СтрокаОшибки		= "";
		ЧислоНеПолученных	=  МассивФайловДляУстановки.Количество() - ИниКУстановке.Количество();
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.УстановитьФайлыНастроекНаСервере", 765, "Значение не найдено в таблице настроек", СтрокаОшибки);
		Для Каждого ЧистоеИмяИни Из МассивДозапрос Цикл
			Если Не ИниКУстановке.Свойство(ЧистоеИмяИни) Тогда
				СтрокаОшибки = СтрокаОшибки + ?(ПустаяСтрока(СтрокаОшибки), "", ", ") + ЧистоеИмяИни;
			КонецЕсли;	
			СтрокаОшибки = "Не удалось определить файл" + ?(ЧислоНеПолученных=1, " ", "ы ") + СтрокаОшибки + " для чтения."; 
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ИниДобавить Из ИниКУстановке Цикл
		ИниДобавить.Значение.СбисАвтообновление = СтруктураВыбранныхНастроек.ПараметрыРаботы.Автообновление;
		СтруктураВыбранныхНастроек.Данные.Ини.Вставить(ИниДобавить.Ключ, ИниДобавить.Значение);
	КонецЦикла;
	
	СтруктураВыбранныхНастроек.ПараметрыРаботы.ДатаИзмененияНастроек = ТекущаяДата();//Настройки меняются, а значит дата тоже	
	УстановленныеИни = КлассIntegrationConnection_СписокИниДляИнтерфейса(Кэш, СтруктураВыбранныхНастроек, Новый Структура, Отказ);
	Кэш.Вставить("ини", СтруктураВыбранныхНастроек.Данные.Ини);
	
	Возврат	УстановленныеИни;
	
КонецФункции

//Функция устанавливает стандартные настройки из списка подходящих конфигураций
&НаКлиенте
Функция		УстановитьСтандартныеНастройкиНаСервере(Кэш, Отказ, ДопПараметры=Неопределено)
	Перем	СписокИниУстановить,	//Определяет список ини к получению и установке.
			УстановитьИни,			//Определяет необходимость получения и установки ини.
			ПараметрыКонфигурацииУс,//service,subsystem и version устанавливаемой конфигурации
	        ПрименитьXSLT,			//Необходимость получения и применения стандартных xslt. Необходимо для возможности установить пользовательскую конфу, если при получении что-то пошло не так и с сервера ничего не возвращается
			СтруктураКонфигураций, СписокТиповНастроек;
			
	Если Отказ Тогда
		Возврат Неопределено;
	ИначеЕсли ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("СписокИни", СписокИниУстановить) Тогда
		СписокИниУстановить = Новый Массив;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("УстановитьИни", УстановитьИни) Тогда
		УстановитьИни = Истина;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("ПараметрыКонфигурации", ПараметрыКонфигурацииУс) Тогда
		ПараметрыКонфигурацииУс = Кэш.КэшНастроек.ПараметрыКонфигурации;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("ПрименитьXSLT", ПрименитьXSLT) Тогда
		ПрименитьXSLT = Истина;
	КонецЕсли;
	ПараметрыКонфигурации = ПараметрыСтандартнойКонфигурации(Кэш, ПараметрыКонфигурацииУс);
	ГлавноеОкно = Кэш.ГлавноеОкно;
		
	//Ищем подходящую конфигурацию по параметрам системы: service,subsystem,version, получаем меню. Пока без данных ини.
	СписокИни = Новый Массив();
	СписокИни.Добавить(СбисОписаниеИниМеню(Кэш));
	ПараметрыПоиска = Новый Структура("СписокИни, ПараметрыКонфигурации, ДополнительныеПараметры", СписокИни,ПараметрыКонфигурации,Новый Структура("ТихийРежим,ЕстьРезультат", Истина, Истина));
	РезультатЗапроса = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыПоиска, Отказ);
	Если ПрименитьXSLT Тогда
		СбисСформироватьСтруктуруXSLT(Кэш, "", Отказ);
	КонецЕсли;
	
	//Вынесено 
	Если Отказ Тогда//По какой-то причине пришла ошибка и не удалось получить стандартные настройки.
		Возврат УстановитьПользовательскуюКонфигурациюНаСервере(Кэш, Отказ, ДопПараметры);
	КонецЕсли;
	
	СтандартнаяКонфигурация = РезультатЗапроса;
	
	//Заполняем список доступных конфигураций.
	Если	Не	Кэш.Свойство("Конфигурация", СтруктураКонфигураций)
		Или	Не	ЗначениеЗаполнено(СтруктураКонфигураций)	Тогда
		Если СписокТиповНастроек = Неопределено Тогда
			СписокТиповНастроек = СбисПолучитьСписокДоступныхНастроек(Кэш, Отказ);
		КонецЕсли;
		Если Отказ Тогда 
			Отказ = Ложь;
		Иначе
			ДанныеКонфигураций	= Кэш.ФормаНастроекОбщее.СформироватьСтруктуруКонфигураций(Кэш, СписокТиповНастроек);
			ГлавноеОкно.СбисЭлементФормы(ГлавноеОкно, "Конфигурация").СписокВыбора.ЗагрузитьЗначения(ДанныеКонфигураций.СписокВыбора);
			СтруктураКонфигураций = ДанныеКонфигураций.СтруктураКонфигураций;
			Кэш.Вставить("Конфигурация", СтруктураКонфигураций);		
		КонецЕсли;
	КонецЕсли;
	//Формируем префикс и устанавливаем на главном окне конфигурацию в левой колонке.
	Префикс = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(СтандартнаяКонфигурация.ПараметрыКонфигурации);
	ИмяКонфигурации	= Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(СтандартнаяКонфигурация.ПараметрыКонфигурации.service, Префикс);
	
	УстановленныеИниФайлы = Неопределено;
	Если УстановитьИни Тогда//Смысл в том, что если мы делаем действие при установке файлов от другой конфигурации, то конвертация и установка ини нам не нужна - они всё равно потом отключаются и включаются только те, что были выбраны
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Формирование структуры настроек", Кэш.ГлавноеОкно);
		//Получаем включенные по-умолчанию ини.
		ПараметрыПоиска = Новый Структура("ПараметрыКонфигурации", СтандартнаяКонфигурация.ПараметрыКонфигурации);
		Если СписокИниУстановить.Количество() Тогда//Если указаны инишки к установке, то получаем и применяем. Иначе - по-умолчанию(установка только включенных)
			ПараметрыПоиска.Вставить("СписокИни", СписокИниУстановить);
		КонецЕсли;
		СтандартнаяКонфигурация = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыПоиска, Отказ);	
		Если Не Отказ Тогда
			УстановленныеИниФайлы	= ПолучитьМассивУстановленныхИниФайлов(СтандартнаяКонфигурация.Данные.Ини,СтандартнаяКонфигурация,Отказ);		//Массив установленных ини

			Кэш.Вставить("Ини", СтандартнаяКонфигурация.Данные.Ини);
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;
	Иначе
		//СтандартнаяКонфигурация.Данные.Ини.Удалить("СбисМеню");
		УстановленныеИниФайлы = Новый Массив;
	КонецЕсли;
	
	СтандартнаяКонфигурация.Название = ИмяКонфигурации;
	ГлавноеОкно.Конфигурация = ИмяКонфигурации;
	Если ЗначениеЗаполнено(СтандартнаяКонфигурация) Тогда 
		Кэш.ФормаНастроекОбщее.НастройкиНазвание		= СтандартнаяКонфигурация.Название;
		Кэш.ФормаНастроекОбщее.НастройкиАвтообновление	= СтандартнаяКонфигурация.ПараметрыРаботы.Автообновление;
	КонецЕсли;
	
	СтандартнаяКонфигурация.ПараметрыРаботы.СбисМеню.Обновить = Истина;//Для типовой конфигурации обязательно вызываем формирование меню
	СтандартнаяКонфигурация.ПараметрыРаботы.Статус = "Новый";
	СтандартнаяКонфигурация.Идентификатор = "";
	
	Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
	Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", СтандартнаяКонфигурация);
	
	Возврат	УстановленныеИниФайлы;
	
КонецФункции

//Функция устанавливает стандартные настройки из списка подходящих конфигураций
&НаКлиенте
Функция		УстановитьПользовательскуюКонфигурациюНаСервере(Кэш, Отказ, ДополнительныеПараметры=Неопределено)
	
	ПараметрыПользовательскойСистемы = Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(Кэш.КэшНастроек.ПараметрыКонфигурации);
	ПараметрыПользовательскойСистемы.Вставить("subsystem", "");
	ДополнительныеПараметрыПользовательское = Новый Структура;
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		Для Каждого КлючИЗначение Из Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(ДополнительныеПараметры) Цикл
			ДополнительныеПараметрыПользовательское.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	ДополнительныеПараметрыПользовательское.Вставить("ПараметрыКонфигурации", ПараметрыПользовательскойСистемы);
	Если Отказ Тогда
		ДополнительныеПараметрыПользовательское.Вставить("ПрименитьXSLT", Ложь);
	КонецЕсли;
	Отказ = Ложь;
	//ДополнительныеПараметрыПользовательское.Вставить("ПрименитьПользовательскую", Истина);
	Возврат УстановитьСтандартныеНастройкиНаСервере(Кэш, Отказ, ДополнительныеПараметрыПользовательское);

КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_ВнутренниеВызовы_Кэширование
////////////////////////////////////////////////////

//Проверяет переданный идентификатор и возвращает готовый для работы со структурой настроек в кэше
&НаКлиенте
Функция		Кэширование_Идентификатор(Кэш, ПараметрыКонфигурации, Идентификатор = "", Отказ=Ложь)

	ID = Идентификатор;
	Если ПустаяСтрока(ID) Тогда
		ID	= СтрЗаменить(Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(ПараметрыКонфигурации), "-", "");
	КонецЕсли;
	ID = Кэш.ОбщиеФункции.СбисФорматСтроки(ID, "КлючСтруктуры");
	Если ID = "_" Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.Кэширование_Идентификатор", 600,,"Невозможно определить идентификтор настроек для хранения!", Новый Структура("config, id", ПараметрыКонфигурации, Идентификатор));
	КонецЕсли;
	Возврат	ID;

КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_ВнутренниеВызовы_ПредустановкаКоннекшена

#КонецОбласти

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_ОтборРазличий
////////////////////////////////////////////////////

///////Вызов///////

&НаСервереБезКонтекста
Функция		ПолучитьРасхождениеИни(Знач СтруктураИни1,Знач СтруктураИни2, Отказ)
	
	СтруктураПользовательскихИзменений	= Новый	Структура;
	
	Если	Не ЗначениеЗаполнено(СтруктураИни1) Тогда
		Возврат СтруктураИни2;
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураИни2) Тогда
		Возврат СтруктураИни1;
	КонецЕсли;
	Для	Каждого	КлючИЗначение	Из	СтруктураИни1	Цикл
		Если	Лев(КлючИЗначение.Ключ,4)	= "Сбис"	Тогда
			Продолжить;
		КонецЕсли;
		Если	Не	СтруктураИни2.Свойство(КлючИЗначение.Ключ)	Тогда
			СтруктураПользовательскихИзменений.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			Продолжить;
		КонецЕсли;
		
		РасхождениеИни	= РасхождениеСтруктур(КлючИЗначение.Значение, СтруктураИни2[КлючИЗначение.Ключ], Отказ);
		
		//Удалить системные данные, которые при сравнении не нужны
		МассивКлючекКУдалению	= Новый	Массив;
		Для	Каждого	ПолеИни	Из	РасхождениеИни	Цикл
			Если	Лев(ПолеИни.Ключ,4)	= "Сбис"	Тогда
				МассивКлючекКУдалению.Добавить(ПолеИни.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для	Каждого	КлючКУдалению	Из	МассивКлючекКУдалению	Цикл
			РасхождениеИни.Удалить(КлючКУдалению);
		КонецЦикла;
		
		Если	РасхождениеИни.Количество()	Тогда
			СтруктураПользовательскихИзменений.Вставить(КлючИЗначение.Ключ, РасхождениеИни);
		КонецЕсли;
	КонецЦикла;
	
	Возврат	СтруктураПользовательскихИзменений;
	
КонецФункции

//Сравнивает инишки между собой. Если есть малейшее отличие, возвращает истина.
&НаКлиенте
Функция		ИниРазличаются(Кэш, СтруктураИни1, СтруктураИни2, Отказ)

	#Если ТолстыйКлиентОбычноеПриложение Тогда
		СтруктураИниДанные1 = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СтруктураИни1);
		СтруктураИниДанные2 = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СтруктураИни2);
		Возврат СравнитьИниСерверСсылка(СтруктураИни1, СтруктураИни2, Отказ);
	#Иначе 
		Возврат СравнитьИниСерверЗнач(СтруктураИни1, СтруктураИни2, Отказ);
	#КонецЕсли
	
КонецФункции

//Сравнивает инишки между собой. Если есть малейшее отличие, возвращает истина.
&НаСервереБезКонтекста
Функция		СравнитьИниСерверЗнач(Знач СтруктураИни1, Знач СтруктураИни2, Отказ)
	
	Возврат СравнитьИниСерверСсылка(СтруктураИни1, СтруктураИни2, Отказ);
	
КонецФункции

//Сравнивает инишки между собой. Если есть малейшее отличие, возвращает истина.
&НаСервереБезКонтекста
Функция		СравнитьИниСерверСсылка(СтруктураИни1, СтруктураИни2, Отказ)

	Если	Не	СтруктураИни1.Количество()	= СтруктураИни2.Количество()	Тогда
		Возврат	Истина;
	КонецЕсли;
	
	Для	Каждого	КлючИЗначение	Из	СтруктураИни1	Цикл
		Если	Лев(КлючИЗначение.Ключ,4) = "Сбис" Тогда
			Продолжить;
		КонецЕсли;
		Если Не	СтруктураИни2.Свойство(КлючИЗначение.Ключ) Тогда
			Возврат	Истина;
		КонецЕсли;
		РасхождениеИни	= РасхождениеСтруктур(КлючИЗначение.Значение,	СтруктураИни2[КлючИЗначение.Ключ], Отказ);
		
		//Удалить системные данные, которые при сравнении не нужны
		МассивКлючейКУдалению	= Новый	Массив;
		Для	Каждого	ПолеИни	Из	РасхождениеИни	Цикл
			Если	Лев(ПолеИни.Ключ,4)	= "Сбис"	Тогда
				МассивКлючейКУдалению.Добавить(ПолеИни.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для	Каждого	КлючКУдалению	Из	МассивКлючейКУдалению	Цикл
			РасхождениеИни.Удалить(КлючКУдалению);
		КонецЦикла;
		
		Если	РасхождениеИни.Количество()	Тогда
			Возврат	Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат	Ложь
	
КонецФункции

//Алгоритм поиска//

//Функция возвращает структуру с полями, которые в структуре1 отличаются от структуры2. 
&НаСервереБезКонтекста
Функция		РасхождениеСтруктур(Структура1, Структура2, Отказ)
	
	Если	Отказ	Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	Если	Не	ТипЗнч(Структура1)	= Тип("Структура")
		Или	Не	ТипЗнч(Структура1)	= ТипЗнч(Структура2)	Тогда//Это не структуры, нечего сравнивать.
			Возврат	Структура1;
	КонецЕсли;
	
	СтруктураПользовательскихИзменений	= Новый	Структура;
	КлючиСтруктуры2Проверены			= Новый	Массив;
	
	Для	Каждого	КлючИЗначение	Из	Структура1	Цикл
		Значение1	= КлючИЗначение.Значение;
		Ключ		= КлючИЗначение.Ключ;
		Если	Структура2.Свойство(Ключ)	Тогда
			Значение2	= Структура2[Ключ];
			КлючиСтруктуры2Проверены.Добавить(Ключ);
		Иначе
			Значение2	= Неопределено;
		КонецЕсли;
		Если		ТипЗнч(Значение1)	= Тип("Структура")	Тогда
			Если	ЗначениеЗаполнено(Значение2)	Тогда//Свойство есть в типовых настройках, продолжить на проверку на более низких уровнях
				Расхождение	= РасхождениеСтруктур(Значение1, Значение2, Отказ);
			Иначе//Свойства нет. Добавить расхождение.
				Расхождение	= Значение1;
			КонецЕсли;
		ИначеЕсли	ТипЗнч(Значение1)	= Тип("Массив")		Тогда
			Если	ТипЗнч(Значение2)	= Тип("Массив")	Тогда
				Расхождение	= РасхожденияМассивов(Значение1, Значение2, Отказ);
			Иначе
				Расхождение	= Значение1;
			КонецЕсли;	
		Иначе
			Если	ТипЗнч(Значение1) = "Строка" Тогда
				Значение1 = СокрЛП(Значение1);
			КонецЕсли;
			Если	ТипЗнч(Значение2) = "Строка" Тогда
				Значение2 = СокрЛП(Значение2);
			КонецЕсли;
			Если	Значение1 = Значение2	Тогда//Значения равны, переходим к следующему
				Продолжить;
			Иначе
				Расхождение	= Значение1;
			КонецЕсли;
		КонецЕсли;
		Если	ЗначениеЗаполнено(Расхождение)	Тогда
			СтруктураПользовательскихИзменений.Вставить(Ключ, Расхождение);
		КонецЕсли;
	КонецЦикла;
	
	Для	Каждого	КлючИЗначение	Из	Структура2	Цикл
		Если	Не	КлючиСтруктуры2Проверены.Найти(КлючИЗначение.Ключ)	= Неопределено	Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПользовательскихИзменений.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат	СтруктураПользовательскихИзменений;
		
КонецФункции

//Функция возвращает массив с полями, которые в массиве1 отличаются от массива2. 
&НаСервереБезКонтекста
Функция		РасхожденияМассивов(Массив1, Массив2, Отказ)
	
	Если	Отказ	Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	Если	Не	ТипЗнч(Массив1)	= Тип("Массив")
		Или	Не	ТипЗнч(Массив1)	= ТипЗнч(Массив2)	Тогда//Это не структуры, нечего сравнивать.
			Возврат	Массив1;
	КонецЕсли;
	
	МассивРасхождений		= Новый	Массив();
	ИндексыМассив2Проверено	= Новый	Массив();
	
	Для	ИндексМассив1	= 0	По	Массив1.Количество()	- 1	Цикл
		ФлагСовпадения		= Ложь;
		ЭлементСравнения1	= Массив1[ИндексМассив1];
		ЭлементСравнения2	= НайтиПохожийЭлементВМассиве(ЭлементСравнения1, Массив2, ИндексыМассив2Проверено, Отказ);
		Если		ЭлементСравнения2	= Неопределено				Тогда//Не найдено похожих элементов
			Расхождение	= ЭлементСравнения1;	
		ИначеЕсли	ТипЗнч(ЭлементСравнения1)	= Тип("Структура")	
				И	ТипЗнч(ЭлементСравнения2)	= Тип("Структура")	Тогда//элементы-структуры, сравнить их.
			Расхождение	= РасхождениеСтруктур(ЭлементСравнения1, ЭлементСравнения2, Отказ);
		ИначеЕсли	ТипЗнч(ЭлементСравнения1)	= Тип("Массив")	
				И	ТипЗнч(ЭлементСравнения2)	= Тип("Массив")		Тогда//сравнить массивы
			Расхождение	= РасхожденияМассивов(ЭлементСравнения1, ЭлементСравнения2,	Отказ);
		Иначе//разные типы значений
			Если	ТипЗнч(ЭлементСравнения1) = "Строка" Тогда
				ЭлементСравнения1 = СокрЛП(ЭлементСравнения1);
			КонецЕсли;
			Если	ТипЗнч(ЭлементСравнения2) = "Строка" Тогда
				ЭлементСравнения2 = СокрЛП(ЭлементСравнения2);
			КонецЕсли;
			Если	ЭлементСравнения1	= ЭлементСравнения2	Тогда
				Расхождение	= Неопределено;
			Иначе
				Расхождение	= ЭлементСравнения1;	
			КонецЕсли;
		КонецЕсли;
		Если	ЗначениеЗаполнено(Расхождение)	Тогда
			Если	ТипЗнч(ЭлементСравнения1)	= Тип("Структура")
				И	ЭлементСравнения1.Свойство("Имя")	Тогда
					Расхождение.Вставить("Имя",	ЭлементСравнения1["Имя"]);
			КонецЕсли;
			МассивРасхождений.Добавить(Расхождение);
		КонецЕсли;
	КонецЦикла;
	
	//То, что отсутствует в основных, сделать пустым для отключения
	Для	ИндексМассив2	= 0	По	Массив2.Количество()	- 1	Цикл
		Если	Не	ИндексыМассив2Проверено.Найти(ИндексМассив2) = Неопределено	Тогда
			Продолжить;
		КонецЕсли;
		Если	ТипЗнч(Массив2[ИндексМассив2])	= Тип("Структура")	Тогда
			Расхождение	= Новый Структура;
			Для	Каждого	КлючИЗначение	Из	Массив2[ИндексМассив2]	Цикл
				Если	КлючИЗначение.Ключ	= "Имя"	Тогда
					Расхождение.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				Иначе
					Расхождение.Вставить(КлючИЗначение.Ключ, "");
				КонецЕсли;
			КонецЦикла;
		Иначе
			Расхождение	= Массив2[ИндексМассив2];
		КонецЕсли;
		МассивРасхождений.Добавить(Расхождение);
	КонецЦикла;
	
	Возврат	МассивРасхождений;
	
КонецФункции

//Функция ищет соответствующий элемент в массиве.
//Если передана структура	- подразумевается поиск в массиве структур, по совпадению ключа элемента.
//Если передан массив		- подразумевается поиск в массиве массивов, по совпадению всех входящих (кроме структур, те - через ключ) элементов через рекурсию.
//В остальных случаях		- по совпадению.
&НаСервереБезКонтекста
Функция		НайтиПохожийЭлементВМассиве(Элемент, Массив, ИндексыПроверены, Отказ)
	
	Если		ТипЗнч(Элемент)	= Тип("Структура")	Тогда//Если это массив структур, искать по ключу
		Если	Элемент.Свойство("Имя")
			И	Элемент.Свойство("Значение")	Тогда
					ПоискПоИмени	= Истина;
		Иначе
			ПоискПоИмени	= Ложь;
		КонецЕсли;
		Для	ИндексМассива	= 0	По	Массив.Количество()	-1	Цикл
			Если	Не	ИндексыПроверены.Найти(ИндексМассива)			= Неопределено	Тогда
				Продолжить;
			КонецЕсли;
			ЭлементСравнение	= Массив[ИндексМассива];	
			Если	Не	ТипЗнч(ЭлементСравнение)	= Тип("Структура")	Тогда 
				Продолжить;
			КонецЕсли;
			
			Если	ПоискПоИмени	Тогда
				Если	Не	ЭлементСравнение.Свойство("Имя")
					Или	Не	ЭлементСравнение.Свойство("Значение")	Тогда
						Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НайденоСовпадение	= Ложь;
			Если	ПоискПоИмени
				И	Элемент.Имя	= ЭлементСравнение.Имя	Тогда
					НайденоСовпадение	= Истина;
			КонецЕсли;
			
			Если	Не	(	ПоискПоИмени
						Или	НайденоСовпадение)	Тогда
				НайденоСовпадение	= Истина;
				Для	Каждого	КлючИЗначение	Из	Элемент	Цикл
					Если	Не	ЭлементСравнение.Свойство(КлючИЗначение.Ключ)	Тогда
						НайденоСовпадение	= Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если	НайденоСовпадение	Тогда
				ИндексыПроверены.Добавить(ИндексМассива);
				Возврат	ЭлементСравнение;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли	ТипЗнч(Элемент)	= Тип("Массив")		Тогда//Если это массив массивов, сравнить все входящие элементы и вернуть тот, который равен нашему.
		Для	ИндексМассива	= 0	По	Массив.Количество()	-1	Цикл
			Если	Не	ИндексыПроверены.Найти(ИндексМассива)			= Неопределено	Тогда
				Продолжить;
			КонецЕсли;
			ЭлементСравнение		= Массив[ИндексМассива];	
			РасхождениеЭлементов	= РасхожденияМассивов(Элемент, ЭлементСравнение, Отказ);
			Если	Не	ЗначениеЗаполнено(РасхождениеЭлементов)	Тогда
				ИндексыПроверены.Добавить(ИндексМассива);
				Возврат	ЭлементСравнение;					
			КонецЕсли;
		КонецЦикла;
	Иначе//Обычный массив значений
		ИндексВМассиве	= Массив.Найти(Элемент);
		Если	ИндексВМассиве	= Неопределено	Тогда
			Возврат	Неопределено;
		КонецЕсли;
		Если	ИндексыПроверены.Найти(ИндексВМассиве)	= Неопределено	Тогда
			ИндексыПроверены.Добавить(ИндексВМассиве);
			Возврат	Массив[ИндексВМассиве];
		Иначе
			Для	ИндексМассива	= 0	По	Массив.Количество()	-1	Цикл
				Если	Не	ИндексыПроверены.Найти(ИндексМассива)		= Неопределено	Тогда
					Продолжить;
				КонецЕсли;
				ЭлементСравнение		= Массив[ИндексМассива];	
				Если	ЭлементСравнение	= Элемент	Тогда
					ИндексыПроверены.Добавить(ИндексМассива);
					Возврат	ЭлементСравнение;					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат	Неопределено;

КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_СБИСПараметры
////////////////////////////////////////////////////

&НаКлиенте
Функция		ПолучитьПараметрыСБИС(Кэш,Идентификатор,Отказ=Ложь) Экспорт
	
	СтруктураНастроекДефолт	= Кэш.ФормаНастроекОбщее.МеткиСтатусовПоУмолчанию();
	Если Отказ Тогда
		Возврат СтруктураНастроекДефолт;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Идентификатор) Тогда
		СтруктураНастроек = ПолучитьСБИСПараметрыСоединения(Кэш, Идентификатор, Отказ);
		//Если		ЗначениеЗаполнено(СтруктураНастроек)
		//	И Не	Отказ Тогда
		//	//Если есть параметры СБИС, то проверим наличие меток статусов и добавим дефолтные параметры при их отсутствии.
		//	Для Каждого КлючИЗначанение Из СтруктураНастроекДефолт Цикл
		//		Если СтруктураНастроек.Свойство(КлючИЗначанение.Ключ) Тогда
		//			Продолжить;
		//		КонецЕсли;
		//		СтруктураНастроек.Вставить(КлючИЗначанение.Ключ, КлючИЗначанение.Значение);
		//	КонецЦикла;
		//Иначе
		//	СтруктураНастроек = СтруктураНастроекДефолт;
		//КонецЕсли;
	Иначе
		СтруктураНастроек = СтруктураНастроекДефолт;
	КонецЕсли;
	
	Кэш.ФормаНастроекОбщее.ДополнитьПараметрыСбис(СтруктураНастроек, Кэш);
	
	Возврат	СтруктураНастроек;
	
КонецФункции

&НаКлиенте
Процедура	СбисУстановитьПараметры(Кэш, Идентификатор=Неопределено, СтруктураНастроек=Неопределено, Отказ=Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = ПолучитьПараметрыСБИС(Кэш, Идентификатор, Отказ);
	КонецЕсли;
	Кэш.ФормаНастроекОбщее.УстановитьСбисПараметры(Кэш, СтруктураНастроек);		
	
КонецПроцедуры

&НаКлиенте
Функция		СохранитьПараметрыСБИС(Кэш, СтруктураНастроек, Идентификатор, Отказ=Ложь) Экспорт
	Перем ВыбранныеНастройки;
	
	Если СтруктураНастроек = Неопределено Тогда
		//Нечего записывать
		Возврат	Неопределено;
	ИначеЕсли 	Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", ВыбранныеНастройки) 
			И	ЗначениеЗаполнено(ВыбранныеНастройки)
			И	ВыбранныеНастройки.Идентификатор = Идентификатор Тогда
		//Есть настройки
	ИначеЕсли	ЗначениеЗаполнено(Идентификатор) Тогда
		//Поднимем класс
		ВыбранныеНастройки = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор", Идентификатор), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(ВыбранныеНастройки, "ФайлыНастроекСервер.СохранитьПараметрыСБИС");
		КонецЕсли;
	Иначе
		//Хз что, ничего не делать
		Возврат Неопределено;
	КонецЕсли;	
	КлассIntegrationConnection_СохранитьСбисПараметры(Кэш, ВыбранныеНастройки, Новый Структура("ПараметрыДописать", СтруктураНастроек), Отказ);
		
КонецФункции

&НаКлиенте
Функция		УстановитьПараметрыИнтеграции_ДоВключения(Кэш, ПараметрыИнтеграции, ДополнительныеПараметры, ИзмененияПараметров=Ложь) Экспорт
	Перем АдресСервера;
	Если		ПараметрыИнтеграции.Свойство("АдресСервера", АдресСервера) 
		И  Не	АдресСервера = Кэш.СБИС.АдресСервера Тогда
		Кэш.СБИС.Вставить("АдресСервера", АдресСервера);//Восстановление значения адреса сервера по-умолчанию, если раньше было изменено.
		ИзмененияПараметров = Истина;
	КонецЕсли;
	Если ИзмененияПараметров Тогда//Были изменения в настройках, переопределить формы интеграции.
		//Переключили сервер и повторно идём на определение форм, только уже пропуская установку параметров
		Если ДополнительныеПараметры.ВызыватьРекурсивно	Тогда
			ДополнительныеПараметры.ВызыватьРекурсивно = Ложь;
			Возврат Кэш.ГлавноеОкно.ОпределитьИнтеграциюРабочиеФормы(Кэш,ПараметрыИнтеграции,ДополнительныеПараметры);
		Иначе
			Возврат Ложь;
		КонецЕсли;       
	КонецЕсли;
	Возврат	Истина;
	
КонецФункции

// Функция - Прочитать общую настройку подключения
//
// Параметры:
//  ОписаниеНастройкиВходящее	 - Структура -
//		Идентификатор	- идентификатор коннекшена, либо каталог настроек для определения коннекшена.
//		Ключ			- Ключ объекта разреза в корне (Saby)
//		КлючНастройки	- Ключ настройки
//		
//		
//  Кэш							 - Структура - кэш обработки
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция		ПрочитатьОбщуюНастройкуПодключения(ОписаниеНастройкиВходящее, Кэш) Экспорт
	Перем ИдентификаторНастроек, КлассПодключенияЗаписи, ИдЧтенияПараметров, Результат;
	
	Если Не ОписаниеНастройкиВходящее.Свойство("Идентификатор", ИдентификаторНастроек) Тогда
		ИдентификаторНастроек = Кэш.Парам.ИдентификаторНастроек;
	КонецЕсли;
	
	Отказ = Ложь;
	Если	Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", КлассПодключенияЗаписи)
		И	ЗначениеЗаполнено(КлассПодключенияЗаписи)
		И	КлассПодключенияЗаписи.Идентификатор = ИдентификаторНастроек Тогда
	Иначе
		КлассПодключенияЗаписи = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ИнициироватьДанные", ИдентификаторНастроек, Отказ), Отказ);
		Если Отказ Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(КлассПодключенияЗаписи, "ФайлыНастроекСервер.ЗаписатьОбщиеНастройкиПодключения");
		КонецЕсли;
	КонецЕсли;
	
	Если КлассПодключенияЗаписи.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
		ИдЧтенияПараметров = КлассПодключенияЗаписи.Идентификатор;
	ИначеЕсли ЗначениеЗаполнено(КлассПодключенияЗаписи.ПараметрыРаботы.Шаблон) Тогда
		ИдЧтенияПараметров = КлассПодключенияЗаписи.ПараметрыРаботы.Шаблон;
	Иначе
		Возврат Результат;
	КонецЕсли;
	СтруктураПараметров = ПолучитьСБИСПараметрыСоединения(Кэш, ИдЧтенияПараметров, Отказ);
	Если	ОписаниеНастройкиВходящее.Свойство("Ключ") Тогда
		СтруктураПараметров.Свойство(ОписаниеНастройкиВходящее.Ключ, Результат);
		Если		Результат = Неопределено Тогда
			Результат = Новый Структура;
		ИначеЕсли	ТипЗнч(Результат) = Тип("Строка")
			И	Лев(Результат, 1) = "{" Тогда
			Результат = Кэш.РаботаСJSON.сбисПрочитатьJSON(Результат);
		КонецЕсли;
	Иначе
		Результат = Новый Структура;
		Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
			Если	ТипЗнч(КлючИЗначение.Значение) = Тип("Строка")
				И	Лев(КлючИЗначение.Значение, 1) = "{" Тогда
				Результат.Вставить(КлючИЗначение.Ключ, Кэш.РаботаСJSON.сбисПрочитатьJSON(КлючИЗначение.Значение));
			Иначе
				Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если		ОписаниеНастройкиВходящее.Свойство("КлючНастройки")
		И	Не	ОписаниеНастройкиВходящее.КлючНастройки = Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Свойство(ОписаниеНастройкиВходящее.КлючНастройки, Результат);
			Если	ТипЗнч(Результат) = Тип("Строка")
				И	Лев(Результат, 1) = "{" Тогда
				Результат = Кэш.РаботаСJSON.сбисПрочитатьJSON(Результат);
			КонецЕсли;
		Иначе
			МодульОбъектаКлиент().ВызватьСбисИсключение(, "ФайлыНастроекСервер.ЗаписатьОбщиеНастройкиПодключения",,,"Невозможно прочитать значение общего параметра.", ОписаниеНастройкиВходящее);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Для Каждого КлючИЗначениеРезультат Из Результат Цикл
			Если	ТипЗнч(КлючИЗначениеРезультат.Значение) = Тип("Строка")
				И	Лев(КлючИЗначениеРезультат.Значение, 1) = "{" Тогда
				Результат.Вставить(КлючИЗначениеРезультат.Ключ, Кэш.РаботаСJSON.сбисПрочитатьJSON(КлючИЗначениеРезультат.Значение))
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

&НаКлиенте
Процедура	ЗаписатьОбщуюНастройкуПодключения(ОписаниеНастройкиВходящее, Кэш) Экспорт
	
	Перем ИдентификаторНастроек, КлассПодключенияЗаписи;
	
	Если Не ОписаниеНастройкиВходящее.Свойство("Идентификатор", ИдентификаторНастроек) Тогда
		ИдентификаторНастроек = Кэш.Парам.ИдентификаторНастроек;
	КонецЕсли;
	
	//Взять класс шаблона для записи. Если у подключения нет шаблона, либо он сам является шаблоном, то пишется на текущий класс.
	Отказ = Ложь;
	Если	Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", КлассПодключенияЗаписи)
		И	ЗначениеЗаполнено(КлассПодключенияЗаписи)
		И	КлассПодключенияЗаписи.Идентификатор = ИдентификаторНастроек Тогда
	Иначе
		КлассПодключенияЗаписи = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ИнициироватьДанные", ИдентификаторНастроек, Ложь), Отказ);
		Если Отказ Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(КлассПодключенияЗаписи, "ФайлыНастроекСервер.ЗаписатьОбщиеНастройкиПодключения");
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(КлассПодключенияЗаписи.ПараметрыРаботы.Шаблон) Тогда
		КлассШаблон = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ИнициироватьДанные", КлассПодключенияЗаписи.ПараметрыРаботы.Шаблон, Ложь), Отказ);
		Если Отказ Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(КлассШаблон, "ФайлыНастроекСервер.ЗаписатьОбщиеНастройкиПодключения");
		КонецЕсли;
		КлассПодключенияЗаписи = КлассШаблон;
	КонецЕсли;
	
	//Верхний уровень остаётся как есть, все составные параметры оборачиваются в JSON.
	ПараметрыПриведения = Новый Структура("Уровень, ОборачиватьУровень", 0, "2");
	ПараметрыДописать = ЗаписатьОбщуюНастройкуПодключения_ПривестиЗначения(ОписаниеНастройкиВходящее.Настройка, ПараметрыПриведения, Кэш);
	
	РезультатЗаписи = КлассIntegrationConnection_СохранитьСбисПараметры(Кэш, КлассПодключенияЗаписи, Новый Структура("ПараметрыДописать", ПараметрыДописать), Отказ);
	Если Отказ Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение(РезультатЗаписи, "ФайлыНастроекСервер.ЗаписатьОбщиеНастройкиПодключения");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция		ЗаписатьОбщуюНастройкуПодключения_ПривестиЗначения(ОписаниеНастройкиВходящее, КонетекстЗаписи, Кэш) Экспорт
	
	Если	ТипЗнч(ОписаниеНастройкиВходящее) = Тип("Структура") Тогда
		Если	Найти(КонетекстЗаписи.Уровень, КонетекстЗаписи.ОборачиватьУровень) Тогда
			Возврат Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ОписаниеНастройкиВходящее);
		КонецЕсли;
		Результат = Новый Структура;		
		//Обернуть составные настройки в строку, т.к. СБИС не заменяет настройку на БЛ, а обновляет её.
		КонтекстОбработки = Новый Структура("Уровень, ОборачиватьУровень", КонетекстЗаписи.Уровень + 1, КонетекстЗаписи.ОборачиватьУровень);
		Для Каждого ЭлементНастройки Из ОписаниеНастройкиВходящее Цикл
			Результат.Вставить(ЭлементНастройки.Ключ, ЗаписатьОбщуюНастройкуПодключения_ПривестиЗначения(ЭлементНастройки.Значение, КонтекстОбработки, Кэш));
		КонецЦикла;
	Иначе
		Результат = ОписаниеНастройкиВходящее;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция		ЗаписатьОбщиеНастройкиПодключения(Кэш, СтруктураНастроек, ИдентификаторНастроек, Отказ=Ложь) Экспорт
	
	Перем КлассПодключенияЗаписи;
	
	Если	Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", КлассПодключенияЗаписи)
		И	ЗначениеЗаполнено(КлассПодключенияЗаписи)
		И	КлассПодключенияЗаписи.Идентификатор = ИдентификаторНастроек Тогда
	Иначе
		КлассПодключенияЗаписи = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ИнициироватьДанные", ИдентификаторНастроек, Ложь), Отказ);
		Если Отказ Тогда
			Возврат МодульОбъектаКлиент().НовыйСбисИсключение(КлассПодключенияЗаписи, "ФайлыНастроекСервер.ЗаписатьОбщиеНастройкиПодключения");
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(КлассПодключенияЗаписи.ПараметрыРаботы.Шаблон) Тогда
		КлассШаблон = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ИнициироватьДанные, Перечитать", КлассПодключенияЗаписи.ПараметрыРаботы.Шаблон, Ложь, Истина), Отказ);
		Если Отказ Тогда
			Возврат МодульОбъектаКлиент().НовыйСбисИсключение(КлассШаблон, "ФайлыНастроекСервер.ЗаписатьОбщиеНастройкиПодключения");
		КонецЕсли;
		КлассПодключенияЗаписи = КлассШаблон;
	КонецЕсли;
	КлассIntegrationConnection_СохранитьСбисПараметры(Кэш, КлассПодключенияЗаписи, Новый Структура("ПараметрыДописать", СтруктураНастроек), Отказ);
	Если Отказ Тогда
		Возврат МодульОбъектаКлиент().НовыйСбисИсключение(КлассШаблон, "ФайлыНастроекСервер.ЗаписатьОбщиеНастройкиПодключения");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_РаботаСМетками_Сервер

&НаКлиенте
Процедура СбисСохранитьМеткиСтатусов(Кэш, МеткиСтатусов, ДопПараметры = Неопределено, Отказ = Ложь) Экспорт

	Если ДопПараметры.СпособХраненияМетокСтатусов = 2 Тогда
		МодульОбъектаКлиент().СохранитьОбщуюНастройку("status_marks", МеткиСтатусов);
		Возврат;
	КонецЕсли;
	
	Отказ		= Ложь;
	Результат	= Новый Структура("status_marks", МеткиСтатусов);
	
	Если		ДопПараметры.СпособХраненияМетокСтатусов = 0 Тогда
		РезультатЗаписи = СохранитьПараметрыСБИС			(Кэш, Результат, Кэш.Парам.ИдентификаторНастроек, Отказ);
	ИначеЕсли	ДопПараметры.СпособХраненияМетокСтатусов = 1 Тогда
		РезультатЗаписи = ЗаписатьОбщиеНастройкиПодключения	(Кэш, Результат, Кэш.Парам.ИдентификаторНастроек, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение(РезультатЗаписи, "ФайлыНастроекСервер.СбисСохранитьМеткиСтатусов");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СбисПрочитатьМеткиСтатусов(Кэш, ДопПараметры = Неопределено, Отказ = Ложь) Экспорт
	Перем ЗначениеМетокСтатусов;
	
	СпособХраненияМетокСтатусов	= Кэш.Парам.СпособХраненияМетокСтатусов;
	КлючМетокСатусов			= "status_marks";
	
	Если		СпособХраненияМетокСтатусов = 0 Тогда
		НастройкиПодключения = ПолучитьПараметрыСБИС(Кэш, Кэш.Парам.ИдентификаторНастроек);
		НастройкиПодключения.Свойство(КлючМетокСатусов, ЗначениеМетокСтатусов);
	ИначеЕсли	СпособХраненияМетокСтатусов = 1 Тогда
		ЗначениеМетокСтатусов	= ПрочитатьОбщуюНастройкуПодключения(Новый Структура("КлючНастройки", КлючМетокСатусов), Кэш);
	ИначеЕсли	СпособХраненияМетокСтатусов = 2 Тогда
		ЗначениеМетокСтатусов = МодульОбъектаКлиент().ПрочитатьОбщиеНастройки(КлючМетокСатусов);
	КонецЕсли; 
	
	Если ЗначениеМетокСтатусов = Неопределено Тогда
		ЗначениеМетокСтатусов = Кэш.ФормаНастроекОбщее.МеткиСтатусовПоУмолчанию();
	КонецЕсли;

	Возврат ЗначениеМетокСтатусов;
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_ИниПоТребованию
////////////////////////////////////////////////////

&НаКлиенте
Функция		Ини(Кэш, ИмяИни, ДопПараметры=Неопределено, Отказ=Ложь) Экспорт
	Перем ЗначениеИни, ТипИни;
	Принудительно =	Не	ДопПараметры = Неопределено
					И	ДопПараметры.Свойство("ПринудительноеЧтение")
					И	ДопПараметры.ПринудительноеЧтение;
	Если	Не Кэш.Ини.Свойство(ИмяИни, ЗначениеИни) Тогда
		//Это не ини из кэша
		Если Не Принудительно Тогда
			Возврат Неопределено;
		КонецЕсли;
		//Но включено принудительное чтение
	ИначеЕсли	Не ЗначениеИни = Неопределено Тогда
		//Есть в кэше
		Возврат ЗначениеИни;
	КонецЕсли;

	КлассIntegrationConnection = Кэш.КэшНастроек.ВыбранныеНастройки;
	
	ПараметрыЧТения = Новый Структура;
	Если 	Не	ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("ДоступныеТипыИни") Тогда
			ПараметрыЧТения.Вставить("ДоступныеТипыИни", ДопПараметры.ДоступныеТипыИни);
		КонецЕсли;
		//Ини проверки расхождения читаются в обход меню.
		Если	ДопПараметры.Свойство("Тип", ТипИни)
			И	Принудительно Тогда
			Если ТипИни = "ПроверкаРасхождения" Тогда
				СписокИни = Новый Массив;
				СписокИни.Добавить(Новый Структура("type,name", ТипИни, ИмяИни));
				ПараметрыЧТения.Вставить("ДанныеСписка", СписокИни);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ПараметрыЧТения.Свойство("ДанныеСписка") Тогда
		СписокИниЗапрос = Новый Массив;
		СписокИниЗапрос.Добавить(ИмяИни);
		ПараметрыЧТения.Вставить("СписокИни_ВО", СписокИниЗапрос);
	КонецЕсли;
	Результат = КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnection, ПараметрыЧТения, Отказ);
    Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(Результат, "ФайлыНастроекСервер.Ини");
	КонецЕсли;
	Для Каждого ИниРезультат Из Результат Цикл
		Если Не Принудительно Тогда
			Кэш.Ини.Вставить(ИмяИни, ЗначениеИни);
		КонецЕсли;
		Возврат ИниРезультат.Значение;
	КонецЦикла;
	Отказ = Истина;
	Возврат Кэш.ОбщиеФункции.СбисИсключение(779, "ФайлыНастроекСервер.Ини",,,СтрЗаменить("Ини ""{}"" не найдена в сбис Меню.", "{}", ИмяИни));
КонецФункции

&НаКлиенте
Функция		Ини_Выгрузка(Кэш, ДокументСсылка, Представление="", СбисРеестр=Неопределено) Экспорт
	Возврат Кэш.ФормаНастроекОбщее.Ини_Выгрузка(Кэш, ДокументСсылка, Представление, СбисРеестр);
КонецФункции

//Получим структуру разделов по указанному ИД. Если ид не заполнен, то это типовые настройки меню запишем при общей записи
&НаКлиенте
Функция		ПолучитьСтруктуруРазделов(Кэш, СбисДополнительныеПараметры=Неопределено, Отказ) Экспорт
	
	Если СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Если Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда
		Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Меню = КлассIntegrationConnection_СформироватьСбисМеню(Кэш, Кэш.КэшНастроек.ВыбранныеНастройки, СбисДополнительныеПараметры, Отказ);
	Иначе
		ЧтениеМеню = КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, Кэш.КэшНастроек.ВыбранныеНастройки, СбисДополнительныеПараметры, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.ПолучитьСтруктуруРазделов", 785, "Ошибка во входящих данных", "Отсутствует описание разделов аккордеона в выбранных настройках");
		КонецЕсли;
	КонецЕсли;
	Если Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Меню = Неопределено Тогда
		СбисМеню = Ини(Кэш, "СбисМеню", Новый Структура("ПринудительноеЧтение", Истина), Отказ);
		Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Меню = СбисМеню;
	Иначе
		СбисМеню = Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Меню;
	КонецЕсли;
	Если Отказ Тогда
		Возврат СбисМеню;
	КонецЕсли;
	СбисАккордеон = Неопределено;
	Если Не СбисМеню.Свойство("РазделыВнешнейОбработки", СбисАккордеон) Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.ПолучитьСтруктуруРазделов", 785, "Ошибка во входящих данных", "Отсутствует описание разделов аккордеона в выбранных настройках");
	КонецЕсли;
	
	Возврат СбисАккордеон;		
КонецФункции

&НаКлиенте
Функция		СбисОбновитьДанныеПоНастройкам(Кэш, ДополнительныеПараметры, Отказ) Экспорт
	//Если установлены типовые настройки, то структура раздела будет при создании коннекшена.
	Если Не Кэш.КэшНастроек.ВыбранныеНастройки.Идентификатор = "" Тогда
		РезультатОбновления = КлассIntegrationConnection_ДозапроситьИни(Кэш, Кэш.КэшНастроек.ВыбранныеНастройки, Новый Структура, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбновления, "ФайлыНастроекСервер.СбисОбновитьДанныеПоНастройкам");
		КонецЕсли;
		РезультатОбновления = СбисОбновитьСтруктуруРазделов(Кэш, ДополнительныеПараметры, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбновления, "ФайлыНастроекСервер.СбисОбновитьДанныеПоНастройкам");
		КонецЕсли;
	КонецЕсли;
	//Для всех настроек формируем печатные формы в том числе
	РезультатОбновления = Кэш.ФормаНастроекОбщее.СбисДобавитьПечатныеФормы(Кэш, Отказ);
	Если Отказ Тогда
		СбисПараметрыСтатистики = Новый Структура("Действие, Ошибка", "Запись ошибки", РезультатОбновления);
		Кэш.ОбщиеФункции.сбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(Кэш, СбисПараметрыСтатистики, Ложь);
		//TODO39 ошибка ПФ является результатом с флагом отказа
		Отказ = Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

//Функция обновляет структуру для формирования аккордеона и заполнения фильтров
&НаКлиенте
Функция		СбисОбновитьСтруктуруРазделов(Кэш, ДополнительныеПараметры, Отказ) Экспорт
	Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисМеню.Обновить = Истина;
	Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Обновить = Истина;
	//Если пользовательский коннекшен, то сразу запишем меню с аккордеоном. Если нет, то сформируем меню, что записали руками.
	Если		Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек = "Пользовательские" 
		И		Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисМеню.Отправлять
		И	Не	Кэш.ФормаНастроекОбщее.Открыта() Тогда
		Возврат _КлассIntegrationConnection_Записать(Кэш, Кэш.КэшНастроек.ВыбранныеНастройки, Новый Структура("ТихийРежим", Истина), Отказ);
	Иначе
		Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Меню = КлассIntegrationConnection_СформироватьСбисМеню(Кэш, Кэш.КэшНастроек.ВыбранныеНастройки, Новый Структура, Отказ);
		Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
	КонецЕсли;
	Возврат Истина;	
КонецФункции

&НаКлиенте
Функция		СбисПроверитьУстановленныеНастройки(Кэш, УстановленныеИниФайлы, СтруктураИни, СтруктураПараметров, ИдентификаторНастроек) Экспорт	
	Отказ = Ложь;
	КлассIntegrationConnection = Кэш.КэшНастроек.ВыбранныеНастройки;
	РезультатДозапроса = КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnection,Новый Структура,Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатДозапроса, Новый Структура("ФормаВладелец", Кэш.ФормаНастроекОбщее)); 
		Возврат Ложь;
	КонецЕсли;
	СтруктураИни = КлассIntegrationConnection.Данные.Ини;
	//Так, как установленные ини были сформированы без данных, то требуется их переопределить для корректной расстановки флагов
	УстановленныеИниФайлы = ПолучитьМассивУстановленныхИниФайлов(СтруктураИни, КлассIntegrationConnection, Отказ);
	Возврат Кэш.ФормаНастроекОбщее.СбисПроверитьУстановленныеНастройки(Кэш,УстановленныеИниФайлы,СтруктураИни,СтруктураПараметров,ИдентификаторНастроек);
КонецФункции

&НаКлиенте
Функция		УстановитьПараметрыИнтеграции_УстановкаНастроек(Кэш, СтруктураСбисПараметров, ДополнительныеПараметры, Отказ) Экспорт
	Возврат Кэш.ФормаНастроекОбщее.УстановитьПараметрыИнтеграции_УстановкаНастроек(Кэш, СтруктураСбисПараметров, ДополнительныеПараметры, Отказ);	
КонецФункции

&НаКлиенте                                  
Функция		УстановитьИниРазделов(Кэш, СбисДополнительныеПараметры=Неопределено, Отказ) Экспорт
	
	СбисСтруктураРазделов = ПолучитьСтруктуруРазделов(Кэш, СбисДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		//Кэш.КэшНастроек.ВыбранныеНастройки.Ошибки.Вставить(СбисСтруктураРазделов.code, СбисСтруктураРазделов);
		Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисМеню.Обновить = Истина;
		Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(СбисСтруктураРазделов, "ФайлыНастроекСервер.УстановитьИниРазделов");
	КонецЕсли;
	Возврат Кэш.ФормаНастроекОбщее.УстановитьИниРазделов(Кэш, СбисСтруктураРазделов, СбисДополнительныеПараметры, Отказ)
	
КонецФункции	
	
&НаКлиенте                                  
Функция		УстановитьИниКонфигурации(Кэш, СбисДополнительныеПараметры=Неопределено, Отказ) Экспорт
	Возврат Кэш.ФормаНастроекОбщее.УстановитьИниКонфигурации(Кэш, Ини(Кэш, "Конфигурация", СбисДополнительныеПараметры, Отказ), СбисДополнительныеПараметры, Отказ);
КонецФункции	
	
&НаКлиенте                                  
Функция		СбисПолучитьМассивУстановленныхИниФайлов(Кэш, СбисДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	
	ВыбранныеНастройки = Кэш.КэшНастроек.ВыбранныеНастройки;
	РезультатДозапроса = КлассIntegrationConnection_ДозапроситьИни(Кэш, ВыбранныеНастройки, Новый Структура, Отказ);
	Если Отказ Тогда
		Возврат РезультатДозапроса;
	КонецЕсли;
	Возврат ПолучитьМассивУстановленныхИниФайлов(ВыбранныеНастройки.Данные.Ини, ВыбранныеНастройки, Отказ);
	
КонецФункции

//Функция формирует класс настроек от текущих данных кэша, либо возвращает уже готовый, выбранный
&НаКлиенте                                  
Функция		СформироватьСтруктуруТекущихНастроек(Кэш, ДопПараметры, Отказ) Экспорт
	Перем ВыбранныеНастройки;
	Если  Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", ВыбранныеНастройки) Тогда
		ПараметрыНовогоПодключения = Новый Структура("Идентификатор, ПараметрыКонфигурации, ИнициироватьДанные", Кэш.Парам.ИдентификаторНастроек, Кэш.КэшНастроек.ПараметрыКонфигурации, Ложь);
		Если ДопПараметры.Свойство("ТипНастроек") Тогда
			ПараметрыНовогоПодключения.Вставить("Тип", ДопПараметры.ТипНастроек);
		КонецЕсли;
		ВыбранныеНастройки = НовыйIntegrationConnection(Кэш, ПараметрыНовогоПодключения, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(ВыбранныеНастройки, "ФайлыНастроекСервер.СформироватьСтруктуруДляТекущихНастроек");
		КонецЕсли;
	КонецЕсли;
	ВыбранныеНастройки.Данные.Ини = Новый Структура;
	Для Каждого КлючИЗначение Из Кэш.Ини Цикл
		ПараметрыИни = Кэш.ФормаНастроекОбщее.ОпределитьПараметрыИни(Кэш, КлючИЗначение.Значение, КлючИЗначение.Ключ);
		Если ПараметрыИни.Тип = "Загрузка" Тогда
			КлючИни = Кэш.СБИС.МодульОбъектаКлиент.СбисФормат("{Тип}_{Направление}_{Название}", Новый Структура("Заменить", ПараметрыИни));
		Иначе
			КлючИни = ПараметрыИни.Название;
		КонецЕсли;
		ВыбранныеНастройки.Данные.Ини.Вставить(КлючИни, КлючИЗначение.Значение)
	КонецЦикла;
	Если ДопПараметры.Свойство("СбисПараметры") Тогда
		Для Каждого СтруктураПараметра Из ДопПараметры.СбисПараметры Цикл
			Если	ВыбранныеНастройки.Данные.Параметры.Свойство(СтруктураПараметра.Ключ)
				И 	ВыбранныеНастройки.Данные.Параметры[СтруктураПараметра.Ключ] = СтруктураПараметра.Значение Тогда
				Продолжить;
			КонецЕсли;
			ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Обновить = Истина;
			ВыбранныеНастройки.Данные.Параметры.Вставить(СтруктураПараметра.Ключ, СтруктураПараметра.Значение);
		КонецЦикла;
	КонецЕсли;
	Кэш.Ини = ВыбранныеНастройки.Данные.Ини;
	РезультатДозапроса = КлассIntegrationConnection_ДозапроситьИни(Кэш, ВыбранныеНастройки, Новый Структура, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатДозапроса, "ФайлыНастроекСервер.СформироватьСтруктуруДляТекущихНастроек");
	КонецЕсли;
	Возврат ВыбранныеНастройки;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_Форма_Кнопки
////////////////////////////////////////////////////

&НаКлиенте
Процедура	Диалог_ОтменаНажатие(Элемент)
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура	Диалог_ВыбратьНажатиеКнопка(Элемент)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		КлючЭлементов = "ТекущаяСтрока";
	#Иначе
		КлючЭлементов = "ТекущиеДанные";
	#КонецЕсли
	НажатиеВыполнено = Истина;
	ТекущаяСтраница = ЛокальныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "ПанельВыбора").ТекущаяСтраница.Имя;
	Если ТекущаяСтраница = "user" Тогда
		АктивнаяПанель = ЛокальныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "ТаблицаПользовательскихНастроек");
	Иначе
		АктивнаяПанель = ЛокальныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "ТаблицаШаблоновНастроек");
	КонецЕсли;
	ЭтаФорма.Закрыть(АктивнаяПанель.ТекущиеДанные.Коннекшен[0].Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура	Диалог_ВыбратьНажатиеПоСтроке(Элемент)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		КлючЭлементов = "ТекущаяСтрока";
	#Иначе
		КлючЭлементов = "ТекущиеДанные";
	#КонецЕсли
	НажатиеВыполнено = Истина;
	ЭтаФорма.Закрыть(Элемент[КлючЭлементов].Коннекшен[0].Значение);
	
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Настройки_СБИС_Форма_События
////////////////////////////////////////////////////

&НаКлиенте
Процедура ПанельВыбораПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Отказ = Ложь;
	РезультатОбработки = ЗаполнитьТаблицуДоступныхНастроек(ЛокальныйКэш, Новый Структура("ТипКоннекшена", Элемент.ТекущаяСтраница.Имя), Отказ); 
	Если Отказ Тогда
		ЛокальныйКэш.ГлавноеОкно.СбисСообщитьОбОшибке(ЛокальныйКэш, РезультатОбработки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
