
&НаКлиенте
Перем НажатиеСохранитьВыполнено;
&НаКлиенте
Перем КлючиИспользовать;
&НаКлиенте
Перем НастройкиПодключения_Было, НастройкиПодключения_Завершение;
&НаКлиенте
Перем МестныйКэш Экспорт;

#Область include_local_ПолучитьМодульОбъекта

&НаСервере
Функция МодульОбъектаСервер()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция МодульОбъектаСерверБезКонтекста()
	Возврат Новый (Тип("ВнешняяОбработкаОбъект.СБИС"));
КонецФункции

&НаКлиенте
Функция МодульОбъектаКлиент() Экспорт
	Возврат ВладелецФормы.Кэш.СБИС.МодульОбъектаКлиент;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Формы_ФормаНастройки

#Область include_core2_vo2_Формы_ФормаНастройки_Интерфейс_Вызов

&НаКлиенте 
Процедура Показать(ПараметрыОткрытия) Экспорт

	СбисУстановитьФорму(ПараметрыОткрытия);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОткрытьМодально();
		Возврат;
	#КонецЕсли
	Открыть();

КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Формы_ФормаНастройки_Интерфейс_События_Форма

&НаКлиенте
Процедура ПриОткрытии()
	
	НажатиеСохранитьВыполнено = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	//Если ПараметрыФормы.Свойство("РежимЗапуска") И ПараметрыФормы.РежимЗапуска = "НастройкиСоединения" И НажатиеСохранитьВыполнено Тогда//Пробуем включить обмен
	Если НажатиеСохранитьВыполнено Тогда
		//Сообщение безопасности 1С при установке ВК прерывает выполнение кода, установим отказ заранее и изменим если проверки пройдут 
		Отказ				= Истина;
 		ПарамерыИзменено	= ПроверитьИПрименитьПараметрыПередЗакрытием(ПараметрыФормы.Результат, Отказ);
		//Если режим это настройка до авторизации, то ничего после завершения не делаем.
		Если	Не ПараметрыФормы.РежимЗапуска = "НастройкиСоединения"
			И	Не Отказ Тогда
			
			ОбработкаЗавершения		= МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("СбисПрименитьНастройки_Завершение", ЭтаФорма);
			ОтложенноеЗавершение	= МодульОбъектаКлиент().НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения, Аргумент", ОбработкаЗавершения, ПарамерыИзменено));
			МодульОбъектаКлиент().ПодключитьОтложенноеДействие(ОтложенноеЗавершение);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьИПрименитьПараметрыПередЗакрытием(ПараметрыНовые, Отказ)
	
	МодульОбъектаКлиент	= МодульОбъектаКлиент();
	ФормаГлавноеОкно	= МестныйКэш.ГлавноеОкно;
	ПарамерыИзменено	= Новый Структура("Авторизация, Настройки", Ложь, Ложь);
	
	//Изменим все параметры на новые
	Для Каждого КлючИЗначениеПараметр Из ПараметрыНовые Цикл
		ДопПараметрыИзменения = Неопределено;
		Если		КлючИЗначениеПараметр.Значение = НастройкиПодключения_Было[КлючИЗначениеПараметр.Ключ] Тогда
			Продолжить;
		ИначеЕсли	КлючИЗначениеПараметр.Ключ = "СтатусыВГосСистеме" Тогда
			ДопПараметрыИзменения = Новый Структура("Параметры", Новый Структура("МодульОбновить", МестныйКэш.Текущий.Форма));
		КонецЕсли;
		МодульОбъектаКлиент.ИзменитьПараметрСбис(КлючИЗначениеПараметр.Ключ, КлючИЗначениеПараметр.Значение, ДопПараметрыИзменения);
		
	КонецЦикла;
	
	Если НастройкиПодключения_Было.АдресСервера <> ПараметрыНовые.АдресСервера Тогда
		ПарамерыИзменено.Авторизация = Истина;
    КонецЕсли;

	Если ПараметрыНовые.СпособОбмена <> НастройкиПодключения_Было.СпособОбмена Тогда
		
		// При изменении способа обмена (SDK, API, каталог)	"перезапускаем" обработку
		Если	(ПараметрыНовые.СпособОбмена = 7	Или НастройкиПодключения_Было.СпособОбмена = 7)
			И	(ПараметрыНовые.СпособОбмена = 6	Или НастройкиПодключения_Было.СпособОбмена = 6) Тогда
			//Идентичные модули, переавторизация не требуется, но если не менялся стенд
		Иначе
			ПарамерыИзменено.Авторизация = Истина;
		КонецЕсли;
		
		СбисДополнительныеПараметры = Новый Структура("ВызыватьРекурсивно", Ложь);
		Попытка
			
			РезультатАктивации = ФормаГлавноеОкно.ОпределитьИнтеграциюРабочиеФормы(ФормаГлавноеОкно.Кэш, ПараметрыНовые, СбисДополнительныеПараметры);
			
		Исключение
			
			РезультатАктивации = Ложь;
			
		КонецПопытки;
		
		Если РезультатАктивации = Ложь И НЕ МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ОтложенныйЗапуск") Тогда
			//Восстановим способ обмена обратно
			ПараметрыНовые.АдресСервера = НастройкиПодключения_Было.АдресСервера;
			ПараметрыНовые.СпособОбмена = НастройкиПодключения_Было.СпособОбмена;
			ФормаГлавноеОкно.ОпределитьИнтеграциюРабочиеФормы(ФормаГлавноеОкно.Кэш, ПараметрыНовые, СбисДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	Если	ПараметрыНовые.СпособХраненияНастроек	<> НастройкиПодключения_Было.СпособХраненияНастроек
		Или	ПараметрыНовые.КаталогНастроек			<> НастройкиПодключения_Было.КаталогНастроек Тогда
		
		ПарамерыИзменено.Настройки = Истина;
		
	КонецЕсли;

	ВсеУспешлоИзменено = Истина;
	Для Каждого КлючИЗначениеДанные Из ПараметрыНовые Цикл    
		
		Если КлючИЗначениеДанные.Ключ = "ПорядокАвтоматическогоСопоставления" Тогда
			Порядок = ПорядокАвтоСопоставления();
			МодульОбъектаКлиент.ИзменитьПараметрСБИС("ПорядокАвтоматическогоСопоставления", Порядок);
		КонецЕсли;
		
		Если КлючИЗначениеДанные.Значение = НастройкиПодключения_Завершение[КлючИЗначениеДанные.Ключ] Тогда
			Продолжить;
		КонецЕсли;
		ВсеУспешлоИзменено = Ложь;
		ТекстОшибкиДляПользователя = "Ошибка при сохранении новых значений настроек. Несохранённому параметру " + КлючИЗначениеДанные.Ключ + " возвращено предыдущее значение.";
		МодульОбъектаКлиент().ИзменитьПараметрСбис(КлючИЗначениеДанные.Ключ, КлючИЗначениеДанные.Значение);
		МодульОбъектаКлиент().СбисСообщить(Новый Структура("Текст, ФормаВладелец", ТекстОшибкиДляПользователя, ЭтаФорма));
	КонецЦикла;
	
	Если Не ВсеУспешлоИзменено Тогда
		//отмена закрытия формы, откат не изменных значений
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыНовые, , "ПорядокАвтоматическогоСопоставления");
		НажатиеСохранитьВыполнено = Ложь;
		НастройкиПодключения_Было = ПараметрыНовые;
		Отказ = Истина; 
	Иначе
		Отказ = Ложь;
	КонецЕсли;
	Возврат ПарамерыИзменено;
	
КонецФункции

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОбработчикЗавершения = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("ПослеЗакрытия", ЭтаФорма);
	НовыйОтложенноеДействие = МодульОбъектаКлиент().НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения", ОбработчикЗавершения));
	МодульОбъектаКлиент().ПодключитьОтложенноеДействие(НовыйОтложенноеДействие);
	
КонецПроцедуры

// Процедура - после закрытия почистить форму
//
// Параметры:
//  Аргумент	 - 	 - 
//  ДопПараметры - 	 - 
//
&НаКлиенте
Процедура ПослеЗакрытия(Аргумент=Неопределено, ДопПараметры=Неопределено) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		//Вызвать описание оповещения о закрытии вручную.
		Если Не ОписаниеОповещенияОЗакрытии = Неопределено Тогда
			МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(ПараметрыФормы.Результат, ОписаниеОповещенияОЗакрытии);
		КонецЕсли;
	#КонецЕсли
	
	ПараметрыФормы				= Неопределено;
	ОписаниеОповещенияОЗакрытии	= Неопределено;
	ИзмененСпособИнтеграции 	= Ложь; 
	
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Формы_ФормаНастройки_Интерфейс_События_Элементы

&НаКлиенте
Процедура ВремяОжиданияОтветаПриИзменении(Элемент)
	МестныйКэш.Интеграция.СбисУстановитьВремяОжидания(МестныйКэш, ВремяОжиданияОтвета);
	ПараметрыПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КаталогНастроекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка= Ложь;
	КаталогНастроек	= сбисВыбратьКаталог(КаталогНастроек);

КонецПроцедуры

&НаКлиенте
Процедура КаталогНастроекОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	МестныйКэш.ГлавноеОкно.сбисОткрытьКаталог(КаталогНастроек);
КонецПроцедуры 
 

//открывает диалог выбора каталога обмена	
&НаКлиенте
Процедура КаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Заголовок = "Выберите каталог обмена документами"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		КаталогОбмена = ДиалогОткрытия.Каталог; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЭПНажатие(Элемент)
	фрм = МестныйКэш.ГлавноеОкно.сбисПолучитьФорму("ФормаНастройкиПодписания",,,МестныйКэш.ГлавноеОкно);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		МестныйКэш.ГлавноеОкно.сбисПослеНастройкиЭП(фрм.ОткрытьМодально(), Неопределено); 
	#Иначе
		фрм.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеНастройкиЭП",МестныйКэш.ГлавноеОкно);
		фрм.Открыть();
	#КонецЕсли
КонецПроцедуры

// Процедура устанавливает видимость элементов формы в зависимости от выбранного варианта настроек прокси	
&НаКлиенте
Процедура НастройкиПроксиСервераПриИзменении(Элемент)
	
	ОбновитьДоступностьНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОбменаПриИзменении(Элемент)
	
	Если		СпособОбмена = 1
		И	Не	ЗначениеЗаполнено(КаталогОбмена) Тогда
		КаталогОбменаНачалоВыбора(МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "КаталогОбмена"),"", Истина);
	КонецЕсли;

	ОбновитьДоступностьНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособХраненияНастроекПриИзменении(Элемент)

	ОбновитьДоступностьНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДПриИзменении(Элемент)
	// Включает/выключает дублирование статусов в типовые регистры 1С
	Если СостояниеЭД = Истина Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ДублироватьСостояние");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
		Отказ = Ложь;
		ПараметрыПодсистемы = МестныйКэш.ОбщиеФункции.сбисИнициироватьПодсистему(МестныйКэш, ПараметрыПоиска, Отказ);
		Если Отказ Тогда
			Сообщить("Дублирование статусов в типовые регистры 1С не поддерживается для Вашей конфигурации 1С: "+ПараметрыПодсистемы.details);
			СостояниеЭД = Ложь;
		Иначе
			ПараметрыПриИзменении(Элемент);
		КонецЕсли;
	Иначе
		ПараметрыПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособХраненияМетокСтатусовПриИзменении(Элемент)
	
	Если СпособХраненияМетокСтатусов = МестныйКэш.Парам.СпособХраненияМетокСтатусов Тогда
		Возврат
	КонецЕсли;
	Попытка
		ИзменитьСпособХраненияМетокСтатусов(СпособХраненияМетокСтатусов);
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ФормаНастройки.СпособХраненияМетокСтатусовПриИзменении")
	КонецПопытки;
	
КонецПроцедуры

// << alo Меркурий
&НаКлиенте
Процедура МеркурийПриИзменении(Элемент=Неопределено) Экспорт
	ПараметрыПриИзменении(МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "Меркурий"));
	
	СписокДокументов = Новый СписокЗначений;
	Для Каждого Ини Из МестныйКэш.Ини Цикл
		ЗначениеИни = МестныйКэш.ФормаНастроек.Ини(МестныйКэш, Ини.Ключ);
		Если ЗначениеИни.Свойство("мФайл") И ЗначениеИни.мФайл.Свойство("АктРасхождение") Тогда
			СписокДокументов.Добавить(Ини.Ключ);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(СписокДокументов) Тогда
		ИмяФайлаОбработки = МестныйКэш.ПараметрыСистемы.Обработка.ПолноеИмяОбработки;
		ВидДопОбработокПечатнаяФорма = неопределено;
		Если МестныйКэш.Ини.Конфигурация.Свойство("ВидДопОбработокПечатнаяФорма") Тогда
			ВидДопОбработокПечатнаяФорма = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеНаСервере("ВидДопОбработокПечатнаяФорма", Новый Структура("Ини", МестныйКэш.Ини.Конфигурация));
		КонецЕсли;
		ПараметрыФормированияНаСервере = Новый Структура("ПометкаУдаления, ПредставлениеПФ, ИдентификаторКоманды, УправляемоеПриложение, ВидДопОбработокПечатнаяФорма, СписокДокументов", 
		(Не Меркурий), "Погасить ВСД", "sbis1cПогаситьВСД", МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение, ВидДопОбработокПечатнаяФорма, СписокДокументов);
		Попытка
			Если МестныйКэш.ПараметрыСистемы.Обработка.РежимИспользования = "Файл внешней обработки" Тогда
				ОбработкаХранитсяВСправочнике = Ложь;
				ДвоичныеДанныеОбработки = Новый ДвоичныеДанные(ИмяФайлаОбработки);
			Иначе
				ОбработкаХранитсяВСправочнике = Истина;
				ДвоичныеДанныеОбработки = Неопределено;
			КонецЕсли;
			ДанныеОбработки  = Новый Структура("ДвоичныеДанныеОбработки, ОбработкаХранитсяВСправочнике", ДвоичныеДанныеОбработки, ОбработкаХранитсяВСправочнике);
			МестныйКэш.ФормаНастроекОбщее.сбисДобавитьПечатныеФормыНаСервере(ДанныеОбработки, ПараметрыФормированияНаСервере);
			МестныйКэш.ФормаНастроекОбщее.СбисДобавитьКомандыПечатиНаФормы(МестныйКэш,, ПараметрыФормированияНаСервере);	
		Исключение
			РезультатОбновления = МестныйКэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекОбщее.СбисДобавитьПечатныеФормы", 700, "Неизвестная ошибка подключения", ОписаниеОшибки());
			СбисПараметрыСтатистики = Новый Структура("Действие, Ошибка", "Запись ошибки", РезультатОбновления);
			МестныйКэш.ОбщиеФункции.сбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(МестныйКэш, СбисПараметрыСтатистики, Ложь);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры // alo Меркурий >> 

&НаКлиенте
Процедура ИспользоватьГенераторПриИзменении(Элемент)
	
	ПараметрыПриИзменении(Элемент);
	МестныйКэш.ФормаНастроек.ИспользоватьГенераторПриИзменении(МестныйКэш, ИспользоватьГенератор);
	
КонецПроцедуры

//Процедура записывает в местный и глобальный кэш измененный параметр	
&НаКлиенте
Процедура ПараметрыПриИзменении(Элемент) Экспорт 
	
	ПутьКДаннымФормы = Сред(Элемент.Имя, Найти(Элемент.Имя, "_") + 1); 

	Если ИзмененныеПараметры.Свойство(ПутьКДаннымФормы) И МестныйКэш.Парам[ПутьКДаннымФормы] = ЭтаФорма[ПутьКДаннымФормы] Тогда
		ИзмененныеПараметры.Удалить(ПутьКДаннымФормы);	
	Иначе 
		ИзмененныеПараметры.Вставить(ПутьКДаннымФормы, ПутьКДаннымФормы);	
	КонецЕсли; 
	
	ОбновитьДоступностьНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСтатусовПриИзменении(Элемент) Экспорт
	
	Если	МестныйКэш.ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов = ДатаПоследнегоЗапросаСтатусов
		И	МестныйКэш.ГлавноеОкно.ИдентификаторПоследнегоСобытия = ИдентификаторПоследнегоСобытия Тогда
		Возврат;
	КонецЕсли;
		
	МестныйКэш.ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов = ДатаПоследнегоЗапросаСтатусов;
	МестныйКэш.ГлавноеОкно.ИдентификаторПоследнегоСобытия = ИдентификаторПоследнегоСобытия;
	
	МодульОбъектаКлиент().СохранитьМеткиСтатусов(МестныйКэш);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалятьПрефиксыПриИзменении(Элемент)
	
	ПараметрыПриИзменении(Элемент);  
	ПараметрыОчистки = Новый Структура("Тип, Ключ", "ПользовательскиеЗначения.Функции", "НомерДокумента");
	МестныйКэш.ОбщиеФункции.сбисОчиститьЗначениеРассчитанногоОбъекта(МестныйКэш, ПараметрыОчистки);

КонецПроцедуры

&НаКлиенте
Процедура ШифроватьВыборочноПриИзменении(Элемент)
	
	ПараметрыПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресСервисаОбновленийПриИзменении(Элемент)
	
	//+++ МАИ 09.09.2021 Переопределяем сервер обновлений, если пользователь в режиме отладки указал другой
	МестныйКэш.СБИС.ПараметрыИнтеграции.Вставить("АдресСервисаОбновлений", АдресСервисаОбновлений);
	//--- МАИ 09.09.2021

КонецПроцедуры

&НаКлиенте
Процедура РежимОтладкиПриИзменении(Элемент)
	
	Если РежимОтладки Тогда
		КаталогОтладки = ?(ЗначениеЗаполнено(КаталогОтладки), КаталогОтладки, КаталогНастроек);	
	КонецЕсли;
	
	Если НЕ МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "НадписьАдресСервисаОбновлений") = Неопределено Тогда 
		МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "НадписьАдресСервисаОбновлений").Видимость = РежимОтладки;   
	КонецЕсли;	
	МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "АдресСервисаОбновлений").Видимость = РежимОтладки;
	
	КаталогИзменен = МестныйКэш.Интеграция.УстановитьКаталогОтладки(МестныйКэш);
	сбисПереключитьОтладку();
	СбисЗаполнитьАдресСервера(МестныйКэш);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОтладкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КаталогОтладки = сбисВыбратьКаталог(КаталогОтладки); 
	ПараметрыПриИзменении(Элемент);
	КаталогИзменен = МестныйКэш.Интеграция.УстановитьКаталогОтладки(МестныйКэш);
	
	Если КаталогИзменен Тогда
		сбисПереключитьОтладку();	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КаталогОтладкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МестныйКэш.ГлавноеОкно.сбисОткрытьКаталог(КаталогОтладки);

КонецПроцедуры

&НаКлиенте
Процедура КаталогОтладкиПриИзменении(Элемент)
	
	ПараметрыПриИзменении(Элемент);
	КаталогОтладки = МестныйКэш.ОбщиеФункции.СбисФорматКаталога(КаталогОтладки, МестныйКэш.ПараметрыСистемы.Клиент);
	КаталогИзменен = МестныйКэш.Интеграция.УстановитьКаталогОтладки(МестныйКэш);
		
	Если КаталогИзменен Тогда
		сбисПереключитьОтладку();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Таблица_СервисВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//alo
	ТекущиеДанныеСтроки = ВыбраннаяСтрока;
	Если МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ТекущиеДанныеСтроки = Элемент.ТекущиеДанные;
	КонецЕсли;
	Контекст = Новый структура(ТекущиеДанныеСтроки.Ключ, ТекущиеДанныеСтроки.Команда);
	Контекст.Вставить("Кэш", МестныйКэш);
	МестныйКэш.ОбщиеФункции.РассчитатьЗначение(ТекущиеДанныеСтроки.Ключ, Контекст, МестныйКэш);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеКонтрагента1СПриИзменении(Элемент)
	
	Настройки = НастройкиЭлементовЗаполненияКонтрагента1С();	
	ОбновитьНастройкиЭлементовФормы(Настройки.СписокЭлементов, Настройки.ПараметрыНастройки);

КонецПроцедуры

&НаКлиенте
Процедура ПорядокАвтоматическогоСопоставленияФрмПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Формы_ФормаНастройки_Интерфейс_Кнопки

 //Нажатие на кнопку обновления обработки
&НаКлиенте
Процедура ОбновитьОбработку(Команда)
	
	СбисПроверитьНаличиеОбновлений(Новый Структура("Режим", "Ручной"));	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрименитьНажатие(Команда)

	СбисПрименитьНастройки();
	
КонецПроцедуры

// Процедура - Вызывает сохранение способа сопоставления номенклатуры и начинает перенос
//
// Параметры:
//  Команда	 - 	Команда 
//
&НаКлиенте
Процедура ПереносСопоставлений(Команда)
		
	Фрм = ВладелецФормы.Кэш.ОбщиеФункции.РассчитатьЗначение("ФормаРаботыСНоменклатуройПоставщика",ВладелецФормы.Кэш.Ини.Конфигурация);
	ПараметрыИзменения = Новый Структура("ФормаСопоставленияНоменклатуры", Фрм);
	
	МодульОбъектаКлиент().ИзменитьПараметрСбис("СпособСопоставленияНоменклатуры", СпособСопоставленияНоменклатуры);	
	
	ФормаРаботыСНоменклатурой	= ВладелецФормы.Кэш.ФормаРаботыСНоменклатурой; 	
	ФормаПереносаСопоставлений	= МодульОбъектаКлиент().НайтиФункциюСеансаОбработки("ПереносСопоставлений", ФормаРаботыСНоменклатурой);
	
	Если НЕ ФормаПереносаСопоставлений = Ложь Тогда
		ФормаПереносаСопоставлений.ПереносСопоставлений(ПараметрыИзменения);
	КонецЕсли;
	
	ОбновитьДоступностьНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Формы_ФормаНастройки_Интерфейс_ОбработчикиСобытий

// Процедура - Обновить настройки элементов формы
//
// Параметры:
//  СписокЭлементов		 - Массив - Содержит строки с именами элементов формы, которые нужно настроить 
//  ПараметрыНастройки	 - 	Структура 	 - Параметры, которые будут установлены элементу (доступность, видимость и т.п.)
//
//			Настройка 	 -	Строка	  	 - Имя настройки элемента 
//			Значение 	 -	Произвольный - Устанавливаемое значение. Проверок на установку недопустимого значения нет, остаётся на совести программиста
//
// Пока делаю локально для формы, потому что доброска срочная
&НаКлиенте
Процедура ОбновитьНастройкиЭлементовФормы(СписокЭлементов, ПараметрыНастройки)
	
	ЭлементыДляИзменения = Новый Массив;
	
	Для Каждого ИмяЭлемента Из СписокЭлементов Цикл
		
		ЭлементФормы = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, ИмяЭлемента);
		
		Если НЕ ЭлементФормы = Неопределено Тогда
			ЭлементыДляИзменения.Добавить(ЭлементФормы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из ЭлементыДляИзменения Цикл
		Для Каждого Параметр Из ПараметрыНастройки Цикл
			Элемент[Параметр.Ключ] = Параметр.Значение;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВкладкуСервис()
	
	ГруппаНастройкиСтраницы = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "НастройкиСтраницы");
	ГруппаНастройкиСтраницы.ТекущаяСтраница = МестныйКэш.ГлавноеОкно.сбисПолучитьСтраницу(ГруппаНастройкиСтраницы, "Сервис");

	Если Не ЭтаФорма.Таблица_Сервис.Количество() И МестныйКэш.Ини.Свойство("Сервис") Тогда
		
		ИниСервис = МестныйКэш.ФормаНастроек.Ини(МестныйКэш, "Сервис");
		
		Для Каждого ПунктКоманды Из ИниСервис Цикл
			
			Если ТипЗнч(ПунктКоманды.Значение) = Тип("Структура") И ПунктКоманды.Значение.Свойство("Имя") Тогда
				
				НовыйПунктКоманды 		   = ЭтаФорма.Таблица_Сервис.Добавить();
				НовыйПунктКоманды.Ключ 	   = ПунктКоманды.Ключ;
				НовыйПунктКоманды.Имя 	   = ПунктКоманды.значение.Имя;
				НовыйПунктКоманды.Описание = ПунктКоманды.значение.Описание;
				НовыйПунктКоманды.Команда  = ПунктКоманды.значение.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Сбросим начальную страницу
	ГруппаНастройкиСтраницы.ТекущаяСтраница = МестныйКэш.ГлавноеОкно.сбисПолучитьСтраницу(ГруппаНастройкиСтраницы, "ОбщиеНастройки"); 
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСпособХраненияМетокСтатусов(НовоеЗначениеМеток)
	
	Попытка
		МодульОбъектаКлиент().ИзменитьПараметрСбис("СпособХраненияМетокСтатусов", НовоеЗначениеМеток);
		МеткиСтатусов = МестныйКэш.ФормаНастроек.СбисПрочитатьМеткиСтатусов(МестныйКэш);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, МеткиСтатусов);
		ЗаполнитьЗначенияСвойств(МестныйКэш.ГлавноеОкно, МеткиСтатусов);
		МестныйКэш.ФормаНастроек.ИнициализироватьКэшНастроек(МестныйКэш, Новый Структура("Обновить, Параметр", Истина, "status_marks")); //для способа хранения меток в разрезе аккаунта добавим status_marks в список параметров, хранящихся на шаблоне	
	Исключение
		ИнфаОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфаОбОшибке, "ФормаНастройки.ИзменитьСпособХраненияМетокСтатусов")
	КонецПопытки;

КонецПроцедуры

&НаКлиенте                                             
Процедура ОбновитьДоступностьНастроек()
// Процедура устанавливает видимость элементов формы в зависимости от выбранного варианта настроек прокси		

	ДоступностьПрокси = ТипПрокси = "Вручную";
	СбисЭлементВидимость = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "ИнтеграцияAPIВызовыНаКлиенте");
	Если Не СбисЭлементВидимость = Неопределено Тогда
		#Если ВебКлиент Тогда
			СбисЭлементВидимость.Видимость = Ложь;
		#Иначе
			СбисЭлементВидимость.Видимость = (СпособОбмена = 3);
		#КонецЕсли
	КонецЕсли;
	
	МестныйКэш.ГлавноеОкно.СбисЭлементФормы(ЭтаФорма, "ШифроватьВыборочно").Видимость	= СпособОбмена = 5 Или СпособОбмена = 7;    
																  
	МестныйКэш.ГлавноеОкно.СбисЭлементФормы(ЭтаФорма, "КаталогОбмена").Видимость		= СпособОбмена = 1;
	МестныйКэш.ГлавноеОкно.СбисЭлементФормы(ЭтаФорма, "НастройкаЭП").Видимость			= СпособОбмена = 3;
	МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "КаталогОтладки").Видимость 		= РежимОтладки;
	
	МестныйКэш.ГлавноеОкно.СбисЭлементФормы(ЭтаФорма, "ПроксиСервер").Доступность		= ДоступностьПрокси;
	МестныйКэш.ГлавноеОкно.СбисЭлементФормы(ЭтаФорма, "ПроксиПорт").Доступность			= ДоступностьПрокси;
	МестныйКэш.ГлавноеОкно.СбисЭлементФормы(ЭтаФорма, "ПроксиЛогин").Доступность		= ДоступностьПрокси;
	МестныйКэш.ГлавноеОкно.СбисЭлементФормы(ЭтаФорма, "ПроксиПароль").Доступность		= ДоступностьПрокси;
	
	Если Не МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда 
		МестныйКэш.ГлавноеОкно.СбисЭлементФормы(ЭтаФорма, "НадписьСервер").Доступность	= ДоступностьПрокси;
		МестныйКэш.ГлавноеОкно.СбисЭлементФормы(ЭтаФорма, "НадписьПорт").Доступность	= ДоступностьПрокси;
		МестныйКэш.ГлавноеОкно.СбисЭлементФормы(ЭтаФорма, "НадписьЛогин").Доступность	= ДоступностьПрокси;
		МестныйКэш.ГлавноеОкно.СбисЭлементФормы(ЭтаФорма, "НадписьПароль").Доступность	= ДоступностьПрокси;
	КонецЕсли;
	
	Если	ДоступностьПрокси
		И	МестныйКэш.Парам.Свойство("ПроксиСервер")
		И	СокрЛП(МестныйКэш.Парам.ПроксиСервер) <> "" Тогда
		
		ПроксиСервер = МестныйКэш.Парам.ПроксиСервер;
	КонецЕсли;	 
	
	//Определить возможность использования серверных настроек для интеграции
	ИнтеграцияМодуль		= МодульОбъектаКлиент().МодульИнтеграцииСБИС(СпособОбмена);
	СведенияОбИнтеграции	= ИнтеграцияМодуль.СведенияОбИнтеграции();
	
	Для Каждого Настройка Из ИнтеграцияМодуль.ВидимостьНастроек() Цикл
		
		МестныйКэш.ГлавноеОкно.СбисЭлементФормы(ЭтаФорма, Настройка.Ключ).Видимость	= Настройка.Значение;	
		
	КонецЦикла;

	Если	СведенияОбИнтеграции.Параметры.СерверныеНастройки	Тогда

		МестныйКэш.ГлавноеОкно.СбисЭлементФормы(ЭтаФорма, "СпособХраненияНастроек").ТолькоПросмотр	= Ложь;

	Иначе 

		СпособХраненияНастроек	= 0; 
		МестныйКэш.ГлавноеОкно.СбисЭлементФормы(ЭтаФорма, "СпособХраненияНастроек").ТолькоПросмотр	= Истина;

	КонецЕсли;
	МестныйКэш.ГлавноеОкно.СбисЭлементФормы(ЭтаФорма, "КаталогНастроек").Видимость = СпособХраненияНастроек = 0;
	
	ВариантыСпособаОбмена			= МестныйКэш.ГлавноеОкно.СбисЭлементФормы(ЭтаФорма, "СпособОбмена").СписокВыбора;	
	ДоступностьНовыхСпособовОбмена	= ДоступностьНовыхСпособовОбмена();
	
	Если НЕ ВариантыСпособаОбмена.НайтиПоЗначению(9) = Неопределено И НЕ ДоступностьНовыхСпособовОбмена.SabyHttpClient Тогда
		ВариантыСпособаОбмена.Удалить(ВариантыСпособаОбмена.НайтиПоЗначению(9));
	КонецЕсли; 
	
	Если НЕ ВариантыСпособаОбмена.НайтиПоЗначению(8) = Неопределено И НЕ ДоступностьНовыхСпособовОбмена.SabyPluginConnector Тогда
		ВариантыСпособаОбмена.Удалить(ВариантыСпособаОбмена.НайтиПоЗначению(8));
	КонецЕсли;
	
	МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "СпособСопоставленияНоменклатуры").ТолькоПросмотр = СпособХраненияНастроек = 1; 
	
	КнопкаПереносСопоставлений = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "ПеренестиСопоставления");
	
	Если СпособСопоставленияНоменклатуры = 1 Тогда
		//TODO Временно отключаем возможность переноса сопоставлений в DBF (до реализации фун. "ПереносСопоставлений" на DBF)
		КнопкаПереносСопоставлений.Видимость	= Ложь;
	ИначеЕсли МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ПараметрыПереносаСопоставлений_Завершен") Тогда 
		КнопкаПереносСопоставлений.Заголовок	= "Перенос выполнен";
		КнопкаПереносСопоставлений.Видимость	= Истина;
		КнопкаПереносСопоставлений.Доступность	= Ложь;
	ИначеЕсли МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ПараметрыПереносаСопоставлений_Начат") Тогда
		КнопкаПереносСопоставлений.Заголовок	= "Продолжить перенос";
		КнопкаПереносСопоставлений.Видимость	= Истина;
		КнопкаПереносСопоставлений.Доступность	= Истина;
	Иначе
		КнопкаПереносСопоставлений.Заголовок	= "Выполнить перенос";
		КнопкаПереносСопоставлений.Видимость	= Истина;
		КнопкаПереносСопоставлений.Доступность	= Истина;
	КонецЕсли;
		
КонецПроцедуры


// Функция - проверяет наличие обработок с внешними компонентами интеграции в справочнике доп. обработок
// 
// Возвращаемое значение:  Структура("SabyHttpClient, SabyPluginConnector", Булево, Булево);
//   - 
//
&НаСервере
Функция ДоступностьНовыхСпособовОбмена()

	Результат						= Новый Структура("SabyHttpClient, SabyPluginConnector", Ложь, Ложь);
	ПараметрыФункций				= Новый Структура("ИмяОбработки", "SabyHttpClient");	
	Если НЕ МодульОбъектаСервер().ВнешняяОбработка_НайтиПоИмениНаСервере(ПараметрыФункций) = Неопределено Тогда
		Результат.SabyHttpClient = Истина;
	КонецЕсли;	
	
	ПараметрыФункций 				= Новый Структура("ИмяОбработки", "SabyPluginConnector");	
	Если НЕ МодульОбъектаСервер().ВнешняяОбработка_НайтиПоИмениНаСервере(ПараметрыФункций) = Неопределено Тогда
		Результат.SabyPluginConnector = Истина;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СбисВыбратьКаталог(СтароеЗначение)
	
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Каталог		= СтароеЗначение;
	ДиалогОткрытия.Заголовок	= "Выберите каталог"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		Возврат МестныйКэш.ОбщиеФункции.СбисФорматКаталога(ДиалогОткрытия.Каталог, МестныйКэш.ПараметрыСистемы.Клиент); 
	КонецЕсли;
	
	Возврат	СтароеЗначение;
	
КонецФункции

//Заполняет список адресов сервера
&НаКлиенте
Процедура СбисЗаполнитьАдресСервера(Кэш)
	
	ДанныеЭлементов = "ЭлементыФормы";
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ДанныеЭлементов = "Элементы";
	КонецЕсли;
	ЭтаФорма[ДанныеЭлементов].АдресСервера.СписокВыбора.Очистить();
	
	СписокСерверов		= Кэш.ГлавноеОкно.СбисСписокСерверов(Кэш);
	ПредставлениеАдрес	= СтрЗаменить(СтрЗаменить(СокрЛП(АдресСервера), "https:", ""), "/", "");
	ДобавитьАдрес		= Истина;
	Для Каждого ЭлементСписка Из СписокСерверов Цикл
		ЭтаФорма[ДанныеЭлементов].АдресСервера.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		Если ЭлементСписка.Представление = ПредставлениеАдрес Тогда
			АдресСервера = ЭлементСписка.Значение;
			ДобавитьАдрес = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если ДобавитьАдрес Тогда
		ЭтаФорма[ДанныеЭлементов].АдресСервера.СписокВыбора.Добавить(АдресСервера, ПредставлениеАдрес);
	КонецЕсли;
	АдресСервера = АдресСервера;//перевыберем для списка
	
КонецПроцедуры

// Процедура записывает выбранные настройки в сохраняемые параметры и закрывает форму	
&НаКлиенте
Процедура СбисПрименитьНастройки()
	
	МодульОбъектаКлиент = МодульОбъектаКлиент();
	
	ПараметрыСтатистики = Новый Структура("Действие, Сообщения", "ПрикладнаяСтатистика", Новый Массив);
	Если МодульОбъектаКлиент.ПолучитьЗначениеПараметраСбис("ЗаполнениеКонтрагента1С") = ЗаполнениеКонтрагента1С Тогда
		// ничего не делаем	
	ИначеЕсли ЭтаФорма["ЗаполнениеКонтрагента1С"] = "ПокупательСБИС" Тогда 
		СоставСтатистики = Новый Структура;
		СоставСтатистики.Вставить("Контекст", "Настройка загрузки заказа");
		СоставСтатистики.Вставить("Действие", "Вести учет по контрагентам");
		ПараметрыСтатистики.Сообщения.Добавить(СоставСтатистики);
	ИначеЕсли ЭтаФорма["ЗаполнениеКонтрагента1С"] = "ГрузополучательСБИС" Тогда 
		СоставСтатистики = Новый Структура;
		СоставСтатистики.Вставить("Контекст", "Настройка загрузки заказа");
		СоставСтатистики.Вставить("Действие", "Вести учет по грузополучателям");
		ПараметрыСтатистики.Сообщения.Добавить(СоставСтатистики);
	КонецЕсли;
	
	Попытка
		МодульОбъектаКлиент.СбисСтатистика_СформироватьИЗаписать(ПараметрыСтатистики);
	Исключение
		МодульОбъектаКлиент.СообщитьСбисИсключение(ИнформацияОбОшибке(), "СбисПрименитьНастройки");     
	КонецПопытки;
	
	Если СпособОбмена = 1 И Не ЗначениеЗаполнено(КаталогОбмена) Тогда
		
		ТекстСообщения = "Заполните каталог обмена документами";
		
		Если МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда 	
			Сообщить(ТекстСообщения);
		Иначе
			Предупреждение(ТекстСообщения);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	//СписокСвойствЗаполнения = "СпособОбмена, СпособХраненияНастроек, КаталогОбмена, КаталогНастроек, ВремяОжиданияОтвета, ТипГрузополучателя, АдресСервера, ЗаполнениеКонтрагента1С";
	СписокСвойствЗаполнения = 
	"ТипГрузополучателя
	|ЗаполнениеКонтрагента1С";
	
	Для СтрНомерСтроки = 1 По СтрЧислоСтрок(СписокСвойствЗаполнения) Цикл
		КлючПараметра = СтрПолучитьСтроку(СписокСвойствЗаполнения, СтрНомерСтроки);
		МодульОбъектаКлиент.ИзменитьПараметрСБИС(КлючПараметра, ЭтаФорма[КлючПараметра]);
	КонецЦикла;
	
	ПараметрыФормы.Результат		= Новый Структура(КлючиИспользовать);//Набор параметров для завершения
	НастройкиПодключения_Завершение	= Новый Структура(КлючиИспользовать);//Набор параметров для завершения
	ЗаполнитьЗначенияСвойств(ПараметрыФормы.Результат,			ЭтаФорма);
 	ЗаполнитьЗначенияСвойств(НастройкиПодключения_Завершение,	ЭтаФорма);

	НажатиеСохранитьВыполнено = Истина;
	Закрыть(ПараметрыФормы.Результат);

КонецПроцедуры

&НаКлиенте
Процедура СбисПрименитьНастройки_Завершение(АргументыИзменены, ДопПараметры=Неопределено) Экспорт

	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ПовторныйЗапуск",			Истина);
	ПараметрыЗавершения.Вставить("ИзмененаФормаНастроек",	АргументыИзменены.Настройки);
	ПараметрыЗавершения.Вставить("РазделДо",				МестныйКэш.Текущий.ТипДок);

	Если		АргументыИзменены.Авторизация Тогда
		МестныйКэш.ГлавноеОкно.ПослеОткрытияАвторизация(ПараметрыЗавершения);
		Возврат;
	ИначеЕсли	АргументыИзменены.Настройки Тогда
		//МестныйКэш.ФормаНастроекОбщее.ОчиститьСобранныеНастройки(МестныйКэш);
		МестныйКэш.ГлавноеОкно.ПослеОткрытияЗавершение(ПараметрыЗавершения);
	КонецЕсли;
	
КонецПроцедуры

//Выполняет вызов проверки автообновления
&НаКлиенте
Процедура СбисПроверитьНаличиеОбновлений(ПараметрыПроверки, ДоПараметры = Неопределено) Экспорт
	
	Попытка
		Если ЗначениеЗаполнено(МестныйКэш.Парам.ОжидаемаяВерсия) Тогда
			Сообщить("На текущий момент обновление не требуется - установлена актуальная версия внешней обработки");
			Возврат;
		КонецЕсли;
		
		МестныйКэш.ГлавноеОкно.сбисПоказатьСостояние("Проверка наличия обновлений");
		МестныйКэш.ОбщиеФункции.СбисПроверитьНаличиеОбновлений(МестныйКэш, ПараметрыПроверки);
		МестныйКэш.ГлавноеОкно.сбисСпрятатьСостояние();
		
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "ФормаГлавноеОкно.СбисПроверитьНаличиеОбновлений");
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура СбисУстановитьФорму(ПараметрыОткрытия)
		
	ПараметрыФормы = Новый Структура("РежимЗапуска, Результат");
	ИзмененныеПараметры = Новый Структура;
	
	Если		ПараметрыОткрытия = Неопределено Тогда
		ПараметрыФормы.РежимЗапуска = "ОбщиеНастройки";
	Иначе
		Если Не	ПараметрыОткрытия.Свойство("РежимЗапуска", ПараметрыФормы.РежимЗапуска) Тогда
			ПараметрыФормы.РежимЗапуска = "ОбщиеНастройки";
		КонецЕсли;
		Если ПараметрыОткрытия.Свойство("Кэш") Тогда
			МестныйКэш = ПараметрыОткрытия.Кэш;
		КонецЕсли;
	КонецЕсли;
	
	Если МестныйКэш = Неопределено Тогда
		МестныйКэш = ВладелецФормы.Кэш;
	КонецЕсли;
	
	Если КлючиИспользовать = Неопределено Тогда
		КлючиИспользовать = "";
		Для Каждого КлючИЗначениеКонтроль Из МестныйКэш.Парам Цикл
			КлючиИспользовать = КлючиИспользовать + "," + КлючИЗначениеКонтроль.Ключ;
		КонецЦикла;
		КлючиИспользовать = Сред(КлючиИспользовать, 2);
	КонецЕсли;
	 //КлючиИспользовать = "СпособОбмена, СпособХраненияНастроек, КаталогНастроек, КаталогОбмена, АдресСервера, ШифроватьВыборочно, ВремяОжиданияОтвета
	 //   			|, ТипПрокси, ПроксиСервер, ПроксиПорт, ПроксиЛогин";
	
	НастройкиПодключения_Было = Новый Структура(КлючиИспользовать);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, МестныйКэш.Парам, , "ПорядокАвтоматическогоСопоставления");
		
	ЭлементДействия = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "НастройкиСтраницы");
	
	Если ПараметрыФормы.РежимЗапуска = "ОбщиеНастройки" Тогда
		
		ЗаполнитьВкладкуСервис();
		//Обновить метки статусов при открытии формы
		МодульОбъектаКлиент().ОбновитьМеткиСтатусов(, МестныйКэш);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, МестныйКэш.ГлавноеОкно, "ДатаПоследнегоЗапросаСтатусов, ИдентификаторПоследнегоСобытия, ДатНачЧтенияСтатусов, ДатКнцЧтенияСтатусов");
		
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "СтраницаСоединение").Видимость   = Истина;
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "НастройкиДокументов").Видимость  = Истина;
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "ОбщиеНастройки").Видимость  	   = Истина;
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "Сервис").Видимость  			   = Ложь;
		
		СписокСпособовХранения	= МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "СпособХраненияМетокСтатусов").СписокВыбора;
		СписокЭлементВ_ИБ		= СписокСпособовХранения.НайтиПоЗначению(2);
		Если МодульОбъектаКлиент().ИспользоватьСбисПараметрыДляХраненияОбщихНастроек() Тогда
			Если Не СписокЭлементВ_ИБ = Неопределено Тогда
				СписокСпособовХранения.Удалить(СписокЭлементВ_ИБ);
			КонецЕсли;
		ИначеЕсли СписокЭлементВ_ИБ = Неопределено Тогда
			СписокСпособовХранения.Добавить(2, "Информационной базы");
		КонецЕсли;
			
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "ЗаказыПокупателей").Видимость   = Истина;
		
		Если НЕ ЗначениеЗаполнено(СкладПоУмолчанию) 
			И МестныйКэш.ФормаНастроек.ПараметрыРаботы.Свойство("СправочникСклады")
			И ЗначениеЗаполнено(МестныйКэш.ФормаНастроек.ПараметрыРаботы.СправочникСклады) Тогда
			
			НаименованиеТипа = СокрЛП(МестныйКэш.ФормаНастроек.ПараметрыРаботы.СправочникСклады);
			ЭлементСкладПоУмолчанию = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "СкладПоУмолчанию");
			ЭлементСкладПоУмолчанию.ОграничениеТипа = Новый ОписаниеТипов(НаименованиеТипа);
			
			ИмяСправочника = СтрЗаменить(НаименованиеТипа, "Ссылка", ""); 
			СкладПоУмолчанию = ПредопределенноеЗначение(ИмяСправочника + ".ПустаяСсылка");
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РасСчетПоУмолчанию) 
			И МестныйКэш.ФормаНастроек.ПараметрыРаботы.Свойство("СправочникРасСчет")
			И ЗначениеЗаполнено(МестныйКэш.ФормаНастроек.ПараметрыРаботы.СправочникРасСчет) Тогда
			
			НаименованиеТипа = СокрЛП(МестныйКэш.ФормаНастроек.ПараметрыРаботы.СправочникРасСчет);
			ЭлементРасСчет = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "РасСчетПоУмолчанию");
			ЭлементРасСчет.ОграничениеТипа = Новый ОписаниеТипов(НаименованиеТипа);
			
			ИмяСправочника = СтрЗаменить(НаименованиеТипа, "Ссылка", ""); 
			РасСчетПоУмолчанию = ПредопределенноеЗначение(ИмяСправочника + ".ПустаяСсылка");

			ЭлементыДляОбновления = Новый Массив;
			ЭлементыДляОбновления.Добавить("РасСчетПоУмолчанию");
			ЭлементыДляОбновления.Добавить("НадписьРасСчет");
			ПараметрНастройки = Новый Структура("Видимость", Ложь);
			ОбновитьНастройкиЭлементовФормы(ЭлементыДляОбновления, ПараметрНастройки);				
		Иначе
			
			РасСчетПоУмолчанию = Неопределено;
			МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "РасСчетПоУмолчанию").Видимость = Ложь;   // Если заполнен расчетный счет, но из инишки не подтянулся справочник, то принудительно очищаем и прячем
			ЭлементыДляОбновления = Новый Массив;
			ЭлементыДляОбновления.Добавить("РасСчетПоУмолчанию");
			ЭлементыДляОбновления.Добавить("НадписьРасСчет");
			ПараметрНастройки = Новый Структура("Видимость", Ложь);
			ОбновитьНастройкиЭлементовФормы(ЭлементыДляОбновления, ПараметрНастройки);
			
		КонецЕсли;  
		
		Настройки = НастройкиЭлементовЗаполненияКонтрагента1С();	
		ОбновитьНастройкиЭлементовФормы(Настройки.СписокЭлементов, Настройки.ПараметрыНастройки); 
		ПроверитьНаличиеСправочникаПартнеров();
		
		
	ИначеЕсли ПараметрыФормы.РежимЗапуска = "НастройкиСоединения" Тогда   
		
		РежимЗапускаНастройкаСоединения();
		
	ИначеЕсли ПараметрыФормы.РежимЗапуска = "Сервисы" Тогда
		
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "СтраницаСоединение").Видимость   = Ложь;
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "НастройкиДокументов").Видимость  = Ложь;
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "ОбщиеНастройки").Видимость  	   = Ложь;  
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "ЗаказыПокупателей").Видимость    = Ложь;
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "Сервис").Видимость  			   = Истина;	
		ЗаполнитьВкладкуСервис();
		
	Иначе
		
		ИнфоОбОшибке = "Передано неизвестное значение параметра ""Режим запуска""";
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "ФормаНастройки.ПриОткрытии")

	КонецЕсли;   
	
	Если НЕ МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "НадписьАдресСервисаОбновлений") = Неопределено Тогда 
		МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "НадписьАдресСервисаОбновлений").Видимость = РежимОтладки;   
	КонецЕсли;	
	МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "АдресСервисаОбновлений").Видимость = РежимОтладки;
	
	СбисЗаполнитьАдресСервера(МестныйКэш);
	ЗаполнитьЗначенияСвойств(НастройкиПодключения_Было,	ЭтаФорма);
	
	//-------------------------------------------------------------------------------------------------------
	//Проект Расширенные проверки сопоставления номенклатуры
	Если МодульОбъектаКлиент().ПолучитьЗначениеФичи("РасширенныйФункционалСопоставленияНоменклатуры") Тогда 
		
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "СопоставлениеНоменклатуры").Видимость = Истина; 
		Разделитель = ",";
		ПорядокОбходаСтрока = МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ПорядокАвтоматическогоСопоставления");
		ПорядокОбхода = МодульОбъектаКлиент().СбисРазложитьСтрокуВМассивПодстрокНаСервереБезКонтекста(ПорядокОбходаСтрока, Разделитель); 
		ЗаполнитьПорядокАвтоматическогоПоискаСопоставлений(ПорядокОбхода);
		
	Иначе
		
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "СопоставлениеНоменклатуры").Видимость = Ложь;
		
	КонецЕсли;                                                                                      
	//-----------------------------------------------------------------------------------------------------

	ОбновитьДоступностьНастроек();
	
КонецПроцедуры

//Процедура управляет включением/отключением вывода логов
&НаКлиенте
Процедура СбисПереключитьОтладку()
	Если РежимОтладки Тогда
		МестныйКэш.Интеграция.ВключитьОтладку(МестныйКэш, КаталогОтладки);
	Иначе
		МестныйКэш.Интеграция.ОтключитьОтладку(МестныйКэш);
	КонецЕсли;
	
	МестныйКэш.Парам.РежимОтладки	= РежимОтладки;
	МестныйКэш.Парам.КаталогОтладки = КаталогОтладки;
	МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "КаталогОтладки").Видимость = РежимОтладки;
	//+++ МАИ 09.09.2021 Переопределяем сервер обновлений, если пользователь в режиме отладки указал другой
	МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "АдресСервисаОбновлений").Видимость = РежимОтладки;
	Если НЕ РежимОтладки ИЛИ АдресСервисаОбновлений = "" Тогда
		АдресСервисаОбновлений = "update.sbis.ru";
		МестныйКэш.СБИС.ПараметрыИнтеграции.Вставить("АдресСервисаОбновлений", АдресСервисаОбновлений);
	КонецЕсли;
	//--- МАИ 09.09.2021 
	
КонецПроцедуры					

Функция НастройкиЭлементовЗаполненияКонтрагента1С()
	
	СписокЭлементов = Новый Массив;
	СписокЭлементов.Добавить("ГрузополучательНеВедется");
	СписокЭлементов.Добавить("ГрузополучательКонтрагент");
	СписокЭлементов.Добавить("ГрузополучательПартнер");
	СписокЭлементов.Добавить("ТипГрузополучателя");
	
	ПараметрыНастройки = Новый Структура;
	
	Если ЗаполнениеКонтрагента1С = "ГрузополучательСБИС" Тогда
		
		ТипГрузополучателя = "ГрузополучательКонтрагент";
		
		ПараметрыНастройки.Вставить("Доступность", Ложь);		
		
   	Иначе 
		
		ПараметрыНастройки.Вставить("Доступность", Истина);
		
	КонецЕсли;
	
	Настройки = Новый Структура("СписокЭлементов, ПараметрыНастройки", СписокЭлементов, ПараметрыНастройки);
	Возврат Настройки;
	
КонецФункции

&НаКлиенте
Процедура РежимЗапускаНастройкаСоединения()
	
	ЭлементДействия = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "НастройкиСтраницы");
	МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "СтраницаСоединение").Видимость   		= Истина; 
	МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "ЗаказыПокупателей").Видимость    		= Ложь;
	МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "СопоставлениеНоменклатуры").Видимость = Ложь;
	МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "НастройкиДокументов").Видимость  		= Ложь;
	МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "ОбщиеНастройки").Видимость  	   		= Ложь;
	МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭлементДействия, "Сервис").Видимость  			   		= Ложь;	
	//СбисЗаполнитьАдресСервера(МестныйКэш);
	//ЗаполнитьЗначенияСвойств(НастройкиПодключения_Было, ЭтаФорма);
	
	СпособОбменаСписокВыбора = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "СпособОбмена").СписокВыбора;
	Если СпособОбмена = 0 И ПустаяСтрока(СпособОбменаСписокВыбора.НайтиПоЗначению(0))	Тогда
		
		СпособОбменаСписокВыбора.Вставить(0, 0, "SDK");
		Попытка 
			МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "СпособОбмена").Значение = СпособОбменаСписокВыбора.Получить(0).Значение;  //по индексу - SDK
		Исключение	
			
		КонецПопытки;		
		
		СпособОбменаСписокВыбора.СортироватьПоЗначению();
	КонецЕсли;
	
	Если СпособОбмена = 4 И ПустаяСтрока(СпособОбменаСписокВыбора.НайтиПоЗначению(4))	Тогда
		СпособОбменаСписокВыбора.Вставить(3, 4, "ExtSDK");
		Попытка 
			МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "СпособОбмена").Значение = СпособОбменаСписокВыбора.Получить(3).Значение;  //по индексу - ExtSDK
		Исключение	
			
		КонецПопытки;		
		
		СпособОбменаСписокВыбора.СортироватьПоЗначению();
	КонецЕсли;
	
	Если СпособОбмена = 5 И ПустаяСтрока(СпособОбменаСписокВыбора.НайтиПоЗначению(5))	Тогда
		СпособОбменаСписокВыбора.Вставить(4, 5, "ExtSDKCrypto");
		Попытка 
			МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "СпособОбмена").Значение = СпособОбменаСписокВыбора.Получить(4).Значение;	//по индексу - ExtSDKCrypto	
		Исключение	
			
		КонецПопытки;	
		
		СпособОбменаСписокВыбора.СортироватьПоЗначению();
	КонецЕсли;
	
	Если ТипПрокси = Неопределено Тогда
		ТипПрокси = "НеИспользовать";
		
	ИначеЕсли Не(	ТипПрокси = "Вручную"
		Или	ТипПрокси = "НеИспользовать") Тогда;
		
		ТипПрокси = "Автоматически";
	КонецЕсли;
	
	Если Не ТипПрокси = "Вручную" Тогда
		ПроксиСервер = "";
		ПроксиПорт   = ""; 
		ПроксиЛогин  = "";  
		ПроксиПароль = "";
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАвтообновлениеПриИзменении(Элемент)
	МестныйКэш.ФормаНастроек.АвтообновлениеПриИзменении(МестныйКэш, НастройкиАвтообновление);
	ПараметрыПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеСправочникаПартнеров()
	
	СписокЭлементов = Новый Массив;
	ПараметрыНастройки = Новый Структура;
	СправочникНайден = ПроверитьНаличиеСправочникаВМетаданных("Партнеры"); 
	
	Если НЕ СправочникНайден Тогда
		Если  ТипГрузополучателя = "ГрузополучательПартнер" Тогда
			ТипГрузополучателя = "ГрузополучательКонтрагент";
		КонецЕсли;
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			СписокЭлементов.Добавить("ГрузополучательПартнер");
			ПараметрыНастройки.Вставить("Видимость", Ложь); 
			Настройки = Новый Структура("СписокЭлементов, ПараметрыНастройки", СписокЭлементов, ПараметрыНастройки);
			ОбновитьНастройкиЭлементовФормы(Настройки.СписокЭлементов, Настройки.ПараметрыНастройки);
		#Иначе
			ТипГрузополучателяЭлемент = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "ТипГрузополучателя");
			УдаляемыйЭлемент = ТипГрузополучателяЭлемент.СписокВыбора.НайтиПоЗначению("ГрузополучательПартнер");
			Если НЕ УдаляемыйЭлемент = Неопределено Тогда
				ТипГрузополучателяЭлемент.СписокВыбора.Удалить(ТипГрузополучателяЭлемент.СписокВыбора.Индекс(УдаляемыйЭлемент));
			КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеСправочникаВМетаданных(ИмяСправочника)
	Если Метаданные.Справочники.Найти(ИмяСправочника) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьПорядокАвтоматическогоПоискаСопоставлений(ПорядокОбхода = Неопределено)
	
	ПорядокАвтоматическогоСопоставления.Очистить(); 
		
	Если ЗначениеЗаполнено(ПорядокОбхода) Тогда
		
		МасПорядокАвтоматическогоСопоставления = ПорядокОбхода;
		
	Иначе  
		
		МасПорядокАвтоматическогоСопоставления = Новый Массив;
		МасПорядокАвтоматическогоСопоставления.Добавить("Артикул");
		МасПорядокАвтоматическогоСопоставления.Добавить("КодПоставщика");
		МасПорядокАвтоматическогоСопоставления.Добавить("КодПокупателя");
		МасПорядокАвтоматическогоСопоставления.Добавить("GTIN");
		МасПорядокАвтоматическогоСопоставления.Добавить("Идентификатор");
		МасПорядокАвтоматическогоСопоставления.Добавить("Код");
		
	КонецЕсли; 
	
	Для Счетчик = 0 По МасПорядокАвтоматическогоСопоставления.Количество() - 1 Цикл                             
		
		НовСтрока = ПорядокАвтоматическогоСопоставления.Добавить();
		НовСтрока.ПолеСопоставления = МасПорядокАвтоматическогоСопоставления[Счетчик];
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере 
Функция ПорядокАвтоСопоставления();
	
	ПорядокСтрока = "";
	Для Каждого Строка Из ПорядокАвтоматическогоСопоставления Цикл
		ПорядокСтрока = ПорядокСтрока + Строка.ПолеСопоставления + ",";
	КонецЦикла;
	
	КолВоСимволовБезПоследнегоРазделителя = СтрДлина(ПорядокСтрока) - 1;
	ПорядокСтрока = Лев(ПорядокСтрока, КолВоСимволовБезПоследнегоРазделителя);
	
	Возврат ПорядокСтрока;
	
КонецФункции

// Процедура записывает в местный и глобальный кэш измененный и зависимый параметр
//
// Параметры:
//  Элемент	 - ПолеФормы - элемент, для которого устанавливаются параметры.  
//
&НаКлиенте
Процедура СоздаватьЧерновикПриИзменении(Элемент)
	
	ПараметрыПриИзменении(Элемент); 
	
	Если СоздаватьЧерновик Тогда
		ИспользоватьНовуюОтправку = Истина;  
	КонецЕсли;
	ЗависимыйЭлемент = МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "ИспользоватьНовуюОтправку"); 
	ПараметрыПриИзменении(ЗависимыйЭлемент); 
	
КонецПроцедуры

// Процедура записывает в местный и глобальный кэш измененный и зависимый параметр
//
// Параметры:
//  Элемент	 - ПолеФормы - элемент, для которого устанавливаются параметры. 
//
&НаКлиенте
Процедура ИспользоватьНовуюОтправкуПриИзменении(Элемент)
	
	ПараметрыПриИзменении(Элемент); 
	
	Если НЕ ИспользоватьНовуюОтправку Тогда
		СоздаватьЧерновик = Ложь;
	КонецЕсли;	
	ЗависимыйЭлемент = МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "СоздаватьЧерновик"); 
	ПараметрыПриИзменении(ЗависимыйЭлемент);

КонецПроцедуры


#КонецОбласти

#КонецОбласти
