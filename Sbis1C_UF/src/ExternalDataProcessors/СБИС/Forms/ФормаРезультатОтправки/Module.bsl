
&НаКлиенте
Перем МестныйКэш Экспорт;     

#Область include_local_ПолучитьМодульОбъекта

&НаСервере
Функция МодульОбъектаСервер()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция МодульОбъектаСерверБезКонтекста()
	Возврат Новый (Тип("ВнешняяОбработкаОбъект.СБИС"));
КонецФункции

&НаКлиенте
Функция МодульОбъектаКлиент() Экспорт
	Возврат ВладелецФормы.Кэш.СБИС.МодульОбъектаКлиент;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Формы_ФормаРезультатОтправки

#Область include_core2_vo2_Формы_ФормаРезультатОтправки_Интерфейс_Вызов

&НаКлиенте
Функция ПоказатьРезультатОтправки(Кэш) Экспорт
	
	МестныйКэш = Кэш;
	РезультатОтправки = Кэш.РезультатОтправки;	
	
	Если Не ЭтаФорма.Открыта() Тогда
		ЭтаФорма.Открыть();
	Иначе
		ПриОткрытии("");
	КонецЕсли;
	
КонецФункции

#КонецОбласти //core_vo2_Формы_ФормаРезультатОтправки_Интерфейс_Вызов

#Область include_core2_vo2_Формы_ФормаРезультатОтправки_ОбработчикиСобытий

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Отправлено = МестныйКэш.РезультатОтправки.Отправлено;
	НеОтправлено = МестныйКэш.РезультатОтправки.НеОтправлено;
	НеСформировано = МестныйКэш.РезультатОтправки.НеСформировано;
	
	ЭлементыДляВыключенияВидимости = Новый Массив;
	ЭлементыДляВключенияВидимости = Новый Массив;
	
	Если НеОтправлено = 0 Тогда
		ЭлементыДляВыключенияВидимости.Добавить("Причины");
	Иначе
		
		ЭлементыДляВключенияВидимости.Добавить("Причины");
		
		Если МодульОбъектаКлиент().РезультатОтправки_Версия(МестныйКэш.РезультатОтправки) = 2 Тогда
			
			//УФ
			ЭлементыДляВыключенияВидимости.Добавить("ТипыОшибокДокумент1С");
			ЭлементыДляВключенияВидимости.Добавить("ТипыОшибокДокументы1СНазвания");
			//ОФ
			ЭлементыДляВыключенияВидимости.Добавить("Документ1С");
			ЭлементыДляВключенияВидимости.Добавить("Документы1СНазвания");
			ОбработатьСписокВложенийСОшибкамиФЛК();             
			ЗаполнитьДеревоОшибок(МестныйКэш.РезультатОтправки); 
		Иначе
			
			//УФ
			ЭлементыДляВключенияВидимости.Добавить("ТипыОшибокДокумент1С");
			ЭлементыДляВыключенияВидимости.Добавить("ТипыОшибокДокументы1СНазвания");
			//ОФ
			ЭлементыДляВключенияВидимости.Добавить("Документ1С");
			ЭлементыДляВыключенияВидимости.Добавить("Документы1СНазвания");

			ЗаполнитьДеревоОшибокЛегаси(МестныйКэш.РезультатОтправки);	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НеСформировано = 0 Тогда
		ЭлементыДляВыключенияВидимости.Добавить("НеСформировано");
	Иначе
		ЭлементыДляВключенияВидимости.Добавить("НеСформировано");	
	КонецЕсли;
		
	Если МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		
		сбисЗаполнитьЗаголовкиФормы();
		
		Если МестныйКэш.РезультатОтправки.Свойство("ВремяФормирования") Тогда
			
			ЭлементыДляВключенияВидимости.Добавить("ВремяФормирования");
			ВремяФормирования = МестныйКэш.РезультатОтправки.ВремяФормирования;
		Иначе 
			
			ЭлементыДляВыключенияВидимости.Добавить("ВремяФормирования");
		КонецЕсли;
		
		Если МестныйКэш.РезультатОтправки.Свойство("ВремяОтправки") Тогда
			
			ЭлементыДляВключенияВидимости.Добавить("ВремяОтправки");
			ВремяОтправки = МестныйКэш.РезультатОтправки.ВремяОтправки;
		Иначе 
			
			ЭлементыДляВыключенияВидимости.Добавить("ВремяОтправки");
		КонецЕсли;
		
		Если МестныйКэш.РезультатОтправки.Свойство("ВремяНачала") Тогда
			
			ЭлементыДляВключенияВидимости.Добавить("ОбщееВремя");
			ОбщееВремя = (ТекущаяУниверсальнаяДатаВМиллисекундах() - МестныйКэш.РезультатОтправки.ВремяНачала)/1000;
		Иначе
			
			ЭлементыДляВыключенияВидимости.Добавить("ОбщееВремя");
		КонецЕсли;
		
		Если МестныйКэш.РезультатОтправки.Свойство("ВремяЗаписиСтатусов") Тогда
			
			ЭлементыДляВключенияВидимости.Добавить("ВремяЗаписиСтатусов");
			ВремяЗаписиСтатусов = МестныйКэш.РезультатОтправки.ВремяЗаписиСтатусов;
		Иначе
			
			ЭлементыДляВыключенияВидимости.Добавить("ВремяЗаписиСтатусов");
		КонецЕсли;
		
		Если МестныйКэш.РезультатОтправки.Свойство("ВремяПолученияДанных") Тогда
			ЭлементыДляВключенияВидимости.Добавить("ВремяПолученияДанных");
			ВремяПолученияДанных = МестныйКэш.РезультатОтправки.ВремяПолученияДанных;
		Иначе
			ЭлементыДляВыключенияВидимости.Добавить("ВремяПолученияДанных");
		КонецЕсли;
		
		Если МестныйКэш.РезультатОтправки.Свойство("ВремяОжиданияОтвета") Тогда
			
			ЭлементыДляВключенияВидимости.Добавить("ВремяОжиданияОтвета");
			ВремяОжиданияОтвета = МестныйКэш.РезультатОтправки.ВремяОжиданияОтвета;
		Иначе
			
			ЭлементыДляВыключенияВидимости.Добавить("ВремяОжиданияОтвета");
		КонецЕсли;
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			HTMLПредставлениеОшибкиФЛК.УстановитьТекст("");	
		#Иначе
			HTMLПредставлениеОшибкиФЛК = Неопределено;	
		#КонецЕсли
		
		ЭлементыДляВыключенияВидимости.Добавить("HTMLПредставлениеОшибкиФЛК");
		
	КонецЕсли;
	
	ВключитьВидимость = Новый Структура("Видимость", Истина);
    ВыключитьВидимость = Новый Структура("Видимость", Ложь);
	ОбновитьНастройкиЭлементовФормы(ЭлементыДляВключенияВидимости, ВключитьВидимость);
	ОбновитьНастройкиЭлементовФормы(ЭлементыДляВыключенияВидимости, ВыключитьВидимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыОшибокПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если НЕ МодульОбъектаКлиент().РезультатОтправки_Версия(МестныйКэш.РезультатОтправки) = 2 Тогда
		Возврат;
	КонецЕсли;  
	
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		ТипыОшибокПередРазворачиваниемУФПереопределение(Строка);
		Возврат;	
	#КонецЕсли
	
	//Слетела авторизация, к примеру
	Если Элемент.ТекущиеДанные = Неопределено Тогда  
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КодОшибки = "729" Тогда
		
		ДокументСБИС = Элемент.ТекущиеДанные.ДокументСБИС;
		
		ПредставлениеОшибкиФЛК = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "HTMLПредставлениеОшибкиФЛК");
			
		Попытка
			
			Если Элемент.ТекущиеДанные.ПротоколОшибки = "" Тогда
				
				HTMLПредставлениеОшибкиФЛКТекст = ПолучитьПредставлениеHTMLОшибкиФЛК(ДокументСБИС);
				
				//Для совместимости кода. "УстановитьТекст" не существует на УФ (с)Сычев
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					ПредставлениеОшибкиФЛК.УстановитьТекст(HTMLПредставлениеОшибкиФЛКТекст);	
				#Иначе
					HTMLПредставлениеОшибкиФЛК = HTMLПредставлениеОшибкиФЛКТекст;	
				#КонецЕсли
				
				Элемент.ТекущиеДанные.ПротоколОшибки = HTMLПредставлениеОшибкиФЛКТекст;
				
			Иначе
				
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					ПредставлениеОшибкиФЛК.УстановитьТекст(Элемент.ТекущиеДанные.ПротоколОшибки);	
				#Иначе
					HTMLПредставлениеОшибкиФЛК = Элемент.ТекущиеДанные.ПротоколОшибки;	
				#КонецЕсли
				
			КонецЕсли;
			
			ПредставлениеОшибкиФЛК.Видимость = Истина;
		Исключение
			
			ПредставлениеОшибкиФЛК.Видимость = Ложь;
			
		КонецПопытки;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыОшибокВыбор(Элемент, Строка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные.ТекстОшибки = "Ошибка ФЛК. Двойной клик покажет/скроет подробный отчёт" Тогда

		ПредставлениеОшибкиФЛК = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "HTMLПредставлениеОшибкиФЛК");

		Если ПредставлениеОшибкиФЛК.Видимость = Ложь Тогда
			ТипыОшибокПередРазворачиванием(Элемент, Строка, Ложь);	
		Иначе
			ТипыОшибокПередСворачиванием(Элемент, Строка, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыОшибокПередРазворачиваниемУФПереопределение(Строка)

	ТекущаяСтрока = ТипыОшибок.НайтиПоИдентификатору(Строка);
	
	Если ТекущаяСтрока = Неопределено Тогда  //Слетела авторизация, к примеру
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.КодОшибки = "729" Тогда
		
		ДокументСБИС = ТекущаяСтрока.ДокументСБИС;
		
		ПредставлениеОшибкиФЛК = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "HTMLПредставлениеОшибкиФЛК");
			
		Попытка
			
			Если ТекущаяСтрока.ПротоколОшибки = "" Тогда
				
				HTMLПредставлениеОшибкиФЛКТекст = ПолучитьПредставлениеHTMLОшибкиФЛК(ДокументСБИС);
				
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					ПредставлениеОшибкиФЛК.УстановитьТекст(HTMLПредставлениеОшибкиФЛКТекст);	
				#Иначе
					HTMLПредставлениеОшибкиФЛК = HTMLПредставлениеОшибкиФЛКТекст;	
				#КонецЕсли
				
				ТекущаяСтрока.ПротоколОшибки = HTMLПредставлениеОшибкиФЛКТекст;
				
			Иначе
				
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					ПредставлениеОшибкиФЛК.УстановитьТекст(ТекущаяСтрока.ПротоколОшибки);	
				#Иначе
					HTMLПредставлениеОшибкиФЛК = ТекущаяСтрока.ПротоколОшибки;	
				#КонецЕсли
				
			КонецЕсли;
			
			ПредставлениеОшибкиФЛК.Видимость = Истина;
		Исключение
			
			ПредставлениеОшибкиФЛК.Видимость = Ложь;	
			
		КонецПопытки;

	КонецЕсли;
	
	
КонецПроцедуры 

&НаКлиенте
Процедура ТипыОшибокПередСворачиванием(Элемент, Строка, Отказ)
	
	Если НЕ МодульОбъектаКлиент().РезультатОтправки_Версия(МестныйКэш.РезультатОтправки) = 2 Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеОшибкиФЛК = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "HTMLПредставлениеОшибкиФЛК");
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ПредставлениеОшибкиФЛК.УстановитьТекст("");	
	#Иначе
		HTMLПредставлениеОшибкиФЛК = Неопределено;	
	#КонецЕсли	
	
	ПредставлениеОшибкиФЛК.Видимость = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ЭлементыДляВыключенияВидимости = Новый Массив;
	ЭлементыДляВыключенияВидимости.Добавить("HTMLПредставлениеОшибкиФЛК");
		
	ВыключитьВидимость = Новый Структура("Видимость", Ложь);
	ОбновитьНастройкиЭлементовФормы(ЭлементыДляВыключенияВидимости, ВыключитьВидимость);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	// процедура обновляет форму главного окна	
	ФормаГлавногоОкна = МестныйКэш.ГлавноеОкно;

	Если ФормаГлавногоОкна.Открыта() Тогда
		ФормаГлавногоОкна.ОбновитьКонтент();
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура НадписьТиповыеОшибкиНажатие(Элемент)
	ЗапуститьПриложение("https://sbis.ru/help/integration/1C_set/modul/typical_errors");
КонецПроцедуры

#КонецОбласти //core_vo2_Формы_ФормаРезультатОтправки_ОбработчикиСобытий

#Область include_core2_vo2_Формы_ФормаРезультатОтправки_Команды

&НаКлиенте
Процедура ОткрытьДокументОнлайн(Команда)
	
	ТипыОшибокЭлем = МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"ТипыОшибок");
	ТекущаяСтрока = ТипыОшибокЭлем.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МодульОбъектаКлиент().РезультатОтправки_Версия(МестныйКэш.РезультатОтправки) = 2 Тогда
		Документ1С = ТекущаяСтрока.Документы1С[0].Значение; 
	Иначе
		Документ1С = ТекущаяСтрока.Документ1С;
	КонецЕсли;
	
	фрм = МестныйКэш.ГлавноеОкно.СбисНайтиФормуФункции("СбисПрочитатьСведенияОПакете", МестныйКэш.ФормаРаботыСоСтатусами, "");
	ИдДокументаАккаунта	= фрм.СбисПрочитатьСведенияОПакете(Новый Структура("ДокументСсылка", Документ1С), МестныйКэш);
	
	Если ЗначениеЗаполнено(ИдДокументаАккаунта.ИдДокумента) Тогда
		
		СоставПакета = МестныйКэш.Интеграция.ПрочитатьДокумент(МестныйКэш, ИдДокументаАккаунта.ИдДокумента);
		
		Если СоставПакета<>Ложь Тогда
			Ссылка = СоставПакета.СсылкаДляНашаОрганизация;
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Сообщить("Нет связанного документа СБИС");
		Возврат;
		
	КонецЕсли;
	
	ЗапуститьПриложение(Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент1С(Команда)
	
	ТипыОшибокЭлем = МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"ТипыОшибок");
	ТекущаяСтрока = ТипыОшибокЭлем.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	Если МодульОбъектаКлиент().РезультатОтправки_Версия(МестныйКэш.РезультатОтправки) = 2 Тогда
		
		СписокСсылок = ТекущаяСтрока.Документы1С;
		
	Иначе
		
		СписокСсылок = Новый СписокЗначений;
		СписокСсылок.Добавить(ТекущаяСтрока.Документ1С);
		
	КонецЕсли;
	
	МодульОбъектаКлиент().СбисОткрытьДокументы(Новый Структура("СписокСсылок", СписокСсылок));
	
КонецПроцедуры

#КонецОбласти //core_vo2_Формы_ФормаРезультатОтправки_Команды

#Область include_core2_vo2_Формы_ФормаРезультатОтправки_СлужебныеПроцедурыИФункции
&НаКлиенте
Функция сбисЗаполнитьЗаголовкиФормы()
	
	ЭлементыДляОбновления = Новый Массив;
	ПараметрыОбновления = Новый Структура;
	
	Если РезультатОтправки.Свойство("ЗаголовкиФормыРезультатов") Тогда
		ЭтаФорма.Заголовок = РезультатОтправки.ЗаголовкиФормыРезультатов.Форма;
		
		ЭлементыДляОбновления.Добавить("Отправлено");
		ПараметрыОбновления.Вставить("Заголовок", РезультатОтправки.ЗаголовкиФормыРезультатов.ПоложительныйРезультат);
		
		ЭлементыДляОбновления[0] = "Неотправлено";
		ПараметрыОбновления.Вставить("Заголовок", РезультатОтправки.ЗаголовкиФормыРезультатов.ОтрицательныйРезультат);
		
		ЭлементыДляОбновления[0] = "ТипыОшибокДокументы1С";
		ПараметрыОбновления.Вставить("Заголовок", РезультатОтправки.ЗаголовкиФормыРезультатов.Объект1С);

		ЭлементыДляОбновления[0] = "НадписьТиповыеОшибки";
		ПараметрыОбновления.Вставить("Заголовок", РезультатОтправки.ЗаголовкиФормыРезультатов.ТиповыеОшибки);
		
		ОбновитьНастройкиЭлементовФормы(ЭлементыДляОбновления, ПараметрыОбновления);

		ЭлементыДляОбновления[0] = "ТипыОшибокКонтекстноеОткрытьДокументОнлайн";
		ПараметрыОбновления.Очистить();
		ПараметрыОбновления.Вставить("Видимость", Ложь);
		ОбновитьНастройкиЭлементовФормы(ЭлементыДляОбновления, ПараметрыОбновления);
	Иначе
		ЭтаФорма.Заголовок = "Результат отправки документов";
		
		ЭлементыДляОбновления.Добавить("Отправлено");
		ПараметрыОбновления.Вставить("Заголовок", "Отправлено");
		
		ЭлементыДляОбновления[0] = "Неотправлено";
		ПараметрыОбновления.Вставить("Заголовок", "Не отправлено");
		
		ЭлементыДляОбновления[0] = "ТипыОшибокДокументы1С";
		ПараметрыОбновления.Вставить("Заголовок", "Документ 1С");
		
		ЭлементыДляОбновления[0] = "НадписьТиповыеОшибки";
		ПараметрыОбновления.Вставить("Заголовок", "Смотреть типовые ошибки отправки и их решение");
		
		ОбновитьНастройкиЭлементовФормы(ЭлементыДляОбновления, ПараметрыОбновления);
		
		ЭлементыДляОбновления[0] = "ТипыОшибокКонтекстноеОткрытьДокументОнлайн";
		ПараметрыОбновления.Очистить();
		ПараметрыОбновления.Вставить("Видимость", Ложь);
		ОбновитьНастройкиЭлементовФормы(ЭлементыДляОбновления, ПараметрыОбновления);
	КонецЕсли
КонецФункции

// Функция - Получить представление HTMLОшибки ФЛК
//
// Параметры:
//  ДокументСБИС - Строка - идентификатор документа СБИС
// 
// Возвращаемое значение:
// Строка - HTML-протокол ошибки ФЛК в текстовом формате 
//
&НаКлиенте
Функция ПолучитьПредставлениеHTMLОшибкиФЛК(ДокументСБИС)
		
	ИДВложений = Новый Массив;
	Для Каждого Элемент Из РезультатОтправки.ТипыОшибок Цикл
		
		ЭлементСоответствия = РезультатОтправки.ДетализацияОшибок.Получить(Элемент.Значение);
		
		Если ЭлементСоответствия <> Неопределено Тогда
			
			Для Каждого Документ Из ЭлементСоответствия Цикл
				
				Если Документ.ДокументСБИС = ДокументСБИС Тогда 
					
					ИДПакета = Документ.ИДПакета;
					
					Для Каждого Вложение Из ЭлементСоответствия Цикл
						
						ВложениеУжеВСписке = НЕ (ИДВложений.Найти(Вложение.ИДВложения) = Неопределено); 
						
						Если НЕ ВложениеУжеВСписке И Вложение.ДокументСБИС = ДокументСБИС Тогда
							ИДВложений.Добавить(Вложение.ИДВложения); 
						КонецЕсли;
						
					КонецЦикла;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если НЕ ИдВложений.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;       
	
	ТекстОшибки = "";
		
	Для Каждого ИДВложения Из ИДВложений Цикл
		 
		Попытка
			РезультатВызова = МодульОбъектаКлиент().ПолучитьПротоколПроверкиВложения(Новый Структура("ИДПакета, ИдРодителя, ИмяРодителя", ИДПакета, ИДВложения, "Документ"));
		Исключение
			
			МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ПолучитьПредставлениеHTMLОшибкиФЛК"); 
			ПредставлениеОшибкиФЛК = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "HTMLПредставлениеОшибкиФЛК");
			ПредставлениеОшибкиФЛК.Видимость = Ложь;
			
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				HTMLПредставлениеОшибкиФЛК.УстановитьТекст("");	
			#Иначе
				HTMLПредставлениеОшибкиФЛК = Неопределено;	
			#КонецЕсли
			
		КонецПопытки;
		
		ТекстОшибки = ТекстОшибки + РезультатВызова;
	КонецЦикла;
	
	Возврат ТекстОшибки; 
	
КонецФункции 

// Процедура - Обработать список вложений с ошибками ФЛК
// Просматриваем все вложения с ошибкой ФЛК (код 729) и удаляем их из списка для формирования дерева ошибок
&НаКлиенте
Процедура ОбработатьСписокВложенийСОшибкамиФЛК()
	Для Каждого Элемент Из РезультатОтправки.ТипыОшибок Цикл
		
		ЭлементСоответствия = РезультатОтправки.ДетализацияОшибок.Получить(Элемент.Значение);
		
		ИндексыУдаляемыхВложений = Новый Массив;
		ИндексВложения = 0;
		
		Если ЭлементСоответствия <> Неопределено Тогда
			
			Для Каждого СтруктураДанныхОшибки Из ЭлементСоответствия Цикл
				
				ИндексВложения = ИндексВложения + 1;
				
				Если СтруктураДанныхОшибки.СтруктураОшибки.code = 729 Тогда
					СоставПакета = МестныйКэш.Интеграция.ПрочитатьДокумент(МестныйКэш, СтруктураДанныхОшибки.ИДПакета);
					
					Для Каждого Вложение Из СоставПакета.Вложение Цикл
						
						Если Вложение.Идентификатор = СтруктураДанныхОшибки.ИДВложения
							И Вложение.КоличествоОшибок = 0 Тогда
							
							ИндексыУдаляемыхВложений.Добавить(ИндексВложения);
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если СоставПакета.Свойство("ВложениеУчета") Тогда
						Для Каждого ВложениеУчета ИЗ СоставПакета.ВложениеУчета Цикл
							
							Если ВложениеУчета.Идентификатор = СтруктураДанныхОшибки.ИДВложения
								И ВложениеУчета.КоличествоОшибок = 0 Тогда
								
								ИндексыУдаляемыхВложений.Добавить(ИндексВложения);
								
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
				КонецЕсли; 
				
			КонецЦикла;
			
			Для Каждого ИндексВложения Из ИндексыУдаляемыхВложений Цикл
				ЭлементСоответствия.Удалить(ИндексВложения);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоОшибокЛегаси(РезультатОтправки)
	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
		
		ДеревоОшибок = РеквизитФормыВЗначение("ТипыОшибок");
		ДеревоОшибок.Строки.Очистить();
		
		Для Каждого Элемент Из РезультатОтправки.ТипыОшибок Цикл
			НоваяСтрока = ДеревоОшибок.Строки.Добавить();            
			НоваяСтрока.ТекстОшибки = Элемент.Значение;            
			НоваяСтрока.Количество = Элемент.Представление;
			
			//AU изменена структура в детализации ошибок для возможности проброса дампа в сервис статистики
			ЭлементСоответствия = РезультатОтправки.ДетализацияОшибок.Получить(Элемент.Значение);
			
			Если ЭлементСоответствия <> Неопределено Тогда
				
				Для Каждого Документ1С Из ЭлементСоответствия Цикл
					
					НоваяПодстрока = НоваяСтрока.Строки.Добавить();            
					НоваяПодстрока.Документ1С  = Документ1С.ОбработанДокумент1С; 
					НоваяПодстрока.ТекстОшибки = Документ1С.Сообщение;
					
				КонецЦикла;
				
			КонецЕсли
			
		КонецЦикла;	
		
		ЗначениеВРеквизитФормы(ДеревоОшибок, "ТипыОшибок");
	#Иначе
		
		ТипыОшибок.Строки.Очистить();
		
		Для Каждого Элемент Из РезультатОтправки.ТипыОшибок Цикл
			
			НоваяСтрока = ТипыОшибок.Строки.Добавить();            
			НоваяСтрока.ТекстОшибки = Элемент.Значение;            
			НоваяСтрока.Количество  = Элемент.Представление;
			
			//AU изменена структура в детализации ошибок для возможности проброса дампа в сервис статистики
			ЭлементСоответствия = РезультатОтправки.ДетализацияОшибок.Получить(Элемент.Значение);
			
			Если ЭлементСоответствия <> Неопределено Тогда
				
				Для Каждого Документ1С Из ЭлементСоответствия Цикл
					
					НоваяПодстрока = НоваяСтрока.Строки.Добавить();            
					НоваяПодстрока.Документ1С  = Документ1С.ОбработанДокумент1С; 
					НоваяПодстрока.ТекстОшибки = Документ1С.Сообщение;
					
				КонецЦикла;
				
			КонецЕсли
			
		КонецЦикла;	
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОшибок(РезультатОтправки)

	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда	
		
		ДеревоОшибок = РеквизитФормыВЗначение("ТипыОшибок");
		ДеревоОшибок.Строки.Очистить();
		
		Для Каждого Элемент Из РезультатОтправки.ТипыОшибок Цикл
			
			ЭлементСоответствия = РезультатОтправки.ДетализацияОшибок.Получить(Элемент.Значение);
			
			Если ЭлементСоответствия <> Неопределено Тогда
				
				Для Каждого СтруктураДанныхОшибки Из ЭлементСоответствия Цикл
					
					СуществующаяСтрокаСДокументомСБИС = ДеревоОшибок.Строки.Найти(СтруктураДанныхОшибки.ДокументСБИС, "ДокументСБИС", Ложь);
					
					Если СуществующаяСтрокаСДокументомСБИС <> Неопределено Тогда
						
						Если СтруктураДанныхОшибки.СтруктураОшибки.code = 729 Тогда
							СтруктураДанныхОшибки.Сообщение = "Ошибка ФЛК. Двойной клик покажет/скроет подробный отчёт";
						КонецЕсли;  
						
						Если СуществующаяСтрокаСДокументомСБИС.Строки.Найти(СтруктураДанныхОшибки.Сообщение, "ТекстОшибки") = Неопределено Тогда 
							
							ОшибкаЭлемент = СуществующаяСтрокаСДокументомСБИС.Строки.Добавить();
							ОшибкаЭлемент.ТекстОшибки = СтруктураДанныхОшибки.Сообщение;
							
						КонецЕсли;
						
						ОшибкаЭлемент.Документы1С.Добавить(СтруктураДанныхОшибки.ОбработанДокумент1С, СтруктураДанныхОшибки.ОбработанДокумент1С);
						ОшибкаЭлемент.Документы1СНазвания = ОшибкаЭлемент.Документы1СНазвания + ";" + СтруктураДанныхОшибки.ОбработанДокумент1С; 
					Иначе
						
						ДокументСБИСЭлемент = ДеревоОшибок.Строки.Добавить();            
						ДокументСБИСЭлемент.ТекстОшибки   = СтруктураДанныхОшибки.ДокументСБИС; 
						ДокументСБИСЭлемент.ДокументСБИС  = СтруктураДанныхОшибки.ДокументСБИС;
						ДокументСБИСЭлемент.КодОшибки	  = СтруктураДанныхОшибки.СтруктураОшибки.code;
						
						ОшибкаЭлемент = ДокументСБИСЭлемент.Строки.Добавить();
						
						Если ДокументСБИСЭлемент.КодОшибки = "729" Тогда
							
							ОшибкаЭлемент.ТекстОшибки  = "Ошибка ФЛК. Двойной клик покажет/скроет подробный отчёт";
							ОшибкаЭлемент.ДокументСБИС = СтруктураДанныхОшибки.ДокументСБИС; 
							ОшибкаЭлемент.КодОшибки	   = СтруктураДанныхОшибки.СтруктураОшибки.code;
						Иначе
							
							ОшибкаЭлемент.ТекстОшибки = СтруктураДанныхОшибки.Сообщение;
						КонецЕсли;
						
						ОшибкаЭлемент.Документы1С.Добавить(СтруктураДанныхОшибки.ОбработанДокумент1С, СтруктураДанныхОшибки.ОбработанДокумент1С);
						ОшибкаЭлемент.Документы1СНазвания = СтруктураДанныхОшибки.ОбработанДокумент1С;
					КонецЕсли;
					
				КонецЦикла;	
			Иначе
				
				ДокументСБИСЭлемент = ДеревоОшибок.Строки.Добавить();
				ДокументСБИСЭлемент.ДокументСБИС = "Документ для ошибки не определён";
				ДокументСБИСЭлемент.КодОшибки	  = СтруктураДанныхОшибки.СтруктураОшибки.code;
				
				ОшибкаЭлемент = ДокументСБИСЭлемент.Строки.Добавить();            
				
				ОшибкаЭлемент.ТекстОшибки = Элемент.Значение;
				ОшибкаЭлемент.Количество  = Элемент.Представление;
				
			КонецЕсли;
		КонецЦикла;	 
		
		ЗначениеВРеквизитФормы(ДеревоОшибок, "ТипыОшибок");
	#Иначе  
		
		ТипыОшибок.Строки.Очистить();
		
		Для Каждого Элемент Из РезультатОтправки.ТипыОшибок Цикл
			
			ЭлементСоответствия = РезультатОтправки.ДетализацияОшибок.Получить(Элемент.Значение);
			
			Если ЭлементСоответствия <> Неопределено Тогда
				
				Для Каждого СтруктураДанныхОшибки Из ЭлементСоответствия Цикл
					
					СуществующаяСтрокаСДокументомСБИС = ТипыОшибок.Строки.Найти(СтруктураДанныхОшибки.ДокументСБИС, "ДокументСБИС", Ложь);
					
					Если СуществующаяСтрокаСДокументомСБИС <> Неопределено Тогда
						
						Если СтруктураДанныхОшибки.СтруктураОшибки.code = 729 Тогда
							СтруктураДанныхОшибки.Сообщение = "Ошибка ФЛК. Двойной клик покажет/скроет подробный отчёт";
						КонецЕсли;  
						
						Если СуществующаяСтрокаСДокументомСБИС.Строки.Найти(СтруктураДанныхОшибки.Сообщение, "ТекстОшибки") = Неопределено Тогда 
							ОшибкаЭлемент = СуществующаяСтрокаСДокументомСБИС.Строки.Добавить();
							ОшибкаЭлемент.ТекстОшибки = СтруктураДанныхОшибки.Сообщение;
						КонецЕсли;
						
						ОшибкаЭлемент.Документы1С.Добавить(СтруктураДанныхОшибки.ОбработанДокумент1С, СтруктураДанныхОшибки.ОбработанДокумент1С);
						ОшибкаЭлемент.Документы1СНазвания = ОшибкаЭлемент.Документы1СНазвания + ";" + СтруктураДанныхОшибки.ОбработанДокумент1С; 
					Иначе
						
						ДокументСБИСЭлемент = ТипыОшибок.Строки.Добавить();            
						ДокументСБИСЭлемент.ТекстОшибки   = СтруктураДанныхОшибки.ДокументСБИС; 
						ДокументСБИСЭлемент.ДокументСБИС  = СтруктураДанныхОшибки.ДокументСБИС;
						ДокументСБИСЭлемент.КодОшибки	  = СтруктураДанныхОшибки.СтруктураОшибки.code;
						
						ОшибкаЭлемент = ДокументСБИСЭлемент.Строки.Добавить();
						
						Если ДокументСБИСЭлемент.КодОшибки = "729" Тогда
							
							ОшибкаЭлемент.ТекстОшибки  = "Ошибка ФЛК. Двойной клик покажет/скроет подробный отчёт";
							ОшибкаЭлемент.ДокументСБИС = СтруктураДанныхОшибки.ДокументСБИС; 
							ОшибкаЭлемент.КодОшибки	   = СтруктураДанныхОшибки.СтруктураОшибки.code;
						Иначе
							
							ОшибкаЭлемент.ТекстОшибки = СтруктураДанныхОшибки.Сообщение;
						КонецЕсли;
						
						ОшибкаЭлемент.Документы1С.Добавить(СтруктураДанныхОшибки.ОбработанДокумент1С, СтруктураДанныхОшибки.ОбработанДокумент1С);
						ОшибкаЭлемент.Документы1СНазвания = СтруктураДанныхОшибки.ОбработанДокумент1С;
						
					КонецЕсли;
					
				КонецЦикла;	
				
			Иначе
				
				ДокументСБИСЭлемент = ТипыОшибок.Строки.Добавить();
				ДокументСБИСЭлемент.ДокументСБИС  = "Документ для ошибки не определён";
				ДокументСБИСЭлемент.КодОшибки	  = СтруктураДанныхОшибки.СтруктураОшибки.code;
				
				ОшибкаЭлемент = ДокументСБИСЭлемент.Строки.Добавить();            
				
				ОшибкаЭлемент.ТекстОшибки = Элемент.Значение;            
				ОшибкаЭлемент.Количество  = Элемент.Представление;
				
			КонецЕсли;
		КонецЦикла;	 
	#КонецЕсли
	
КонецПроцедуры

// Процедура - Обновить настройки элементов формы
//
// Параметры:
//  СписокЭлементов		 - Массив - Содержит строки с именами элементов формы, которые нужно настроить 
//  ПараметрыНастройки	 - Структура - Параметры, которые будут установлены элементу (доступность, видимость и т.п.)
//
//			Настройка 	 -	Строка	  	 - Имя настройки элемента 
//			Значение 	 -	Произвольный - Устанавливаемое значение. Проверок на установку недопустимого значения нет, остаётся на совести программиста
//
&НаКлиенте
Процедура ОбновитьНастройкиЭлементовФормы(СписокЭлементов, ПараметрыНастройки)
	
	ЭлементыДляИзменения = Новый Массив;
	
	Для Каждого ИмяЭлемента Из СписокЭлементов Цикл
		
		ЭлементФормы = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, ИмяЭлемента);
		
		Если НЕ ЭлементФормы = Неопределено Тогда
			ЭлементыДляИзменения.Добавить(ЭлементФормы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из ЭлементыДляИзменения Цикл
		
		Для Каждого Параметр Из ПараметрыНастройки Цикл
			
			Попытка
				Элемент[Параметр.Ключ] = Параметр.Значение;
			Исключение
				// Штатная ситуация, в обработке не нуждается, ибо на ОФ нет групп элементов
				Продолжить;			
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти //core_vo2_Формы_ФормаРезультатОтправки_СлужебныеПроцедурыИФункции
#КонецОбласти //core_vo2_Формы_ФормаРезультатОтправки