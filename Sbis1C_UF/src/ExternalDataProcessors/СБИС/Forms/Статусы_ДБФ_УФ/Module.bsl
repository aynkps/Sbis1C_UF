
#Область include_core2_vo2_Переменные

&НаКлиенте
Перем ЛокальныйКэш Экспорт;

#КонецОбласти

#Область include_local_ПолучитьМодульОбъекта

&НаСервере
Функция МодульОбъектаСервер()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция МодульОбъектаСерверБезКонтекста()
	Возврат Новый (Тип("ВнешняяОбработкаОбъект.СБИС"));
КонецФункции

&НаКлиенте
Функция МодульОбъектаКлиент() Экспорт
	Возврат ВладелецФормы.Кэш.СБИС.МодульОбъектаКлиент;
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Статусы_DBF_ВнешнийВызов

&НаКлиенте
Функция УстановитьПараметрыМодуля(ПараметрыУстановки=Неопределено, Кэш=Неопределено)			Экспорт
	Перем СбисКаталогДБФ;
	
	Если Кэш = Неопределено Тогда
		ЛокальныйКэш = ВладелецФормы.Кэш;
	Иначе
		ЛокальныйКэш = Кэш;
	КонецЕсли;
	
	Если		ПараметрыУстановки = Неопределено
		Или Не	ПараметрыУстановки.Свойство("Каталог", СбисКаталогДБФ)
		Или	Не	ЗначениеЗаполнено(СбисКаталогДБФ) Тогда
		СбисКаталогДБФ = МодульОбъектаКлиент().ПолучитьЗначениеПараметраСБИС("КаталогПоУмолчанию_Сервер");
	КонецЕсли;
	
	ПараметрыУстановкиИсходящие = МодульОбъектаКлиент().СформироватьПараметрыУстановкиДБФ(Новый Структура("Тип, Каталог", "Статусы", СбисКаталогДБФ));
	ПараметрыУстановкиИсходящие.Вставить("ИмяФайла",	СокрЛП(Лев(ЛокальныйКэш.СБИС.ПараметрыИнтеграции.КодСервиса, 3) + "State"));
	ПараметрыУстановкиИсходящие.Вставить("Расширение",	"dbf");
	
	СформироватьПодключениеДБФ(ПараметрыУстановкиИсходящие);
КонецФункции

// Функция - получает классы для работы с DBF.
//
// Параметры:
//  ПараметрыDBFВходящие - Структура
//		- Путь	- строка путь до файла DBF
//		- Тип	- строка, описание что за DBF. Пока Статусы/Сопоставление
//		- ИмяФайла - строка, Имя файла DBF
//		- СтрокаСтатусы - строка (необязательный), из ини строка для DBF
//	
&НаСервере
Процедура СформироватьПодключениеДБФ(ПараметрыУстановки)
	
	МодульОбъектаСервер = МодульОбъектаСервер();
	ПараметрыСоединения = Новый Структура;
	ПараметрыСоединения.Вставить("РаботаСДБФ",				МодульОбъектаСервер.НовыйРаботаСДБФ(ПараметрыУстановки));
	ПараметрыСоединения.Вставить("ОписаниеСоединенияДБФ",	Новый Структура("Ключ, Параметры", ПараметрыУстановки.Путь, ПараметрыУстановки));
	
КонецПроцедуры

//Добавляет свойства для документа 1С (при сопоставлении и загрузке документов)	
&НаКлиенте
Функция ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, Ини, КаталогНастроек) Экспорт
	Попытка
		Возврат ЗаписатьПараметрыДокументовСБИСНаСервере(ДанныеПоСтатусам);
	Исключение
		МодульОбъектаКлиент().СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Запись параметров сопоставления недоступна."));
	КонецПопытки;
КонецФункции

//добавляет свойства для документа 1С (при сопоставлении и загрузке документов)	
&НаКлиенте
Функция ЗаписатьПараметрыДокументаСБИС(СтруктураПараметровДокументаСБИС, ДокументСсылка, Ини, КаталогНастроек, ДоПараметры=Неопределено) Экспорт
	Попытка
		Возврат ЗаписатьПараметрыДокументаСБИСНаСервере(СтруктураПараметровДокументаСБИС, ДокументСсылка);
	Исключение
		МодульОбъектаКлиент().СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Запись параметров сопоставления недоступна."));
	КонецПопытки;
КонецФункции

// Для массива документов СБИС ищет по идентификаторам пакетов и вложений документы 1С	
&НаКлиенте
Процедура ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, ИниКонфигурация, КаталогНастроек) Экспорт	
	Попытка
		ПолучитьТаблицуДокументов1СПоИдВложенияСБИСНаСервере(МассивДокументов, МассивИдентификаторов);
	Исключение
		МодульОбъектаКлиент().СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Чтение параметров сопоставления недоступно."));
	КонецПопытки;
КонецПроцедуры

// проставляет статусы по идентификаторам пакетов при получении списка изменений	
&НаКлиенте
Процедура ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Ини, КаталогНастроек) Экспорт
	Попытка
		ЗаписатьИзмененияПоДокументам1СНаСервере(МассивДокументов, Ини);
	Исключение
		МодульОбъектаКлиент().СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Запись параметров сопоставления недоступна."));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Функция СбисЗаписатьИзмененияПоДокументам1С(Кэш, МассивДокументов, ДополнительныеПараметры) Экспорт
	Отказ = Ложь;
	РезультатЗаполнения = Кэш.ФормаНастроек.СбисЗаполнитьНеполученныеНастройки(Кэш, Отказ);
	Если Отказ Тогда
		Возврат РезультатЗаполнения;
	КонецЕсли;
	ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, Кэш.Парам.КаталогНастроек);
КонецФункции

// удаляет свойства для документа 1С (при удалении сопоставления)
&НаКлиенте
Функция УдалитьПараметрыДокументаСБИС(СтруктураПараметровДокументаСБИС, ДокументСсылка, Ини, КаталогНастроек) Экспорт
	Попытка
		Возврат УдалитьПараметрыДокументаСБИСНаСервере(СтруктураПараметровДокументаСБИС, ДокументСсылка);
	Исключение
		МодульОбъектаКлиент().СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Удаление параметров сопоставления недоступно."));
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция УдалитьПараметрыДокументаСБИСПарам(СтруктураПараметровДокументаСБИС,ДокументСсылка,Ини,КаталогНастроек,ДополнительныеПараметры = Неопределено) Экспорт
	Попытка
		Возврат УдалитьПараметрыДокументаСБИСПарамНаСервере(СтруктураПараметровДокументаСБИС,ДокументСсылка);
	Исключение
		МодульОбъектаКлиент().СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Удаление параметров сопоставления недоступно."));
	КонецПопытки;
КонецФункции

// функция ищет связанные документы 1С для каждого вложения пакета и заполняет массив служебных вложений	
&НаКлиенте
Функция НайтиДокументы1СПоПакетуСБИС(ПолныйСоставПакета, КэшИни, КаталогНастроек, МассивСлужебных) Экспорт
	Попытка
		Возврат НайтиДокументы1СПоПакетуСБИСНаСервере(ПолныйСоставПакета, КэшИни, МассивСлужебных);
	Исключение
		МодульОбъектаКлиент().СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Чтение параметров сопоставления недоступно."));
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция НайтиДокументы1СПоИдВложенияСБИС(Ид, ИдВложения,Ини,КаталогНастроек) Экспорт
	Попытка
		Возврат НайтиДокументы1СПоИдВложенияСБИСНаСервере(Ид, ИдВложения);
	Исключение
		МодульОбъектаКлиент().СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Чтение параметров сопоставления недоступно."));
	КонецПопытки;
КонецФункции

//Возвращает свойство (статус, идентификатор пакета, идентификатор вложения) документа 1С 	
&НаКлиенте
Функция ПрочитатьПараметрыДокументаСБИС(ДокументСсылка, КаталогНастроек, ИмяСвойства, Ини) Экспорт
	Попытка
		Возврат ПрочитатьПараметрыДокументаСБИСНаСервере(ДокументСсылка, ИмяСвойства);
	Исключение
		МодульОбъектаКлиент().СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Чтение параметров сопоставления недоступно."));
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ПолучитьТаблицуДокументов1СПоИдПакетаСБИС(МассивДокументов, ИниКонфигурация, КаталогНастроек) Экспорт	
	Попытка
		ПолучитьТаблицуДокументов1СПоИдПакетаСБИСНаСервере(МассивДокументов);
	Исключение
		МодульОбъектаКлиент().СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Чтение параметров сопоставления недоступно."));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьСтатусыВТаблицеДокументов1С(МассивДокументов1С, ПараметрыФильтра, Ини, КаталогНастроек) Экспорт
	Попытка
		Возврат ЗаполнитьСтатусыВТаблицеДокументов1СНаСервере(МассивДокументов1С, ПараметрыФильтра);
	Исключение
		МодульОбъектаКлиент().СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Чтение параметров сопоставления недоступно."));
	КонецПопытки;
КонецФункции

#Область include_core2_vo2_Статусы_DBF_ВнешнийВызов_Актуальные

// Возвращает значение свойства по его имени и документу
// Параметры:
//  ПараметрыСвойства	 - Структура	 - 
//		ДокументСсылка	- Обязательный	- ДокумнтСсылка, по которому требуется получить свойство
//		Имя				- Обязательный  - Строка, Имя свойства ДокументСБИС_Ид/ДокументСБИС_ИдВложения/ДокументСБИС_Статус
//		Регламент		- Необязательный- Строка доп. регламента свойства.
// Возвращаемое значение:
//   -  Сохраненное значение свойства
//
&НаКлиенте
Функция СбисПрочитатьЗначениеСвойстваДокумента(ПараметрыСвойства, Кэш=Неопределено)	Экспорт
	Попытка
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить(ПараметрыСвойства.ДокументСсылка);
		СписокСвойств	= Новый Массив;
		СписокСвойств.Добавить(ПараметрыСвойства.Имя);
		СписокСвойств.Добавить("ДокументСБИС_Статус");
		ПрочитатьСвойстваДокументовПоСсылкамНаСервере(Новый Структура("СписокДокументов, СписокСвойств", СписокДокументов, СписокСвойств));
	Исключение
	КонецПопытки;
	Попытка
		Возврат ПрочитатьПараметрыДокументаСБИСНаСервере(ПараметрыСвойства.ДокументСсылка, ПараметрыСвойства.Имя);
	Исключение
		МодульОбъектаКлиент().СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Чтение параметров сопоставления недоступно."));
	КонецПопытки;
КонецФункции

//Функция возвращает параметры сопоставленного документа СБИС - ИД пакета и аккаунта
&НаКлиенте
Функция СбисПрочитатьСведенияОПакете(ПараметрыЧтения, Кэш) Экспорт
	ПараметрыЧтенияСвойства	= Новый Структура("Имя, ДокументСсылка", "ДокументСБИС_Ид", ПараметрыЧтения.ДокументСсылка);
	ИдДокументаЗначение		= СбисПрочитатьЗначениеСвойстваДокумента(ПараметрыЧтенияСвойства);
	Возврат Новый Структура("ИдДокумента, ИдАккаунта", ИдДокументаЗначение, "");
КонецФункции

////Процедура для реестров СБИС. Добавляет в список пакетов найденные документы 1С, их статус и состояние.
////ПараметрыСпискаДокументов - Структура
////		ИдентификаторыПолучить - массив структур с полями Ид, ИдВложения, по которым проводится поиск.
////		ИдАккаунта - строка Идентификатор аккаунта, для дополнительного разреза поиска.
////		ЗаполнитьСумму - булево, признак необходимости извлечения реквизита "СуммаДокумента".
//// v8unpack &НаКлиенте
//Процедура ЗаполнитьСписокДокументовСБИССвязьюСсылок1С(ПараметрыСпискаДокументов, Кэш) Экспорт
//	ПараметрыЗаполненияСвязи = Новый Структура("ИдентификаторыПолучить, ИдАккаунта, ЗаполнитьСумму", ПараметрыСпискаДокументов.ИдентификаторыПолучить, ПараметрыСпискаДокументов.ИдАккаунта, Ложь);
//	Если  ПараметрыСпискаДокументов.Свойство("ЗаполнитьСумму") Тогда
//		ПараметрыЗаполненияСвязи.ЗаполнитьСумму = ПараметрыСпискаДокументов.ЗаполнитьСумму;
//	КонецЕсли;
//	ВыборкаПоСпискуИД	= СбисПрочитатьСвязьДокументов1С(ПараметрыЗаполненияСвязи);
//	МассивДокументов	= ПараметрыСпискаДокументов.СписокДокументовЗаполнить;	
//	Для Каждого СтрокаСпискаЗаполнить Из МассивДокументов Цикл
//		СоставПакетаОбработать = СтрокаСпискаЗаполнить.СоставПакета[0].Значение;
//		Если	СоставПакетаОбработать.Свойство("Вложение")
//			И	СоставПакетаОбработать.Вложение.Количество() Тогда
//			ЗаполнитьСтрокуСпискаПоИдПакетаИВложения(СоставПакетаОбработать, СтрокаСпискаЗаполнить, ВыборкаПоСпискуИД, ПараметрыЗаполненияСвязи);
//		Иначе
//			ЗаполнитьСтрокуСпискаПоИдПакета(СоставПакетаОбработать, СтрокаСпискаЗаполнить, ВыборкаПоСпискуИД, ПараметрыЗаполненияСвязи);
//		КонецЕсли;
//	КонецЦикла;	
//КонецПроцедуры

#КонецОбласти


#Область include_core2_vo2_Статусы_DBF_ВнешнийВызов_РаботаСПодключением

//Получает значения указанных свойства по документам на сервере. Возвращает соответствие, где ключ - ссылка на документ, значение - массив структур со Свойствами и значениями
&НаСервере
Функция ПрочитатьСвойстваДокументовПоСсылкамНаСервере(ФильтрВходящий)
	Перем ИдАккаунта, КодСервиса;
	
	БД = ПолучитьСоединениеDBF(ПараметрыСоединения);
	
	СписокДокументов 	= ФильтрВходящий.СписокДокументов;
	СвойстваПолучить	= ФильтрВходящий.СписокСвойств;
	
	КоличествоДок		= СписокДокументов.Количество();
	Шаг					= 2000;
	Счетчик				= 0;
	ТекущееКоличество	= 0;
	
	Результат = Новый Соответствие;
	
	СвойстваSQL			= Новый Соответствие;
	Для Каждого СвойствоПолучить Из СвойстваПолучить Цикл
		СвойстваSQL.Вставить(ИмяПоляДБФПоИмениСвойства(СвойствоПолучить), СвойствоПолучить);
	КонецЦикла;
	
	// делаем запросы статусов из ДБФ по партиям для каждых 2000 документов 1С (разбиваем по частям, т.к. при большом количестве документов ругается "слишком сложный запрос")
	Пока ТекущееКоличество < КоличествоДок Цикл
		СоответствиеИД_Ссылка = Новый Соответствие;
		RecordSet = Новый ComОбъект("ADODB.Recordset");
		Recordset.CursorLocation = 3;
		sql_str = "Select IDDOC, ";
		Для Каждого КлючИЗначениеСвойства Из СвойстваSQL Цикл
			sql_str = sql_str + КлючИЗначениеСвойства.Ключ + ", ";
			Если КлючИЗначениеСвойства.Значение = "ДокументСБИС_Ид" Тогда
				sql_str = sql_str + "IDACC, ";//Ид аккаунта в выборку
			КонецЕсли;
		КонецЦикла;
		sql_str = Лев(sql_str, СтрДлина(sql_str) - 2);
		sql_str	= sql_str + 
					" from "	+ ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.ИмяФайла + 
					" where "	+ ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.ИмяФайла + ".IDDOC IN(";
		ВремКоличество = Мин(ТекущееКоличество + Шаг, КоличествоДок) - 1;
		Для Счетчик = ТекущееКоличество По ВремКоличество Цикл
			СсылкаДок	= СписокДокументов[Счетчик];
			ИдентДок	= ПолучитьУИДДокументаПоСсылке(СсылкаДок);
			СоответствиеИД_Ссылка.Вставить(ИдентДок, СсылкаДок);
			
			sql_str = sql_str + "'" + ИдентДок + "', ";	
		КонецЦикла;
		sql_str = Лев(sql_str, СтрДлина(sql_str)-2);
		sql_str = sql_str+")";
		Recordset.Open(sql_str,БД,2,3);
		
		Пока Не Recordset.EOF Цикл
			СписокСвойств = Новый Массив;
			Результат.Вставить(СоответствиеИД_Ссылка.Получить(RecordSet.Fields("IDDOC").value), СписокСвойств);
			Для Каждого СвойствоSQL Из СвойстваSQL Цикл
				СписокСвойств.Добавить(Новый Структура("Свойство, Значение", СвойствоSQL.Значение, RecordSet.Fields(СвойствоSQL.Ключ).value));
			КонецЦикла;
			RecordSet.MoveNext();
		КонецЦикла;
		ТекущееКоличество = ТекущееКоличество + Шаг;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьУИДДокументаПоСсылке(ДокументСсылка1С)
	
	Возврат ДокументСсылка1С.Метаданные().Имя+":"+Строка(ДокументСсылка1С.УникальныйИдентификатор());

КонецФункции

//Добавляет свойства для документа 1С (при сопоставлении и загрузке документов)	
&НаСервере
Функция ЗаписатьПараметрыДокументовСБИСНаСервере(ДанныеПоСтатусам)
	Для Каждого Элемент Из ДанныеПоСтатусам Цикл
		ЗаписатьПараметрыДокументаСБИСНаСервере(Элемент.СтруктураСвойств,Элемент.Документ1С);
	КонецЦикла;
КонецФункции

&НаСервере
Функция ЗаписатьПараметрыДокументаСБИСНаСервере(СтруктураПараметровДокументаСБИС, ДокументСсылка)
	//ФайлСтатусов = Новый Файл(КаталогНастроек+"\State.dbf");
	//БД = Новый COMОбъект("ADODB.Connection");
	//БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//			   "Data Source=" + КаталогНастроек + ";Extended Properties=""DBASE IV;"";");

	//Если ФайлСтатусов.Существует() Тогда
	//Иначе
	//	БД.Execute("Create Table State.dbf (IDPACK char(120), IDINPACK char(120), IDDOC char(240), STATE char(240))");
	//КонецЕсли;
	БД = ПолучитьСоединениеDBF();
	ИдДок = ДокументСсылка.Метаданные().Имя+":"+строка(ДокументСсылка.УникальныйИдентификатор());
	
	ТекстЗапроса	= "Select * from {ФайлБД} where {ФайлБД}.IDDOC like'{ИдДок}%'";
	ТекстЗапроса	= СтрЗаменить(СтрЗаменить(ТекстЗапроса, 
						"{ФайлБД}",		ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.ИмяФайла),
						"{ИдДок}",		ИдДок);
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
    Recordset.Open(ТекстЗапроса, БД, 2, 3);

	Если Recordset.EOF=Ложь Тогда 
	Иначе
		RecordSet.AddNew();
	    RecordSet.Fields("IDDOC").value=ИдДок; 
	КонецЕсли;
    Для Каждого Свойство Из СтруктураПараметровДокументаСБИС Цикл
		ОписаниеПоля = ОписаниеПоляДБФПоИмениСвойства(Свойство.Ключ);
		Recordset.Fields(ОписаниеПоля.Имя).value = Лев(Свойство.Значение, ОписаниеПоля.Длина);
	КонецЦикла;
    RecordSet.Update();
КонецФункции

// Для массива документов СБИС ищет по идентификаторам пакетов и вложений документы 1С	
&НаСервере
Процедура ПолучитьТаблицуДокументов1СПоИдВложенияСБИСНаСервере(МассивДокументов, МассивИдентификаторов)
	БД = ПолучитьСоединениеDBF(ПараметрыСоединения);
	
	ТаблицаДокументов1С = Новый ТаблицаЗначений;
	ТаблицаДокументов1С.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(999)));
	ТаблицаДокументов1С.Колонки.Добавить("ИдВложения", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(999)));
	ТаблицаДокументов1С.Колонки.Добавить("Ссылка");
	//ФайлСтатусов = Новый Файл(КаталогНастроек+"\State.dbf");
	//Если ФайлСтатусов.Существует() Тогда
	//	БД = Новый COMОбъект("ADODB.Connection");
	//	БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//			   "Data Source=" + КаталогНастроек + ";Extended Properties=""DBASE IV;"";");
	ТекстЗапроса	= "Select * from {ФайлБД} where {ФайлБД}.IDPACK like'{ИдПакета}%' and {ФайлБД}.IDINPACK like'{ИдВложения}%'";
	ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "{ФайлБД}", ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.ИмяФайла);
	Для Каждого Элемент Из МассивИдентификаторов Цикл				   
		RecordSet = Новый ComОбъект("ADODB.Recordset");
		Recordset.CursorLocation = 3;
		Recordset.Open(СтрЗаменить(СтрЗаменить(ТекстЗапроса,
			"{ИдПакета}",	Элемент.Ид),
			"{ИдВложения}",	Элемент.ИдВложения),БД,2,3);
		
		//Recordset.Open("Select * from State where State.IDPACK like'"+Элемент.Ид+"%' and State.IDINPACK like'"+Элемент.ИдВложения+"%'",БД,2,3);
		Если Recordset.EOF=Ложь Тогда 
			ТипИдДок = RecordSet.Fields("IDDOC").value;
			ТипДок = Лев(ТипИдДок, Найти(ТипИдДок, ":")-1);
			ИдДок = СокрЛП(Сред(ТипИдДок, Найти(ТипИдДок, ":")+1));
			СсылкаДок = Документы[ТипДок].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдДок));
			НоваяСтрока = ТаблицаДокументов1С.Добавить();
			НоваяСтрока.Ид = Элемент.Ид;
			НоваяСтрока.ИдВложения = Элемент.ИдВложения;
			НоваяСтрока.Ссылка = СсылкаДок;
		КонецЕсли;
	КонецЦикла;
	//КонецЕсли;
	//====================================================================================
	Для каждого стр из МассивДокументов цикл 
		Если стр.СоставПакета[0].Значение.Свойство("Вложение") Тогда
			ДокументПроведен=-1;
			Для Каждого Вложение Из стр.СоставПакета[0].Значение.Вложение Цикл
				Если Не Вложение.Свойство("Служебный") или Вложение.Служебный = "Нет" Тогда
					
					массивДоков =  ТаблицаДокументов1С.найтиСтроки(Новый Структура("Ид, ИдВложения", стр.ИдСБИС, Вложение.Идентификатор) ) ;
					Если массивДоков.количество()>0 тогда 
						Документы1С = Новый СписокЗначений;
						Для Каждого Элемент Из массивДоков Цикл
							Документы1С.Добавить(Элемент.Ссылка);
							стр.Документы1С.Добавить(Элемент.Ссылка);
						КонецЦикла;
						Вложение.Вставить("Документы1С", Документы1С);
						стр.Вставить("СуммаДокумента1С", 0);
						стр.Вставить("Дельта", 0);
						ДокументПроведен = ?(ДокументПроведен=-1,сбисИндексКартинкиПоДокументу1С(массивДоков[0].Ссылка), ДокументПроведен);
						стр.Вставить("Проведен", ДокументПроведен);
					Иначе
						Вложение.Вставить("Документы1С",Новый СписокЗначений);
						стр.Вставить("СуммаДокумента1С", 0);
						Если Не стр.Свойство("Проведен") Тогда
							стр.Вставить("Проведен", -1);
						КонецЕсли;
						стр.Вставить("Дельта", 0);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// проставляет статусы по идентификаторам пакетов при получении списка изменений	
&НаСервере
Процедура ЗаписатьИзмененияПоДокументам1СНаСервере(МассивДокументов, Ини)
	БД = ПолучитьСоединениеDBF(ПараметрыСоединения);
	
	ТекстЗапроса	= "Select * from {ФайлБД} where {ФайлБД}.IDPACK like'{ИдПакета}%'";
	ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "{ФайлБД}", ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.ИмяФайла);
	Для Каждого СоставПакета Из МассивДокументов Цикл
		Если СоставПакета.Свойство("Идентификатор") и СоставПакета.Свойство("Состояние") Тогда
			Если СоставПакета.Свойство("Редакция") и СоставПакета.Редакция[0].Актуален = "Нет" Тогда  // на документах 1С проставляем статусы только для актуальных редакций
				Продолжить;
			КонецЕсли;
			RecordSet = Новый ComОбъект("ADODB.Recordset");
			Recordset.CursorLocation = 3;
			Recordset.Open(СтрЗаменить(ТекстЗапроса, "{ИдПакета}", СоставПакета.Идентификатор),БД,2,3);
			Пока Recordset.EOF = Ложь Цикл
				// alo <<
				СоставПакета.вставить("Документы1С",новый списокЗначений);
				
				ТипИдДок = RecordSet.Fields("IDDOC").value;
				ТипДок = Лев(ТипИдДок, Найти(ТипИдДок, ":")-1);
				ИдДок = СокрЛП(Сред(ТипИдДок, Найти(ТипИдДок, ":")+1));
				СсылкаДок = Документы[ТипДок].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдДок));
				Если сбисПриоритетСтатуса(СоставПакета.Состояние.Название) > сбисПриоритетСтатуса(RecordSet.Fields("STATE").value) Тогда
					RecordSet.Fields("STATE").value = СоставПакета.Состояние.Название; 
					RecordSet.Update();
					СоставПакета.Документы1С.Добавить(СсылкаДок);
					// alo >>
				КонецЕсли;
				
				ИмяДокумента = СсылкаДок.Метаданные().Имя;
				//Если Найти(нрег(ИмяДокумента), "фактура")>0 Тогда // в фактуре проставляем дату и способ выставления
				Если Ини.Свойство(ИмяДокумента) и Ини[ИмяДокумента].Свойство("мФайл") Тогда
					Попытка
						Если СоставПакета.Свойство("Событие") и СоставПакета.Событие[0].Название = "Подтверждение даты получения" Тогда
							Событие=СоставПакета.Событие[0];
							Для Каждого Элемент Из Ини[ИмяДокумента].мФайл Цикл
								Если Элемент.Значение.Свойство("ЗаполнятьДатуСпособВыставления") и Элемент.Значение.ЗаполнятьДатуСпособВыставления.Значение ="'Истина'" Тогда
									ИмяРеквизитаДатыВыставления = Сред(Элемент.Значение.ДатаВыставления.Значение, Найти(Элемент.Значение.ДатаВыставления.Значение, ".")+1);
									ИмяРеквизитаСпособаВыставления = Сред(Элемент.Значение.СпособВыставления.Значение, Найти(Элемент.Значение.СпособВыставления.Значение, ".")+1);
									ЗначениеСпособаВыставления = Элемент.Значение.СпособВыставления.Вычислить;
									ДокОбъект = СсылкаДок.ПолучитьОбъект();
									ДокОбъект[ИмяРеквизитаДатыВыставления] = Событие.ДатаВремяДокумента;
									ДокОбъект[ИмяРеквизитаСпособаВыставления] = ЗначениеСпособаВыставления;
									ДокОбъект.Записать();
								КонецЕсли;
								Прервать;
							КонецЦикла;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
				//КонецЕсли;
				RecordSet.MoveNext();
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

// удаляет свойства для документа 1С (при удалении сопоставления)
&НаСервере
Функция УдалитьПараметрыДокументаСБИСНаСервере(СтруктураПараметровДокументаСБИС, ДокументСсылка)
	//ФайлСтатусов = Новый Файл(КаталогНастроек+"\State.dbf");
	//Если ФайлСтатусов.Существует() Тогда
	//	БД = Новый COMОбъект("ADODB.Connection");
	//	БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//			   "Data Source=" + КаталогНастроек + ";Extended Properties=""DBASE IV;"";");
	БД = ПолучитьСоединениеDBF(ПараметрыСоединения);
	
	ИдДок = ДокументСсылка.Метаданные().Имя+":"+строка(ДокументСсылка.УникальныйИдентификатор());
	RecordSet = Новый ComОбъект("ADODB.Recordset");
	Recordset.CursorLocation = 3;
	
	ТекстЗапроса	= "Select * from {ФайлБД} where {ФайлБД}.IDDOC like'{ИдПакета}%'";
	ТекстЗапроса	= СтрЗаменить(СтрЗаменить(ТекстЗапроса, 
						"{ФайлБД}",		ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.ИмяФайла),
						"{ИдПакета}",	ИдДок);
	Recordset.Open(ТекстЗапроса, БД, 2, 3);
	
	Если Recordset.EOF=Ложь Тогда 
		Recordset.Delete(); 
	КонецЕсли;
	//КонецЕсли;
КонецФункции

&НаСервере
Функция УдалитьПараметрыДокументаСБИСПарамНаСервере(СтруктураПараметровДокументаСБИС,ДокументСсылка)
	УдалитьПараметрыДокументаСБИСНаСервере(СтруктураПараметровДокументаСБИС,ДокументСсылка);
КонецФункции

&НаСервере
Функция НайтиДокументы1СПоПакетуСБИСНаСервере(ПолныйСоставПакета, КэшИни, МассивСлужебных)
	БД = ПолучитьСоединениеDBF(ПараметрыСоединения);
	сч = 0;
	Для Каждого Вложение Из ПолныйСоставПакета.Вложение Цикл
		Если Не Вложение.Свойство("Служебный") или Вложение.Служебный = "Нет" Тогда
			ДанныеДокумента1С = НайтиДокументы1СПоИдВложенияСБИСНаСервере(ПолныйСоставПакета.Идентификатор, Вложение.Идентификатор);
			ПолныйСоставПакета.Вложение[сч].Вставить("Документы1С", Новый СписокЗначений);
			ПолныйСоставПакета.Вложение[сч].Вставить("Документ1СПроведен");
			Если ЗначениеЗаполнено(ДанныеДокумента1С) Тогда
				ПолныйСоставПакета.Вложение[сч].Документы1С=ДанныеДокумента1С.Ссылки;
				ПолныйСоставПакета.Вложение[сч].Документ1СПроведен=ДанныеДокумента1С.Проведен;
			КонецЕсли;
		Иначе
			МассивСлужебных.Добавить(сч);
		КонецЕсли;
		сч = сч+1;
	КонецЦикла;		
КонецФункции

&НаСервере
Функция НайтиДокументы1СПоИдВложенияСБИСНаСервере(Ид, ИдВложения)
	// Ищет документы 1С По идентификаторам пакета и вложения
	Документы1С = Новый СписокЗначений;
	ЕстьПроведенный = Ложь;
	//ФайлСтатусов = Новый Файл(КаталогНастроек+"\State.dbf");
	//Если ФайлСтатусов.Существует() Тогда
	//	БД = Новый COMОбъект("ADODB.Connection");
	//	БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//			   "Data Source=" + КаталогНастроек + ";Extended Properties=""DBASE IV;"";");
	БД = ПолучитьСоединениеDBF(ПараметрыСоединения);
	
	ТекстЗапроса	= "Select * from {ФайлБД} where {ФайлБД}.IDPACK like'{ИдПакета}%' and {ФайлБД}.IDINPACK like'{ИдВложения}%'";
	ТекстЗапроса	= СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекстЗапроса, 
						"{ФайлБД}",		ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.ИмяФайла),
						"{ИдПакета}",	Ид),
						"{ИдВложения}",	ИдВложения);
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
	Recordset.CursorLocation = 3;
	
	
	Recordset.Open(ТекстЗапроса, БД, 2, 3);
	Пока Recordset.EOF=Ложь Цикл 
		ТипИдДок = RecordSet.Fields("IDDOC").value;
		ТипДок = Лев(ТипИдДок, Найти(ТипИдДок, ":")-1);
		ИдДок = СокрЛП(Сред(ТипИдДок, Найти(ТипИдДок, ":")+1));
		СсылкаДок = Документы[ТипДок].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдДок));
		Документы1С.Добавить(СсылкаДок);
		Попытка    // попытка на случай отправки справочника, а не документа
			Если СсылкаДок.Проведен Тогда
				ЕстьПроведенный = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
		RecordSet.MoveNext();
	КонецЦикла;
	//КонецЕсли;
	
	Возврат Новый Структура("Ссылки, Проведен",Документы1С, ЕстьПроведенный);
КонецФункции

&НаСервере
Функция ПрочитатьПараметрыДокументаСБИСНаСервере(ДокументСсылка, ИмяСвойства)
	// возвращает свойство (статус, идентификатор пакета, идентификатор вложения) документа 1С 	
	ИмяПоля = ИмяПоляДБФПоИмениСвойства(ИмяСвойства);
	//ФайлСтатусов = Новый Файл(КаталогНастроек+"\State.dbf");
	//Если ФайлСтатусов.Существует() Тогда
	//	БД = Новый COMОбъект("ADODB.Connection");
	//	БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//			   "Data Source=" + КаталогНастроек + ";Extended Properties=""DBASE IV;"";");
	БД		= ПолучитьСоединениеDBF(ПараметрыСоединения);
	ИдДок	= ДокументСсылка.Метаданные().Имя+":"+строка(ДокументСсылка.УникальныйИдентификатор());
	
	ТекстЗапроса	= "Select * from {ФайлБД} where {ФайлБД}.IDDOC='{ИдДок}'";
	ТекстЗапроса	= СтрЗаменить(СтрЗаменить(ТекстЗапроса, 
						"{ФайлБД}",		ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.ИмяФайла),
						"{ИдДок}",		ИдДок);
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
	Recordset.CursorLocation = 3;
	Recordset.Open(ТекстЗапроса, БД, 2, 3);
	Если Recordset.EOF = Ложь Тогда 
		Возврат RecordSet.Fields(ИмяПоля).value;
	КонецЕсли;	
	//КонецЕсли;
	Возврат "";
КонецФункции

&НаСервере
Процедура ПолучитьТаблицуДокументов1СПоИдПакетаСБИСНаСервере(МассивДокументов)
	// Для массива документов СБИС ищет по идентификаторам пакетов документы 1С	
	ТаблицаДокументов1С = Новый ТаблицаЗначений;
	ТаблицаДокументов1С.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(999)));
	ТаблицаДокументов1С.Колонки.Добавить("Ссылка");
	//ФайлСтатусов = Новый Файл(КаталогНастроек+"\State.dbf");
	//Если ФайлСтатусов.Существует() Тогда
	//	БД = Новый COMОбъект("ADODB.Connection");
	//	БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//			   "Data Source=" + КаталогНастроек + ";Extended Properties=""DBASE IV;"";");
	БД = ПолучитьСоединениеDBF(ПараметрыСоединения);
	
	ТекстЗапроса	= "Select * from {ФайлБД} where {ФайлБД}.IDPACK like'{ИдПакета}%'";
	ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "{ФайлБД}",	ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.ИмяФайла);
	Для Каждого Элемент Из МассивДокументов Цикл				   
		RecordSet = Новый ComОбъект("ADODB.Recordset");
		Recordset.CursorLocation = 3;
		Recordset.Open(СтрЗаменить(ТекстЗапроса, "{ИдПакета}",	Элемент.ИдСБИС),БД,2,3);
		Если Recordset.EOF=Ложь Тогда 
			ТипИдДок = RecordSet.Fields("IDDOC").value;
			ТипДок = Лев(ТипИдДок, Найти(ТипИдДок, ":")-1);
			ИдДок = СокрЛП(Сред(ТипИдДок, Найти(ТипИдДок, ":")+1));
			СсылкаДок = Документы[ТипДок].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдДок));
			НоваяСтрока = ТаблицаДокументов1С.Добавить();
			НоваяСтрока.Ид = Элемент.ИдСБИС;
			НоваяСтрока.Ссылка = СсылкаДок;
		КонецЕсли;
	КонецЦикла;
	
	//КонецЕсли;
	//====================================================================================
	Для каждого стр из МассивДокументов цикл 
		массивДоков =  ТаблицаДокументов1С.найтиСтроки(Новый Структура("Ид", стр.ИдСБИС) ) ;
		Если массивДоков.количество()>0 тогда 
			Документы1С = Новый СписокЗначений;
			Для Каждого Элемент Из массивДоков Цикл
				Документы1С.Добавить(Элемент.Ссылка);
			КонецЦикла;
			стр.Вставить("Документы1С", Документы1С);
			Попытка
				стр.Вставить("СуммаДокумента1С", массивДоков[0].Ссылка.СуммаДокумента);
				Дельта = Число(стр.Сумма) - стр.СуммаДокумента1С;
				Дельта = ?(Дельта<0,-Дельта,Дельта);
				стр.Вставить("Дельта", Дельта);
			Исключение
				стр.Вставить("СуммаДокумента1С", 0);
				стр.Вставить("Дельта", 0);
			КонецПопытки;
			стр.Вставить("Проведен", сбисИндексКартинкиПоДокументу1С(массивДоков[0].Ссылка));
		Иначе
			стр.Вставить("Документы1С",Новый СписокЗначений);
			стр.Вставить("СуммаДокумента1С", 0);
			стр.Вставить("Проведен", -1);
			стр.Вставить("Дельта", 0);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтатусыВТаблицеДокументов1СНаСервере(МассивДокументов1С, ПараметрыФильтра)
	// Используется при построении реестров 1С. Проставляет статусы документов и накладывает фильтр по состоянию документов.
	// Используется только в случае хранения статусов в ДБФ, т.к. при хранении в 1С статусы получаем сразу в запросе.
	ОтфильтрованныйМассивДокументов1С = Новый Массив;
	
	БД = ПолучитьСоединениеDBF();
	
	КоличествоДок = МассивДокументов1С.Количество();
	Шаг = 2000;
	Счетчик = 0;
	ТекущееКоличество = 0;
	
	ТаблицаСтатусов = Новый ТаблицаЗначений;
	ТаблицаСтатусов.Колонки.Добавить("Документ1С");
	ТаблицаСтатусов.Колонки.Добавить("Статус");
	ТаблицаСтатусов.Колонки.Добавить("ИдСБИС");
	
	ТекстЗапроса	= "Select * from {ФайлБД} where {ФайлБД}.IDDOC IN(";
	ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "{ФайлБД}", ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.ИмяФайла);
	
	// делаем запросы статусов из ДБФ по партиям для каждых 2000 документов 1С (разбиваем по частям, т.к. при большом количестве документов ругается "слишком сложный запрос")
	Пока ТекущееКоличество< КоличествоДок Цикл
		RecordSet = Новый ComОбъект("ADODB.Recordset");
		Recordset.CursorLocation = 3;
		sql_str = ТекстЗапроса;
		ВремКоличество = Мин(ТекущееКоличество+Шаг, КоличествоДок)-1;
		Для Счетчик=ТекущееКоличество По ВремКоличество Цикл
			ИдДок=МассивДокументов1С[Счетчик].СоставПакета[0].Значение.Метаданные().Имя+":"+строка(МассивДокументов1С[Счетчик].СоставПакета[0].Значение.УникальныйИдентификатор());
			
			sql_str = sql_str+"'"+ИдДок + "', ";	
		КонецЦикла;
		sql_str = Лев(sql_str, СтрДлина(sql_str)-2);
		sql_str = sql_str+")";
		Recordset.Open(sql_str,БД,2,3);
		
		Пока Recordset.EOF=Ложь Цикл 
			НоваяСтр	= ТаблицаСтатусов.Добавить();
			ТипИдДок	= RecordSet.Fields("IDDOC").value;
			ТипДок		= Лев(ТипИдДок, Найти(ТипИдДок, ":")-1);
			ИдДок		= СокрЛП(Сред(ТипИдДок, Найти(ТипИдДок, ":")+1));
			СсылкаДок	= Документы[ТипДок].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдДок));
			
			НоваяСтр.Документ1С = СсылкаДок;
			НоваяСтр.Статус		= RecordSet.Fields("STATE").value;
			НоваяСтр.ИдСБИС		= RecordSet.Fields("IDPACK").value;
			RecordSet.MoveNext();
		КонецЦикла;
		ТекущееКоличество = ТекущееКоличество + Шаг;
	КонецЦикла;
	// проставляем статусы в таблице документов 1С, накладываем фильтр по состоянию документа
	Для Каждого Стр из МассивДокументов1С цикл 
		МассивДоков =  ТаблицаСтатусов.НайтиСтроки(Новый Структура("Документ1С", стр.Документ1С) ) ;
		Если МассивДоков.количество() тогда 
			ИндексКартинки	= СбисИндексКартинкиПоСтатусуЭД(массивДоков[0].Статус);
			ИдПакетаСбис	= МассивДоков[0].ИдСБИС;
		Иначе
			ИндексКартинки	= -1;
			ИдПакетаСбис	= "";
		КонецЕсли;
		Если ПараметрыФильтра.ФильтрСостояние = "Все документы" или
			(ПараметрыФильтра.ФильтрСостояние = "Недоставленные" и (ИндексКартинки=1 или ИндексКартинки=2 или ИндексКартинки=9)) или
			((ПараметрыФильтра.ФильтрСостояние = "Требующие ответа" или ПараметрыФильтра.ФильтрСостояние = "Не получен ответ") и ИндексКартинки=4) или 
			(ПараметрыФильтра.ФильтрСостояние = "Утвержденные" и ИндексКартинки=6) или 
			(ПараметрыФильтра.ФильтрСостояние = "Отклоненные" и ИндексКартинки=5) или
			(ПараметрыФильтра.ФильтрСостояние = "С ошибками" и ИндексКартинки=3) или
			(ПараметрыФильтра.ФильтрСостояние = "Удаленные" и (ИндексКартинки=7 или ИндексКартинки=8)) или // alo
			(ПараметрыФильтра.ФильтрСостояние = "Удаленные контрагентом" и ИндексКартинки=7) или // alo
			(ПараметрыФильтра.ФильтрСостояние = "Удаленные мной" и ИндексКартинки=8) или // alo
			(ПараметрыФильтра.ФильтрСостояние = "Не отправленные" и ИндексКартинки=-1) Тогда
			Стр.Вставить("Статус", ИндексКартинки);
			Стр.Вставить("ИдСБИС", ИдПакетаСбис);
			ОтфильтрованныйМассивДокументов1С.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	
	
	//Для Каждого Стр Из МассивДокументов1С Цикл
	//	Статус =  ПрочитатьПараметрыДокументаСБИС(Стр.СоставПакета[0].Значение, КаталогНастроек, "ДокументСБИС_Статус");
	//	ИндексКартинки = сбисИндексКартинкиПоСтатусуЭД(Статус);
	//	Если ПараметрыФильтра.ФильтрСостояние = "Все документы" или
	//		(ПараметрыФильтра.ФильтрСостояние = "Недоставленные" и (ИндексКартинки=1 или ИндексКартинки=2)) или
	//		((ПараметрыФильтра.ФильтрСостояние = "Требующие ответа" или ПараметрыФильтра.ФильтрСостояние = "Не получен ответ") и ИндексКартинки=4) или 
	//		(ПараметрыФильтра.ФильтрСостояние = "Утвержденные" и ИндексКартинки=6) или 
	//		(ПараметрыФильтра.ФильтрСостояние = "Отклоненные" и ИндексКартинки=5) или
	//		(ПараметрыФильтра.ФильтрСостояние = "С ошибками" и ИндексКартинки=3) или
	//		(ПараметрыФильтра.ФильтрСостояние = "Удалено контрагентом" и ИндексКартинки=7) или
	//		(ПараметрыФильтра.ФильтрСостояние = "Удаленные" и ИндексКартинки=8) или
	//		(ПараметрыФильтра.ФильтрСостояние = "Несопоставленные" и ИндексКартинки=-1) Тогда
	//		Стр.Вставить("Статус", ИндексКартинки);
	//		ОтфильтрованныйМассивДокументов1С.Добавить(Стр);
	//	КонецЕсли;
	//КонецЦикла;
	Возврат ОтфильтрованныйМассивДокументов1С;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область include_core2_vo2_Статусы_DBF_ПодключениеDBF

// Функция - Получает com-соединение с ДБФ статусов, чтобы при последующих операциях со статусами сразу обращаться к соединению, а не получать заново
//
// Параметры:
//  ПараметрыСоединенияВходящие	 - Структура
//		Файл - Строка (обязательный).
//		Ключ - Строка (необязательный)	 - если не указан, то Файл
//		Тип - Строка (обязательный) - для получения специфичной строки соединения DBF - Статусы/Сопоставление
//  ДопПараметры	 - Структура	 - для расширения
// 
// Возвращаемое значение:
//   - COM объект, соединение с DBF
//
Функция ПолучитьСоединениеDBF(ПараметрыСоединенияВходящие=Неопределено, ДопПараметры=Неопределено) Экспорт
	Перем КлючDBF, СоединениеСДБФ;
	МодульОбъектаСервер = МодульОбъектаСервер();
	Попытка
		Если Не ПараметрыСоединения.Свойство("СоединениеСДБФ", СоединениеСДБФ) Тогда
			СоединениеСДБФ = МодульОбъектаСервер.РаботаСДБФ_ПолучитьСоединениеСДБФ(ПараметрыСоединения.РаботаСДБФ, ПараметрыСоединения.ОписаниеСоединенияДБФ.Ключ);
			Если СоединениеСДБФ = Неопределено Тогда
				СоединениеСДБФ = МодульОбъектаСервер.РаботаСДБФ_СоздатьСоединениеСДБФ(ПараметрыСоединения.РаботаСДБФ, ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры);
			КонецЕсли;
			ПараметрыСоединения.Вставить("СоединениеСДБФ", СоединениеСДБФ);
		КонецЕсли;
		БД = МодульОбъектаСервер.РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СоединениеСДБФ);
		ПроверитьФайлСтатусовДБФ(БД);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаСервер.ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Статусы_ДБФ.ПолучитьСоединениеDBF")
	КонецПопытки;
	Возврат БД;
КонецФункции

&НаСервере
Процедура ПроверитьФайлСтатусовДБФ(СоединениеБД)
	СоединениеСДБФ			= МодульОбъектаСервер().РаботаСДБФ_ПолучитьСоединениеСДБФ(ПараметрыСоединения.РаботаСДБФ, ПараметрыСоединения.ОписаниеСоединенияДБФ.Ключ);
	ОписаниеФайла			= СоединениеСДБФ.Файлы.Получить(ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.ИмяФайла);
	
	ИмяБазыСтатусов			= ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.ИмяФайла;
	ИмяФайлаСтатусов		= ИмяБазыСтатусов + "." + ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.Расширение;
	Если ОписаниеФайла.Есть = Неопределено Тогда
		ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + ИмяФайлаСтатусов);
		ОписаниеФайла.Есть = ФайлСтатусов.Существует();
	КонецЕсли;	
	Если ОписаниеФайла.Есть Тогда	
		Если Не ОписаниеФайла.Проверен Тогда
			RecordSet = Новый ComОбъект("ADODB.Recordset");
		    Recordset.CursorLocation = 3;
			Recordset.Open("Select top 1 * from " + ИмяБазыСтатусов, СоединениеБД, 2, 3);
			
			Если		Recordset.Fields.Count = 6 Тогда
				//Всё ок
			ИначеЕсли	Recordset.Fields.Count = 4 Тогда
				ИмяБазыБэкапа	= ИмяБазыСтатусов + "OLD";
				ИмяФайлаБэкапа	= ИмяБазыБэкапа + "." + ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.Расширение;
				Попытка
					ПереместитьФайл(СоединениеСДБФ.Путь + ИмяФайлаСтатусов, СоединениеСДБФ.Путь + ИмяФайлаБэкапа);
				Исключение
					ИнфоОбОшибке = ИнформацияОбОшибке();
					МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Статусы_ДБФ.ПроверитьФайлСтатусовДБФ.ПереместитьФайл", , "Не удалось обновить файл сопоставления");
				КонецПопытки;
				
				ОписаниеФайла.Есть = НовыйФайлСтатусовДБФ(СоединениеСДБФ, СоединениеБД).Существует();
				Если Не ОписаниеФайла.Есть Тогда
					ПереместитьФайл(СоединениеСДБФ.Путь + ИмяФайлаБэкапа, СоединениеСДБФ.Путь + ИмяФайлаСтатусов);
					МодульОбъектаСервер().ВызватьСбисИсключениеСервер(, "Статусы_ДБФ.ПроверитьФайлСтатусовДБФ", 772,, "Не удалось создать файл статусов " + СоединениеСДБФ.Путь + ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.ИмяФайла);
				КонецЕсли;
				
				Попытка
					СоединениеБД.Execute("INSERT INTO " + ИмяБазыСтатусов + "(IDPACK, IDINPACK, IDDOC, STATE) SELECT IDPACK, IDINPACK, IDDOC, STATE FROM " + ИмяБазыБэкапа);
				Исключение
					ПереместитьФайл(СоединениеСДБФ.Путь + ИмяФайлаБэкапа, СоединениеСДБФ.Путь + ИмяФайлаСтатусов);
					ИнфоОбОшибке = ИнформацияОбОшибке();
					МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Статусы_ДБФ.ПроверитьФайлСтатусовДБФ");
				КонецПопытки;
			КонецЕсли;           
			ОписаниеФайла.Проверен	= Истина;
			Recordset.Close();
		КонецЕсли;
	Иначе
		ОписаниеФайла.Есть = НовыйФайлСтатусовДБФ(СоединениеСДБФ, СоединениеБД).Существует();
		Если Не ОписаниеФайла.Есть Тогда
			МодульОбъектаСервер().ВызватьСбисИсключениеСервер(, "Статусы_ДБФ.ПроверитьФайлСтатусовДБФ", 772,, "Не удалось создать файл статусов " + СоединениеСДБФ.Путь + ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.ИмяФайла);
		КонецЕсли;
		ОписаниеФайла.Проверен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НовыйФайлСтатусовДБФ(СоединениеСДБФ, СоединениеБД)
	
	ИмяФайла = ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.ИмяФайла + "." + ПараметрыСоединения.ОписаниеСоединенияДБФ.Параметры.Расширение;
	Попытка
		СоединениеБД.Execute("Create Table " + ИмяФайла + "(IDPACK char(120), IDINPACK char(120), IDDOC char(240), STATE char(240), IDACC char(40))");
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "СоединениеБД.Execute");
	КонецПопытки;
	Возврат Новый Файл(СоединениеСДБФ.Путь + ИмяФайла);
	
КонецФункции

&НаСервереБезКонтекста
Процедура  ЗавершитьСоединениеСDBFНаСервере(ПараметрыСоединения) Экспорт
	ПараметрыСоединения.Подключено = Ложь;
	ПараметрыСоединения.Удалить("Хранилище");
	ПараметрыСоединения.ВызывалосьСоздание = Ложь;
КонецПроцедуры
	
#КонецОбласти

#Область include_core2_vo2_Статусы_DBF_СерверБезКонтекста

//Функция возвращает индекс картинки по состоянию документа 1С
&НаСервереБезКонтекста
Функция СбисИндексКартинкиПоДокументу1С(Документ1С) Экспорт
	Попытка
		Если Документ1С.Проведен Тогда 
			Возврат 0;
		ИначеЕсли Документ1С.ПометкаУдаления Тогда 
			Возврат 2;
		Иначе
			Возврат 1;
		КонецЕсли;
	Исключение
	    Возврат 0;
	КонецПопытки;
КонецФункции

//Функция возвращает индекс картинки по статусу электронного документа	
&НаСервереБезКонтекста
Функция СбисИндексКартинкиПоСтатусуЭД(СтатусЭД) Экспорт
	Если		Найти(нрег(СтатусЭД), "выгружен")=1 или Найти(нрег(СтатусЭД), "загружен на сервер")=1 или Найти(нрег(СтатусЭД), "документ редактируется")=1 или Найти(нрег(СтатусЭД), "есть документ")=1 или Найти(нрег(СтатусЭД), "в обработке")=1    
		Или	СтатусЭД = "10"
		Или	СтатусЭД = "0"	Тогда// Выгружен или загружен на сервер 
		Возврат 0;
	ИначеЕсли	Найти(нрег(СтатусЭД), "отослано приглашение")=1
		Или	СтатусЭД = "2" Тогда// Отправлено приглашение
		Возврат 1;
	ИначеЕсли	Найти(нрег(СтатусЭД), "отправлен")=1
		Или	СтатусЭД = "3"	Тогда// Отправлен
		Возврат 2;
	ИначеЕсли	Найти(нрег(СтатусЭД), "ошибка")>0 или Найти(нрег(СтатусЭД), "проблемы при доставке")>0
		Или	СтатусЭД = "6"	Тогда// Ошибки при отправке или при доставке
		Возврат 3;
	ИначеЕсли	Найти(нрег(СтатусЭД),"на утверждении")=1 или Найти(нрег(СтатусЭД),"доставлен")=1
		Или СтатусЭД = "4"	Тогда// Доставлен
		Возврат 4;
	ИначеЕсли	Найти(нрег(СтатусЭД), "выполнение завершено с проблемами")=1 
		Или	СтатусЭД = "9"	Тогда// Отклонен
		Возврат 5;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено успешно")=1 
		Или СтатусЭД = "7"	Тогда// Утвержден
		Возврат 6;
	ИначеЕсли	Найти(нрег(СтатусЭД), "удален")=1 или Найти(нрег(СтатусЭД), "аннулирован")=1 
		Или СтатусЭД = "20"	Тогда// Удален контрагентом
		Возврат 7;
	ИначеЕсли Найти(нрег(СтатусЭД), "отозван мной")=1 Тогда                        // Удален мной
		Возврат 8;
	ИначеЕсли Найти(нрег(СтатусЭД), "ожидает подписания")=1 Или СтатусЭД = "23"	Тогда                        // Ожидает подписания
		Возврат 9;
	Иначе
		Возврат -1;
	КонецЕсли;
КонецФункции

//Возвращает соответствие названия статуса-DBF
&НаСервереБезКонтекста
Функция ИмяПоляДБФПоИмениСвойства(ИмяСвойства)
	Если ИмяСвойства = "ДокументСБИС_Статус" Тогда
		Возврат "STATE";
	ИначеЕсли ИмяСвойства = "ДокументСБИС_Ид" Тогда
		Возврат "IDPACK";
	ИначеЕсли ИмяСвойства = "ДокументСБИС_ИдВложения" Тогда
		Возврат "IDINPACK";
	КонецЕсли;	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеПоляДБФПоИмениСвойства(ИмяСвойства)
	
	Результат = Новый Структура("Имя,Длина");
	Если ИмяСвойства = "ДокументСБИС_Статус" Тогда
		Результат.Имя	= "STATE";
		Результат.Длина	= 240;
	ИначеЕсли ИмяСвойства = "ДокументСБИС_Ид" Тогда
		Результат.Имя	= "IDPACK";
		Результат.Длина	= 120;
	ИначеЕсли ИмяСвойства = "ДокументСБИС_ИдВложения" Тогда
		Результат.Имя	= "IDINPACK";
		Результат.Длина	= 120;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	Результат = Новый ТаблицаЗначений;
	Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
		Возврат Результат;
	Иначе 
		Образец = МассивСтруктур[0];
		Для Каждого  Стр из Образец Цикл
			Результат.Колонки.Добавить(Стр.Ключ );
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из МассивСтруктур Цикл
		СтрТ = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТ, Стр);		
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Функция возвращает индекс картинки по статусу электронного документа	
&НаСервереБезКонтекста
функция сбисПриоритетСтатуса(СтатусЭД)
	Если Найти(нрег(СтатусЭД), "выгружен")=1 или Найти(нрег(СтатусЭД), "загружен на сервер")=1 или Найти(нрег(СтатусЭД), "документ редактируется")=1 или Найти(нрег(СтатусЭД), "есть документ")=1 Тогда     // Выгружен или загружен на сервер
		Возврат 0;
	ИначеЕсли Найти(нрег(СтатусЭД), "отослано приглашение")=1 Тогда      // Отправлено приглашение
		Возврат 1;
	ИначеЕсли Найти(нрег(СтатусЭД), "отправлен")=1 Тогда     // Отправлен
		Возврат 2;
	ИначеЕсли Найти(нрег(СтатусЭД), "ошибка")>0 или Найти(нрег(СтатусЭД), "проблемы при доставке")>0 Тогда     // Ошибки при отправке или при доставке
		Возврат 3;
	ИначеЕсли Найти(нрег(СтатусЭД),"на утверждении")=1 или Найти(нрег(СтатусЭД),"доставлен")=1 Тогда                        // Доставлен
		Возврат 4;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено с проблемами")=1 Тогда                        // Отклонен
		Возврат 5;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено успешно")=1 Тогда                        // Утвержден
		Возврат 6;
	ИначеЕсли Найти(нрег(СтатусЭД), "удален")=1 или Найти(нрег(СтатусЭД), "аннулирован")=1 Тогда                        // Удален контрагентом
		Возврат 7;
	ИначеЕсли Найти(нрег(СтатусЭД), "отозван мной")=1 Тогда                        // Удален мной
		Возврат 8;
	Иначе
		Возврат -1;
	КонецЕсли;
КонецФункции

//Не поддерживается, заглушка
&НаСервереБезКонтекста
Функция ПолучитьИдДокументаДопСвойства(Знач СсылкаНаОбъект, Знач ДопПараметры) Экспорт
	Возврат Неопределено;
КонецФункции	

//Не поддерживается, заглушка
&НаСервереБезКонтекста
Функция ПрочитатьПараметрыДокументовСБИС(Знач СписокСсылок,Знач МассивСвойств,Знач Конфигурация,Знач ДополнительныеПараметры) Экспорт
	Возврат Неопределено;
КонецФункции

#КонецОбласти
