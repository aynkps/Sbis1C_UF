&НаКлиенте
Перем МестныйКэш Экспорт;

#Область include_local_ПолучитьМодульОбъекта

&НаСервере
Функция МодульОбъектаСервер()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция МодульОбъектаСерверБезКонтекста()
	Возврат Новый (Тип("ВнешняяОбработкаОбъект.СБИС"));
КонецФункции

&НаКлиенте
Функция МодульОбъектаКлиент() Экспорт
	Возврат ВладелецФормы.Кэш.СБИС.МодульОбъектаКлиент;
КонецФункции

#КонецОбласти // local_ПолучитьМодульОбъекта


#Область include_core2_vo2_Формы_ФормаРучногоСопоставленияКонтрагентов_Номенклатура_СБИС

#Область include_core2_vo2_Формы_ФормаРучногоСопоставленияКонтрагентов_Номенклатура_СБИС_Интерфейс_Вызов
&НаКлиенте 
Процедура Показать(ПараметрыОткрытия) Экспорт

	СбисУстановитьФорму(ПараметрыОткрытия);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОткрытьМодально();
	#Иначе
		Открыть();
    #КонецЕсли
КонецПроцедуры 


&НаКлиенте
Процедура СбисУстановитьФорму(ПараметрыОткрытия)
	
	ЭтаФорма.Заголовок = ПараметрыОткрытия.Заголовок;
	ТабличнаяЧасть.Очистить();
	МестныйКэш = ПараметрыОткрытия.Кэш; 
	ПараметрыФормы = Новый Структура("Результат");
	
	#Область ЗаполнениеДанныхНоменклатурыСБИС
	// Данные шапки берём неизменно из номенклатуры СБИС, изменения вносить запрещено
	НоменклатураКонтрагента = ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.Наименование;
	КоличествоСБИС 			= ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.Количество;
	Цена 					= ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.Цена;
	СтавкаНДС 				= ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.СтавкаНДС;
	СуммаНДСПоДокументу 	= ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.СуммаНДС;  
	СуммаПоДокументу 		= ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.Сумма;
	СуммаВсего              = ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.Сумма;
	СуммаНДСВсего			= ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.СуммаНДС;
	
	ОсталосьКоличествоВБазовыхЕдиницах = 0;
	ЗарезервированноеКоличествоВБазовыхЕдиницах = КоличествоСБИС * КоэффициентСБИС;
	
	
	Если ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.Свойство("GTIN") Тогда
		GTIN = ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.GTIN;
	КонецЕсли;
	
	Если ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.Свойство("КодПокупателя")  Тогда
		КодПокупателя = ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.КодПокупателя;		
	ИначеЕсли ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.Свойство("ТипКода") И ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.ТипКода = "КодПокупателя" Тогда
		КодПокупателя = ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.Код;
	Иначе 
		КодПокупателя = "";
	КонецЕсли;
	
	Если ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.Свойство("Характеристика") Тогда  
		Характеристика = ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.Характеристика;
	КонецЕсли;
	
	// Теоретически не может быть несколько единиц поставщика, но если такая фигня случится, то возьмём первую
	Если ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.Единицы.Количество() Тогда 
		Для Каждого ЕдиницаПоставщика Из ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС.Единицы Цикл 
			ЕдиницыИзмерения 		= ЕдиницаПоставщика.Значение.Название;
			КоэффициентСБИС 		= ЕдиницаПоставщика.Значение.Коэффициент; 
			Прервать;
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти //ЗаполнениеДанныхНоменклатурыСБИС
	
	Если МестныйКэш.Ини.Конфигурация.Свойство("Номенклатура") Тогда
		ИмяСправочникаНоменклатуры = СокрЛП(Сред(МестныйКэш.Ини.Конфигурация.Номенклатура.Значение, Найти(МестныйКэш.Ини.Конфигурация.Номенклатура.Значение, ".") + 1));
		СправочникНоменклатураПолноеИмя = "Справочник." + ИмяСправочникаНоменклатуры;
		ТипСправочникаНоменклатуры = "СправочникСсылка." + ИмяСправочникаНоменклатуры;
	Иначе
		СправочникНоменклатураПолноеИмя = "Справочник.Номенклатура";
		ТипСправочникаНоменклатуры = "СправочникСсылка.Номенклатура";
	КонецЕсли;

	Если МестныйКэш.Ини.Конфигурация.Свойство("СправочникЕдиницИзмеренийДляСопоставлений") Тогда
		СправочникЕдиницИмя = СокрЛП(Сред(МестныйКэш.Ини.Конфигурация.СправочникЕдиницИзмеренийДляСопоставлений.Значение, Найти(МестныйКэш.Ини.Конфигурация.СправочникЕдиницИзмеренийДляСопоставлений.Значение, ".")+1));
		СправочникЕдиницПолноеИмя = "Справочник." + СправочникЕдиницИмя;		
		ТипСправочникаЕдиницаИзмерения = МестныйКэш.Ини.Конфигурация.СправочникЕдиницИзмеренийДляСопоставлений.Значение;
	Иначе
		СправочникНоменклатураПолноеИмя = "Справочник.Номенклатура";
		ТипСправочникаЕдиницаИзмерения = "СправочникСсылка.КлассификаторЕдиницИзмерения";
	КонецЕсли;
	
	ЭлементТабличнаяЧастьНоменклатура = МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "ТабличнаяЧастьНоменклатура");
	ЭлементТабличнаяЧастьНоменклатура.ОграничениеТипа = Новый ОписаниеТипов(ТипСправочникаНоменклатуры);

	ЭлементТабличнаяЧастьЕдиницы = МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "ТабличнаяЧастьЕдиницы");
	ЭлементТабличнаяЧастьЕдиницы.ОграничениеТипа = Новый ОписаниеТипов(ТипСправочникаЕдиницаИзмерения);
	
	ДанныеРучногоСопоставления = ПараметрыОткрытия.ОсновныеДанные;

	#Область ЗаполнениеНоменклатуры1С
	ОсновноеСопоставление = Истина;
	Для Каждого Номенклатура1С Из ПараметрыОткрытия.ОсновныеДанные.Номенклатура1С Цикл
		
		Если ПараметрыОткрытия.ОсновныеДанные.Номенклатура1С.Количество() = 1 
			И НЕ ЗначениеЗаполнено(Номенклатура1С.Ключ) Тогда
			
			ТабличнаяЧастьНстр = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(ТабличнаяЧастьНСтр, ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС, "Цена, Количество, СуммаНДС, СтавкаНДС, СуммаБезНДС, Сумма");   
			ТабличнаяЧастьНСтр.Коэффициент = КоэффициентСБИС;
			ТабличнаяЧастьНСтр.КоэффициентБыл = КоэффициентСБИС;
			ОсновноеСопоставление = Ложь;
			Прервать;
		ИначеЕсли ПараметрыОткрытия.ОсновныеДанные.Номенклатура1С.Количество() > 1
			И НЕ ЗначениеЗаполнено(Номенклатура1С.Ключ) Тогда
			Продолжить;
		КонецЕсли;     
		
		ТабличнаяЧастьНстр = ТабличнаяЧасть.Добавить();  
		ТабличнаяЧастьНстр.Номенклатура = Номенклатура1С.Ключ;    
		
		ЗаполнитьДанныеДляЗагрузкиВДокумент1С(ДанныеРучногоСопоставления, ТабличнаяЧастьНстр.Номенклатура);
		
		// Первую заполненную номенклатуру 1С в списке найденных сопоставлений считаем основной и заполняем для неё все табличные данные из документа
		Если ОсновноеСопоставление 
			И ТабличнаяЧастьНстр.Количество = 0 
			И ТабличнаяЧастьНСтр.Цена = 0 Тогда
			
			ЗаполнитьЗначенияСвойств(ТабличнаяЧастьНСтр, ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС, "Цена, Количество, СуммаНДС, СтавкаНДС, СуммаБезНДС, Сумма");   
			ОсновноеСопоставление = Ложь;  
			
		КонецЕсли;
		
		// Для всех строк по умолчанию заполняем:
		// --Елиницы
		// --Ссылку на номенклатуру 1С
		// --GTIN
		ЗаполнитьЗначенияСвойств(ТабличнаяЧастьНСтр, Номенклатура1С.Значение, "GTIN");
		ТабличнаяЧастьНстр.Номенклатура = Номенклатура1С.Ключ;
		
		Если НЕ Номенклатура1С.Значение.Единицы = Неопределено Тогда 
			
			Для Каждого Единица Из Номенклатура1С.Значение.Единицы Цикл
				ТабличнаяЧастьНСтр.Единицы 	   = Единица.Ключ;
				
				Если ЗначениеЗаполнено(Единица.Значение.Коэффициент) Тогда
					ТабличнаяЧастьНСтр.Коэффициент = Единица.Значение.Коэффициент;
				ИначеЕсли ЗначениеЗаполнено(КоэффициентСБИС) Тогда
					ТабличнаяЧастьНСтр.Коэффициент = КоэффициентСБИС;
				Иначе
					ТабличнаяЧастьНСтр.Коэффициент = 1;
				КонецЕсли;
				
				ТабличнаяЧастьНстр.БазоваяЕдиницаОКЕИ = ОКЕИБазовойЕдиницыНоменклатуры1С(Единица.Ключ);
				Прервать;
			КонецЦикла;
					
			ТабличнаяЧастьНСтр.КоэффициентБыл = ТабличнаяЧастьНСтр.Коэффициент;
			ПроизвестиПересчетПоКоэффициентуЕдиницИзмерения(ТабличнаяЧастьНСтр);
			
		Иначе
			ТабличнаяЧастьНСтр.Единицы = ПустаяСсылкаИскомогоСправочника(СправочникЕдиницИмя);;	
		КонецЕсли;
		
		
	КонецЦикла;
	
	Если НЕ ТабличнаяЧасть.Количество() Тогда
		ТабличнаяЧастьНстр = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(ТабличнаяЧастьНСтр, ПараметрыОткрытия.ОсновныеДанные.НоменклатураСБИС, "Цена, Количество, СуммаНДС, СтавкаНДС, СуммаБезНДС, Сумма");
	КонецЕсли;
	#КонецОбласти //ЗаполнениеНоменклатуры1С
		
	// Не допилено, на будущее: обработка ошибок сопоставления номенклатуры будет блокировать интерфейс для закрытия пока пользователь не исправит всё, или закроет без сохранения изменений
	СообщенияОбОшибках = Новый Структура;
	СообщенияОбОшибках.Вставить("Модуль");
	СообщенияОбОшибках.Вставить("ТекстОшибки");
	СообщенияОбОшибках.Вставить("Критическая");
	
	ЗакрытьБезСохранения = Ложь;
	СохранениеПроведено  = Ложь; 
	ИмеютсяИзмененияСопоставленнойНоменклатуры = Ложь;
	// ---------------------------------------------------------
	
КонецПроцедуры
#КонецОбласти // ФормаРучногоСопоставленияКонтрагентов_Номенклатура_СБИС_Интерфейс_Вызов

#Область include_core2_vo2_Формы_ФормаРучногоСопоставленияКонтрагентов_Номенклатура_СБИС_ОбработчикиСобытий 
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ СохранениеПроведено
		И НЕ ИмеютсяИзмененияСопоставленнойНоменклатуры Тогда
		ЗакрытьБезСохранения = Истина;
		Возврат;
	ИначеЕсли НЕ СохранениеПроведено 
		И НЕ ЗакрытьБезСохранения
		И ИмеютсяИзмененияСопоставленнойНоменклатуры Тогда
		Отказ = Истина; 
		Режим = РежимДиалогаВопрос.ДаНет;
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ЗакрытьБезСохранения", ЗакрытьБезСохранения); 
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Ответ = Вопрос("Выйти без сохранения?", Режим, 0);	
			ПослеВопросаОЗакрытии(Ответ, ЗакрытьБезСохранения);
		#Иначе   
			ОповещениеПослеВопроса = Новый ОписаниеОповещения("ПослеВопросаОЗакрытии",ЭтаФорма, ДопПараметры);
			ПоказатьВопрос(ОповещениеПослеВопроса,"Выйти без сохранения?", Режим, 0);
		#КонецЕсли

	ИначеЕсли ЗакрытьБезСохранения Тогда
		Закрыть(Неопределено);
	Иначе 
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОбработчикЗавершения = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("ПослеЗакрытия", ЭтаФорма);
	НовыйОтложенноеДействие = МодульОбъектаКлиент().НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения", ОбработчикЗавершения));
	МодульОбъектаКлиент().ПодключитьОтложенноеДействие(НовыйОтложенноеДействие);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытия(Аргумент = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	// Для толстого клиента оповещения вызываются вручную, так заведено
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если Не ОписаниеОповещенияОЗакрытии = Неопределено Тогда
			МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(ПараметрыФормы.Результат, ОписаниеОповещенияОЗакрытии);
		КонецЕсли;
	#КонецЕсли
	
	ПараметрыФормы.Очистить();
	ОписаниеОповещенияОЗакрытии	= Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	СписокОшибок = ПроверитьЗаполнениеДанныхНоменклатур1С();
	
	ИмеютсяИзмененияСопоставленнойНоменклатуры = Номенклатуры1СИзменены();
	
	Если НЕ ИмеютсяИзмененияСопоставленнойНоменклатуры Тогда
		Закрыть(Неопределено);
		Возврат;
	ИначеЕсли НЕ ДанныеРучногоСопоставления.Свойство("НеобходимоСопоставление") Тогда
		ДанныеРучногоСопоставления.Вставить("НеобходимоСопоставление", Истина);      
	Иначе
		ДанныеРучногоСопоставления.НеобходимоСопоставление = Истина;
	КонецЕсли;	
	
	Если НЕ СписокОшибок.Количество() Тогда 
		
		ЗаполнитьРезультатРучногоСопоставления(ДанныеРучногоСопоставления);
				
		ТабличнаяЧасть.Очистить();
		
		ДанныеПоСтрокеСопоставления = Новый Структура;
		НаименованиеБезопасное = ПолучитьБезопасноеНаименование(ДанныеРучногоСопоставления.НоменклатураСБИС.Наименование);
		ДанныеПоСтрокеСопоставления.Вставить(НаименованиеБезопасное, ДанныеРучногоСопоставления);
		
		СохранениеПроведено = Истина;
		ПараметрыФормы.Результат = ДанныеПоСтрокеСопоставления;
		Закрыть(ДанныеПоСтрокеСопоставления);
	    Возврат;
		
	Иначе
		
		Сообщить("Имеются ошибки, которые необходимо исправить перед сохранением результата:");
		Для Каждого Ошибка Из СписокОшибок Цикл
			Сообщить(Ошибка + Символы.ПС);
		КонецЦикла;	
		Возврат;
	   
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьКоличествоПриИзменении(Элемент)
	ТабЧастьТекДанные = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "ТабличнаяЧасть").ТекущиеДанные;
	Если ЗначениеЗаполнено(ТабЧастьТекДанные.Цена) Тогда
		ТабЧастьТекДанные.Сумма = ТабЧастьТекДанные.Количество * ТабЧастьТекДанные.Цена;
	КонецЕсли;
	
	ПересчитатьИспользованноеИДоступноеКоличествоПоДокументу();
	ПеречистатьСуммыПоСтрокам();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьЦенаПриИзменении(Элемент)
	
	ТабЧастьТекДанные = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "ТабличнаяЧасть").ТекущиеДанные;
	Если ЗначениеЗаполнено(ТабЧастьТекДанные.Количество) Тогда
		ТабЧастьТекДанные.Сумма = ТабЧастьТекДанные.Количество * ТабЧастьТекДанные.Цена;
	КонецЕсли;
	ПеречистатьСуммыПоСтрокам();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСуммаНДСПриИзменении(Элемент)
	ПеречистатьСуммыПоСтрокам();
КонецПроцедуры


&НаКлиенте
Процедура ТабличнаяЧастьСуммаПриИзменении(Элемент)
	
	ТабЧастьТекДанные = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "ТабличнаяЧасть").ТекущиеДанные;
	Если ЗначениеЗаполнено(ТабЧастьТекДанные.Количество) Тогда
		ТабЧастьТекДанные.Цена = ТабЧастьТекДанные.Сумма / ТабЧастьТекДанные.Количество;
	КонецЕсли;

	ПеречистатьСуммыПоСтрокам();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьЕдиницыНачалоВыбора(Элемент)
	СтандартнаяОбработка = Ложь;
	ПодборЕдиницИзмерения();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьКоэффициентПриИзменении(Элемент)  
	
	ТабЧастьТекДанные = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "ТабличнаяЧасть").ТекущиеДанные;
	
	Если ТабЧастьТекДанные.Коэффициент = 0 Тогда
		Сообщить("Коэффициент не может быть равен нулю");
		ТабЧастьТекДанные.Коэффициент = 1;
	КонецЕсли;
	
	СтрокаДляПересчета = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "ТабличнаяЧасть").ТекущиеДанные; 
	ПроизвестиПересчетПоКоэффициентуЕдиницИзмерения(СтрокаДляПересчета);
    ПересчитатьИспользованноеИДоступноеКоличествоПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьНоменклатураПриИзменении(Элемент)
	
	ТабЧастьТекДанные = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "ТабличнаяЧасть").ТекущиеДанные;
	ВыбраннаяНоменклатура = ТабЧастьТекДанные.Номенклатура;
	
	СопоставлениеДляЕдиницы = Новый Структура("Владелец, Единица", ВыбраннаяНоменклатура, Неопределено); 
	КлючПоиска = "Единица";
	НайденнаяЕдиницы = МодульОбъектаКлиент().СопоставлениеДляЕдиницыКлиент_Получить(СопоставлениеДляЕдиницы, КлючПоиска);
	ПослеВыбораЕдиницИзмерения(НайденнаяЕдиницы, Новый Структура("НайденоВНоменклатуре", Истина));

КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ НоваяСтрока Тогда
		Возврат;
	ИначеЕсли Копирование Тогда
		ПеречистатьСуммыПоСтрокам();
		Возврат;
	Иначе
		ТабЧастьТекДанные = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "ТабличнаяЧасть").ТекущиеДанные;
		
		
		ТабЧастьТекДанные.Цена = Цена;
		ТабЧастьТекДанные.Коэффициент = 1;
		ТабЧастЬТекДанные.КоэффициентБыл = 1;
		ТабЧастьТекДанные.Количество = ОсталосьКоличествоВБазовыхЕдиницах;
		ТабЧастьТекДанные.Сумма = ТабЧастьТекДанные.Количество * ТабЧастьТекДанные.Цена;
		
		ОсталосьКоличествоВБазовыхЕдиницах = 0;
		
		ПересчитатьИспользованноеИДоступноеКоличествоПоДокументу();
		
		ПеречистатьСуммыПоСтрокам();  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПослеУдаления(Элемент)
	
	ПересчитатьИспользованноеИДоступноеКоличествоПоДокументу();
	ПеречистатьСуммыПоСтрокам();
	
КонецПроцедуры

#КонецОбласти // ФормаРучногоСопоставленияКонтрагентов_Номенклатура_СБИС_ОбработчикиСобытий  


#Область include_core2_vo2_Формы_ФормаРучногоСопоставленияКонтрагентов_Номенклатура_СБИС_СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПослеВопросаОЗакрытии(Результат, ДопПараметры) Экспорт
		
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрытьБезСохранения = Истина; 
		Закрыть(Неопределено);
	Иначе
		ЗакрытьБезСохранения = Ложь;
	КонецЕсли;	                      
	
	ДопПараметры.ЗакрытьБезСохранения = ЗакрытьБезСохранения;
	Возврат ДопПараметры.ЗакрытьБезСохранения;
	
КонецФункции

// Функция - Проверить наличие критических ошибок
// Проверяет наличие ошибок, при которых запрещено сохранять внесённые вручную изменения сопоставлений 
//
// Возвращаемое значение:
// Булево  - Наличие или отсутствие ошибок, при которых будем запрещать запись данных по сопоставлению
//
&НаКлиенте
Функция ПроверитьЗаполнениеДанныхНоменклатур1С()
	
	ОчиститьСообщения();
	СписокОшибок = Новый Массив; 
	СчетчикСтрок = 1;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Номенклатура)
			И Не ЗначениеЗаполнено(Строка.Единицы) Тогда
			СписокОшибок.Добавить("Не заполнены Номенклатура и Единицы в строке №" + СчетчикСтрок);
		ИначеЕсли Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			СписокОшибок.Добавить("Не заполнена Номенклатура в строке №" + СчетчикСтрок);
		ИначеЕсли Не ЗначениеЗаполнено(Строка.Единицы) Тогда
			СписокОшибок.Добавить("Не заполнены Единицы в строке №" + СчетчикСтрок);
		КонецЕсли;                                                                 
		
		СчетчикСтрок = СчетчикСтрок + 1;
		
	КонецЦикла;
	
	Возврат СписокОшибок;
	
КонецФункции

&НаСервере
Функция ПустаяСсылкаИскомогоСправочника(ИмяСправочника)
	
	Возврат Справочники[ИмяСправочника].ПустаяСсылка();	
		
КонецФункции

&НаКлиенте
Процедура ПодборЕдиницИзмерения()
	
	ПолноеИмяФормыВыбора = СправочникЕдиницПолноеИмя + ".ФормаВыбора";
	ПараметрыПодбора = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе, МножественныйВыбор");
	 
    ПараметрыПодбора.МножественныйВыбор = Истина;    
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОткрытьФорму(ПолноеИмяФормыВыбора, ПараметрыПодбора, ЭтаФорма);
	#Иначе
		ДопПараметры = Новый Структура;
		ОбработкаВыбора = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("ПослеВыбораЕдиницИзмерения", ЭтаФорма, ДопПараметры);
		ОткрытьФорму(ПолноеИмяФормыВыбора, ПараметрыПодбора, ЭтаФорма, , , , ОбработкаВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	#КонецЕсли
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеВыбораЕдиницИзмерения(Результат, ДопПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;
	
	ТабЧастьТекДанные = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "ТабличнаяЧасть").ТекущиеДанные; 
		
	ТабЧастьТекДанные.Единицы = Результат;
	ТабЧастьТекДанные.БазоваяЕдиницаОКЕИ = ОКЕИБазовойЕдиницыНоменклатуры1С(Результат);
	
КонецПроцедуры

&НаСервере
Функция ОКЕИБазовойЕдиницыНоменклатуры1С(ЕдиницаСсылка)

	СпрОбъект = ЕдиницаСсылка.ПолучитьОбъект();
	
	Возврат СпрОбъект.Код;
	
КонецФункции

// Преобразует строку таблицы значений в структуру.
// Свойства структуры и их значения совпадают с колонками переданной строки.
//
// Параметры:
//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений
//
// Возвращаемое значение:
//  Структура - преобразованная строка таблицы значений.
//
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл
		Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ПеречистатьСуммыПоСтрокам()
	
	СуммаВсего 	  = 0;
	СуммаНДСВсего = 0;
	
	ЭлементСуммаВсего = МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "СуммаВсего");
    ЭлементСуммаНДСВсего 	= МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "СуммаНДСВсего");
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		СуммаВсего = СуммаВсего + Строка.Сумма;
		СуммаНДСВсего = СуммаНДСВсего + Строка.СуммаНДС;
	КонецЦикла;
	
	Если НЕ СуммаВсего = СуммаПоДокументу Тогда
		ЭлементСуммаВсего.ЦветФона  = WebЦвета.Коралловый;
		ЭлементСуммаВсего.Подсказка = "Не сходится сумма по документу(" + СуммаПоДокументу + ") и сумма по строкам сопоставления(" + СуммаВсего + ")";
	Иначе
		ЭлементСуммаВсего.ЦветФона  = WebЦвета.НейтральноВесеннеЗеленый;
		ЭлементСуммаВсего.Подсказка = "";
	КонецЕсли;
	
	Если НЕ СуммаНДСВсего = СуммаНДСПоДокументу Тогда 
		ЭлементСуммаНДСВсего.ЦветФона  = WebЦвета.Коралловый;
		ЭлементСуммаНДСВсего.Подсказка = "Не сходится сумма НДС по документу(" + СуммаНДСПоДокументу + ") и сумма НДС по строкам сопоставления(" + СуммаНДСВсего + ")";
	Иначе
		ЭлементСуммаНДСВсего.ЦветФона  = WebЦвета.НейтральноВесеннеЗеленый;
		ЭлементСуммаНДСВсего.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Заполнить результат ручного сопоставления
// Внесение в класс сопоставления всех данных (изменённых и уже существовавших) номенклатур 1С из табличной части формы ручного сопоставления
//
// Параметры:
//  ДанныеРучногоСопоставления	 - Структура - Содержит массив данных класса сопоставления номенклатур по проекту расширенных проверок сопоставления номенклатур
//
&НаСервере
Процедура ЗаполнитьРезультатРучногоСопоставления(ДанныеРучногоСопоставления)
	
	ТаблицаНоменклатур1С = ТабличнаяЧасть.Выгрузить(); 
	ДанныеНоменклатуры1С = Новый Структура; 
	
	ДанныеРучногоСопоставления.Номенклатура1С.Очистить();
	
	ОсновнаяЕдиницаСопоставления = Истина;
	
	Для Каждого Номенклатура1С Из ТаблицаНоменклатур1С Цикл 	
		
		ДанныеНоменклатуры1С = СтрокаТаблицыЗначенийВСтруктуру(Номенклатура1С);
		
		Если ОсновнаяЕдиницаСопоставления Тогда
			МодульОбъектаСервер().СтрокаСопоставленияСБИССервер_Вставить(ДанныеРучногоСопоставления, "БазоваяЕдиницаОКЕИ", ДанныеНоменклатуры1С.БазоваяЕдиницаОКЕИ);
			ОсновнаяЕдиницаСопоставления = Ложь;
		КонецЕсли;
		
		ВходящиеДанные = Новый Структура("Источник", Номенклатура1С.Единицы);      
		ДопПараметры = Новый Структура("ТипИсточника", "Ссылка");
		СтруктураЕдиницы = МодульОбъектаСервер().НовыйСопоставлениеДляЕдиницыСервер(ВходящиеДанные, ДопПараметры);
		
		Если ЗначениеЗаполнено(Номенклатура1С.Коэффициент) Тогда
			СтруктураЕдиницы.Коэффициент = Номенклатура1С.Коэффициент;
		КонецЕсли;
		
		ДанныеНоменклатуры1С.Удалить("Единицы");
		ДанныеНоменклатуры1С.Вставить("ЕдИзм1С", Новый Соответствие);
		ДанныеНоменклатуры1С.ЕдИзм1С.Вставить(Номенклатура1С.Единицы, СтруктураЕдиницы);                                                                                                                                       
		
		ДанныеНоменклатуры1С.Вставить("Основное", Истина);
		
		СтрНоменклатура1С = ДанныеРучногоСопоставления.Номенклатура1С.Получить(ДанныеНоменклатуры1С.Номенклатура);
		Если СтрНоменклатура1С = Неопределено Тогда
			СтрНоменклатура1С = МодульОбъектаСервер().НовыйОписаниеНоменклатуры1ССервер();
		КонецЕсли;
		
		МодульОбъектаСервер().ОписаниеНоменклатуры1ССервер_Заполнить(СтрНоменклатура1С, ДанныеНоменклатуры1С);
		МодульОбъектаСервер().СтрокаСопоставленияСБИССервер_Вставить(ДанныеРучногоСопоставления, СтрНоменклатура1С.Ссылка, СтрНоменклатура1С);	
	КонецЦикла;  
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДляЗагрузкиВДокумент1С(ДанныеРучногоСопоставления, ДанныеНоменклатуры1С)
	
	ТекущаяСтрокаНоменклатуры1С = Неопределено;                                                                                       
	
	НоменклатураСсылка = ДанныеНоменклатуры1С;  
	ТекущиеДанныеНоменклатуры = ДанныеРучногоСопоставления.Номенклатура1С.Получить(НоменклатураСсылка); 
	ПараметрыОтбора = Новый Структура("Номенклатура", ДанныеНоменклатуры1С); 
	ТекущаяСтрокаНоменклатуры1С = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрокаНоменклатуры1С[0], ТекущиеДанныеНоменклатуры, , "Характеристики"); 
	
	ТекущаяСтрокаНоменклатуры1С[0].Количество = ТекущиеДанныеНоменклатуры.Кол_во;
	ТекущаяСтрокаНоменклатуры1С[0].СуммаБезНДС = ТекущиеДанныеНоменклатуры.СуммаБезНал;
	
КонецПроцедуры

// Функция - Получить безопасное наименование
//
// Параметры:
//  ИсходнаяСтрока	 - Строка - Преобразуемая строка 
// 
// Возвращаемое значение:
// Строка  - Строка без спецсиволов, содержит только цифры и буквы кириллицы/латиницы 
//
Функция ПолучитьБезопасноеНаименование(ИсходнаяСтрока) Экспорт
	
	Результат = "";
	
	Латиница = "QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm";
	Кириллица = "абвгдеёзжийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
	Цифры = "0123456789";                                                            
	ДопустимыеСимволы = Латиница + Кириллица + Цифры;
	
	Для ПозицияСимвола = 1 по СтрДлина(ИсходнаяСтрока) Цикл
		ТекСимв = Сред(ИсходнаяСтрока, ПозицияСимвола, 1);
		Если Найти(ДопустимыеСимволы, ТекСимв) > 0 Тогда
			Результат = Результат + ТекСимв;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВРЕГ(Результат);
	
КонецФункции

// Процедура - Произвести пересчет по коэффициенту единиц измерения
//
// Параметры:
//  СтрокаДляПересчета	 - Строка табличной части	 - Строка в которой будет вестить пересчет
//  КоэффициентПересчета - Число	 - На это число будет умножено количество 
//
&НаКлиенте
Процедура ПроизвестиПересчетПоКоэффициентуЕдиницИзмерения(СтрокаДляПересчета)
	
	СтрокаДляПересчета.Количество = СтрокаДляПересчета.Количество * (СтрокаДляПересчета.Коэффициент / СтрокаДляПересчета.КоэффициентБыл);
	СтрокаДляПересчета.Цена 	  = СтрокаДляПересчета.Цена / (СтрокаДляПересчета.Коэффициент / СтрокаДляПересчета.КоэффициентБыл);
	
	СтрокаДляПересчета.КоэффициентБыл = СтрокаДляПересчета.Коэффициент;
	ПеречистатьСуммыПоСтрокам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИспользованноеИДоступноеКоличествоПоДокументу()
	
	ЗарезервированноеКоличествоВБазовыхЕдиницах = 0;
	ОсталосьКоличествоВБазовыхЕдиницах = 0;
	
	// Расчёт "Осталось" для определения доступного количества в базовых единицах
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		ЗарезервированноеКоличествоВБазовыхЕдиницах = ЗарезервированноеКоличествоВБазовыхЕдиницах + Строка.Количество / Строка.Коэффициент; 		
		
	КонецЦикла;
	
	ОсталосьКоличествоВБазовыхЕдиницах = КоличествоСБИС / КоэффициентСБИС - ЗарезервированноеКоличествоВБазовыхЕдиницах;
		
	КоличествоПоДокументуСходитсяСТабличнойЧастью = ОсталосьКоличествоВБазовыхЕдиницах = 0 И ЗарезервированноеКоличествоВБазовыхЕдиницах = КоличествоСБИС / КоэффициентСБИС;

	ЭлементРаспределено = МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "ЗарезервированноеКоличествоВБазовыхЕдиницах");
    ЭлементОсталось 	= МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "ОсталосьКоличествоВБазовыхЕдиницах"); 
	
	Если КоличествоПоДокументуСходитсяСТабличнойЧастью Тогда
		
		ЭлементРаспределено.ЦветФона  = WebЦвета.НейтральноВесеннеЗеленый;
		ЭлементРаспределено.Подсказка = "";
		ЭлементОсталось.ЦветФона 	  = WebЦвета.НейтральноВесеннеЗеленый; 
		ЭлементОсталось.Подсказка 	  = "";
		
	Иначе
		
		ЭлементРаспределено.ЦветФона  = WebЦвета.Коралловый;
		ЭлементРаспределено.Подсказка = "Разница количества в базовых единицах по документу и по строкам табличной части: " + (КоличествоСБИС / КоэффициентСБИС - ЗарезервированноеКоличествоВБазовыхЕдиницах);
		ЭлементОсталось.ЦветФона 	  = WebЦвета.Коралловый;
		ЭлементОсталось.Подсказка 	  = "Разница количества в базовых единицах по документу и по строкам табличной части: " + (КоличествоСБИС / КоэффициентСБИС - ЗарезервированноеКоличествоВБазовыхЕдиницах);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция Номенклатуры1СИзменены()
	
	ТаблицаНоменклатур1С = ТабличнаяЧасть.Выгрузить();
	Если ТаблицаНоменклатур1С.Количество() <> ДанныеРучногоСопоставления.Номенклатура1С.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СопоставленнаяНоменклатура1С Из ДанныеРучногоСопоставления.Номенклатура1С Цикл
		
		СтрокаСНоменклатурой1С = ТаблицаНоменклатур1С.Найти(СопоставленнаяНоменклатура1С.Ключ, "Номенклатура");
		
		Если СтрокаСНоменклатурой1С = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСНоменклатурой1С.Единицы) 
			И НЕ СопоставленнаяНоменклатура1С.Значение.Единицы.Количество() Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для Каждого Единицы Из СопоставленнаяНоменклатура1С.Значение.Единицы Цикл
			Если СтрокаСНоменклатурой1С.Единицы <> Единицы.Ключ
				ИЛИ СтрокаСНоменклатурой1С.Коэффициент <> Единицы.Значение.Коэффициент Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаСНоменклатурой1С.Цена <> СопоставленнаяНоменклатура1С.Значение.Цена 
			ИЛИ СтрокаСНоменклатурой1С.Количество <> СопоставленнаяНоменклатура1С.Количество Тогда
			Возврат Истина;  
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

#КонецОбласти // ФормаРучногоСопоставленияКонтрагентов_Номенклатура_СБИС_СлужебныеПроцедурыИФункции

#КонецОбласти // ФормаРучногоСопоставленияКонтрагентов_Номенклатура_СБИС