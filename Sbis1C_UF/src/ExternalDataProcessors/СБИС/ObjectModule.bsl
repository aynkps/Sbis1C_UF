
#Область include_core2_vo2_Модуль_Обработчики_Загрузка

#Область include_core2_vo2_Модуль_Обработчики_Загрузка_Пересчет

Функция сбисПересчитатьСуммовыеПоля(Строка, Документ) Экспорт
	СуммаВключаетНДС = Документ.СуммаВключаетНДС;
	Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда 
		Если СуммаВключаетНДС Тогда 
			СтавкаНДС = 20/120;	
		Иначе
			СтавкаНДС = 0.2;
		КонецЕсли;
	ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда 
		Если СуммаВключаетНДС Тогда 
			СтавкаНДС = 18/118;	
		Иначе
			СтавкаНДС = 0.18;
		КонецЕсли;
	ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда 
		Если СуммаВключаетНДС Тогда 
			СтавкаНДС = 10/110;	
		Иначе
			СтавкаНДС = 0.1;
		КонецЕсли;
	Иначе 
		СтавкаНДС = 0;
	КонецЕсли; 
	Если ЗначениеЗаполнено(Строка.Количество) И ЗначениеЗаполнено(Строка.Цена) Тогда
		Строка.Сумма = Строка.Количество*Строка.Цена;
		Строка.СуммаНДС = Строка.Сумма*СтавкаНДС;
	КонецЕсли;
	Возврат Строка;
	
КонецФункции  

Функция сбисРассчитатьСтавкуИСуммуНДСДляСтрокДокумента_УНФ(Документ, ПересчитыватьНДСПоДанным1С) Экспорт
	СтавкаНДСПоУмолчанию = Вычислить("Справочники.СтавкиНДС.СтавкаНДС(Документ.Организация.ВидСтавкиНДСПоУмолчанию,?(ЗначениеЗаполнено(Документ.Дата), Документ.Дата, ТекущаяДатаСеанса()))");
	
	ТабличныеЧастиДокумента = Документ.Метаданные().ТабличныеЧасти;
	
	Если ТабличныеЧастиДокумента.Найти("Запасы") <> Неопределено Тогда
		Для каждого СтрокаТабличнойЧасти Из Документ.Запасы Цикл
			Если НЕ (ПересчитыватьНДСПоДанным1С = 1
						ИЛИ (ПересчитыватьНДСПоДанным1С = 0 
								И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНДС)
								И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС))) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТабличныеЧастиДокумента.Запасы.Реквизиты.Найти("ЭтоРазделитель") <>  Неопределено И СтрокаТабличнойЧасти.ЭтоРазделитель Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Вычислить("Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Документ.Дата), Документ.Дата, ТекущаяДатаСеанса()))");
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;
			
			СтавкаНДС = Вычислить("УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС)");
			СтрокаТабличнойЧасти.СуммаНДС = ?(Документ.СуммаВключаетНДС, 
			СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Документ.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если ТабличныеЧастиДокумента.Найти("Расходы") <> Неопределено Тогда
		Для каждого СтрокаТабличнойЧасти Из Документ.Расходы Цикл
			Если НЕ (ПересчитыватьНДСПоДанным1С = 1
						ИЛИ (ПересчитыватьНДСПоДанным1С = 0 
								И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНДС)
								И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС))) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТабличныеЧастиДокумента.Расходы.Реквизиты.Найти("ЭтоРазделитель") <>  Неопределено И СтрокаТабличнойЧасти.ЭтоРазделитель Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Вычислить("Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Документ.Дата), Документ.Дата, ТекущаяДатаСеанса()))");
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;
			
			СтавкаНДС = Вычислить("УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС)");
			СтрокаТабличнойЧасти.СуммаНДС = ?(Документ.СуммаВключаетНДС, 
			СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Документ.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
		КонецЦикла;
	КонецЕсли;
КонецФункции

Функция сбисРассчитатьЦеныСтавкиИСуммыНДСДляСтрокТЧТоварыДокумента_УТ11(Документ, ПересчитыватьНДСПоДанным1С, ПересчитыватьЦеныПоДанным1С) Экспорт
	Если ПересчитыватьНДСПоДанным1С = 2 И ПересчитыватьЦеныПоДанным1С = 2 Тогда
		// Ничего не пересчитываем по данным 1С
		Возврат Неопределено;	
	КонецЕсли;
	
	СтруктураПересчетаСуммы = Вычислить("ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Документ)");
	КэшированныеЗначения = Вычислить("ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения()");
	
	ТЧТоварыРеквизитыМетаданные = Документ.Метаданные().ТабличныеЧасти.Товары.Реквизиты;
	ЕстьРучнаяСкидка		 = НЕ ТЧТоварыРеквизитыМетаданные.Найти("СуммаРучнойСкидки") = Неопределено;
	ЕстьАвтоматическаяСкидка = НЕ ТЧТоварыРеквизитыМетаданные.Найти("СуммаАвтоматическойСкидки") = Неопределено;
	
	Для каждого СтрокаТабличнойЧасти Из Документ.Товары Цикл
		ПересчитатьНДСПоДанным1С = Ложь;
		ПересчитатьЦеныПоДанным1С = Ложь;
		
		СтруктураДействий = Новый Структура;
		
		Если ПересчитыватьНДСПоДанным1С = 1
					ИЛИ (ПересчитыватьНДСПоДанным1С = 0 
							И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНДС)
							И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС)) Тогда
							
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", Документ.НалогообложениеНДС, Документ.Дата, Документ.Организация));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			ПересчитатьНДСПоДанным1С = Истина;
		КонецЕсли;
		
		Если (ПересчитыватьЦеныПоДанным1С = 1
					ИЛИ (ПересчитыватьЦеныПоДанным1С = 0 
							И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сумма)
							И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена)))
			 И ЗначениеЗаполнено(Документ.Соглашение) Тогда
							
			Если Документ.Соглашение.Метаданные().Реквизиты.Найти("ВидЦен") = Неопределено Тогда 
				СтруктураДействий.Вставить("ЗаполнитьВидЦены", Новый Структура("ВидЦены", Документ.Соглашение.ВидЦеныПоставщика));
			Иначе
				СтруктураДействий.Вставить("ЗаполнитьВидЦены", Новый Структура("ВидЦены", Документ.Соглашение.ВидЦен));
			КонецЕсли;
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", Новый Структура("Дата, Валюта", Документ.Дата, Документ.Валюта));
			ПересчитатьЦеныПоДанным1С = Истина;
		КонецЕсли;
		
		Если ПересчитатьНДСПоДанным1С ИЛИ ПересчитатьЦеныПоДанным1С Тогда
			СтрокаСтруктура = Новый Структура;
			
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			Если ЕстьРучнаяСкидка Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			КонецЕсли;
			Если ЕстьАвтоматическаяСкидка Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			КонецЕсли; 
			Выполнить("ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения)");
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция сбисРассчитатьЦеныСтавкиИСуммыНДСДляСтрокТЧТоварыИУслугиДокумента_УТ10БП2КА1УПП(Документ, ПересчитыватьНДСПоДанным1С, ПересчитыватьЦеныПоДанным1С) Экспорт
	Если ПересчитыватьНДСПоДанным1С = 2 И ПересчитыватьЦеныПоДанным1С = 2 Тогда
		// Ничего не пересчитываем по данным 1С
		Возврат Неопределено;	
	КонецЕсли;
	
	ВалютаРеглУч = Вычислить("Константы.ВалютаРегламентированногоУчета.Получить()");
	ТабличныеЧастиДокумента = Документ.Метаданные().ТабличныеЧасти;
	
	Если ТабличныеЧастиДокумента.Найти("Товары") <> Неопределено Тогда
		Для каждого СтрокаТабличнойЧасти Из Документ.Товары Цикл
			ПересчитатьНДСПоДанным1С = Ложь;
			ПересчитатьЦеныПоДанным1С = Ложь;
			
			Если ПересчитыватьНДСПоДанным1С = 1
						ИЛИ (ПересчитыватьНДСПоДанным1С = 0 
								И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНДС)
								И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС)) Тогда
				Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Документ)");;
				ПересчитатьНДСПоДанным1С = Истина;
			КонецЕсли;
			
			Если ПересчитыватьЦеныПоДанным1С = 1
						ИЛИ (ПересчитыватьЦеныПоДанным1С = 0 
								И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сумма)
								И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена)) Тогда
				Попытка
					Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, Документ, ВалютаРеглУч)");
				Исключение
				    Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, Документ, ВалютаРеглУч)");
				КонецПопытки;				
				ПересчитатьЦеныПоДанным1С = Истина;
			КонецЕсли;
			
			Если ПересчитатьНДСПоДанным1С ИЛИ ПересчитатьЦеныПоДанным1С Тогда
				Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Документ)");
				Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Документ)");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТабличныеЧастиДокумента.Найти("Услуги") <> Неопределено Тогда
		Для каждого СтрокаТабличнойЧасти Из Документ.Услуги Цикл
			ПересчитатьНДСПоДанным1С = Ложь;
			ПересчитатьЦеныПоДанным1С = Ложь;
			
			Если ПересчитыватьНДСПоДанным1С = 1
						ИЛИ (ПересчитыватьНДСПоДанным1С = 0 
								И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНДС)
								И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС)) Тогда
				Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Документ)");;
				ПересчитатьНДСПоДанным1С = Истина;
			КонецЕсли;
			
			Если ПересчитыватьЦеныПоДанным1С = 1
						ИЛИ (ПересчитыватьЦеныПоДанным1С = 0 
								И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сумма)
								И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена)) Тогда
				Попытка
					Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, Документ, ВалютаРеглУч)");	
				Исключение
					Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, Документ, ВалютаРеглУч)");
				КонецПопытки;				
				ПересчитатьЦеныПоДанным1С = Истина;
			КонецЕсли;
			
			Если ПересчитатьНДСПоДанным1С ИЛИ ПересчитатьЦеныПоДанным1С Тогда
				Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Документ)");
				Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Документ)");
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
КонецФункции

#КонецОбласти 

#Область include_core2_vo2_Модуль_Обработчики_Загрузка_ВызовФункцийКонфигурации

Функция сбисВызватьОпределениеПараметровСчетаФактурыБП2(Документ) Экспорт
    Документ.ОпределениеПараметровСчетаФактуры(Истина);        
КонецФункции

#КонецОбласти

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаСервер

#Область include_core2_vo2_Модуль_МодульОбъектаСервер_ПроверкиМетаданных

Функция СбисСуществуетОбъектКонфигурацииСервер(ИмяГлобальногоТипаОбъекта, ИмяЛокальногоТипаОбъекта) Экспорт
	
	Попытка
		
		Если Метаданные[СокрЛП(ИмяГлобальногоТипаОбъекта)].Найти(СокрЛП(ИмяЛокальногоТипаОбъекта)) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		
		ВызватьИсключение("Неизвестный тип метаданных " + ИмяГлобальногоТипаОбъекта);
		
	КонецПопытки;
		
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаСервер_ОбщиеФункцииИПроцедуры

Функция ПолучитьМакетОбработкиНаСервере(ИмяМакета, ДопПараметры=Неопределено) Экспорт 
	
	РезультатМакет = ПолучитьМакет(ИмяМакета);
	Если	Не	ДопПараметры = Неопределено
		И		ДопПараметры.Свойство("Текст")
		И		ДопПараметры.Текст Тогда
		РезультатМакет = РезультатМакет.ПолучитьТекст()
	КонецЕсли;
	
	Возврат РезультатМакет;
	
КонецФункции

Функция ВыполнитьЗапросСПараметрами(ТекстЗапросаВх, ПараметрыЗапросаВх, ДопПараметры = Неопределено) Экспорт
	Перем РазмерВыборки;
	
	Если		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("Размер", РазмерВыборки) Тогда
		РазмерВыборки = 1;
	КонецЕсли;
	
	//Найти место в запросе для подставноки ограничения выборки
	Если Не РазмерВыборки = Неопределено Тогда
		ИтоговоеВыбрать	= 1;

		Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстЗапросаВх) Цикл
			Если	Лев(СтрПолучитьСтроку(ТекстЗапросаВх, НомерСтроки), 7) = "ВЫБРАТЬ"
				И	Лев(СтрПолучитьСтроку(ТекстЗапросаВх, НомерСтроки - 1), 1) = "/" Тогда
				ИтоговоеВыбрать = НомерСтроки;
			КонецЕсли;
		КонецЦикла;
		СтрокаВыбрать = СтрПолучитьСтроку(ТекстЗапросаВх, ИтоговоеВыбрать);
		Если Не Найти(СтрокаВыбрать, "ПЕРВЫЕ") Тогда
			ТекстЗапросаНовый = "";
			Для НомерСтроки = 1 По ИтоговоеВыбрать - 1 Цикл
				ТекстЗапросаНовый = ТекстЗапросаНовый + Символы.ПС + СтрПолучитьСтроку(ТекстЗапросаВх, НомерСтроки);
			КонецЦикла;
			ТекстЗапросаНовый = ТекстЗапросаНовый + СтрокаВыбрать + "ПЕРВЫЕ " + РазмерВыборки;
			Для НомерСтроки = ИтоговоеВыбрать + 1 По СтрЧислоСтрок(ТекстЗапросаВх) Цикл
				ТекстЗапросаНовый = ТекстЗапросаНовый + Символы.ПС + СтрПолучитьСтроку(ТекстЗапросаВх, НомерСтроки);
			КонецЦикла;
			ТекстЗапросаВх = ТекстЗапросаНовый;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаВх);
	
	Для Каждого КлючИЗначениеЗапроса Из ПараметрыЗапросаВх Цикл
		
		Запрос.УстановитьПараметр(КлючИЗначениеЗапроса.Ключ, КлючИЗначениеЗапроса.Значение);
		
	КонецЦикла;
	
	Попытка
		
		Возврат РезультатЗапросаНаКлиент(Запрос);
		
	Исключение
		
		ВызватьИсключение(СбисИсключение_ВСтрокуСервер(ИнформацияОбОшибке(), "МодульОбъектаСервер.ВыполнитьЗапросСПараметрами")); 
		
	КонецПопытки;
		
КонецФункции

Функция РезультатЗапросаНаКлиент(Запрос) Экспорт 
	
	Попытка
		
		РезультатЗапроса	= Запрос.Выполнить();
		ВыборкаЗапроса		= РезультатЗапроса.Выбрать();
		
	Исключение
		
		ВызватьИсключение(СбисИсключение_ВСтрокуСервер(ИнформацияОбОшибке(), "МодульОбъектаСервер.РезультатЗапросаНаКлиент")); 
		
	КонецПопытки;

	Результат	= Новый Массив;
	НаборКлючей = "";
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		НаборКлючей = НаборКлючей + Колонка.Имя + ","
	КонецЦикла;
	
	НаборКлючей = Лев(НаборКлючей, СтрДлина(НаборКлючей)-1);

	Пока ВыборкаЗапроса.Следующий() Цикл
		НоваяСтр = Новый Структура(НаборКлючей);
		ЗаполнитьЗначенияСвойств(НоваяСтр, ВыборкаЗапроса);
		Результат.Добавить(НоваяСтр);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СбисЭтоТипСтрокой(ЗначениеСравнить, ТипСтрокойСравнить) Экспорт
	
	ТипПривестиКСтроке = Строка(ЗначениеСравнить);
	Возврат Булево(Найти(ТипПривестиКСтроке, ТипСтрокойСравнить));

КонецФункции

Функция СсылочныйТипСтрокойСервер(Ссылка, ДопПараметры = Неопределено) Экспорт 

	Запись = Новый ЗаписьXML; 
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, ТипЗнч(Ссылка));
	XMLСТипом = Запись.Закрыть();
	ТипСтрокой = Сред(XMLСТипом, Найти(XMLСТипом, ">") + 1);
	ТипСтрокой = Лев(ТипСтрокой, Найти(ТипСтрокой, "<") - 1);
	
	ЧастиСтроки = СтрЗаменить(ТипСтрокой, ".", Символы.ПС);
	
	Если Найти(СтрПолучитьСтроку(ЧастиСтроки, 1), "CatalogRef") Тогда
		
		ЧастиСтроки = СтрЗаменить(ЧастиСтроки, СтрПолучитьСтроку(ЧастиСтроки, 1), "СправочникСсылка");
		
	ИначеЕсли Найти(СтрПолучитьСтроку(ЧастиСтроки, 1), "DocumentRef") Тогда
		
		ЧастиСтроки = СтрЗаменить(ЧастиСтроки, СтрПолучитьСтроку(ЧастиСтроки, 1), "ДокументСсылка");
		
	КонецЕсли;
	
	Возврат СтрЗаменить(ЧастиСтроки, Символы.ПС, ".");
	
	
КонецФункции // СсылочныйТипСтрокой()

// Функция - приводит переданные данные файлов в формат Base64
//
// Параметры:
//  СбисДанныеФайлов - Массив	 - содержит либо объект двоичные данные, либо ПомещенныеФайлы от метода ПоместитьФайлы/НачатьПомещениеФайловНаСервер
// 
// Возвращаемое значение:
//  Массив - Base64 переданных файлов, в соответствии с индексом переданного массива
//
Функция ФайлыВBASE64Сервер(СбисДанныеФайлов) Экспорт
	
	РезультатBase64 = Новый Массив;
	
	Для Каждого СбисДанныеФайла Из СбисДанныеФайлов Цикл
		
		Если Не ТипЗнч(СбисДанныеФайла) = Тип("ДвоичныеДанные") Тогда
			
			СбисДанныеФайла = ПолучитьИзВременногоХранилища(СбисДанныеФайла.Хранение);
			
		КонецЕсли;
		
		РезультатBase64.Добавить(Base64Строка(СбисДанныеФайла));
		
	КонецЦикла;
	
	Возврат РезультатBase64;
	
КонецФункции

#Область include_core2_vo2_Модуль_МодульОбъектаСервер_ОбщиеФункцииИПроцедуры_ЗагрузкаДокументов_БлокФункцийИниФайлов

// функция возвращает код региона по названию из регистра сведений (АдресныйКлассификатор или АдресныеОбъекты)
Функция ПолучитьКодРегионаПоНазваниюНаСервере(НазваниеРегиона) Экспорт
	
	ИмяРегистра = ?(Метаданные.РегистрыСведений.Найти("АдресныеОбъекты") <> Неопределено, "АдресныеОбъекты", "АдресныйКлассификатор");
	ИмяУровня = ?(Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("ТипАдресногоЭлемента") <> Неопределено,"ТипАдресногоЭлемента",?(Метаданные.РегистрыСведений[ИмяРегистра].Реквизиты.Найти("ТипАдресногоЭлемента") <> Неопределено,"ТипАдресногоЭлемента","Уровень"));
	НазваниеКода = ?(Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("КодСубъектаРФ") <> Неопределено,"КодСубъектаРФ",?(Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("КодРегионаВКоде") <> Неопределено,"КодРегионаВКоде","КодАдресногоОбъектаВКоде"));
	Если Метаданные.РегистрыСведений[ИмяРегистра].Реквизиты.Найти("Сокращение") <> Неопределено
			Или Метаданные.РегистрыСведений[ИмяРегистра].Ресурсы.Найти("Сокращение") <> Неопределено Тогда
		РеквизитСокращение = "Сокращение";
	Иначе
		РеквизитСокращение = "ТипОбъекта";
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АдресныйКлассификатор."+НазваниеКода+" КАК КодРегион
	|ИЗ
	|	РегистрСведений."+ИмяРегистра+" КАК АдресныйКлассификатор
	|ГДЕ
	|	АдресныйКлассификатор."+ИмяУровня+" = 1
	|И  АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор." + РеквизитСокращение + " = &НазваниеРегиона";
	Запрос.УстановитьПараметр("НазваниеРегиона", НазваниеРегиона);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КодРегион = Выборка.КодРегион;
		Если Число(КодРегион)<10 Тогда
			КодРегион = "0"+Строка(КодРегион);
		КонецЕсли;
		Возврат КодРегион;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ПодобратьЕдиницуИзмеренияПоОКЕИ(ОКЕИ, Номенклатура = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Перем КлассификаторЕдиницИзмерения, ЕдиницыИзмеренияНоменклатуры, РеквизитЕдиницаПоКлассификатору, Результат;

	Если НЕ Метаданные.Справочники.Найти("УпаковкиЕдиницыИзмерения") = Неопределено Тогда  //ЕРП, КА2, УТ11
		
		ЕдиницыИзмеренияНоменклатуры	= "УпаковкиЕдиницыИзмерения";
		РеквизитЕдиницаПоКлассификатору	= "ЕдиницаИзмерения"; 
		КлассификаторЕдиницИзмерения	= ЕдиницыИзмеренияНоменклатуры; //В ЕРП, УТ11 Базовые единицы хранятся в том же справочнике
		
	ИначеЕсли НЕ Метаданные.Справочники.Найти("ЕдиницыИзмерения") = Неопределено Тогда //УПП, УТ10
		
		ЕдиницыИзмеренияНоменклатуры	= "ЕдиницыИзмерения"; 
		РеквизитЕдиницаПоКлассификатору	= "ЕдиницаПоКлассификатору"; 
		
	КонецЕсли;		
	
	
	Если НЕ Метаданные.Справочники.Найти("КлассификаторЕдиницИзмерения") = Неопределено Тогда
		КлассификаторЕдиницИзмерения = "КлассификаторЕдиницИзмерения";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторЕдиницИзмерения) Тогда
		ЕдиницаКлассификатора = Справочники[КлассификаторЕдиницИзмерения].НайтиПоКоду(ОКЕИ);
		Возврат ЕдиницаКлассификатора;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЕдиницыИзмеренияНоменклатуры) Тогда
		
		Результат = ЕдиницаКлассификатора;  //Для Конфигураций, где учет по единицам классификатора
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕдиницыИзмерения.Ссылка
			|ИЗ
			|	Справочник."+ЕдиницыИзмеренияНоменклатуры+" КАК ЕдиницыИзмерения
			|ГДЕ
			|	ЕдиницыИзмерения.Владелец = &Владелец
			|	И ЕдиницыИзмерения."+РеквизитЕдиницаПоКлассификатору+" = &ЕдиницаКлассификатора
			|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
		
		
		Запрос.УстановитьПараметр("Владелец", Номенклатура);
		Запрос.УстановитьПараметр("ЕдиницаКлассификатора", ЕдиницаКлассификатора);
		
		РезультатЗапроса 		= Запрос.Выполнить();		
		ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Результат = ВыборкаДетальныеЗаписи.Ссылка; 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаСервер_ОбщегоНазначения
// Место для разнообразной копипасты из БСП 
Функция ТаблицаЗначенийВМассив(ТаблицаЗначений) Экспорт

   Массив = Новый Массив();
   СтруктураСтрокой = "";
   НужнаЗапятая = Ложь;
   Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
       Если НужнаЗапятая Тогда
           СтруктураСтрокой = СтруктураСтрокой + ",";
       КонецЕсли;
       СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
       НужнаЗапятая = Истина;
   КонецЦикла;
   Для Каждого Строка Из ТаблицаЗначений Цикл
       НоваяСтрока = Новый Структура(СтруктураСтрокой);
       ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
       Массив.Добавить(НоваяСтрока);
   КонецЦикла;
   Возврат Массив;

КонецФункции

// Возвращает копию исходного массива с уникальными значениями.
//
// Параметры:
//  Массив - Массив - массив произвольных значений.
//
// Возвращаемое значение:
//  Массив - массив уникальных элементов.
//
Функция СбисСвернутьМассив(Знач Массив) Экспорт
	
	Результат = Новый Массив;
	СбисДополнитьМассив(Результат, Массив, Истина);
	Возврат Результат;
	
КонецФункции

// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения.
//  ТолькоУникальныеЗначения - Булево - если истина, то в массив будут включены только уникальные значения.
//
Процедура СбисДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
	
	Если ТолькоУникальныеЗначения Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;
		
		Для Каждого Значение Из МассивИсточник Цикл
			Если УникальныеЗначения[Значение] = Неопределено Тогда
				МассивПриемник.Добавить(Значение);
				УникальныеЗначения.Вставить(Значение, Истина);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Значение Из МассивИсточник Цикл
			МассивПриемник.Добавить(Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Разбивает строку на несколько строк по указанному разделителю. Разделитель может иметь любую длину.
// В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
// рекомендуется использовать функцию платформы СтрРазделить.
//
// Параметры:
//  Значение               - Строка - текст с разделителями.
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ.
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     > для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат;
//     > если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив из Строка
//
// Пример:
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",")
//  - возвратит массив из 5 элементов, три из которых  - пустые: "", "один", "", "два", "";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина)
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(" один   два  ", " ")
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("")
//  - возвратит пустой массив;
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("",,Ложь)
//  - возвратит массив с одним элементом: ""(пустая строка);
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("", " ")
//  - возвратит массив с одним элементом: "" (пустая строка).
//
Функция СбисРазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Если СтрДлина(Разделитель) = 1 
		И ПропускатьПустыеСтроки = Неопределено 
		И СокращатьНепечатаемыеСимволы Тогда 
		
		Результат = СбисРазложитьСтрокуВМассивРежимСовместимости(Значение, Разделитель);
		Для Индекс = 0 По Результат.ВГраница() Цикл
			Результат[Индекс] = СокрЛП(Результат[Индекс])
		КонецЦикла;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СбисРазложитьСтрокуВМассивРежимСовместимости(Знач ИсходнаяСтрока, Разделитель = ",")
	
	Подстроки = Новый Массив;
	МногострочнаяСтрока = СтрЗаменить(ИсходнаяСтрока, Разделитель, Символы.ПС);
	
	Для Индекс = 1 По СтрЧислоСтрок(МногострочнаяСтрока) Цикл
		Подстроки.Добавить(СтрПолучитьСтроку(МногострочнаяСтрока, Индекс));
	КонецЦикла; 
	
	Возврат Подстроки;
	
КонецФункции
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаСервер_мОбработчикиНаСервере

Процедура ВыполнитьОбработчикиНаСервере(СтруктураОбработчиков, ДопПараметры) Экспорт
	
	Для каждого мОбработчикКлючИЗначение Из СтруктураОбработчиков Цикл
		ПараметрыОбработчика = мОбработчикКлючИЗначение.Значение;
		ИмяОбработчика = "сбис" + мОбработчикКлючИЗначение.Ключ;
		Попытка
			Если ИмяОбработчика = "сбисДорасчитатьВалютныеСуммыПоДокументамУТ11" Тогда
				сбисДорасчитатьВалютныеСуммыПоДокументамУТ11(ПараметрыОбработчика, ДопПараметры.Документ, ДопПараметры.ГрязныйИни);
			Иначе
				Сообщить("Обработчика """+мОбработчикКлючИЗначение.Ключ+""" не существует.");
				Возврат;
			КонецЕсли;
		Исключение
			ВызватьИсключение "Ошибка при вызове мОбработчика " + """" + мОбработчикКлючИЗначение.Ключ + """: " + ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура сбисДорасчитатьВалютныеСуммыПоДокументамУТ11(ПараметрыОбработчика, Документ, ГрязныйИни) Экспорт
	
	МассивДокументов = Новый Массив;
	
	Для каждого ДокументКлючИЗначение Из ПараметрыОбработчика.МассивДокументов Цикл
		Если ДокументКлючИЗначение.Ключ = "сбисПараметрыУзла" Тогда
			Продолжить;	
		КонецЕсли;
		
		ДокументПараметр = СтрЗаменить(ДокументКлючИЗначение.Значение.Значение,"'","");
		
		МассивДокументов.Добавить(Вычислить(ДокументПараметр));
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.СуммыДокументовВВалютахУчета.РассчитатьСуммыДокументовВВалютахУчета(МассивДокументов);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаСервер_DBF_Сервер

Функция НовыйРаботаСДБФ(ПараметрыDBFВходящие) Экспорт
	Перем РаботаСDBF;
	РаботаСDBF = Новый Структура;
	СтрокиПодключенияDBF = Новый Массив;
	СтрокиПодключенияDBF.Добавить("Driver={Microsoft dBASE Driver (*.dbf)};DriverID=533;Dbq={СБИСКаталогDBF};");
	СтрокиПодключенияDBF.Добавить("Provider=Microsoft.ACE.OLEDB.12.0;Extended Properties='dBASE IV';Data Source={СБИСКаталогDBF};");
	РаботаСDBF.Вставить("Подключения",	Новый Соответствие);
	РаботаСDBF.Вставить("Параметры",	Новый Структура);
	РаботаСDBF.Вставить("Строки",		Новый Соответствие);
	РаботаСDBF.Параметры.Вставить("Шаблоны", СтрокиПодключенияDBF);
	Если ПараметрыDBFВходящие.Свойство("СтрокаСтатусы") Тогда
		//Есть готовая строка для работы со статусами
		РаботаСDBF.Строки.Вставить("Статусы", ПараметрыDBFВходящие.СтрокаСтатусы);
	КонецЕсли;
	Если ПараметрыDBFВходящие.Свойство("СтрокаСопоставление") Тогда
		//Есть готовая строка для работы с сопоставлением
		РаботаСDBF.Строки.Вставить("Сопоставление", ПараметрыDBFВходящие.СтрокаСопоставление);
	КонецЕсли;
	Возврат РаботаСDBF;
КонецФункции

Функция РаботаСДБФ_СоздатьСоединениеСДБФ(РаботаСДБФ, ПараметрыСоединенияВходящие) Экспорт
	Перем КлючСоединения, КаталогСоединения;
	СоединениеDBF = Новый Структура(
	"ВызывалосьСоздание,	Подключено,	ТребуетсяПовторныйВызов,Проверен,	Путь,							,ШаблоныЗапросов, Ошибка, Файлы, Хранилище, ВремяПодключения, Тип", 
	Ложь,					Ложь,		Истина,					Ложь,		ПараметрыСоединенияВходящие.Путь,Новый Соответствие);
	СоединениеDBF.Файлы = Новый Соответствие;
	Если		ПараметрыСоединенияВходящие.Свойство("ИмяФайла") Тогда
		СоединениеDBF.Файлы.Вставить(ПараметрыСоединенияВходящие.ИмяФайла, Новый Структура("Проверен, Есть", Ложь));
	ИначеЕсли	ПараметрыСоединенияВходящие.Свойство("Файлы") Тогда
		Если ТипЗнч(ПараметрыСоединенияВходящие.Файлы) = Тип("Соответствие") Тогда
			Для Каждого КлючИЗначение Из ПараметрыСоединенияВходящие.Файлы Цикл
				ИмяБД = ВРег(СтрЗаменить(КлючИЗначение.Значение, ".dbf", ""));
				СоединениеDBF.Файлы.Вставить(КлючИЗначение.Ключ, Новый Структура("ИмяФайла, ИмяБД, Проверен, Есть", КлючИЗначение.Значение, ИмяБД, Ложь));
			КонецЦикла;
		Иначе
			Для Каждого ИмяФайла Из ПараметрыСоединенияВходящие.Файлы Цикл
				ИмяБД = ВРег(СтрЗаменить(ИмяФайла, ".dbf", ""));
				СоединениеDBF.Файлы.Вставить(ИмяФайла, Новый Структура("ИмяФайла, ИмяБД, Проверен, Есть", ИмяФайла, ИмяБД, Ложь));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если Не ПараметрыСоединенияВходящие.Свойство("Ключ", КлючСоединения) Тогда
		КлючСоединения = СоединениеDBF.Путь;
	КонецЕсли;
	РаботаСДБФ.Подключения.Вставить(КлючСоединения, СоединениеDBF);
	
	ПараметрыСоединенияВходящие.Свойство("Тип", СоединениеDBF.Тип);
	Возврат СоединениеDBF;
	
КонецФункции
		
Функция РаботаСДБФ_ПолучитьСоединениеСДБФ(РаботаСДБФ, КлючСоединения) Экспорт
	
	Возврат РаботаСДБФ.Подключения.Получить(КлючСоединения);
	
КонецФункции
	
// Функция - Получает com-соединение с ДБФ статусов, чтобы при последующих операциях со статусами сразу обращаться к соединению, а не получать заново
//
// Параметры:
//  ПараметрыСоединенияВходящие	 - Структура
//		Файл - Строка (обязательный).
//		Ключ - Строка (необязательный)	 - если не указан, то Файл
//		Тип - Строка (обязательный) - для получения специфичной строки соединения DBF - Статусы/Сопоставление
//  ДопПараметры	 - Структура	 - для расширения
// 
// Возвращаемое значение:
//   - COM объект, соединение с DBF
//
Функция РаботаСДБФ_ПолучитьСоединениеБД(РаботаСДБФ, СоединениеСДБФ) Экспорт
	Если РаботаСДБФ = Неопределено Тогда
		ВызватьСбисИсключениеСервер(, "РаботаСДБФ.Получить", 735,,"Не настроено соединение для работы с DBF");
	КонецЕсли;
	Если СоединениеСДБФ = Неопределено Тогда
		ВызватьСбисИсключениеСервер(, "РаботаСДБФ.Получить", 735,,"Не настроено подключение к DBF");
	КонецЕсли;
	Если		СоединениеСДБФ.Подключено Тогда
#Область include_local_Статусы_DBF_ПодключениеDBF_ХранилищеПолучение
			СтруктураВХранилище = ПолучитьИзВременногоХранилища(СоединениеСДБФ.Хранилище);
			Если Не СтруктураВХранилище = Неопределено Тогда
				Возврат СтруктураВХранилище.БД;
			Иначе
				//Иначе - повтор создания
				СоединениеСДБФ.Подключено = Ложь;
				СоединениеСДБФ.ТребуетсяПовторныйВызов = Истина;
			КонецЕсли;
#КонецОбласти
	ИначеЕсли		СоединениеСДБФ.ВызывалосьСоздание
			И	Не	СоединениеСДБФ.ТребуетсяПовторныйВызов Тогда
		//Уже вызывалось, но не подключено
		ВызватьСбисИсключениеСервер(, "РаботаСДБФ.Подключить", 735,,"Не подключен каталог DBF " + СоединениеСДБФ.Путь);
	КонецЕсли;
	Возврат РаботаСДБФ_ПодключитьСоединениеБД(РаботаСДБФ, СоединениеСДБФ);
КонецФункции
	
// Функция - Получает com-соединение с ДБФ статусов, чтобы при последующих операциях со статусами сразу обращаться к соединению, а не получать заново
//
// Параметры:
//  ПараметрыСоединенияВходящие	 - Структура
//		Файл - Строка (обязательный).
//		Ключ - Строка (необязательный)	 - если не указан, то Файл
//		Тип - Строка (обязательный) - для получения специфичной строки соединения DBF - Статусы/Сопоставление
//  ДопПараметры	 - Структура	 - для расширения
// 
// Возвращаемое значение:
//   - COM объект, соединение с DBF
//
Функция РаботаСДБФ_ПодключитьСоединениеБД(РаботаСДБФ, СоединениеСДБФ)
	Перем КлючDBF;
	//Создаём новое.
	СтрокиДляОбработки = Новый Массив;
	СтрокаСоединения = РаботаСДБФ.Строки.Получить(СоединениеСДБФ.Тип);
	Если Не СтрокаСоединения = Неопределено Тогда
		СтрокиДляОбработки.Добавить(СтрЗаменить(СтрокаСоединения, "{СБИСКаталогDBF}", СоединениеСДБФ.Путь));
	КонецЕсли;
	Для Каждого СтрокаСоединить Из РаботаСДБФ.Параметры.Шаблоны Цикл
		СтрокиДляОбработки.Добавить(СтрЗаменить(СтрокаСоединить, "{СБИСКаталогDBF}", СоединениеСДБФ.Путь));
	КонецЦикла;
	
	Файл = Новый Файл(СоединениеСДБФ.Путь);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(СоединениеСДБФ.Путь);
	КонецЕсли;
	
	СоединениеСДБФ.ВызывалосьСоздание = Истина;
	
	БД = Новый COMОбъект("ADODB.Connection");
	СоединениеСДБФ.ТребуетсяПовторныйВызов = Ложь;//После создания объекта, повторно уже не потребуется вызывать. Дальше уже если упадёт, то всё.
	
	ЕстьКонтактБД = Ложь;
	Для Каждого СтрокаОбработать Из СтрокиДляОбработки Цикл
		Попытка
			БД.Open(СтрокаОбработать);
			ЕстьКонтактБД = Истина;
			Прервать;
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	Если Не ЕстьКонтактБД Тогда
		ВызватьСбисИсключениеСервер(, "ADODB.Connection.Open", 776,,"Не удалось установить подключение к DBF в " + СоединениеСДБФ.Путь,, "https://sbis.ru/help/integration/catalog/driver_not_found");
	КонецЕсли;
	СоединениеСДБФ.Подключено = Истина;
#Область include_local_Статусы_DBF_ПодключениеDBF_ХранилищеЗапись
		сАдресВХранилище = ПоместитьВоВременноеХранилище(Новый Структура("БД", БД), Новый УникальныйИдентификатор());
		СоединениеСДБФ.Подключено = Истина;
		СоединениеСДБФ.Вставить("Хранилище", сАдресВХранилище);
#КонецОбласти
	Возврат БД;
КонецФункции

Процедура  РаботаСДБФ_ЗавершитьСоединениеСДБФ(РаботаСДБФ, ПараметрыСоединения) Экспорт
	ПараметрыСоединения.Подключено = Ложь;
	ПараметрыСоединения.Удалить("Хранилище");
	ПараметрыСоединения.ВызывалосьСоздание = Ложь;
КонецПроцедуры

Функция ПолучитьЗначениеИзРекордСетDBF(RecordSet, Ключ, ЗначениеПоУмолчанию = "") Экспорт
	
	Попытка
		ЗначениеВРекорд = RecordSet.Fields(Ключ).value;
	Исключение
		ВызватьСбисИсключениеСервер(ИнформацияОбОшибке(), "СопоставлениеНоменклатуры_ДБФ.ПолучитьЗначениеИзРекордСет",,,"В рекордсет отсутствует поле " + Ключ);
	КонецПопытки;
	Если ЗначениеВРекорд = Null Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	Возврат ЗначениеВРекорд;
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаСервер_ВнешняяОбработка

// Функция - Возвращает возможные места поиска ВО. Для сервера это справочники. На клиенте добавляется каталог настроек 
// 
// Возвращаемое значение:
//   - Массив структур
//
Функция ВнешняяОбработка_МестаПоискаПоУмолчаниюСервер()
	
	МестаПоиска = Новый Массив();
	
	МестаПоиска.Добавить(Новый Структура("Путь, Алгоритм", "Справочники.ДополнительныеОтчетыИОбработки",	"Запрос"));
	МестаПоиска.Добавить(Новый Структура("Путь, Алгоритм", "Справочники.ВнешниеОбработки",					"Запрос"));	

	Возврат МестаПоиска;
	
КонецФункции

// Функция - Выполняет поиск обработки. Возможные места поиска: файл, справочник, конфигурация. Возвращает путь или ссылку на ВО
//
// Параметры:
//  ПараметрыПоиска	 - 	 Структура(ИмяОбработки, МестаПоиска*) 
//	*Необязательные  
//
// Возвращаемое значение:
//   Строка - путь к файловой обработке
//   СправочникСсылка - на элемент справочника Доп.Обработки
//	 Неопределено - обработка не найдена
Функция ВнешняяОбработка_НайтиПоИмениНаСервере(ПараметрыПоиска) Экспорт
	Перем Результат;
	
	ИмяОбработки = ПараметрыПоиска.ИмяОбработки;
	
	Если ПараметрыПоиска.Свойство("МестаПоиска") Тогда
		МестаПоиска = ПараметрыПоиска.МестаПоиска;
	Иначе
		МестаПоиска = ВнешняяОбработка_МестаПоискаПоУмолчаниюСервер();
	КонецЕсли;
	
	Для Каждого МестоПоиска Из МестаПоиска Цикл
		
		ПутьПоиска		= МестоПоиска.Путь;
		АлгоритмПоиска	= МестоПоиска.Алгоритм;
		СтрокаОшибки	= "Не удалось подключить внешние функции из """ + ПутьПоиска + """ по причине: ";
		
		Если Не ЗначениеЗаполнено(АлгоритмПоиска) Тогда
			Если Булево(СтрЧислоВхождений(МестоПоиска, "\")) Тогда
				АлгоритмПоиска = "Каталог";
			Иначе
				АлгоритмПоиска = "Запрос";
			КонецЕсли;
		КонецЕсли;
		
		Если АлгоритмПоиска = "Каталог" Тогда//Это каталог, проверить наличие обработки
			
			ОбластьПоиска = ПутьПоиска + ИмяОбработки + ".epf";
			
			Попытка
				ФайлВнешнейОбработки = Новый Файл(ОбластьПоиска);
				
				Если Не ФайлВнешнейОбработки.Существует() Тогда//Такого файла нет
					Продолжить;
				КонецЕсли;
				
				Результат = ФайлВнешнейОбработки;
			Исключение
				Сообщить(СтрокаОшибки + ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
		Иначе//Найти область по метаданным и проверить наличие обработки.
			
			МногоСтрочнаяЗапись = СтрЗаменить(ПутьПоиска, ".", Символы.ПС);
			
			Если СтрЧислоСтрок(МногоСтрочнаяЗапись) = 0 Тогда
				Сообщить(СтрокаОшибки	+ "Неверно передано место поиска!");
				Продолжить;
			КонецЕсли;
			
			СтрокаМетаданных	= СтрПолучитьСтроку(МногоСтрочнаяЗапись, 1);
			СтрокаПоиска		= СтрПолучитьСтроку(МногоСтрочнаяЗапись, 2);
			
			Попытка
				ОбластьПоиска	= Метаданные[СтрокаМетаданных];
			Исключение
				Сообщить(СтрокаОшибки + ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
			ОбъектМетаданных = ОбластьПоиска.Найти(СтрокаПоиска);
			
			Если		ОбъектМетаданных = Неопределено Тогда
				
				Продолжить;
				
			ИначеЕсли	ОбластьПоиска = Метаданные.Обработки И АлгоритмПоиска = "Метаданные" Тогда//Конфигурация
				
				ОбработкаФункций = ОбластьПоиска.Найти(ИмяОбработки);
				
				Если ОбработкаФункций = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Результат = ИмяОбработки;
				
			ИначеЕсли	АлгоритмПоиска = "Запрос" И	ОбластьПоиска = Метаданные.Справочники Тогда
				
				//Справочник обработок
				ОбластьПоиска = Справочники;
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				| ОбластьПоиска.Ссылка КАК Обработка
				|ИЗ
				| " + Лев(СтрПолучитьСтроку(МногоСтрочнаяЗапись, 1), СтрДлина(СтрПолучитьСтроку(МногоСтрочнаяЗапись, 1))-1) + "." + СтрокаПоиска + " КАК ОбластьПоиска
				|ГДЕ
				| НЕ ОбластьПоиска.ПометкаУдаления
				| И ОбластьПоиска.%РевизитПоиска% ПОДОБНО &ИмяФайла");
				
				
				Если СтрокаПоиска = "ДополнительныеОтчетыИОбработки" Тогда
					
					Запрос.УстановитьПараметр("ИмяФайла", "%"+ ИмяОбработки + "%");
					
					Если Не Метаданные.Перечисления.Найти("ВариантыПубликацииДополнительныхОтчетовИОбработок") = Неопределено Тогда
						Запрос.Текст = Запрос.Текст + "
						| И ОбластьПоиска.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)";
					КонецЕсли;
					
					РеквизитПоиска = "ИмяФайла";
					
				Иначе
					Запрос.УстановитьПараметр("ИмяФайла", "%"+ ИмяОбработки + "%");
					РеквизитПоиска = "Наименование";
				КонецЕсли;
				
				Если МестоПоиска.Свойство("РеквизитПоиска") Тогда
					РеквизитПоиска = МестоПоиска.РеквизитПоиска 
				КонецЕсли;
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РевизитПоиска%",РеквизитПоиска);  
				
				РезультатЗапроса = Запрос.Выполнить().Выбрать();
				Если РезультатЗапроса.Следующий() Тогда
					Обработка = РезультатЗапроса.Обработка;
					
					Результат = Обработка;
				КонецЕсли;
				
			Иначе//Неизвестное место
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат) Тогда 
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецФункции

// Функция - Создает новый экземпляр обработки.
//
// Параметры:
//  ВнешняяОбработка	- ссылка на справочник ДопОбработок или путь к файлу 
// 
// Возвращаемое значение:
//   - ОбработкаОбъект.<Имя обработки>. 
//
Функция ВнешняяОбработка_Создать(ВнешняяОбработка)
	
	Если НЕ ТипЗнч(ВнешняяОбработка) = Тип("Строка") Тогда
		
		Если ВнешняяОбработка.Метаданные().Реквизиты.Найти("ХранилищеВнешнейОбработки") = Неопределено Тогда
			РеквизитХранилище = "ХранилищеОбработки";
		Иначе
			РеквизитХранилище = "ХранилищеВнешнейОбработки";
		КонецЕсли;
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда		
			ИмяВременногоФайла		= ПолучитьИмяВременногоФайла();
			ДвоичныеДанные			= ВнешняяОбработка[РеквизитХранилище].Получить();
			ДвоичныеДанные.Записать(ИмяВременногоФайла); 
			АдресОбработки			= ИмяВременногоФайла;
		#Иначе		
			АдресОбработки = ПолучитьНавигационнуюСсылку(ВнешняяОбработка, РеквизитХранилище);			
		#КонецЕсли
		
	Иначе
		
		АдресОбработки = ВнешняяОбработка;
		
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Результат	= ВнешниеОбработки.Создать(ИмяВременногоФайла);
	#Иначе
		АдресОбработки	= ВнешниеОбработки.Подключить(АдресОбработки,,Ложь);
		Результат		= ВнешниеОбработки.Создать(АдресОбработки);
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

// Функция - Получает макет из внешней обработки. Опционально помещает во ВременноеХранилище или извлекает текст из макета. 
//
// Параметры:
//  ПараметрыОбработки	 -	Структура(ВнешняяОбработка*, ИмяОбработки*)
//							ВнешняяОбработка	- ссылка на справочник ДопОбработок или путь к файлу
//                          ИмяОбработки		- Имя обработки для поиска обработки, если ВнешняяОбработка не заполнено  	
//  ДопПараметры*		 -	Структура*(Текст, ПоместитьВХранилище*) 
//                       	Текст(Булево) - Вернуть текст из макета
//							ПоместитьВХранилище - Поместить макет во временное хранилище и вернуть ссылку	
// *Необязательные
// Возвращаемое значение:   Двоичные данные, Строка(Адрес в ВХ или текст макета), Неопределено, если не удалось найти обработку 
//   - 
//
Функция ВнешняяОбработка_ПолучитьМакетНаСервере(ПараметрыОбработки, ДопПараметры = Неопределено) Экспорт
	Перем Результат;
	
	Если ПараметрыОбработки.Свойство("ВнешняяОбработка") Тогда
		
		ВнешняяОбработка = ПараметрыОбработки.ВнешняяОбработка;
		
	Иначе
		
		ВнешняяОбработка = ВнешняяОбработка_НайтиПоИмениНаСервере(ПараметрыОбработки);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВнешняяОбработка) Тогда
		ВызватьСбисИсключениеСервер("Не удалось найти внешнюю обработку "+ПараметрыОбработки.ИмяОбработки,"ВнешняяОбработка_ПолучитьМакетНаСервере"); 
	КонецЕсли;
	
	ВнешняяОбработкаОбъект = ВнешняяОбработка_Создать(ВнешняяОбработка);
	Макет					= ВнешняяОбработкаОбъект.ПолучитьМакет(ПараметрыОбработки.ИмяМакета);
	
	Если НЕ ДопПараметры = Неопределено Тогда
		
		Если ДопПараметры.Свойство("Текст")	И ДопПараметры.Текст Тогда
			Результат = Макет.ПолучитьТекст()
		ИначеЕсли ДопПараметры.Свойство("ПоместитьВХранилище")	И ДопПараметры.ПоместитьВХранилище Тогда
			Результат = ПоместитьВоВременноеХранилище(Макет);	
		КонецЕсли;
		
	Иначе
		Результат = Макет;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Получает информацию о ВО из элемента справочника. Только для обработок, хранящихся в справочнике(!)
//
// Параметры:
//  ПараметрыОбработки	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ВнешняяОбработка_ПолучитьСведенияНаСервере(ПараметрыОбработки) Экспорт
	
	Если ПараметрыОбработки.Свойство("ВнешняяОбработка") Тогда
		
		ВнешняяОбработка = ПараметрыОбработки.ВнешняяОбработка;
		
	Иначе
		
		ВнешняяОбработка = ВнешняяОбработка_НайтиПоИмениНаСервере(ПараметрыОбработки);
		
	КонецЕсли;
		
	Сведения = Новый Структура("Ссылка, Версия, ИмяФайла, ИмяОбъекта");
	ЗаполнитьЗначенияСвойств(Сведения, ВнешняяОбработка);
	
	Возврат Сведения;	
	
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаСервер_Классы

#Область include_core2_vo2_Модуль_МодульОбъектаСервер_Классы_СбисИсключение

//Процедура генерирует и вызывает ExtSysException(СбисИсключение)
Процедура ВызватьСбисИсключениеСервер(БазоваяОшибка=Неопределено, СбисИмяКоманды,
								СбисКод=Неопределено, СбисСообщение=Неопределено, СбисДетализация=Неопределено, СбисДамп=Неопределено, СбисХелп=Неопределено) Экспорт
	ИсключениеВызов = НовыйСбисИсключениеСервер(БазоваяОшибка, СбисИмяКоманды, СбисКод, СбисСообщение, СбисДетализация, СбисДамп, СбисХелп);
	ВызватьИсключение(ЗначениеВСтрокуВнутр(ИсключениеВызов));
КонецПроцедуры

//Конструктор ExtSysException
//БазоваяОшибка		- (необяз) ExtSysException(СбисИсключение)/ИнформацияОбОшибке/Структура("code, message, detail, dump, help")/Строка (в json/произвольная)/Число(код ошибки)
//СбисИмяКоманды	- Имя команды в стек
//Работает если в БазовойОшибке что-то неопределено, иначе берутся значения по-умолчанию
//СбисКод			- (необяз)код для новой ошибки. 		По-умолч 100
//СбисСообщение		- (необяз)сообщение для новой ошибки.	По-умолч сообщение по коду 
//СбисДетализация	- (необяз)детализация для новой ошибки.	По-умолч сообщение по коду
//СбисДамп			- (необяз)дамп ошибки
//СбисХелп			- (необяз)ссылка на решение проблемы
Функция НовыйСбисИсключениеСервер(БазоваяОшибка=Неопределено,	СбисИмяКоманды,
							СбисКод=Неопределено,		СбисСообщение=Неопределено, СбисДетализация=Неопределено, 
							СбисДамп=Неопределено,		СбисХелп=Неопределено) Экспорт
	Перем СбисСтек, СбисОсновнаяОшибка, СтрокаРазбора;
	СбисИсключение = СбисИсключение_Пустое();
	СбисИсключение.code			= СбисКод;
	СбисИсключение.message		= СбисСообщение;
	СбисИсключение.details		= СбисДетализация;
	СбисИсключение.methodName	= СбисИмяКоманды;
	СбисИсключение.dump			= СбисДамп;
	СбисИсключение.help			= СбисХелп;

	//Проверить перегрузки для конструктора
	Если		ТипЗнч(БазоваяОшибка) = Тип("ИнформацияОбОшибке")	Тогда
		СбисОсновнаяОшибка = СбисИсключение_ИнформацияОбОшибке(БазоваяОшибка);
	ИначеЕсли	ТипЗнч(БазоваяОшибка) = Тип("Строка")				Тогда
		СбисОсновнаяОшибка = СбисИсключение_Строка(БазоваяОшибка);
	ИначеЕсли	ТипЗнч(БазоваяОшибка) = Тип("Число")				Тогда
		СбисОсновнаяОшибка = СбисИсключение_Число(БазоваяОшибка);
	ИначеЕсли	ТипЗнч(БазоваяОшибка) = Тип("Структура")			Тогда
		СбисОсновнаяОшибка = СбисИсключение_Структура(БазоваяОшибка);
	Иначе
		//Неизвестная ошибка
		СбисОсновнаяОшибка = СбисИсключение_Пустое();
		Если Не БазоваяОшибка = Неопределено Тогда
			СбисОсновнаяОшибка.dump = Новый Структура("exception_value", БазоваяОшибка);
		КонецЕсли;
	КонецЕсли;
	
	//Если не указаны основные поля для новой ошибки
	Если СбисИсключение.code = Неопределено Тогда
		Если СбисОсновнаяОшибка = Неопределено Тогда
			СбисИсключение.code = 100;
		Иначе
			СбисИсключение.code = СбисОсновнаяОшибка.code;
		КонецЕсли;
	КонецЕсли;
	Если СбисИсключение.message = Неопределено Тогда
		Если		СбисОсновнаяОшибка = Неопределено
			Или	Не	СбисОсновнаяОшибка.Свойство("message", СбисИсключение.message)
			Или		СбисИсключение.message = Неопределено Тогда
			СбисИсключение.message = СбисИсключение_СообщениеПоКоду(СбисИсключение.code);
		КонецЕсли;
	КонецЕсли;
	Если СбисИсключение.details = Неопределено Тогда
		Если СбисОсновнаяОшибка = Неопределено Тогда
			СбисИсключение.details = СбисИсключение.message;
		ИначеЕсли Не СбисОсновнаяОшибка.Свойство("details", СбисИсключение.details) Тогда
			СбисИсключение.details = СбисОсновнаяОшибка.detail;
		КонецЕсли;
	КонецЕсли;
	Если СбисИсключение.help = Неопределено Тогда
		Если	СбисОсновнаяОшибка <> Неопределено
			И	СбисОсновнаяОшибка.Свойство("help") Тогда
			СбисИсключение.help = СбисОсновнаяОшибка.help;
		КонецЕсли;
	КонецЕсли;
	
	Если СбисОсновнаяОшибка = Неопределено Тогда
		Возврат СбисИсключение;
	ИначеЕсли Не СбисОсновнаяОшибка.Свойство("base", СбисИсключение.base) Тогда
		СбисИсключение.base = СбисОсновнаяОшибка;
	КонецЕсли;
	//Добавим основную ошибку в стек
	Если СбисОсновнаяОшибка.Свойство("stack", СбисСтек) Тогда
		СбисОсновнаяОшибка.Удалить("stack");
	Иначе
		СбисСтек = Новый Массив;
		СбисЗаписьВСтек = Новый Структура("methodName, code, message, dump");
		ЗаполнитьЗначенияСвойств(СбисЗаписьВСтек, СбисОсновнаяОшибка);
		Если		СбисОсновнаяОшибка.Свойство("method_Name") Тогда
			СбисЗаписьВСтек.methodName = СбисОсновнаяОшибка.method_Name;
		ИначеЕсли	СбисОсновнаяОшибка.Свойство("Action") Тогда
			СбисЗаписьВСтек.methodName = СбисОсновнаяОшибка.Action;
		КонецЕсли;
		СбисСтек.Добавить(СбисЗаписьВСтек);
	КонецЕсли;
	//Добавим обрабатываемую ошибку в стек
	СбисЗаписьВСтек = Новый Структура("methodName, code, message, dump");
	ЗаполнитьЗначенияСвойств(СбисЗаписьВСтек, СбисИсключение);
	СбисСтек.Вставить(0, СбисЗаписьВСтек);
	СбисИсключение.Вставить("stack", СбисСтек);
	Если СбисОсновнаяОшибка.Свойство("data") Тогда
		СбисИсключение.Вставить("data", СбисОсновнаяОшибка.data);
	КонецЕсли;
	//пробросим дамп в основную ошибку, чтоб не потерять
	Если СбисДамп = Неопределено Тогда
		Если СбисОсновнаяОшибка.Свойство("dump", СбисИсключение.dump) Тогда
			СбисОсновнаяОшибка.Удалить("dump");
		КонецЕсли;
	КонецЕсли;
	Возврат СбисИсключение;
	
КонецФункции

// Функция - возвращает пустое исключение
// 
// Возвращаемое значение:
//   - 
//
Функция СбисИсключение_Пустое()

	Возврат Новый Структура("code, message, details, methodName, dump, help, base, data", 100);

КонецФункции

// Функция - возвращает пустое исключение
// 
// Возвращаемое значение:
//   - 
//
Функция СбисИсключение_ВСтрокуСервер(СбисИсключение, ДопПарамеры = Неопределено) Экспорт 

	Если	Не ТипЗнч(СбисИсключение) = Тип("Структура")
		Или Не СбисИсключение.Свойство("code") 
		Или Не СбисИсключение.Свойство("details") Тогда
		ИсключениеВСтроку = НовыйСбисИсключениеСервер(СбисИсключение, ДопПарамеры);
	Иначе
		ИсключениеВСтроку = СбисИсключение;
	КонецЕсли;
	Возврат ЗначениеВСтрокуВнутр(ИсключениеВСтроку);

КонецФункции

// Функция - генерирует ExtSysException из информации об ошибке
//
// Параметры:
//  ВыбранныйИнформацияОбОшибке	 - ИнформацияОбОшибке	 - вызванное исключение, которое не является запакованным ExtSysException
// 
// Возвращаемое значение:
//  Структура - ExtSysException
//
Функция СбисИсключение_ИнформацияОбОшибке(БазоваяОшибка)
	
	Попытка
		Возврат ЗначениеИзСтрокиВнутр(БазоваяОшибка.Описание);
	Исключение
		//Это не завёрнутый ExtSysException, дальше разбираем как 1С-ное исключение
	КонецПопытки;

	СложнаяСтруктура		= Ложь;
	КодНовогоИсключения		= 500;
	
	СтруктураОшибкиСообщения = БазоваяОшибка;
	Пока ТипЗнч(СтруктураОшибкиСообщения.Причина) = Тип("ИнформацияОбОшибке") Цикл
		СтруктураОшибкиСообщения = СтруктураОшибкиСообщения.Причина;
		СложнаяСтруктура = Истина;
	КонецЦикла;
	
	Если СложнаяСтруктура Тогда
		СообщениеОбОшибке = БазоваяОшибка.Описание;
		ДетализацияОшибки = СтруктураОшибкиСообщения.Описание;
	ИначеЕсли БазоваяОшибка.Причина = Неопределено Тогда
		СообщениеОбОшибке = СбисИсключение_СообщениеПоКоду(КодНовогоИсключения);
		ДетализацияОшибки = БазоваяОшибка.Описание;
	Иначе
		СообщениеОбОшибке = БазоваяОшибка.Описание;
		ДетализацияОшибки = БазоваяОшибка.Причина;
	КонецЕсли;
	Если Найти(ДетализацияОшибки, "ODBC") Тогда
		Если Не Найти(ДетализацияОшибки, "dbf' уже существует") Тогда
			КодНовогоИсключения	= 776; 
			СообщениеОбОшибке = ДетализацияОшибки;
		КонецЕсли;
	ИначеЕсли ДетализацияОшибки = "Не подключен файл статусов DBF." Тогда
		КодНовогоИсключения	= 717;
		ДетализацияОшибки	= СообщениеОбОшибке + " " + ДетализацияОшибки;
		СообщениеОбОшибке	= СбисИсключение_СообщениеПоКоду(КодНовогоИсключения);
	КонецЕсли;
	
	СбисДамп = Новый Структура("ИсходнаяСтрока, НомерСтроки, ДетализацияОшибки", БазоваяОшибка.ИсходнаяСтрока, БазоваяОшибка.НомерСтроки, ДетализацияОшибки);
	СбисОсновнаяОшибка = Новый Структура("code, message, details", КодНовогоИсключения, СообщениеОбОшибке, ДетализацияОшибки);
	СбисОсновнаяОшибка.Вставить("methodName",	БазоваяОшибка.ИмяМодуля);
	СбисОсновнаяОшибка.Вставить("dump",			СбисДамп);
	СбисОсновнаяОшибка.Вставить("help",			СбисИсключение_РешениеПроблемыПоИсключению(СбисОсновнаяОшибка));
	
	//СбисОсновнаяОшибка = Новый Структура("code,details,methodName,dump,message,help", КодНовогоИсключения, ДетализацияОшибки, БазоваяОшибка.ИмяМодуля, СбисДамп, СообщениеОбОшибке, СбисХелп);
	Возврат СбисОсновнаяОшибка;
	
КонецФункции

// Функция - генерирует ExtSysException из строки
//
// Параметры:
//  БазоваяОшибка	 - Строка	 - исключение, которое может быть сериализованнйо в JSON строкой, либо просто сообщением.
// 
// Возвращаемое значение:
//  Структура - ExtSysException
//
Функция СбисИсключение_Строка(БазоваяОшибка)
    Перем СтрокаРазбора;
	
	СбисОсновнаяОшибка = СбисИсключение_Пустое();
	
	Если Лев(БазоваяОшибка, 1) = "{" Тогда
		//Это JSON - объект с ошибкой
		СтрокаРазбора = БазоваяОшибка;
	ИначеЕсли	Лев(БазоваяОшибка,35) = "callBLObject(): Метод бизнес логики"
		И		Найти(БазоваяОшибка,"вернул ошибку") Тогда
		//Это ошибка от БЛ в формате JSON
		СтрокаРазбора = Сред(БазоваяОшибка, Найти(БазоваяОшибка,"{"));
		СтрокаРазбора = Лев(СтрокаРазбора, СтрДлина(СтрокаРазбора)-1);
	ИначеЕсли Найти(БазоваяОшибка,"{""jsonrpc"":") Тогда
		//Это ошибка от БЛ в формате JSON
		СтрокаРазбора = Сред(БазоваяОшибка, Найти(БазоваяОшибка,"{""jsonrpc"":"));
	КонецЕсли;	
	Если СтрокаРазбора = Неопределено Тогда
		//Это сообщение неизвестной ошибки.
		СбисОсновнаяОшибка.message	= БазоваяОшибка;
		СбисОсновнаяОшибка.details	= БазоваяОшибка;
	Иначе
		Попытка
			СбисОсновнаяОшибка = СбисПрочитатьJSON_НаСервере(СтрокаРазбора);
			Если СбисОсновнаяОшибка.Свойство("Error") Тогда
				СбисОсновнаяОшибка = СбисОсновнаяОшибка.Error;
			КонецЕсли;
		Исключение
			СбисОсновнаяОшибка.message	= БазоваяОшибка;
			СбисОсновнаяОшибка.details	= БазоваяОшибка;
		КонецПопытки;
	КонецЕсли;
	Возврат СбисОсновнаяОшибка;
	
КонецФункции	

Функция СбисИсключение_Число(БазоваяОшибка)
	
	СбисОсновнаяОшибка = СбисИсключение_Пустое();
	СбисОсновнаяОшибка.code		= БазоваяОшибка;
	СбисОсновнаяОшибка.message	= СбисИсключение_СообщениеПоКоду(БазоваяОшибка);
	СбисОсновнаяОшибка.details	= СбисОсновнаяОшибка.message;
    Возврат СбисОсновнаяОшибка;
	
КонецФункции

// Функция - генерирует ExtSysException из структуры
//
// Параметры:
//  БазоваяОшибка	 - Строка	 - исключение, которое может быть сериализованнйо в JSON строкой, либо просто сообщением.
// 
// Возвращаемое значение:
//  Структура - ExtSysException
//
Функция СбисИсключение_Структура(БазоваяОшибка)
	
	СбисОсновнаяОшибка = СбисИсключение_Пустое();
	Если БазоваяОшибка.Свойство("code") Тогда
		ЗаполнитьЗначенияСвойств(СбисОсновнаяОшибка, БазоваяОшибка);
		СбисТест =	(СбисОсновнаяОшибка.details = Неопределено
				И	БазоваяОшибка.Свойство("detail",		СбисОсновнаяОшибка.details));
		СбисТест =	(СбисОсновнаяОшибка.methodName = Неопределено
				И	БазоваяОшибка.Свойство("method_name",	СбисОсновнаяОшибка.methodName));
	Иначе
		СбисОсновнаяОшибка.dump = Новый Структура("exception_value", БазоваяОшибка);
	КонецЕсли;
	
	Возврат СбисОсновнаяОшибка;
	
КонецФункции
	
// Функция - генерирует ExtSysException из информации об ошибке
//
// Параметры:
//  ВыбранныйИнформацияОбОшибке	 - ИнформацияОбОшибке	 - вызванное исключение, которое не является запакованным ExtSysException
// 
// Возвращаемое значение:
//  Структура - ExtSysException
//
Функция СбисИсключение_РешениеПроблемыПоИсключению(СбисИсключение)
	
	Если СбисИсключение.code = 776 Тогда
		Если	Найти(СбисИсключение.methodName, "ДБФ")
			И	СбисИсключение.message = СбисИсключение.details Тогда 
			Возврат "https://sbis.ru/help/integration/catalog/driver_not_found";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция СбисИсключение_СообщениеПоКоду(СбисКодОшибки) Экспорт
	Если		СбисКодОшибки = 100 Тогда
		Возврат "Неизвестная ошибка системы";
	ИначеЕсли	СбисКодОшибки = 300 Тогда
		Возврат "Неизвестная ошибка БЛ";
	ИначеЕсли	СбисКодОшибки = 301 Тогда
		Возврат "Сервис СБИС.Диск временно недоступен";
	ИначеЕсли	СбисКодОшибки = 400 Тогда
		Возврат "Неизвестная ошибка СБИС Плагина";
	ИначеЕсли	СбисКодОшибки = 412 Тогда
		Возврат	"Работа СБИС Плагин остановлена";
	ИначеЕсли	СбисКодОшибки = 409 Тогда
		Возврат "Сеанс с учетной системой завершен";
	ИначеЕсли	СбисКодОшибки = 500 Тогда
		Возврат "Неизвестная ошибка клиента";
	ИначеЕсли	СбисКодОшибки = 600 Тогда
		Возврат "Неизвестная ошибка настроек";
	ИначеЕсли	СбисКодОшибки = 610 Тогда
		Возврат "Отсутствует файл настроек для данного типа данных";		
	ИначеЕсли	СбисКодОшибки = 700 Тогда
		Возврат "Неизвестная ошибка подключения";
	ИначеЕсли	СбисКодОшибки = 717 Тогда
		Возврат "Несовместимая версия файла базы данных";
	ИначеЕсли	СбисКодОшибки = 721 Тогда
		Возврат "Неверно указан ИНН";
	ИначеЕсли	СбисКодОшибки = 724 Тогда
		Возврат "Организация неопределена";
	ИначеЕсли	СбисКодОшибки = 726 Тогда
		Возврат "Вложения неопределены";
	ИначеЕсли	СбисКодОшибки = 735 Тогда
		Возврат "Данная операция недоступна";
	ИначеЕсли	СбисКодОшибки = 755 Тогда
		Возврат "Не найден сертификат ЭП";
	ИначеЕсли	СбисКодОшибки = 756 Тогда
		Возврат "Подключение недоступно";
	ИначеЕсли	СбисКодОшибки = 760 Тогда
		Возврат "Неверные параметры фильтра";
	ИначеЕсли	СбисКодОшибки = 762 Тогда
		Возврат "Версия системы не поддерживается";
	ИначеЕсли	СбисКодОшибки = 770 Тогда
		Возврат "Ошибка XSLT";
	ИначеЕсли	СбисКодОшибки = 772 Тогда
		Возврат "Ошибка работы с файловой системой";
	ИначеЕсли	СбисКодОшибки = 773 Тогда
		Возврат "Неизвестная ошибка при выполнении метода";	
	ИначеЕсли	СбисКодОшибки = 775 Тогда
		Возврат "Не получен ответ от плагина";	
	ИначеЕсли	СбисКодОшибки = 776 Тогда
		Возврат "Запуск программы/функции/метода не удался";	
	ИначеЕсли	СбисКодОшибки = 779 Тогда
		Возврат "Не найден объект";	
	ИначеЕсли 	СбисКодОшибки = 784 Тогда
		Возврат "Ошибка в настройках соединения";
	ИначеЕсли	СбисКодОшибки = 790 Тогда
		Возврат "Обработка прервана пользователем"
	КонецЕсли;
	Возврат "Неизвестная ошибка системы";
КонецФункции

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаСервер_Классы_СопоставлениеНоменклатуры

#Область include_core2_vo2_Модуль_МодульОбъектаСервер_Классы_СопоставлениеНоменклатуры_СтруктураСтрок

#Область include_core2_vo2_Модуль_МодульОбъектаСервер_Классы_СопоставлениеНоменклатуры_СтруктураСтрок_СтрокаСопоставленияСБИС

// Функция - создаёт описание сопоставления номенклатуры СБИС
//
// Параметры:
//  ДанныеЗаполнитьВходящие	 - Структура -  Строка входящего документа
//											ИЛИ Строка с формы входящего документа
//											ИЛИ Какая то еще структура
//  ИмяСБИС	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
// Коммент МАИ:
// Все штуки с окончанием "СБИС" - это касательно номенклатуры контрагента, 1С - нашей
//
//
Функция НовыйСтрокаСопоставленияСБИССервер(ДанныеЗаполнитьВходящие = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("_класс", "СтрокаСопоставленияСБИС");
	Результат.Вставить("Номенклатура1С", Новый Соответствие);
	Результат.Вставить("НоменклатураСБИС", Новый Структура);
	Результат.Вставить("БазоваяЕдиницаОКЕИ", "796");  // 796 - ОКЕИ единицы "штуки", наиболее часто использующаяся единица
	
	Если НЕ ДанныеЗаполнитьВходящие = Неопределено
		И ДанныеЗаполнитьВходящие.Свойство("ИдентификаторДокумента")
		И ЗначениеЗаполнено(ДанныеЗаполнитьВходящие.ИдентификаторДокумента) Тогда
		
		Результат.Вставить("ИдентификаторДокумента", ДанныеЗаполнитьВходящие.ИдентификаторДокумента); // Нужно для сопоставления в СБИС
	Иначе
		Результат.Вставить("ИдентификаторДокумента", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДопПараметры) Тогда
		Для Каждого Параметр Из ДопПараметры Цикл
			// Заполняем доп. параметры, например:
			// - "ИдентификаторДокумента" (напр. Заказ) для записи и чтения сопоставлений с него
			// - "ИдСтроки" - ключ для связи
			Результат.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	Иначе
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	// Определяем приоритет для реквизита, который будет использоваться в качестве кода для сопоставления("Код") с типом "ТипКода": 
	// при заполнении класса берется первое по приоритету доступное и заполненное значение из "ДанныеЗаполнитьВходящие"
	Если ДопПараметры.Свойство("ПорядокАвтоматическогоСопоставления") Тогда
		// Удаляем GTIN из списка, т.к. он заполняется в отельном поле
		ИндексGTIN = ДопПараметры.ПорядокАвтоматическогоСопоставления.Найти("GTIN");
		Если ИндексGTIN <> Неопределено Тогда
			ДопПараметры.ПорядокАвтоматическогоСопоставления.Удалить(ИндексGTIN);
		КонецЕсли;
	Иначе
		ДопПараметры.Вставить("ПорядокАвтоматическогоСопоставления", ПорядокАвтоматическогоСопоставленияПоУмолчанию());
	КонецЕсли;
	
	Результат.НоменклатураСБИС.Вставить("Наименование");
	Результат.НоменклатураСБИС.Вставить("Идентификатор");
	Результат.НоменклатураСБИС.Вставить("Код");
	Результат.НоменклатураСБИС.Вставить("ТипКода");
	Результат.НоменклатураСБИС.Вставить("GTIN");
	Результат.НоменклатураСБИС.Вставить("Единицы", Новый Соответствие);
	
	Результат.НоменклатураСБИС.Вставить("Цена");
	Результат.НоменклатураСБИС.Вставить("Кол_во");
	Результат.НоменклатураСБИС.Вставить("Сумма");
	Результат.НоменклатураСБИС.Вставить("СуммаБезНал");
	Результат.НоменклатураСБИС.Вставить("СуммаНДС");
	Результат.НоменклатураСБИС.Вставить("СтавкаНДС");
	
	Результат.НоменклатураСБИС.Вставить("Характеристика", Новый Структура);
	Результат.НоменклатураСБИС.Характеристика.Вставить("Наименование");
	Результат.НоменклатураСБИС.Характеристика.Вставить("Идентификатор");
	
	Если Не ДанныеЗаполнитьВходящие = Неопределено Тогда
		СтрокаСопоставленияСБИССервер_Заполнить(Результат, ДанныеЗаполнитьВходящие, ДопПараметры);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции
	
Функция СтрокаСопоставленияСБИССервер_КлючЗаписи(СтрокаСопоставленияСБИС) Экспорт
	
	Если		ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.КодПокупателя) Тогда
		Результат = СтрокаСопоставленияСБИС.Номенклатура.КодПокупателя;	
	ИначеЕсли	ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Идентификатор) Тогда
		Результат = СтрокаСопоставленияСБИС.Номенклатура.Идентификатор;
	Иначе
		Результат = СтрокаСопоставленияСБИС.Номенклатура.Наименование;
	КонецЕсли;
	
	Если		ЗначениеЗаполнено(СтрокаСопоставленияСБИС.Характеристика.Идентификатор) Тогда
		Результат = Результат + "_" + СтрокаСопоставленияСБИС.Характеристика.Идентификатор;
	ИначеЕсли	ЗначениеЗаполнено(СтрокаСопоставленияСБИС.Характеристика.Наименование) Тогда 
		Результат = Результат + "_" + СтрокаСопоставленияСБИС.Характеристика.Наименование;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Процедура СтрокаСопоставленияСБИССервер_Заполнить(СтрокаСопоставленияСБИС, СопоставлениеЗаполнить, ДопПараметры = Неопределено) Экспорт
	
	Перем СЛокальнаяПеременная, ТипКода;
	
	// ОСНОВНЫЕ ПОЛЯ
	
	// Океи базовой единицы измерения
	Если	Не (СопоставлениеЗаполнить.Свойство("БазоваяЕдиницаОКЕИ", СЛокальнаяПеременная) И ЗначениеЗаполнено(СЛокальнаяПеременная))Тогда
		СЛокальнаяПеременная = "796";
	КонецЕсли;
	СтрокаСопоставленияСБИС.БазоваяЕдиницаОКЕИ = СокрЛП(СЛокальнаяПеременная);	// по умолчанию "796" = шт	
	
	
	// НОМЕНКЛАТУРА СБИС
	
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Наименование) Тогда
		Если		СопоставлениеЗаполнить.Свойство("Название", СЛокальнаяПеременная) Тогда
			// Название в старом формате
		ИначеЕсли	СопоставлениеЗаполнить.Свойство("НазваниеСБИС", СЛокальнаяПеременная) Тогда
			// Название в новом формате	
		Иначе
			СЛокальнаяПеременная = "";
		КонецЕсли;
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Наименование = Лев(СокрЛП(СЛокальнаяПеременная), 240);
	КонецЕсли;
	
	Если СопоставлениеЗаполнить.Свойство("Цена")
		И ЗначениеЗаполнено(СопоставлениеЗаполнить.Цена) Тогда
		
		СписокСвойствЗаполнения = "Цена, Кол_во, Сумма, СуммаБезНал"; 
		ЗаполнитьЗначенияСвойств(СтрокаСопоставленияСБИС.НоменклатураСБИС, СопоставлениеЗаполнить, СписокСвойствЗаполнения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Код) Тогда
		// Код устанавливается в зависимости от приоритетного типа кода
		// Так же возможно указание типа кода напрямую
		Если	СопоставлениеЗаполнить.Свойство("ТипКода", ТипКода)
			И	ЗначениеЗаполнено(ТипКода)
			И	ТипКода <> "GTIN"
			И	ТипКода <> "GTIN_СБИС" Тогда
			
			Если		СопоставлениеЗаполнить.Свойство(ТипКода, СЛокальнаяПеременная) Тогда
				// В старом формате
			ИначеЕсли	СопоставлениеЗаполнить.Свойство(ТипКода + "СБИС", СЛокальнаяПеременная) Тогда
				// В новом формате
			Иначе
				СЛокальнаяПеременная = "";
			КонецЕсли;
			
		ИначеЕсли	ЗначениеЗаполнено(ДопПараметры)
				И	ДопПараметры.Свойство("ПорядокАвтоматическогоСопоставления") Тогда
			
			Для Каждого ТипКода Из ДопПараметры.ПорядокАвтоматическогоСопоставления Цикл
				Если		СопоставлениеЗаполнить.Свойство(ТипКода, СЛокальнаяПеременная)
						И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
					Прервать;
				ИначеЕсли	СопоставлениеЗаполнить.Свойство(ТипКода + "СБИС", СЛокальнаяПеременная)
						И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
					Прервать;
				Иначе
					СЛокальнаяПеременная = "";
				КонецЕсли;		
			КонецЦикла;
			
		Иначе
			СЛокальнаяПеременная = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
			ТипКода = "";
			СЛокальнаяПеременная = "";
		КонецЕсли;
		СтрокаСопоставленияСБИС.НоменклатураСБИС.ТипКода = СокрЛП(ТипКода);
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Код = Лев(СокрЛП(СЛокальнаяПеременная), 240);
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.GTIN) Тогда
		Если		СопоставлениеЗаполнить.Свойство("GTIN", СЛокальнаяПеременная)
			И	Не	СЛокальнаяПеременная = "-" Тогда
			// GTIN в старом формате
		ИначеЕсли	СопоставлениеЗаполнить.Свойство("GTIN_СБИС", СЛокальнаяПеременная)
			И	Не	СЛокальнаяПеременная = "-" Тогда
			// GTIN в новом формате
		Иначе
			СЛокальнаяПеременная = "";
		КонецЕсли;
		СтрокаСопоставленияСБИС.НоменклатураСБИС.GTIN = Лев(СокрЛП(СЛокальнаяПеременная), 240);
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Наименование) Тогда
		Если	СопоставлениеЗаполнить.Свойство("ХарактеристикаПоставщика",		СЛокальнаяПеременная) Тогда
			// Характеристика поставщика (в старов формате)
		ИначеЕсли	СопоставлениеЗаполнить.Свойство("Характеристика", СЛокальнаяПеременная)
				И	ТипЗнч(СЛокальнаяПеременная) = Тип("Структура")
				И	СЛокальнаяПеременная.Свойство("Значение", СЛокальнаяПеременная)
				И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
			// Характеристика поставщика (в старом формате, но в виде структуры(хз, КАК, строка жеж))
		ИначеЕсли	СопоставлениеЗаполнить.Свойство("ИмяХарактеристикиСБИС", СЛокальнаяПеременная)
				И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
			// Характеристика поставщика (в новом формате)
		Иначе
			СЛокальнаяПеременная = "";
		КонецЕсли;
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Наименование = Лев(СокрЛП(СЛокальнаяПеременная), 240);
	КонецЕсли;	
	
	// Единицы измерения СБИС
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Единицы) Тогда
		Если	СопоставлениеЗаполнить.Свойство("ЕдИзмСБИС", СЛокальнаяПеременная)
			И	ТипЗнч(СЛокальнаяПеременная) = Тип("Массив")
			И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
			
			Для каждого СтрЕдиница Из СЛокальнаяПеременная Цикл
				СопоставлениеДляЕдиницыСервер_ЗаполнитьСБИС(СтрокаСопоставленияСБИС, СтрЕдиница);	
			КонецЦикла;	
		Иначе
			СопоставлениеДляЕдиницыСервер_ЗаполнитьСБИС(СтрокаСопоставленияСБИС, СопоставлениеЗаполнить);
		КонецЕсли;
	КонецЕсли;
	
	// НОМЕНКЛАТУРА 1С
	Если ДопПараметры.Свойство("ЗаполнениеНоменклатуры1С")
		И СопоставлениеЗаполнить.Свойство("Номенклатура", СЛокальнаяПеременная)
		И ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		
		Если ТипЗнч(СЛокальнаяПеременная) = Тип("Массив") Тогда
			
			Для каждого Строка1С Из СЛокальнаяПеременная Цикл 
				
				СтрокаНоменклатуры1С = СтрокаСопоставленияСБИС.Номенклатура1С.Получить(Строка1С.Номенклатура);
				Если СтрокаНоменклатуры1С = Неопределено Тогда
					СтрокаНоменклатуры1С = НовыйОписаниеНоменклатуры1ССервер();
				КонецЕсли;
				
				ОписаниеНоменклатуры1ССервер_Заполнить(СтрокаНоменклатуры1С, Строка1С);
				СтрокаСопоставленияСБИС.Номенклатура1С.Вставить(Строка1С.Ссылка, СтрокаНоменклатуры1С);
				
			КонецЦикла;	
			
		Иначе
			
			СтрокаНоменклатуры1С = СтрокаСопоставленияСБИС.Номенклатура1С.Получить(Строка1С.Номенклатура);
			Если СтрокаНоменклатуры1С = Неопределено Тогда
				СтрокаНоменклатуры1С = НовыйОписаниеНоменклатуры1ССервер();
			КонецЕсли;
			
			ОписаниеНоменклатуры1ССервер_Заполнить(СтрокаНоменклатуры1С, СопоставлениеЗаполнить);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция  СтрокаСопоставленияСБИССервер_Получить(СтрокаСопоставленияСБИС, КлючЗначения) Экспорт
	
	Перем Результат;
	
	Если	Не	ТипЗнч(КлючЗначения) = Тип("Строка") Тогда
		Возврат СтрокаСопоставленияСБИС.Номенклатура1С.Получить(КлючЗначения);
	ИначеЕсли	КлючЗначения = "Номенклатура1С" Тогда
		Возврат СтрокаСопоставленияСБИС.Номенклатура1С;
	ИначеЕсли	КлючЗначения = "Код" Тогда
		Возврат СтрокаСопоставленияСБИС.НоменклатураСБИС.Код;
	ИначеЕсли	КлючЗначения = "ИмяНоменклатурыСБИС" Тогда
		Возврат СтрокаСопоставленияСБИС.НоменклатураСБИС.Наименование;
	ИначеЕсли	КлючЗначения = "ИдХарактеристикиСБИС" Тогда
		Если ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Идентификатор) Тогда
			Возврат СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Идентификатор;
		Иначе
			Возврат СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Наименование;
		КонецЕсли;	
	ИначеЕсли СтрокаСопоставленияСБИС.НоменклатураСБИС.Свойство(КлючЗначения, Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат СтрокаСопоставленияСБИС.НоменклатураСБИС.Единицы.Получить(КлючЗначения);
	КонецЕсли;
	
КонецФункции

Процедура СтрокаСопоставленияСБИССервер_Вставить(СтрокаСопоставленияСБИС, КлючЗначения, ЗначениеУстановить, ДопПараметры = Неопределено) Экспорт
	
	Если		Не	ТипЗнч(КлючЗначения) = Тип("Строка") Тогда
		СтрокаСопоставленияСБИС.Номенклатура1С.Вставить(КлючЗначения, ЗначениеУстановить);
	ИначеЕсли		КлючЗначения = "ИдНоменклатуры" Тогда
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Идентификатор	= ЗначениеУстановить;
	ИначеЕсли		КлючЗначения = "ИмяНоменклатуры" Тогда
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Наименование	= ЗначениеУстановить;
	ИначеЕсли		КлючЗначения = "ИдХарактеристики" Тогда
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Идентификатор= ЗначениеУстановить;
	ИначеЕсли		КлючЗначения = "ИмяХарактеристики" Тогда
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Наименование	= ЗначениеУстановить;
		Если Не ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Идентификатор) Тогда
			СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Идентификатор	= ЗначениеУстановить;
		КонецЕсли;
	ИначеЕсли		КлючЗначения = "Единица" Тогда
		Если ЗначениеУстановить._Класс = "СопоставлениеДляЕдиницы" Тогда
			Единица1С			= СопоставлениеДляЕдиницыСервер_Получить(ЗначениеУстановить, "Ссылка");
			ВладелецЕдиницы1С	= СопоставлениеДляЕдиницыСервер_Получить(ЗначениеУстановить, "Владелец");
			Если ВладелецЕдиницы1С = "-" Тогда

				Если Не ДопПараметры = Неопределено
					И	ДопПараметры.Свойство("Номенклатура") Тогда
					
					//Не известно, кто владелец но может быть указано в доп. параметрах.
					ЗаписьНоменклатуры1С = СтрокаСопоставленияСБИС.Номенклатура1С.Получить(ДопПараметры.Номенклатура);
					ОписаниеНоменклатуры1ССервер_Вставить(ЗаписьНоменклатуры1С, "Единица", ЗначениеУстановить);
					
				Иначе
					
					//Ставим единицу всем позициям сопоставления.
					Для Каждого КлючЗначениеНоменклатуры Из СтрокаСопоставленияСБИС.Номенклатура1С Цикл
						ОписаниеНоменклатуры1ССервер_Вставить(КлючЗначениеНоменклатуры.Значение, "Единица", ЗначениеУстановить);
					КонецЦикла;
					
				КонецЕсли;
			ИначеЕсли ВладелецЕдиницы1С = "" Тогда
				ИдЗаписиСбис = СопоставлениеДляЕдиницыСервер_Ключ(ЗначениеУстановить);
				СтрокаСопоставленияСБИС.НоменклатураСБИС.Единицы.Вставить(ИдЗаписиСбис, ЗначениеУстановить);
			Иначе
				ЗаписьНоменклатуры1С = СтрокаСопоставленияСБИС.Номенклатура1С.Получить(ВладелецЕдиницы1С);
				Если ЗаписьНоменклатуры1С = Неопределено Тогда
					ЗаписьНоменклатуры1С = НовыйОписаниеНоменклатуры1ССервер();
					СтрокаСопоставленияСБИССервер_Вставить(СтрокаСопоставленияСБИС, ВладелецЕдиницы1С, ЗаписьНоменклатуры1С);
				КонецЕсли;
				ОписаниеНоменклатуры1ССервер_Вставить(ЗаписьНоменклатуры1С, "Единица", ЗначениеУстановить);
			КонецЕсли;
		КонецЕсли;
	Иначе
		//Пока ничего
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокаСопоставленияСБИССервер_СформироватьТаблДок(СтрокаСопоставленияСБИС, ДопПараметры = Неопределено) Экспорт
	
	// Алярм, это лишь заготовка (с)Сыч
	Если ДопПараметры.Свойство("ТаблДок") Тогда
		ТаблДок = ДопПараметры.ТаблДок;
	КонецЕсли;
	
	Возврат ТаблДок;
	
КонецФункции
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаСервер_Классы_СопоставлениеНоменклатуры_СтруктураСтрок_ОписаниеНоменклатуры1С

// Функция - создаёт строку сопоставления номенклатуры
//
// Параметры:
//  ИдСБИС	 - 	 - 
//  ИмяСБИС	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция НовыйОписаниеНоменклатуры1ССервер() Экспорт
	
	Описание = Новый Структура;
	Описание.Вставить("_класс", "ОписаниеНоменклатуры1С");
	Описание.Вставить("Ссылка", Неопределено);
	Описание.Вставить("Характеристики", Новый Массив);
	Описание.Вставить("Идентификатор", "");
	Описание.Вставить("GTIN", "");
	Описание.Вставить("Единицы", Новый Соответствие);
	Описание.Вставить("Основное", Истина);
	Описание.Вставить("Цена", 0);
	Описание.Вставить("Кол_во", 0);
	Описание.Вставить("Сумма", 0);
	Описание.Вставить("СуммаБезнал", 0);
	Описание.Вставить("СтавкаНДС", "");
	Описание.Вставить("СуммаНДС", 0);
	Описание.Вставить("БазоваяЕдиницаОКЕИ", "796");
	Описание.Вставить("Ссылка", Неопределено); // Для работы с ДБФ, по просьбе Андрея (с)Сычев
	
	Возврат Описание;

КонецФункции

Процедура ОписаниеНоменклатуры1ССервер_Заполнить(СтрокаНоменклатуры1С, СопоставлениеЗаполнить) Экспорт
	
	Перем СЛокальнаяПеременная;
	
	НоменклатураСсылка	= СопоставлениеЗаполнить.Номенклатура;
		
	// Признак основной номенклатуры для сопоставления
	Если НЕ СтрокаНоменклатуры1С.Основное Тогда
		Если Не СопоставлениеЗаполнить.Свойство("Основное", СЛокальнаяПеременная) Тогда
			СЛокальнаяПеременная = Ложь;
		КонецЕсли;
		СтрокаНоменклатуры1С.Основное = СЛокальнаяПеременная;
	КонецЕсли;
	
	// GTIN
	Если НЕ ЗначениеЗаполнено(СтрокаНоменклатуры1С.GTIN) Тогда
		Если Не СопоставлениеЗаполнить.Свойство("GTIN_1С", СЛокальнаяПеременная) Тогда
			СЛокальнаяПеременная = "";
		КонецЕсли;
		СтрокаНоменклатуры1С.GTIN = СокрЛП(СЛокальнаяПеременная);
	КонецЕсли;
	
	// Идентификатор номенклатуры 1С
	Если НЕ ЗначениеЗаполнено(СтрокаНоменклатуры1С.Идентификатор) Тогда
		Если Не СопоставлениеЗаполнить.Свойство("Идентификатор1С", СЛокальнаяПеременная) Тогда
			СЛокальнаяПеременная = Строка(НоменклатураСсылка.УникальныйИдентификатор());
		КонецЕсли;
		СтрокаНоменклатуры1С.Идентификатор = СокрЛП(СЛокальнаяПеременная);
	КонецЕсли;
	
	// Характеристика
	Если		СопоставлениеЗаполнить.Свойство("Характеристика", СЛокальнаяПеременная) Тогда
		// При записи в старых методах приходит Ссылка на характеристику, а при групповом чтении ссылка на характеристику СБИС.
	ИначеЕсли	СопоставлениеЗаполнить.Свойство("Характеристика1С", СЛокальнаяПеременная) Тогда
		// Характеристика 1С по-новому (ссылка)
	КонецЕсли;
	Если 		ЗначениеЗаполнено(СЛокальнаяПеременная)
		И	Не	ТипЗнч(СЛокальнаяПеременная) = Тип("Структура")
		И	Не	ТипЗнч(СЛокальнаяПеременная) = Тип("Строка")
		И	СтрокаНоменклатуры1С.Характеристики.Найти(СЛокальнаяПеременная) = Неопределено Тогда
		СтрокаНоменклатуры1С.Характеристики.Добавить(СЛокальнаяПеременная);
	КонецЕсли;
	
	Если	СопоставлениеЗаполнить.Свойство("ЕдИзм1С", СЛокальнаяПеременная)
		И	ТипЗнч(СЛокальнаяПеременная) = Тип("Массив")
		И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		
		Для каждого СтрЕдиница Из СЛокальнаяПеременная Цикл
			СопоставлениеДляЕдиницыСервер_Заполнить1С(СтрокаНоменклатуры1С, СтрЕдиница);	
		КонецЦикла;
		
	ИначеЕсли СопоставлениеЗаполнить.Свойство("ЕдИзм1С", СЛокальнаяПеременная)
		И ТипЗнч(СЛокальнаяПеременная) = Тип("Соответствие") Тогда
			СтрокаНоменклатуры1С.Единицы.Очистить();
			СтрокаНоменклатуры1С.Единицы = СЛокальнаяПеременная; 	
	Иначе
		СопоставлениеДляЕдиницыСервер_Заполнить1С(СтрокаНоменклатуры1С, СопоставлениеЗаполнить);
	КонецЕсли;
	
	// Данные для загрузки в документ 1С
	Если СопоставлениеЗаполнить.Свойство("Цена")
		И ЗначениеЗаполнено(СопоставлениеЗаполнить.Цена) Тогда
		
		СписокСвойств = "Цена, Сумма, СуммаНДС, СтавкаНДС, БазоваяЕдиницаОКЕИ";
		ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры1С, СопоставлениеЗаполнить, СписокСвойств);
		
		СтрокаНоменклатуры1С.Кол_Во = СопоставлениеЗаполнить.Количество;
		СтрокаНоменклатуры1С.СуммаБезнал = СопоставлениеЗаполнить.СуммаБезНДС;
		
	КонецЕсли;
	
	// Ссылка на номенклатуру 1С для использования в ДБФ по просьбе Андрея (с)Сычев
	СтрокаНоменклатуры1С.Ссылка = НоменклатураСсылка;
	
КонецПроцедуры

Функция ОписаниеНоменклатуры1ССервер_Получить(ОписаниеНоменклатуры1С, КлючПоиска) Экспорт
	
	Перем Значение, КлючДобавления;
	
	Если		КлючПоиска = "Характеристики" Тогда
		Возврат ОписаниеНоменклатуры1С.Характеристики;
	ИначеЕсли	КлючПоиска = "GTIN" Тогда 
		Возврат ОписаниеНоменклатуры1С.GTIN;
	ИначеЕсли	КлючПоиска = "Единицы" Тогда
		Возврат ОписаниеНоменклатуры1С.Единицы;
	Иначе
		Возврат ОписаниеНоменклатуры1С.Единицы.Получить(КлючПоиска);
	КонецЕсли;

КонецФункции

Процедура ОписаниеНоменклатуры1ССервер_Вставить(ОписаниеНоменклатуры1С, КлючВставить, ЗначениеВставить) Экспорт
	
	Перем Значение, КлючДобавления;
	
	Если		КлючВставить = "Характеристика" Тогда
		ОписаниеНоменклатуры1С.Характеристики.Добавить(ЗначениеВставить);
	ИначеЕсли	КлючВставить = "GTIN" Тогда 
		ОписаниеНоменклатуры1С.GTIN = ЗначениеВставить;
	Иначе
		ИдЗаписиСбис = СопоставлениеДляЕдиницыСервер_Ключ(ЗначениеВставить);
		ОписаниеНоменклатуры1С.Единицы.Вставить(ИдЗаписиСбис, ЗначениеВставить);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаСервер_Классы_СопоставлениеНоменклатуры_СтруктураСтрок_СопоставлениеДляЕдиницы

// Функция - создаёт строку сопоставления единицы
//
// Параметры:
//  ИдСБИС	 - 	 - 
//  ИмяСБИС	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция НовыйСопоставлениеДляЕдиницыСервер(ВходящиеДанные = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	ГолыйКласс = Новый Структура("_класс, Коэффициент, ОКЕИ, Название, Ссылка, Владелец", "СопоставлениеДляЕдиницы", "1", "", "", "", "", "");
	
	Если ВходящиеДанные = Неопределено Тогда
		Возврат ГолыйКласс;
	КонецЕсли;
	
	СопоставлениеДляЕдиницыСервер_Заполнить(ГолыйКласс, ВходящиеДанные.Источник, ДопПараметры);
	
	Возврат ГолыйКласс;
	
КонецФункции

Функция СопоставлениеДляЕдиницыСервер_Ключ(СопоставлениеДляЕдиницы) Экспорт
	
	Если ЗначениеЗаполнено(СопоставлениеДляЕдиницы.Ссылка) Тогда
		Возврат СопоставлениеДляЕдиницы.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(СопоставлениеДляЕдиницы.ОКЕИ) Тогда
		Возврат СопоставлениеДляЕдиницы.ОКЕИ + "_" + СопоставлениеДляЕдиницы.Название;
	Иначе
		Возврат СопоставлениеДляЕдиницы.Название;
	КонецЕсли
		
КонецФункции

Функция СопоставлениеДляЕдиницыСервер_Получить(СопоставлениеДляЕдиницы, КлючПоиска) Экспорт
	
	Если КлючПоиска = "Владелец" Тогда
		Если ЗначениеЗаполнено(СопоставлениеДляЕдиницы.Ссылка) Тогда
			// Если ссылка есть, то владелец не должен быть пустым. Прочерк, если в принципе нет.
			Попытка
				// Пока через Try, переделать на параметр от ини конфигурации
				СопоставлениеДляЕдиницы.Владелец = СопоставлениеДляЕдиницы.Ссылка.Владелец;
			Исключение
			КонецПопытки;
			Если Не ЗначениеЗаполнено(СопоставлениеДляЕдиницы.Владелец)
					Или Не ЭтоСсылкаНаСправочникНоменклатуры(СопоставлениеДляЕдиницы.Владелец) Тогда
						// TODO Добавить передачу вида справочника номенклатуры вторым параметром
				// Не удалось установить владельца. Вроде не должно быть ошибкой
				СопоставлениеДляЕдиницы.Владелец = "-";
			КонецЕсли;
		Иначе
			СопоставлениеДляЕдиницы.Владелец = "";
		КонецЕсли;
		Возврат СопоставлениеДляЕдиницы.Владелец;
	ИначеЕсли КлючПоиска = "Единица" Тогда
		Попытка  
			ВыбраннаяНоменклатураОбъект = СопоставлениеДляЕдиницы.Владелец.ПолучитьОбъект();
			ИмяРеквизита = "ЕдиницыИзмерения";
			СопоставлениеДляЕдиницы.Единица = ВыбраннаяНоменклатураОбъект[ИмяРеквизита];
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		
		// Словили неожиданный ключ? Хреново, но ситуация исключительная, пока не обрабатываем
		Попытка
			Возврат СопоставлениеДляЕдиницы[КлючПоиска]; 
		Исключение 
			Возврат Неопределено;
		КонецПопытки;

	КонецЕсли;
	
	Возврат СопоставлениеДляЕдиницы[КлючПоиска];
	
КонецФункции

Процедура СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницы, КлючВставить, ЗначениеВставить) Экспорт
	
	Перем КлючДобавитьВДанные, ЗначениеЗаполнить;
	
	Если		КлючВставить = "Ссылка" Тогда
		Если ЗначениеЗаполнено(ЗначениеВставить) Тогда
			
			СопоставлениеДляЕдиницы.Ссылка = ЗначениеВставить;
			
			// Если ссылка есть, то владелец не должен быть пустым. Прочерк, если в принципе нет.
			Попытка
				СопоставлениеДляЕдиницы.Владелец = ЗначениеВставить.Владелец;
			Исключение
			КонецПопытки;
			Если НЕ ЗначениеЗаполнено(СопоставлениеДляЕдиницы.Владелец)
					Или Не ЭтоСсылкаНаСправочникНоменклатуры(СопоставлениеДляЕдиницы.Владелец) Тогда 
						// TODO Добавить передачу вида справочника номенклатуры вторым параметром
				// Не удалось установить владельца. Вроде не должно быть ошибкой
				СопоставлениеДляЕдиницы.Владелец = "-";
			КонецЕсли;
			
		Иначе
			
			СопоставлениеДляЕдиницы.Владелец = "";
			
		КонецЕсли;
	ИначеЕсли	КлючВставить = "Название" Тогда
		
		Если ЗначениеЗаполнено(ЗначениеВставить) Тогда
			СопоставлениеДляЕдиницы.Название = ЗначениеВставить;
		Иначе
			СопоставлениеДляЕдиницы.Название = Строка(СопоставлениеДляЕдиницы.Ссылка);
		КонецЕсли;
		
	ИначеЕсли	КлючВставить = "Коэффициент" Тогда
		
		Если ЗначениеЗаполнено(ЗначениеВставить) Тогда
			СопоставлениеДляЕдиницы[КлючВставить] = ЗначениеВставить;
		Иначе
			СопоставлениеДляЕдиницы[КлючВставить] = "1";
		КонецЕсли;
		
	ИначеЕсли	СопоставлениеДляЕдиницы.Свойство(КлючВставить) Тогда
		
		СопоставлениеДляЕдиницы[КлючВставить] = ЗначениеВставить;
		
	КонецЕсли;

КонецПроцедуры

Процедура СопоставлениеДляЕдиницыСервер_Заполнить(СопоставлениеДляЕдиницы, Источник, ДопПараметры) Экспорт
	
	Перем ТипИсточника;
	
	Если Не ДопПараметры.Свойство("ТипИсточника", ТипИсточника) Тогда
		ТипИсточника = Новый Структура;
	КонецЕсли;
	
	Если ТипИсточника = "Ссылка" Тогда
		
		СопоставлениеДляЕдиницы.Вставить("ОКЕИ", Источник.Код);
		СопоставлениеДляЕдиницы.Вставить("Название", Источник.Наименование);
		СопоставлениеДляЕдиницы.Вставить("Ссылка", Источник);
		СопоставлениеДляЕдиницы.Вставить("Владелец", Источник.Владелец);
	Иначе
		ЗаполнитьЗначенияСвойств(СопоставлениеДляЕдиницы, Источник);
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставлениеДляЕдиницыСервер_Заполнить1С(СтрокаСопоставления1С, СопоставлениеЗаполнить) Экспорт
	
	Перем СЛокальнаяПеременная;
	
	Если		СопоставлениеЗаполнить.Свойство("ЕдИзмОрг", СЛокальнаяПеременная) Тогда
		// Наименование единицы измерения в старом формате
	ИначеЕсли	СопоставлениеЗаполнить.Свойство("ЕдИзм1С", СЛокальнаяПеременная) Тогда
		// Наименование единицы измерения в новом формате
	КонецЕсли;
	Если	ЗначениеЗаполнено(СЛокальнаяПеременная)
		И	СтрокаСопоставления1С.Единицы.Получить(СЛокальнаяПеременная) = Неопределено Тогда
		ЕдиницаСопоставление = НовыйСопоставлениеДляЕдиницыСервер();
		СопоставлениеДляЕдиницыСервер_Вставить(ЕдиницаСопоставление, "Ссылка", СЛокальнаяПеременная);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если	СопоставлениеЗаполнить.Свойство("ОКЕИ_1С", СЛокальнаяПеременная)
		И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		СопоставлениеДляЕдиницыСервер_Вставить(ЕдиницаСопоставление, "ОКЕИ", СЛокальнаяПеременная);
	КонецЕсли;
	
	Если		СопоставлениеЗаполнить.Свойство("Коэффициент",	СЛокальнаяПеременная) Тогда
		// Коэффициент в старом формате
	ИначеЕсли	СопоставлениеЗаполнить.Свойство("Коэффициент1С",	СЛокальнаяПеременная) Тогда
		// Коэффициент в новом формате
	КонецЕсли;
	Если ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		СопоставлениеДляЕдиницыСервер_Вставить(ЕдиницаСопоставление, "Коэффициент", СЛокальнаяПеременная);
	КонецЕсли;
	
	Если	СопоставлениеЗаполнить.Свойство("ЕдИзмНаименование1С",	СЛокальнаяПеременная)
		И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		СопоставлениеДляЕдиницыСервер_Вставить(ЕдиницаСопоставление, "Название", СЛокальнаяПеременная);
	КонецЕсли;	
	
	ОписаниеНоменклатуры1ССервер_Вставить(СтрокаСопоставления1С, "Единица", ЕдиницаСопоставление);
	
КонецПроцедуры

Процедура СопоставлениеДляЕдиницыСервер_ЗаполнитьСБИС(СтрокаСопоставленияСБИС, СопоставлениеЗаполнить) Экспорт
	
	Перем СЛокальнаяПеременная;
	
	ЕдиницаСопоставление = НовыйСопоставлениеДляЕдиницыСервер();
	
	Если		СопоставлениеЗаполнить.Свойство("ЕдИзмОКЕИ", СЛокальнаяПеременная) Тогда 
		// ОКЕИ в старом формате вариант 1	
	ИначеЕсли	СопоставлениеЗаполнить.Свойство("ОКЕИ", СЛокальнаяПеременная) Тогда
		// ОКЕИ в старом формате вариант 2
	ИначеЕсли	СопоставлениеЗаполнить.Свойство("ЕдИзмОКЕИ_СБИС", СЛокальнаяПеременная) Тогда
		// ОКЕИ в новом формате вариант 1
	ИначеЕсли	СопоставлениеЗаполнить.Свойство("ОКЕИ_СБИС", СЛокальнаяПеременная) Тогда
		// ОКЕИ в новом формате вариант 2
	КонецЕсли;
	Если ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		СопоставлениеДляЕдиницыСервер_Вставить(ЕдиницаСопоставление, "ОКЕИ", СЛокальнаяПеременная);
	КонецЕсли;
	
	Если СопоставлениеЗаполнить.Свойство("КоэффициентСБИС",	СЛокальнаяПеременная) Тогда
		// Коэффициент в новом формате
	КонецЕсли;
	Если ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		СопоставлениеДляЕдиницыСервер_Вставить(ЕдиницаСопоставление, "Коэффициент", СЛокальнаяПеременная);
	КонецЕсли;
	
	Если		СопоставлениеЗаполнить.Свойство("ЕдИзмНаименование",	СЛокальнаяПеременная) Тогда
		// Наименование единицы измерения в старом формате вариант 1
	ИначеЕсли 	СопоставлениеЗаполнить.Свойство("ЕдИзм",				СЛокальнаяПеременная) Тогда
		// Наименование единицы измерения в старом формате вариант 2
	ИначеЕсли	СопоставлениеЗаполнить.Свойство("ЕдИзмНаименованиеСБИС",СЛокальнаяПеременная) Тогда
		// Наименование единицы измерения в новом формате
	КонецЕсли;	
	Если ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		СопоставлениеДляЕдиницыСервер_Вставить(ЕдиницаСопоставление, "Название", СЛокальнаяПеременная);
	КонецЕсли;	
	
	СтрокаСопоставленияСБИССервер_Вставить(СтрокаСопоставленияСБИС, "Единица", ЕдиницаСопоставление);
	
КонецПроцедуры

#КонецОбласти

Функция ПорядокАвтоматическогоСопоставленияПоУмолчанию() Экспорт
	
	ПорядокАвтоматическогоСопоставления = Новый Массив;
	
	//ПорядокАвтоматическогоСопоставления.Добавить("GTIN"); // Убрали, т.к. GTIN в отдельном поле
	ПорядокАвтоматическогоСопоставления.Добавить("КодПокупателя");
	ПорядокАвтоматическогоСопоставления.Добавить("Идентификатор");
	ПорядокАвтоматическогоСопоставления.Добавить("Артикул");
	ПорядокАвтоматическогоСопоставления.Добавить("Код");
	ПорядокАвтоматическогоСопоставления.Добавить("Наименование");
	ПорядокАвтоматическогоСопоставления.Добавить("КодПоставщика");
	
	Возврат ПорядокАвтоматическогоСопоставления;
	
КонецФункции

Функция ЭтоСсылкаНаСправочникНоменклатуры(Ссылка, ВидыСправочниковНоменклатуры = Неопределено) Экспорт
	
	Результат = Ложь;
	
	Если ВидыСправочниковНоменклатуры = Неопределено Тогда
		Результат = Истина; // Заглушка, если нет узла в ини Конфигурация
	Иначе
		ВидыСправочниковНоменклатуры = СбисРазложитьСтрокуВМассивПодстрок(ВидыСправочниковНоменклатуры, ",");
	
		Для Каждого ВидСправочника Из ВидыСправочниковНоменклатуры Цикл
			Если ТипЗнч(Ссылка) = Тип(ВидСправочника) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область include_local_МодульОбъекта_МодульОбъектаСервер

Функция СведенияОВнешнейОбработке() Экспорт

#Область include_sys_version
		СбисВерсия = "24.2118.1";
#КонецОбласти
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", 		"Отправить документ через online.sbis.ru");
	РегистрационныеДанные.Вставить("БезопасныйРежим",	Ложь);
	РегистрационныеДанные.Вставить("Версия",			СбисВерсия);
	РегистрационныеДанные.Вставить("Вид",				"ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Информация",		"Обмен документами в электронном виде");
	///////////// команды /////////////////////////
	
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор");
	тзКоманд.Колонки.Добавить("Представление");
	тзКоманд.Колонки.Добавить("Модификатор");
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение");
	тзКоманд.Колонки.Добавить("Использование");
	
	строкаКоманды = тзКоманд.Добавить();
	строкаКоманды.Идентификатор = "1";
	строкаКоманды.Представление = "Обмен электронными документами СБИС";
	строкаКоманды.ПоказыватьОповещение = Истина;
	//строкаКоманды.Использование = "ВызовКлиентскогоМетода"; 
	строкаКоманды.Использование = "ОткрытиеФормы";
	РегистрационныеДанные.Вставить("Команды", тзКоманд);
	
	Возврат РегистрационныеДанные;
КонецФункции

#Область include_local_МодульОбъекта_МодульОбъектаСервер_JSON

// JSON парсер.   ----------------------------------------------------------------------------
//
// Параметры:
//	Значение - Строка. Строка данных в формате JSON для парсинга;
//
//  Стандарт - Неопределено, Булево. Режим работы:
//		- Истина - стандартный режим (значение по умолчанию);
//		- Ложь - альтернативный режим;
//		- Неопределено - автоопределение режима;
//
//  ПредставленияСсылок - Неопределено, Булево. Режим передачи ссылочных типов, с их представлением или без:
//		- Истина - ссылки передаются вместе со своим представлением, как объекты с двумя свойствами содержащими саму ссылку и ее представление;
//		- Ложь - ссылки передаются без представления (значение по умолчанию).
//		- Неопределено - автоопределение режима.
// 
// Возвращаемое значение:
//  Набор данных согласно содержимому входящих данных. 
//

Функция СбисПрочитатьJSON_НаСервере(Значение, Стандарт = Истина, ПредставленияСсылок = Ложь, ПреобразовыватьДаты = Истина) Экспорт
	Возврат jsonПрочитатьИнициализация(Значение, Стандарт, ПредставленияСсылок, ПреобразовыватьДаты);
КонецФункции 

//Параметры конвертации: Структура. Возможные Значения: "ExtSDK" - режим обмена с плагином. Во всех прочих случаях будет выполнена конвертация в обычный json
Функция ПреобразоватьЗначениеВJSON(ЗначениеПреобразовать, ПараметрыКонвертации=Неопределено) Экспорт
	
	Режим = "Стандарт";
	Если Не ПараметрыКонвертации = Неопределено Тогда
		Режим = ПараметрыКонвертации.Режим;
	КонецЕсли;
	СтрокаJSON = ЗначениеВJSON(ЗначениеПреобразовать, Режим);
	Возврат СтрокаJSON;
	
КонецФункции

// ─────────────────────────────────────────────────────────────────────────────
//  НАСТРОЙКИ

// Функция управляющая настройкой "АвтоматическоеПриведениеОбъектаКСтруктуре".
//
// Возвращаемое значение:
//  Булево. Значение настройки:
//		- Истина - выполняется автоматическое приведение объекта к структуре; 
//		- Ложь - автоматическое приведение объекта к структуре не выполняется, все объекты преобразуются в соответствие. 
//
// Примечание:
//  Автоматическое приведение к структуре выполняется только для объектов имена свойств которых могут быть 
//  использованы как ключи структуры, все остальные объекты преобразуются в соответствие.
//

Функция НастройкаАвтоматическоеПриведениеОбъектаКСтруктуре()
	
	Возврат Истина; // Измените для использования автоматического приведения объекта к структуре.
	
КонецФункции // НастройкаАвтоматическоеПриведениеОбъектаКСтруктуре()
// Функция управляющая настройкой "ПолноеМаскированиеСимволов".
//
// Возвращаемое значение:
//  Булево. Значение настройки:
//		- Истина - выполняется полное маскирование символов некорректно обрабатываемых JavaScript-ом; 
//		- Ложь - маскирование выполняется только согласно стандарту и дополнительно маскируются специальные символы. 
//
// Примечание:
//	Маскирование специальных символов из диапазона [0x0000, 0x001f] выполняется в не зависимости от настройки.
//

Функция НастройкаПолноеМаскированиеСимволов()
	
	Возврат Истина;	// Измените для неполного маскирования символов.
	
КонецФункции // НастройкаПолноеМаскированиеСимволов()
// Функция управляющая настройкой "НеявноеПриведениеПримитивныхЗначенийКлюча".
//
// Возвращаемое значение:
//  Булево. Значение настройки:
//		- Истина - выполняется неявное приведение примитивных типов значений ключей соответствий к их строковому представлению в формате 1С; 
//		- Ложь - неявное приведение примитивных типов значений ключей соответствий к строковому представлению не выполняется. 
//
// Примечание:
//	Неявно приводимые типы: Null, Булево, Число, Дата, Строка, УникальныйИдентификатор.
//

Функция НастройкаНеявноеПриведениеПримитивныхЗначенийКлюча()
	
	Возврат Ложь;	// Измените для использования неявного приведения примитивных значений ключей соответствий к строке.
	
КонецФункции // НастройкаНеявноеПриведениеПримитивныхЗначенийКлюча()

// ─────────────────────────────────────────────────────────────────────────────
//  ПАРСЕР
Функция jsonПрочитатьИнициализация(Значение, Стандарт, ПредставленияСсылок, ПреобразовыватьДаты)
	
	// Проверка параметров.
	Если (Не Стандарт = Истина) И (Не Стандарт = Ложь) И (Не Стандарт = Неопределено) Тогда 
		ВызватьИсключение ИсключениеНекорректныйПараметр("Стандарт"); 
	КонецЕсли; 
	Если (Не ПредставленияСсылок = Истина) И (Не ПредставленияСсылок = Ложь) И (Не ПредставленияСсылок = Неопределено) Тогда 
		ВызватьИсключение ИсключениеНекорректныйПараметр("ПредставленияСсылок"); 
	КонецЕсли; 
	
	// Схема подстановок шестнадцатиричной системы.
	СхемаПодстановок = Новый Соответствие; 
	ШестнадцатиричнаяСистема = "0123456789abcdef"; 
	ДесятичноеЧисло = 0;
	Для ВторойРазряд = 1 По 16 Цикл 
		Для ПервыйРазряд = 1 По 16 Цикл 
			СхемаПодстановок.Вставить(Сред(ШестнадцатиричнаяСистема, ВторойРазряд, 1) + Сред(ШестнадцатиричнаяСистема, ПервыйРазряд, 1), ДесятичноеЧисло); 
			ДесятичноеЧисло = ДесятичноеЧисло + 1; 
		КонецЦикла; 
	КонецЦикла;
	
	// Вспомогательные данные.
	ВспомогательныеДанные = Новый Структура("ТипСтроки,СхемаПодстановок,АвтоматическиПриводитьКСтруктуре",
	Тип("Строка"),
	СхемаПодстановок,
	(НастройкаАвтоматическоеПриведениеОбъектаКСтруктуре() = Истина));
	
	// Стартовые значения.
	Индекс = 1; 
	Длина = СтрДлина(Значение);
	
	// Форматирование (первый шаг парсера).
	Если (Стандарт = Истина) Или (Стандарт = Неопределено) Тогда 
		СимволыФорматирования = " " + Символы.ВК + Символы.ПС + Символы.Таб; 
		jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); 
	Иначе 
		СимволыФорматирования = ""; 
	КонецЕсли;
	Если (Индекс > Длина) Тогда 
		ВызватьИсключение ИсключениеПустойПакетДанных(); 
	КонецЕсли; 
	
	// Парсер.
	Возврат jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Истина, ПреобразовыватьДаты);
	
КонецФункции // jsonПрочитатьИнициализация()

Функция jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, ПервыйУровень, ПреобразовыватьДаты)
	
	Символ = Сред(Значение, Индекс, 1);
	ДлинаЗначения = СтрДлина(Значение);
	Если (Символ = "[") Тогда																								// [
		
		// Массив.
		Результат = Новый Массив;
		
		Индекс = Индекс + 1; 
		jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); 
		Если (Индекс > Длина) Тогда 
			ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); 
		КонецЕсли;
		Символ = Сред(Значение, Индекс, 1); 
		Если (Символ = "]") Тогда														// ] 
			// Пустой массив.
			Индекс = Индекс + 1;
		Иначе
			Пока (Индекс <= Длина) Цикл
				// Значение.
				Результат.Добавить(jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь, ПреобразовыватьДаты));
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = "]") Тогда																					// ]
					// Окончание массива.
					Индекс = Индекс + 1; Прервать;
				Иначе
					// Продолжение массива.
					Если (Символ = ",") Тогда																				// ,
						Индекс = Индекс + 1; jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
					Иначе
						ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ",");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли (Символ = "{") Тогда																							// {
		
		// Объект.
		Индекс = Индекс + 1; 
		jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); 
		Если (Индекс > Длина) Тогда 
			ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); 
		КонецЕсли;
		Символ = Сред(Значение, Индекс, 1); 
		Если (Символ = "}") Тогда														// } 
			// Пустой объект.
			Индекс = Индекс + 1;
			
			ТолькоДопустимыеСтроки = ВспомогательныеДанные.АвтоматическиПриводитьКСтруктуре; 
			Если ТолькоДопустимыеСтроки Тогда 
				РезультатСтруктура = Новый Структура; 
			Иначе 
				РезультатСоответствие = Новый Соответствие; 
			КонецЕсли;
			
		Иначе
			
			ТолькоДопустимыеСтроки = ВспомогательныеДанные.АвтоматическиПриводитьКСтруктуре; 
			РезультатСоответствие = Новый Соответствие; 
			Если ТолькоДопустимыеСтроки Тогда 
				РезультатСтруктура = Новый Структура; 
			КонецЕсли; 
			ТипСтроки = ВспомогательныеДанные.ТипСтроки;
			
			Пока (Индекс <= Длина) Цикл
				
				// Ключ.
				Начало = Индекс; 
				КлючЭлемента = jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь, ПреобразовыватьДаты); 
				Если (Не ТипЗнч(КлючЭлемента) = ТипСтроки) Тогда 
					ВызватьИсключение ИсключениеНедопустимыйТипКлюча(Начало, КлючЭлемента); 
				КонецЕсли;
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = ":") Тогда																					// :
					Индекс = Индекс + 1; jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъетка(Длина); КонецЕсли;
				Иначе
					ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ":");
				КонецЕсли;
				
				// Значение.
				ЗначениеЭлемента = jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь, ПреобразовыватьДаты);
				
				// Коллекция.
				РезультатСоответствие.Вставить(КлючЭлемента, ЗначениеЭлемента);
				Если ТолькоДопустимыеСтроки Тогда 
					Попытка 
						РезультатСтруктура.Вставить(КлючЭлемента, ЗначениеЭлемента); 
					Исключение 
						// всегда формируем структуру. Поля с плохими именами не записываем
						//ТолькоДопустимыеСтроки = Ложь;
					КонецПопытки; 
				КонецЕсли;
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = "}") Тогда																					// }
					// Окончание объекта.
					Индекс = Индекс + 1; Прервать;
				Иначе
					// Продолжение объекта.
					Если (Символ = ",") Тогда																				// ,
						Индекс = Индекс + 1; 
						jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); 
						Если (Индекс >= Длина) Тогда 
							ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъетка(Длина); 
						КонецЕсли;
					Иначе
						ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ",");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;
		
		// Структуры.
		Если ТолькоДопустимыеСтроки Тогда   
			Результат = РезультатСтруктура; 
		Иначе
			Результат = РезультатСоответствие;
		КонецЕсли;
		
		// Ссылка.
		Если (ПредставленияСсылок = Истина) Или (ПредставленияСсылок = Неопределено) Тогда 
			Результат = jsonПрочитатьСсылку(Результат, ТолькоДопустимыеСтроки); 
		КонецЕсли;
		
	Иначе
		
		// Примитивные типы.
		Если (Символ = """") Или (Символ = "'") Тогда        																// " , '
			
			// Строка.
			Начало = Индекс; 
			//РезПодстрока = "";
			Пока Истина Цикл
				ТекущийСимвол = Сред(Значение, Индекс+1, 1);
				//РезПодстрока = РезПодстрока + ТекущийСимвол;
				сч = 1;
				ПредельнаяДлина = ДлинаЗначения-Индекс;
				Пока ТекущийСимвол<>Символ и сч<ПредельнаяДлина Цикл
					сч = сч+1;
					ТекущийСимвол = Сред(Значение, Индекс+сч, 1);
					//РезПодстрока = РезПодстрока + ТекущийСимвол;
				КонецЦикла;
				//РезПодстрока = Лев(РезПодстрока, СтрДлина(РезПодстрока)-1);
					
				Позиция = Индекс+сч;
				
				Если (ТекущийСимвол=Символ) Тогда  // нашли закрывающую кавычку
					Индекс = Позиция; 
					Откат = Позиция - 1; 
					Маскировка = Ложь; 
					Пока (Сред(Значение, Откат, 1) = "\") И Булево(Откат) Цикл 
						Маскировка = Не Маскировка; 
						Откат = Откат - 1; 
					КонецЦикла;
					Если Маскировка Тогда 
						//Подстрока = Сред(Подстрока, Позиция + 1); 
					Иначе 
						Прервать; 
					КонецЕсли;
				Иначе
					ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных();
				КонецЕсли;
				
			КонецЦикла;
			
			//Подстрока = Сред(Значение, Индекс + 1); Начало = Индекс; 
			//Пока Истина Цикл
			//	Позиция = Найти(Подстрока, Символ);
			//	
			//	Если (Позиция > 0) Тогда
			//		Индекс = Индекс + Позиция; 
			//		Откат = Позиция - 1; 
			//		Маскировка = Ложь; 
			//		Пока (Сред(Подстрока, Откат, 1) = "\") И Булево(Откат) Цикл 
			//			Маскировка = Не Маскировка; 
			//			Откат = Откат - 1; 
			//		КонецЦикла;
			//		Если Маскировка Тогда 
			//			Подстрока = Сред(Подстрока, Позиция + 1); 
			//		Иначе 
			//			Прервать; 
			//		КонецЕсли;
			//	Иначе
			//		ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных();
			//	КонецЕсли;
			//	
			//КонецЦикла;
			
			// Строка.
			Результат = jsonПрочитатьСтроку(Сред(Значение, Начало + 1, Индекс - Начало - 1), Стандарт, Начало, ВспомогательныеДанные.СхемаПодстановок, (Символ = "'"));
			
			Если jsonПрочитатьОпределитьДату(Результат) Тогда
				// Дата.
				Если ПреобразовыватьДаты Тогда
					Результат = jsonПрочитатьДату(Результат, Начало);
				КонецЕсли;
				//ИначеЕсли jsonПрочитатьОпределитьИдентификатор(Результат) Тогда
				//	// Идентификатор.
				//	Результат = jsonПрочитатьИдентификатор(Результат, Начало);
			ИначеЕсли (Стандарт = Ложь) Или (Стандарт = Неопределено) Тогда
				Если jsonПрочитатьОпределитьВнутреннийТип(Результат) Тогда
					// Внутренний тип.
					Результат = jsonПрочитатьВнутреннийТип(Результат, Начало);
				КонецЕсли;
			КонецЕсли;
			
			// Корректировка индекса.
			Индекс = Индекс + 1;
			
		Иначе
			
			Если (Символ = "n") Тогда
				// Null.
				Если (Сред(Значение, Индекс, 4) = "null") Тогда 
					Индекс = Индекс + 4; Результат = Null; 
				Иначе 
					ВызватьИсключение ИсключениеНекорректныйТипNull(Индекс); 
				КонецЕсли;
			ИначеЕсли (Символ = "t") Тогда
				// Истина.
				Если (Сред(Значение, Индекс, 4) = "true") Тогда 
					Индекс = Индекс + 4; 
					Результат = Истина; 
				Иначе 
					ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс); 
				КонецЕсли;
			ИначеЕсли (Символ = "f") Тогда
				// Ложь.
				Если (Сред(Значение, Индекс, 5) = "false") Тогда 
					Индекс = Индекс + 5; 
					Результат = Ложь; 
				Иначе 
					ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс); 
				КонецЕсли;
			ИначеЕсли (Символ = "u") Тогда
				// Неопределено.
				Если (Сред(Значение, Индекс, 9) = "undefined") Тогда 
					Индекс = Индекс + 9; 
					Результат = Неопределено; 
				Иначе 
					ВызватьИсключение ИсключениеНекорректныйТипНеопределено(Индекс); 
				КонецЕсли;
			Иначе
				// Число.
				Начало = Индекс; 
				Пока Булево(Найти("-+0123456789.", Символ)) И (Индекс <= Длина) Цикл 
					Индекс = Индекс + 1; 
					Символ = Сред(Значение, Индекс, 1); 
				КонецЦикла;
				
				// Преобразование числа.
				Попытка
					Результат = Число(Сред(Значение, Начало, Индекс - Начало));
				Исключение
					ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Значение, Начало, Индекс - Начало)); 
				КонецПопытки;
				
				// Экспоненциальная часть.
				Если (Символ = "E") Или (Символ = "e") Тогда
					
					// Степень.
					Индекс = Индекс + 1; 
					Позиция = Индекс; 
					Символ = Сред(Значение, Индекс, 1); 
					Пока Булево(Найти("-+0123456789", Символ)) И (Индекс <= Длина) Цикл 
						Индекс = Индекс + 1; 
						Символ = Сред(Значение, Индекс, 1); 
					КонецЦикла;
					
					// Преобразование степени.
					Попытка
						Степень = Число(Сред(Значение, Позиция, Индекс - Позиция));
					Исключение
						ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Значение, Начало, Индекс - Начало)); 
					КонецПопытки;
					
					// Возвидение числа в степень.
					Результат = Результат * Pow(10, Степень);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Форматирование.
	jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); 
	Если ПервыйУровень Тогда 
		Если (Индекс <= Длина) Тогда 
			ВызватьИсключение ИсключениеНекорректныйПакетДанных(Индекс); 
		КонецЕсли; 
	Иначе 
		Если (Индекс > Длина) Тогда 
			ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных(); 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // jsonПрочитать()

Функция jsonПрочитатьОпределитьДату(Значение)
	
	// Проверка.
	Если (СтрДлина(Значение) = 19) Тогда
		Если (Сред(Значение, 03, 1) = ".") И				// -
			(Сред(Значение, 06, 1) = ".") И				// -
			(Сред(Значение, 14, 1) = ".") И				// :
			(Сред(Значение, 17, 1) = ".") Тогда				// :
			// Год. 
			Если Булево(Найти("0123456789", Сред(Значение, 07, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 08, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 09, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 10, 1))) И
				// Месяц.
				Булево(Найти("0123456789", Сред(Значение, 04, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 05, 1))) И
				// День.
				Булево(Найти("0123456789", Сред(Значение, 01, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 02, 1))) И
				// Час.
				Булево(Найти("0123456789", Сред(Значение, 12, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 13, 1))) И
				// Минута.
				Булево(Найти("0123456789", Сред(Значение, 15, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 16, 1))) И
				// Секунда.
				Булево(Найти("0123456789", Сред(Значение, 18, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 19, 1))) Тогда
				Возврат Истина; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если (СтрДлина(Значение) = 10) Тогда
		Если (Сред(Значение, 03, 1) = ".") И				// -
			(Сред(Значение, 06, 1) = ".") Тогда				// :
			// Год. 
			Если Булево(Найти("0123456789", Сред(Значение, 07, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 08, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 09, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 10, 1))) И
				// Месяц.
				Булево(Найти("0123456789", Сред(Значение, 04, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 05, 1))) И
				// День.
				Булево(Найти("0123456789", Сред(Значение, 01, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 02, 1))) Тогда
				Возврат Истина; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // jsonПрочитатьОпределитьДату()

Функция jsonПрочитатьОпределитьИдентификатор(Значение)
	
	// Проверка.
	Если (СтрДлина(Значение) = 36) Тогда
		Если (Сред(Значение, 09, 1) = "-") И					// -
			(Сред(Значение, 14, 1) = "-") И					// -
			(Сред(Значение, 19, 1) = "-") И					// -
			(Сред(Значение, 24, 1) = "-") Тогда				// -
			// Первая часть. 
			Для Индекс = 01 По 08 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Вторая часть. 
			Для Индекс = 10 По 13 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Третья часть. 
			Для Индекс = 15 По 18 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Четвертая часть. 
			Для Индекс = 20 По 23 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Пятая часть. 
			Для Индекс = 25 По 36 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // jsonПрочитатьОпределитьИдентификатор()

Функция jsonПрочитатьОпределитьВнутреннийТип(Значение)
	
	// Поиск.
	Возврат (Лев(Значение, 1) = "¦") И (Сред(Значение, 5, 1) = "¦") И (Прав(Значение, 1) = "¦"); // ¦xxx¦ ... ¦
	
КонецФункции // jsonПрочитатьОпределитьВнутреннийТип()

Функция jsonПрочитатьСтроку(Значение, Стандарт, Индекс, СхемаПодстановок, ОдинарнаяКавычка)
	
	// Последоавтельность перемаскировки.
	ПоследоавтельностьПеремаскировки = "\" + Символ(65535);
	
	// Демаскирование служебных символов.
	Результат = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Значение, 
	"\\",			ПоследоавтельностьПеремаскировки),		// Перемаскирование последовательности.
	"\/",			"/"),           // x2f
	"\b",			Символ(008)),	// x08
	"\t",			Символы.Таб),   // x09
	"\n",			Символы.ПС),    // x0a
	"\f",			Символы.ПФ),    // x0c
	"\r",			Символы.ВК),    // x0d
	"\""",			"""");          // x22
	
	// Демаскирование Юникод символов.
	Позиция = Найти(Результат, "\u"); Пока Булево(Позиция) Цикл
		СтаршийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 2, 2))]; МладшийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 4, 2))]; Если (СтаршийБайт = Неопределено) Или (МладшийБайт = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйФорматСтроки(Индекс); КонецЕсли;
		Результат = СтрЗаменить(Результат, Сред(Результат, Позиция, 6), Символ(256 * СтаршийБайт + МладшийБайт)); Позиция = Найти(Результат, "\u");
	КонецЦикла;
	
	// Одинарная кавычка.
	Если ОдинарнаяКавычка Тогда Результат = СтрЗаменить(Результат, "\'", "'"); КонецЕсли;
	
	// Демаскирование перемаскированой последовательности.
	Возврат СтрЗаменить(Результат, ПоследоавтельностьПеремаскировки, "\");				
	
КонецФункции // jsonПрочитатьСтроку()

Функция jsonПрочитатьДату(Значение, Индекс)
	
	// Поиск.
	Попытка
		Возврат сбисСтрокаВДату(Значение);
	Исключение
		ВызватьИсключение ИсключениеНекорректныйФорматДаты(Индекс, Значение);
	КонецПопытки;
	
КонецФункции // jsonПрочитатьДату()

Функция jsonПрочитатьСсылку(Значение, Структура)
	
	Перем Ссылка;
	
	// Ссылка.
	Если (Значение.Количество() = 2) Тогда 
		Если Структура Тогда
			Если Значение.Свойство("Представление") И Значение.Свойство("Ссылка", Ссылка) Тогда Возврат Ссылка; КонецЕсли;
		Иначе
			Ссылка = Значение.Получить("Ссылка"); Если (Не Ссылка = Неопределено) И (Не Значение.Получить("Представление") = Неопределено) Тогда Возврат Ссылка; КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Значение;
	
КонецФункции // jsonПрочитатьСсылку()

Функция jsonПрочитатьИдентификатор(Значение, Индекс)
	
	// Поиск.
	Попытка
		Возврат Новый УникальныйИдентификатор(Значение);
	Исключение
		ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение);
	КонецПопытки;
	
КонецФункции // jsonПрочитатьИдентификатор()

Функция jsonПрочитатьВнутреннийТип(Значение, Индекс)
	#Если ВебКлиент Или ТонкийКлиент Тогда
		ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначениеНаКлиентеНаСервереБезКонтекста(Индекс, Значение);
	#Иначе
		
		// Поиск.
		Тип = Сред(Значение, 2, 3); Данные = Сред(Значение, 6, СтрДлина(Значение) - 6);
		
		Если (Тип = "ref") Тогда
			Попытка
				Возврат ЗначениеИзСтрокиВнутр("{""#""," + СтрЗаменить(СтрЗаменить(Данные, "×", ":"), "÷", ",") + "}");
			Исключение
				ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение);
			КонецПопытки;
		КонецЕсли;
		
		ВызватьИсключение ИсключениеНеопознанныйТип(Индекс, Тип);
		
	#КонецЕсли
КонецФункции // jsonПрочитатьВнутреннийТип()

Процедура jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования)
	
	// Пропуск форматирования.
	Если (Стандарт = Истина) Или (Стандарт = Неопределено) Тогда Пока (Индекс <= Длина) И Булево(Найти(СимволыФорматирования, Сред(Значение, Индекс, 1))) Цикл Индекс = Индекс + 1; КонецЦикла; КонецЕсли;
	// Пробел его не видно, \r, \n, \t .
	
КонецПроцедуры // jsonПрочитатьПропуститьФорматирование()

// ─────────────────────────────────────────────────────────────────────────────
//  ЛОКАЛИЗАЦИЯ

Функция сбисШаблон(Строка, Параметры) Экспорт
	
	Результат = Строка;
	
	Для Каждого Параметр Из Параметры Цикл
		Результат = СтрЗаменить(Результат, "[" + Параметр.Ключ + "]", Строка(Параметр.Значение));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // сбисШаблон()

Функция ИсключениеПустойПакетДанных() Экспорт 
	
	Возврат НСтр("ru = 'JSON: Пустой пакет данных.'; uk = 'JSON: Порожній пакет даних.'");
	
КонецФункции // ИсключениеНеожиданноеОкончаниеСтроки()

Функция ИсключениеНекорректныйПакетДанных(Индекс) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Некорректный пакет данных в позиции [Индекс].'; uk = 'JSON: Некоректний пакет даних у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНекорректныйПакетДанных()

Функция ИсключениеНеожиданноеОкончаниеПакетаДанных() Экспорт 
	
	Возврат НСтр("ru = 'JSON: Неожиданное окончание пакета данных.'; uk = 'JSON: Несподіване закінчення пакета даних.'");
	
КонецФункции // ИсключениеНеожиданноеОкончаниеПакетаДанных()

Функция ИсключениеНеожиданноеОкончаниеМассива(Индекс) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Неожиданное окончание массива в позиции [Индекс].'; uk = 'JSON: Несподіване закінчення масиву у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНеожиданноеОкончаниеМассива()

Функция ИсключениеНеожиданноеОкончаниеОбъетка(Индекс) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Неожиданное окончание объекта в позиции [Индекс].'; uk = 'JSON: Несподіване закінчення об''єкту у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНеожиданноеОкончаниеОбъетка()

Функция ИсключениеНекорректныйТипNull(Индекс) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Некорректный тип Null в позиции [Индекс].'; uk = 'JSON: Некоректний тип Null у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНекорректныйТипNull()

Функция ИсключениеНекорректныйТипБулево(Индекс) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Некорректный тип Булево в позиции [Индекс].'; uk = 'JSON: Некоректний тип Булево у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНекорректныйТипБулево()

Функция ИсключениеНекорректныйТипНеопределено(Индекс) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Некорректный тип Неопределено в позиции [Индекс].'; uk = 'JSON: Некоректний тип Невизначено у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНекорректныйТипНеопределено()

Функция ИсключениеНекорректныйФорматСтроки(Индекс) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Некорректный формат строки в позиции [Индекс].'; uk = 'JSON: Некоректний формат рядка у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНекорректныйФорматСтроки()

Функция ИсключениеНекорректныйФорматДаты(Индекс, Значение) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Некорректный формат даты [Значение] в позиции [Индекс].'; uk = 'JSON: Некоректний формат дати [Значение] у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс, Символ(034) + Значение + Символ(034)));
	
КонецФункции // ИсключениеНекорректныйФорматДаты()

Функция ИсключениеНекорректныйФорматЧисла(Индекс, Значение) Экспорт 
	
	Если ПустаяСтрока(Значение) Тогда
		
		Возврат сбисШаблон(НСтр("ru = 'JSON: Неверный формат данных в позиции [Индекс].'; uk = 'JSON: Невірний формат даних у позиції [Индекс].'"),
		Новый Структура("Индекс", Индекс));
		
	Иначе
		
		Возврат сбисШаблон(НСтр("ru = 'JSON: Некорректный формат числа [Значение] в позиции [Индекс].'; uk = 'JSON: Некоректний формат числа [Значение] у позиції [Индекс].'"),
		Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));
		
	КонецЕсли;
	
КонецФункции // ИсключениеНекорректныйФорматЧисла()

Функция ИсключениеНедопустимыйСимвол(Индекс, Символ) Экспорт 
	
	Если (Символ = Неопределено) Тогда
		
		Возврат сбисШаблон(НСтр("ru = 'JSON: Недопустимый символ в позиции [Индекс].'; uk = 'JSON: Неприпустимий символ в позиції [Индекс].'"),
		Новый Структура("Индекс", Индекс));
		
	Иначе
		
		Возврат сбисШаблон(НСтр("ru = 'JSON: Недопустимый символ в позиции [Индекс], ожидается [Символ].'; uk = 'JSON: Неприпустимий символ в позиції [Индекс], очікується [Символ].'"),
		Новый Структура("Индекс,Символ", Индекс, Символ(034) + Символ + Символ(034)));
		
	КонецЕсли;
	
КонецФункции // ИсключениеНедопустимыйСимвол()

Функция ИсключениеНеопознанныйТип(Индекс, Тип) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Недопустимый тип [Тип] в позиции [Индекс].'; uk = 'JSON: Неприпустимий тип [Тип] у позиції [Индекс].'"),
	Новый Структура("Индекс,Тип", Индекс, Символ(034) + Тип + Символ(034)));
	
КонецФункции // ИсключениеНеопознанныйТип()

Функция ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Невозможно преобразовать значение [Значение] в позиции [Индекс].'; uk = 'JSON: Неможливо перетворити значення [Значение] у позиції [Индекс].'"),
	Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));
	
КонецФункции // ИсключениеНевозможноПреобразоватьЗначение()

Функция ИсключениеНевозможноПреобразоватьЗначениеНаКлиентеНаСервереБезКонтекста(Индекс, Значение) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Невозможно на клиенте преобразовать значение [Значение] в позиции [Индекс].'; uk = 'JSON: Неможливо на клієнті перетворити значення [Значение] у позиції [Индекс].'"),
	Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));
	
КонецФункции // ИсключениеНевозможноПреобразоватьЗначениеНаКлиентеНаСервереБезКонтекста()

Функция ИсключениеНекорректныйПараметр(Параметр) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Недопустимое значение параметра [Параметр].'; uk = 'JSON: Неприпустиме значення параметра [Параметр].'"),
	Новый Структура("Параметр", Символ(034) + Параметр+ Символ(034)));
	
КонецФункции // ИсключениеНекорректныйПараметр()

Функция ИсключениеНедопустимыйТипКлюча(Индекс, Значение) Экспорт 
	
	Если (Индекс = Неопределено) Тогда
		
		Возврат сбисШаблон(НСтр("ru = 'JSON: Недопустимый тип значения ключа [Тип].'; uk = 'JSON: Неприпустимий тип значення ключа [Тип].'"),
		Новый Структура("Тип", ТипЗнч(Значение)));
		
	Иначе
		
		Возврат сбисШаблон(НСтр("ru = 'JSON: Недопустимый тип значения ключа [Тип] в позиции [Индекс].'; uk = 'JSON: Неприпустимий тип значення ключа [Тип] в позиції [Индекс].'"),
		Новый Структура("Индекс,Тип", Индекс, Символ(034) + ТипЗнч(Значение) + Символ(034)));
		
	КонецЕсли;
	
КонецФункции // ИсключениеНедопустимыйТипКлюча()

Функция ИсключениеНевозможноВыполнитьЗапрос(Описание) Экспорт 
	
	Позиция = Найти(Описание, "}: "); Если Булево(Позиция) Тогда Позиция = Позиция + 3; Иначе Позиция = 1; КонецЕсли;
	Длина = Найти(Описание, Символы.ПС); Если Булево(Длина) Тогда Длина = Длина - Позиция; Иначе Длина = СтрДлина(Описание); КонецЕсли;
	Возврат НСтр("ru = 'JSON: Невозможно выполнить запрос. '; uk = 'JSON: Неможливо виконати запит. '") + Сред(Описание, Позиция, Длина) + ".";
	
КонецФункции // ИсключениеНевозможноВыполнитьЗапрос()

Функция сбисСтрокаВДату(ДатаСтрокой) Экспорт
	Если Сред(ДатаСтрокой,3,1)="." и Сред(ДатаСтрокой,6,1)="." и СтрДлина(ДатаСтрокой)=10 Тогда //видимо это дата
		Попытка
			Возврат Дата(Сред(ДатаСтрокой,7,4), Сред(ДатаСтрокой,4,2), Лев(ДатаСтрокой, 2));
		Исключение
		КонецПопытки;
	КонецЕсли;		
	Если Сред(ДатаСтрокой,3,1)="." и Сред(ДатаСтрокой,6,1)="." и СтрДлина(ДатаСтрокой)=19 Тогда //видимо это дата
		Попытка
			Возврат Дата(Сред(ДатаСтрокой,7,4), Сред(ДатаСтрокой,4,2), Лев(ДатаСтрокой, 2), Сред(ДатаСтрокой,12, 2), Сред(ДатаСтрокой,15, 2), Сред(ДатаСтрокой,18, 2));
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецФункции

////////////////////////////
/////Конвертер в JSON///////

//AU переделан конвертер в json для универсальной сериализации

Функция ЗначениеВJSON(ЗначениеПреобразовать, Режим, ПервыйУровень=Истина) 
	
	ТекстРезультат	= "";
	_ТипЗначения	= ТипЗнч(ЗначениеПреобразовать);
	Если		ЗначениеПреобразовать = Неопределено	Тогда	//Неопределено
		ТекстРезультат = "null";
		Если Режим = "API" Тогда
			ТекстРезультат = ЗначениеВJSON("", Режим, ПервыйУровень);
		КонецЕсли;
	ИначеЕсли	ЗначениеПреобразовать = Null			Тогда	//Null
		ТекстРезультат = "null";
		Если Режим= "ExtSDK" Тогда
			ТекстРезультат = ЗначениеВJSON(Новый Структура, Режим, ПервыйУровень);//При формировании сообщения, идёт как dict
		КонецЕсли;	
	ИначеЕсли	_ТипЗначения = Тип("Структура")			Тогда	//Структура
		ТекстРезультат = "{";
		Для Каждого КлючИЗначение Из ЗначениеПреобразовать Цикл
			ТекстРезультат = ТекстРезультат+""""+КлючИЗначение.Ключ+""":"+ ЗначениеВJSON(КлючИЗначение.Значение, Режим, Ложь)+",";
		КонецЦикла;
		Если Прав(ТекстРезультат, 1) = "," Тогда
			ТекстРезультат = Лев(ТекстРезультат, СтрДлина(ТекстРезультат)-1);
		КонецЕсли;		
		ТекстРезультат = ТекстРезультат + "}";
	ИначеЕсли _ТипЗначения = Тип("Соответствие") Тогда
	
		ТекстРезультат = "{";
		
		Для Каждого КлючИЗначение Из ЗначениеПреобразовать Цикл
			
			ТекстРезультат = ТекстРезультат 
				+ """"
				+ Строка(КлючИЗначение.Ключ)
				+ """:" 
				+ ЗначениеВJSON(КлючИЗначение.Значение, Режим, Ложь)
				+ ",";
				
		КонецЦикла;
		
		Если Прав(ТекстРезультат, 1) = "," Тогда
			ТекстРезультат = Лев(ТекстРезультат, СтрДлина(ТекстРезультат) - 1);
		КонецЕсли;
		
		ТекстРезультат = ТекстРезультат + "}";
	ИначеЕсли	_ТипЗначения = Тип("Массив")			Тогда	//Массив
		ТекстРезультат = ТекстРезультат + "[";
		Для Каждого Элемент Из ЗначениеПреобразовать Цикл
			ТекстРезультат = ТекстРезультат+ЗначениеВJSON(Элемент, Режим, Ложь)+",";
		КонецЦикла;
		Если Прав(ТекстРезультат, 1) = "," Тогда
			ТекстРезультат = Лев(ТекстРезультат, СтрДлина(ТекстРезультат)-1);
		КонецЕсли;		
		ТекстРезультат = ТекстРезультат + "]";
	ИначеЕсли	_ТипЗначения = Тип("Число")				Тогда	//Число 
		ТекстРезультат = Формат(ЗначениеПреобразовать, "ЧРД=.; ЧН=0; ЧГ=0");
		Если Режим = "API" Тогда//Для АПИ оборачиваем числа как строку
			ТекстРезультат = ЗначениеВJSON(ТекстРезультат, Режим, ПервыйУровень);
		КонецЕсли;
	ИначеЕсли	_ТипЗначения = Тип("Булево")			Тогда	//Булево
		ТекстРезультат = Формат(ЗначениеПреобразовать, "БЛ=false; БИ=true");
	Иначе
		Если	_ТипЗначения = Тип("Дата")				Тогда	//Дата
			ТекстРезультат = Строка(ЗначениеПреобразовать);
		Иначе													//Строка
			ТекстРезультат = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка(ЗначениеПреобразовать), 
							"\",								"\\"),// Перемаскирование последовательности.
							//"/",								"\/"),// x2f//AU правый слеш не оборачиваем.
							Символ(008),						"\b"),// x08
							Символы.Таб,						"\t"),// x09
							Символы.ПС,							"\n"),// x0a
							Символы.ПФ,							"\f"),// x0c
							Символы.ВК,							"\r"),// x0d
							Символ(34),							"\""");//кавычки
		КонецЕсли;
		Если Не ПервыйУровень Тогда//Для 1 уровня не оборачиваем кавычками строку
			ТекстРезультат = """"+ТекстРезультат+"""";
		КонецЕсли;
	КонецЕсли;
	Возврат ТекстРезультат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область include_local_Модульобъекта_МодульОбъектаСервер_ФорматКаталогСерверУФ

Функция СбисФорматКаталога(КаталогПуть, ПараметрыКаталога) Экспорт
	сРазделитель = СбисФорматРазделителя(ПараметрыКаталога);
	Возврат КаталогПуть + ?(Прав(КаталогПуть, 1) = сРазделитель, "", сРазделитель);	
КонецФункции

Функция СбисФорматРазделителя(ПараметрыКаталога) Экспорт
	Если ПараметрыКаталога.ЭтоLinux Тогда
		Возврат "/";
	КонецЕсли;
	Возврат "\";
КонецФункции

#КонецОбласти

#КонецОбласти